/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 18:55:00 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import javax.swing.JLayeredPane;
import jigl.image.ColorModel;
import jigl.image.Image;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.BinaryImage;
import jigl.image.types.ColorImage;
import jigl.image.types.ComplexImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import jigl.image.types.InterpolatedRealColorImage;
import jigl.image.types.InterpolatedRealGrayImage;
import jigl.image.types.KernelType;
import jigl.image.types.PowerImage;
import jigl.image.types.RealColorImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryImage_ESTest extends BinaryImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)11;
      BinaryImage binaryImage0 = new BinaryImage(827, (byte)11);
      // Undeclared exception!
      try { 
        binaryImage0.clear((Byte) (byte)11);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][3];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(594, 594);
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      Byte byte0 = new Byte((byte)0);
      ROI rOI0 = new ROI(494, 594, 494, 594);
      Byte.compare((byte)0, (byte)27);
      rOI0.setROI(594, 476, 455, (-1590));
      // Undeclared exception!
      try { 
        binaryImage1.set(594, 594, byte0, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte byte0 = (byte)3;
      Byte byte1 = new Byte((byte)3);
      byte[][] byteArray0 = new byte[1][1];
      byte[] byteArray1 = new byte[4];
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      KernelType kernelType0 = KernelType.D_YY;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      BinaryImage binaryImage1 = new BinaryImage(imageKernel0);
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      // Undeclared exception!
      try { 
        binaryImage0.intersection(binaryImage2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      BinaryImage binaryImage1 = binaryImage0.shift(1888, 633);
      BinaryImage binaryImage2 = binaryImage1.compliment();
      binaryImage1.union(binaryImage2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][5];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)1;
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = binaryImage0.shift(881, 482);
      binaryImage0.copy();
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      binaryImage2.getJavaImage();
      binaryImage2.getJavaImage();
      binaryImage2.getJavaImage();
      binaryImage0.X();
      binaryImage2.min();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.max();
      binaryImage0.compliment();
      int int0 = 113;
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(23, 23);
      assertNotNull(binaryImage0);
      assertEquals(23, binaryImage0.Y());
      assertEquals(23, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      binaryImage0.shift(23, 23);
      binaryImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)11;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.copy();
      binaryImage0.difference(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.max();
      binaryImage0.min();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 1);
      Integer integer0 = new Integer(1);
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      interpolatedGrayImage0.clear(integer1);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      binaryImage0.copy();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(23, 23);
      binaryImage0.union(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.difference(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      PowerImage powerImage0 = new PowerImage(complexImage0);
      BinaryImage binaryImage0 = new BinaryImage(powerImage0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = new BinaryImage(1, 1);
      BinaryImage binaryImage3 = new BinaryImage();
      binaryImage3.count();
      binaryImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)11;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage((byte)0, 0);
      binaryImage1.copy();
      binaryImage0.shift((byte)11, 4);
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      binaryImage0.max();
      binaryImage0.intersection(binaryImage2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      colorImage0.plane(0);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.getJavaImage();
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      binaryImage0.copy();
      BinaryImage binaryImage2 = new BinaryImage(binaryImage0);
      binaryImage0.compliment();
      binaryImage0.union(binaryImage1);
      binaryImage0.copy();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      PowerImage powerImage0 = new PowerImage(complexImage0);
      BinaryImage binaryImage0 = new BinaryImage(powerImage0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.intersection(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(5, 5);
      binaryImage0.toString();
      binaryImage0.getJavaImage();
      // Undeclared exception!
      try { 
        binaryImage0.get(5, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)11;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      KernelType kernelType0 = KernelType.LAPLACIAN;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      BinaryImage binaryImage0 = new BinaryImage(imageKernel0);
      binaryImage0.X();
      binaryImage0.X();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      PowerImage powerImage0 = new PowerImage(complexImage0);
      BinaryImage binaryImage0 = new BinaryImage(powerImage0);
      Byte byte0 = new Byte((byte)6);
      Byte byte1 = new Byte((byte)6);
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte)6, (int) (byte)6, byte1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)1;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(946, 946, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(23, 23);
      ROI rOI0 = new ROI(23, (-20), (-20), (-20));
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -20
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)1;
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = binaryImage0.shift(881, 482);
      binaryImage0.copy();
      binaryImage0.difference(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[][] byteArray0 = new byte[8][5];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.intersection(binaryImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(23, 23);
      binaryImage0.compliment();
      ROI rOI0 = new ROI();
      binaryImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = new Byte((byte)101);
      // Undeclared exception!
      try { 
        binaryImage0.set(0, 1841, byte0, (ROI) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[][] byteArray0 = new byte[8][5];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage((-810), (-810), (byte[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      BinaryImage binaryImage0 = new BinaryImage(1, 1, byteArray0);
      binaryImage0.getJavaImage();
      byte[][] byteArray1 = new byte[3][6];
      byteArray1[0] = byteArray0;
      binaryImage0.copy();
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      BinaryImage binaryImage1 = new BinaryImage(byteArray1);
      // Undeclared exception!
      try { 
        binaryImage1.intersection(binaryImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ROI rOI0 = new ROI();
      byte byte0 = (byte)1;
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage((byte)1, (byte)1, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[][] byteArray1 = new byte[4][5];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      BinaryImage binaryImage0 = new BinaryImage(816, 128);
      binaryImage0.toString();
      // Undeclared exception!
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)11;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage((byte)0, 0);
      binaryImage1.copy();
      binaryImage0.getJavaImage();
      binaryImage0.shift((byte)11, 4);
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      binaryImage0.max();
      binaryImage0.intersection(binaryImage2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][9];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)11;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage((byte)11, 23);
      binaryImage1.shift(9, 1);
      BinaryImage binaryImage2 = new BinaryImage(byteArray0);
      binaryImage2.copy();
      // Undeclared exception!
      try { 
        binaryImage1.union(binaryImage2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(23, 23);
      BinaryImage binaryImage1 = new BinaryImage(255, 255);
      Byte byte0 = new Byte((byte)0);
      binaryImage1.set(91, 8, byte0);
      // Undeclared exception!
      try { 
        binaryImage1.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-62);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)89;
      byteArray1[6] = (byte)32;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte) (-68);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)114;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-68);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-115);
      byteArray3[1] = (byte)89;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[0];
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)114;
      byteArray5[2] = (byte)0;
      byteArray5[3] = (byte) (-62);
      byteArray5[4] = (byte) (-62);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[8];
      byteArray6[0] = (byte)0;
      byteArray6[1] = (byte)0;
      byteArray6[2] = (byte)0;
      byteArray6[3] = (byte)0;
      byteArray6[4] = (byte) (-1);
      byteArray6[5] = (byte)0;
      byteArray6[6] = (byte)89;
      byteArray6[7] = (byte)16;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[8];
      byteArray7[0] = (byte) (-1);
      byteArray7[1] = (byte) (-115);
      byteArray7[2] = (byte)104;
      byteArray7[3] = (byte)16;
      byteArray7[4] = (byte) (-1);
      byteArray7[5] = (byte)16;
      byteArray7[6] = (byte)32;
      byteArray7[7] = (byte) (-68);
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[3];
      byteArray8[0] = (byte) (-1);
      byteArray8[1] = (byte) (-68);
      byteArray8[2] = (byte)0;
      byteArray0[7] = byteArray8;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)11;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.toString();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.count();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)11;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(1, binaryImage1.Y());
      assertEquals(1, binaryImage1.count());
      assertEquals(2, binaryImage1.X());
      
      binaryImage1.intersection(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      PowerImage powerImage0 = new PowerImage(complexImage0);
      BinaryImage binaryImage0 = new BinaryImage(powerImage0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      // Undeclared exception!
      try { 
        binaryImage1.get(5, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.intersection(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage(3820, 7);
      binaryImage1.difference(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[][] byteArray1 = new byte[7][5];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      byteArray1[4] = byteArray0;
      byteArray1[5] = byteArray0;
      byteArray1[6] = byteArray0;
      BinaryImage binaryImage0 = new BinaryImage(byteArray1);
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      Byte byte0 = new Byte((byte)127);
      ROI rOI0 = new ROI();
      binaryImage1.copy(rOI0);
      Byte byte1 = new Byte((byte)127);
      Byte.toUnsignedLong((byte)127);
      // Undeclared exception!
      try { 
        binaryImage1.set((int) (byte)127, 4, byte1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(3, 956);
      binaryImage0.Y();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)11;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.difference(binaryImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getJavaImage();
      Byte byte0 = new Byte((byte)5);
      Byte.compare((byte) (-47), (byte)0);
      // Undeclared exception!
      try { 
        binaryImage0.clear(byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(573, 917);
      BinaryImage binaryImage1 = new BinaryImage(917, (byte)11);
      binaryImage1.getJavaImage();
      binaryImage1.compliment();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      ROI rOI0 = new ROI(255, 2832, Integer.MIN_VALUE, 255);
      // Undeclared exception!
      try { 
        binaryImage1.copy(rOI0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = (byte)11;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      BinaryImage binaryImage0 = new BinaryImage(1, 1, byteArray0);
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      ROI rOI0 = new ROI(128, (-2517), (byte) (-101), (-2517));
      // Undeclared exception!
      try { 
        binaryImage1.set(1, (int) (byte) (-101), (Byte) (byte) (-101), rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        binaryImage0.set(0, (int) (byte)0, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      Byte byte0 = new Byte((byte) (-51));
      Byte byte1 = new Byte((byte) (-51));
      // Undeclared exception!
      try { 
        binaryImage0.set(0, (-3344), byte1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3344
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(23, 23);
      binaryImage0.shift(1, 1);
      BinaryImage binaryImage1 = new BinaryImage();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)1;
      BinaryImage binaryImage0 = new BinaryImage(482, 0, byteArray0);
      BinaryImage binaryImage1 = binaryImage0.shift(881, 482);
      binaryImage0.shift(12, 901);
      binaryImage0.copy();
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      ROI rOI0 = new ROI(582, 0, 0, 1978);
      // Undeclared exception!
      try { 
        binaryImage2.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[][] byteArray0 = new byte[8][5];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.copy();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = binaryImage0.shift(1761, 1761);
      BinaryImage binaryImage2 = new BinaryImage(byteArray0);
      BinaryImage binaryImage3 = binaryImage1.compliment();
      // Undeclared exception!
      try { 
        binaryImage3.get(4937, (-1163));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      ROI rOI0 = new ROI();
      binaryImage0.copy(rOI0);
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = new BinaryImage(253, 1685);
      binaryImage0.intersection(binaryImage2);
      binaryImage0.X();
      // Undeclared exception!
      try { 
        binaryImage2.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(817, 817);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][5];
      BinaryImage binaryImage0 = new BinaryImage(16, 5981);
      binaryImage0.shift(1276, 1276);
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      binaryImage0.toString();
      binaryImage0.getData();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ROI rOI0 = new ROI();
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.count();
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 568);
      binaryImage0.toString();
      Byte byte0 = new Byte((byte)43);
      Byte byte1 = new Byte((byte)43);
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][8];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte) (-73);
      byteArray1[3] = (byte)0;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.compliment();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][5];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)11;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage((byte)11, (byte)11);
      binaryImage0.difference(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[][] byteArray1 = new byte[7][5];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      BinaryImage binaryImage0 = new BinaryImage(832, 128);
      // Undeclared exception!
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(23, 23);
      binaryImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)1;
      BinaryImage binaryImage0 = new BinaryImage(482, 0, byteArray0);
      BinaryImage binaryImage1 = binaryImage0.shift(881, 482);
      binaryImage0.copy();
      binaryImage0.difference(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      ROI rOI0 = new ROI();
      binaryImage0.copy(rOI0);
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = new BinaryImage();
      binaryImage0.shift((-3453), (-3453));
      binaryImage2.getJavaImage();
      binaryImage0.getJavaImage();
      binaryImage1.X();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(23, 23);
      ImageKernel imageKernel0 = new ImageKernel(9.0F, 23);
      BinaryImage binaryImage1 = new BinaryImage(imageKernel0);
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      binaryImage2.intersection(binaryImage0);
      binaryImage1.max();
      binaryImage2.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage((byte)11, 2468);
      binaryImage0.copy();
      int int0 = 4;
      int int1 = 671;
      BinaryImage binaryImage2 = binaryImage1.shift(int1, int0);
      BinaryImage binaryImage3 = binaryImage0.difference(binaryImage1);
      binaryImage2.max();
      binaryImage0.intersection(binaryImage3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)11;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.getJavaImage();
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[][] byteArray0 = new byte[12][3];
      byte[] byteArray1 = new byte[2];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.min();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-275);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-401), (-275));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      BinaryImage binaryImage0 = new BinaryImage(1, 1, byteArray0);
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      Byte byte0 = new Byte((byte) (-101));
      Byte byte1 = new Byte((byte)16);
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte) (-101), (int) (byte) (-101), byte1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -101
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[][] byteArray1 = new byte[7][5];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      byteArray1[4] = byteArray0;
      byteArray1[5] = byteArray0;
      byteArray1[6] = byteArray0;
      BinaryImage binaryImage0 = new BinaryImage(byteArray1);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.compliment();
      binaryImage0.X();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(4, 4);
      Integer integer0 = new Integer(4);
      interpolatedGrayImage0.clear(integer0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      binaryImage0.copy();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(898, 898);
      // Undeclared exception!
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)84;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-1184), (-1184), byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)11;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage(827, (byte)11);
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      binaryImage2.X();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[][] byteArray1 = new byte[7][5];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      byteArray1[4] = byteArray0;
      byteArray1[5] = byteArray0;
      byteArray1[6] = byteArray0;
      BinaryImage binaryImage0 = new BinaryImage(byteArray1);
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.shift(255, 1888);
      binaryImage1.compliment();
      binaryImage0.union(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)37, (byte)37);
      binaryImage0.shift((-960), 12);
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage((-1511), (-167));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)11;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage((byte)0, 0);
      binaryImage1.copy();
      // Undeclared exception!
      try { 
        binaryImage0.difference(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      PowerImage powerImage0 = new PowerImage(complexImage0);
      BinaryImage binaryImage0 = new BinaryImage(powerImage0);
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)127;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(2468, 2468, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      BinaryImage binaryImage0 = new BinaryImage((byte)11, (byte)11);
      BinaryImage binaryImage1 = binaryImage0.shift(6, 6);
      BinaryImage binaryImage2 = new BinaryImage(byteArray0);
      binaryImage0.copy();
      BinaryImage binaryImage3 = binaryImage0.union(binaryImage1);
      binaryImage3.shift(4, 671);
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(594, 594);
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      Byte byte0 = new Byte((byte)3);
      binaryImage1.copy();
      byte[][] byteArray0 = new byte[0][2];
      BinaryImage binaryImage2 = new BinaryImage(byteArray0);
      BinaryImage binaryImage3 = new BinaryImage();
      binaryImage2.intersection(binaryImage3);
      Byte byte1 = new Byte((byte) (-64));
      Byte byte2 = new Byte((byte)69);
      binaryImage1.set((int) (byte)69, (int) (byte)3, byte2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getJavaImage();
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      binaryImage0.toString();
      binaryImage0.count();
      binaryImage0.getData();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(1, 594);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(interpolatedRealGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ROI rOI0 = new ROI();
      binaryImage0.count();
      Byte byte0 = new Byte((byte)6);
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte)6, (-1919), (Byte) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(23, 23);
      binaryImage0.shift(23, (-2168));
      binaryImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)1;
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = binaryImage0.shift(881, 482);
      binaryImage0.copy();
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      binaryImage2.getJavaImage();
      binaryImage0.X();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage((byte)11, (byte)11);
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      // Undeclared exception!
      try { 
        binaryImage1.intersection(binaryImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(4, 4);
      Integer integer0 = new Integer(2422);
      interpolatedGrayImage0.clear(integer0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      binaryImage0.compliment();
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage(7, 7);
      BinaryImage binaryImage2 = new BinaryImage(binaryImage0);
      binaryImage1.difference(binaryImage2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        binaryImage0.set(8, 1316, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1316
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(23, 23);
      PowerImage powerImage0 = new PowerImage(23, 23);
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(powerImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
      interpolatedGrayImage0.clear();
      BinaryImage binaryImage1 = binaryImage0.shift((-96), (-2989));
      BinaryImage binaryImage2 = binaryImage1.union(binaryImage0);
      binaryImage2.Y();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-284), (-284));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.shift(578, 578);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertSame(binaryImage0, binaryImage1);
      assertNotNull(imageProducer0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)37, (byte)37);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(37, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(37, binaryImage0.X());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals(1369, binaryImage0.count());
      assertEquals(37, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(37, binaryImage0.X());
      assertEquals(37, binaryImage1.Y());
      assertEquals(1369, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(37, binaryImage1.X());
      
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      assertEquals(0, binaryImage0.count());
      assertEquals(37, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(37, binaryImage0.X());
      assertEquals(37, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(37, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(37, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(37, binaryImage2.Y());
      
      int int0 = binaryImage1.Y();
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(37, int0);
      assertEquals(37, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(37, binaryImage0.X());
      assertEquals(37, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(37, binaryImage1.X());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(23, 23);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(23, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(23, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      byte[][] byteArray0 = new byte[0][7];
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(1959, 1959, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(20, 1077);
      assertNotNull(binaryImage0);
      assertEquals(1077, binaryImage0.Y());
      assertEquals(20, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      GrayImage grayImage0 = new GrayImage(20, 2802);
      assertNotNull(grayImage0);
      assertEquals(20, grayImage0.X());
      assertEquals(2802, grayImage0.Y());
      
      BinaryImage binaryImage1 = new BinaryImage(20, 820);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(20, binaryImage1.X());
      assertEquals(820, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      // Undeclared exception!
      binaryImage0.union(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(22, 22);
      assertNotNull(binaryImage0);
      assertEquals(22, binaryImage0.Y());
      assertEquals(22, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][5];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(5, binaryImage0.X());
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(7, byteArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      Image image0 = binaryImage0.copy(rOI0);
      assertNotSame(binaryImage0, image0);
      assertNotNull(image0);
      assertEquals(5, binaryImage0.X());
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, image0.X());
      assertEquals(1, image0.Y());
      assertEquals(7, byteArray0.length);
      
      int int0 = binaryImage0.count();
      assertNotSame(binaryImage0, image0);
      assertEquals(0, int0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals(5, binaryImage0.X());
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(7, byteArray0.length);
      
      Byte byte0 = binaryImage0.get(0, 0);
      assertNotSame(binaryImage0, image0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals(5, binaryImage0.X());
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)11;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals(1, byteArray0.length);
      
      BinaryImage binaryImage1 = new BinaryImage(2, 10);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(10, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      
      BinaryImage binaryImage2 = binaryImage0.intersection(binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.X());
      assertEquals(10, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, byteArray0.length);
      
      BinaryImage binaryImage3 = new BinaryImage();
      assertNotNull(binaryImage3);
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.Y());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.count());
      
      RealColorImage realColorImage0 = new RealColorImage(2, (byte)11);
      assertNotNull(realColorImage0);
      assertEquals(2, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(11, realColorImage0.Y());
      
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage(realColorImage0);
      assertNotNull(interpolatedRealColorImage0);
      assertEquals(2, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(11, realColorImage0.Y());
      assertEquals(11, interpolatedRealColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedRealColorImage0.getColorModel());
      assertEquals(2, interpolatedRealColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealColorImage0.getInterpolationMethod());
      
      InterpolatedRealColorImage interpolatedRealColorImage1 = new InterpolatedRealColorImage(interpolatedRealColorImage0);
      assertNotNull(interpolatedRealColorImage1);
      assertFalse(interpolatedRealColorImage1.equals((Object)interpolatedRealColorImage0));
      assertEquals(2, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(11, realColorImage0.Y());
      assertEquals(11, interpolatedRealColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedRealColorImage0.getColorModel());
      assertEquals(2, interpolatedRealColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealColorImage0.getInterpolationMethod());
      assertEquals(2, interpolatedRealColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedRealColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealColorImage1.getInterpolationMethod());
      assertEquals(11, interpolatedRealColorImage1.Y());
      
      // Undeclared exception!
      try { 
        interpolatedRealColorImage1.plane((byte)11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(22, 22);
      BinaryImage binaryImage1 = binaryImage0.shift(Integer.MIN_VALUE, (-1));
      BinaryImage binaryImage2 = binaryImage0.union(binaryImage1);
      // Undeclared exception!
      try { 
        binaryImage2.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][3];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage((byte)11, (byte)11);
      BinaryImage binaryImage2 = binaryImage1.shift(671, 4);
      binaryImage0.difference(binaryImage1);
      binaryImage0.toString();
      ROI rOI0 = new ROI(1518, 3280, 3280, 3);
      // Undeclared exception!
      try { 
        binaryImage2.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      Byte byte0 = new Byte((byte)72);
      BinaryImage binaryImage0 = new BinaryImage((byte)0, (byte)0, byteArray0);
      Byte byte1 = new Byte((byte) (-93));
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte)0, (int) (byte)8, byte1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }
}
