/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:39:02 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.DecisionMode;
import org.sat4j.ExitCode;
import org.sat4j.ILauncherMode;
import org.sat4j.LightFactory;
import org.sat4j.OptimizationMode;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.specs.IProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.OptToSatAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OptimizationMode_ESTest extends OptimizationMode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      assertEquals(ExitCode.UNKNOWN, optimizationMode0.getCurrentExitCode());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.sat4j.reader.DimacsReader");
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "org.sat4j.reader.DimacsReader");
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = (LexicoDecorator<MaxSatDecorator>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      LexicoDecorator<LexicoDecorator<MaxSatDecorator>> lexicoDecorator1 = new LexicoDecorator<LexicoDecorator<MaxSatDecorator>>(lexicoDecorator0);
      long long0 = (-1L);
      optimizationMode0.solve(lexicoDecorator1, dimacsReader0, basicLauncher0, mockPrintWriter0, long0);
      assertEquals(ExitCode.UNSATISFIABLE, optimizationMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.sat4j.reader.DimacsReader");
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "c ");
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      optimizationMode0.displayResult(iSolver0, iSolver0, basicLauncher0, mockPrintWriter0, dimacsReader0, 806L, true);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.sat4j.Xeader.DimacsReader");
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MinOneDecorator> basicLauncher0 = new BasicLauncher<MinOneDecorator>(aSolverFactory0);
      // Undeclared exception!
      try { 
        optimizationMode0.solve((IProblem) null, dimacsReader0, basicLauncher0, mockPrintWriter0, 6L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.OptimizationMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.sat4j.reader.DimacsReader");
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "org.sat4j.reader.DimacsReader");
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = (LexicoDecorator<MaxSatDecorator>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(lexicoDecorator0).model();
      doReturn((int[]) null).when(lexicoDecorator0).modelWithInternalVariables();
      doReturn(true).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, 0).when(lexicoDecorator0).nVars();
      LexicoDecorator<LexicoDecorator<MaxSatDecorator>> lexicoDecorator1 = new LexicoDecorator<LexicoDecorator<MaxSatDecorator>>(lexicoDecorator0);
      // Undeclared exception!
      try { 
        optimizationMode0.solve(lexicoDecorator1, dimacsReader0, basicLauncher0, mockPrintWriter0, (-1L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.sa?4j.reaer.DimasReader");
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      // Undeclared exception!
      try { 
        optimizationMode0.solve(dimacsStringSolver0, dimacsReader0, basicLauncher0, mockPrintWriter0, 1L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.tools.DimacsStringSolver cannot be cast to org.sat4j.specs.IOptimizationProblem
         //
         verifyException("org.sat4j.OptimizationMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      // Undeclared exception!
      try { 
        decisionMode0.setIncomplete(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.sat4j.reader.DimacsReader");
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "org.sat4j.reader.DimacsReader");
      optimizationMode0.displayResult((ISolver) null, (IProblem) null, basicLauncher0, mockPrintWriter0, dimacsReader0, (-9L), true);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      optimizationMode0.displayResult(dimacsStringSolver0, (IProblem) null, basicLauncher0, mockPrintWriter0, dimacsReader0, (-9L), true);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.sat4j.reader.DimacsReader");
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      optimizationMode0.displayResult(dimacsStringSolver0, (IProblem) null, basicLauncher0, mockPrintWriter0, dimacsReader0, 1L, false);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.sat4j.reader.DimacsReader");
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "c ");
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      optimizationMode0.displayResult(iSolver0, dimacsStringSolver0, basicLauncher0, mockPrintWriter0, dimacsReader0, 818L, true);
      assertEquals(0, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.sat4j.reader.DimacsReader");
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "org.sat4j.reader.DimacsReader");
      optimizationMode0.displayResult((ISolver) null, (IProblem) null, basicLauncher0, mockPrintWriter0, dimacsReader0, (-9L), true);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = (LexicoDecorator<MaxSatDecorator>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      LexicoDecorator<LexicoDecorator<MaxSatDecorator>> lexicoDecorator1 = new LexicoDecorator<LexicoDecorator<MaxSatDecorator>>(lexicoDecorator0);
      OptimizationMode optimizationMode1 = new OptimizationMode();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator1, optimizationMode1);
      DimacsReader dimacsReader1 = new DimacsReader(optToSatAdapter0);
      long long0 = (-1L);
      optimizationMode0.displayResult(dimacsStringSolver0, (IProblem) null, basicLauncher0, mockPrintWriter0, dimacsReader1, (-1L), false);
      optimizationMode1.solve(lexicoDecorator1, dimacsReader1, basicLauncher0, mockPrintWriter0, long0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      InstanceReader instanceReader0 = new InstanceReader(iSolver0);
      String string0 = "=";
      try { 
        instanceReader0.parseInstance(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      ExitCode exitCode0 = optimizationMode0.getCurrentExitCode();
      assertEquals("UNKNOWN", exitCode0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      optimizationMode0.onUnsatTermination();
      //  // Unstable assertion: assertEquals(ExitCode.UPPER_BOUND, optimizationMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      optimizationMode0.setIncomplete(true);
      assertEquals(ExitCode.UNKNOWN, optimizationMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      ExitCode exitCode0 = ExitCode.UPPER_BOUND;
      optimizationMode0.setExitCode(exitCode0);
      assertEquals(ExitCode.UPPER_BOUND, optimizationMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        optimizationMode0.onSolutionFound((IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.OptimizationMode", e);
      }
  }
}
