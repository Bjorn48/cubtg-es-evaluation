/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 20:42:47 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      wall0.setXEnd(4944.118F);
      wall0.intersectsRectangle((-1047.2368F), 1376.52F, (-473.0F), (-1047.2368F));
      Float float0 = new Float((double) 0.1F);
      wall0.isTrapezoidal();
      wall0.setWallAtEnd(wall0);
      wall0.intersectsRectangle((-473.0F), 1376.52F, 0.0F, 0.0F);
      float float1 = new Float(1376.52F);
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall((-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F));
      wall0.setXEnd((-3652.1707F));
      wall0.setXStart((-3652.1707F));
      Float float0 = wall0.getHeight();
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall(1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F);
      wall0.isTrapezoidal();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall(1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall1.setPattern((TextureImage) null);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.02F), (-330.618F), (-1170.02F));
      Float float0 = new Float(1.0F);
      wall0.containsWallEndAt((-330.618F), (-640.9911F), (-640.9911F));
      Float.min((-1170.02F), (-1170.02F));
      Float.max((-330.618F), 0.1F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall1.setArcExtent(float0);
      wall1.setHeight(float0);
      wall1.isTrapezoidal();
      wall0.move(533.09875F, (-1379.0F));
      wall1.setWallAtEnd(wall0);
      Integer.valueOf(1152);
      Integer.valueOf(15);
      Integer integer0 = Integer.valueOf(15);
      wall0.setLeftSideColor(integer0);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall(1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F);
      wall0.isTrapezoidal();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer.valueOf(15);
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float0 = wall0.getHeight();
      Wall wall1 = wall0.clone();
      wall1.setHeight(float0);
      wall1.setLeftSideShininess((-4947.7383F));
      wall0.setRightSideShininess((-1125.7776F));
      Integer.valueOf((-2145386495));
      Integer integer0 = Integer.valueOf((-2145386495));
      Integer.remainderUnsigned((-2145386495), (-3170));
      wall1.setLeftSideColor(integer0);
      wall1.setWallAtStart(wall0);
      wall0.getLength();
      wall0.getYStart();
      wall1.setWallAtStart(wall0);
      wall1.getLeftSideShininess();
      wall0.getLeftSideTexture();
      wall0.setXStart(0);
      wall1.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.setWallAtEnd((Wall) null);
      Level level0 = new Level("A Zgl>\"ReEA?n", (-3652.0894F), (-3652.0894F), (-3652.0894F));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall(1.55219F, 1.55219F, 1.55219F, 1.55219F, 1.55219F, 1.55219F);
      Float float0 = new Float((-2460.19F));
      float0.floatValue();
      Float float1 = new Float((double) (-2460.19F));
      float1.floatValue();
      Float float2 = new Float((-2460.19F));
      float2.floatValue();
      float1.floatValue();
      Float float3 = new Float((-2460.19F));
      float3.floatValue();
      wall0.setArcExtent((Float) (-2460.19F));
      wall0.isTrapezoidal();
      wall0.containsWallEndAt(1.55219F, 1.55219F, 1.55219F);
      wall0.getLeftSideShininess();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.setLeftSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall((-732.4313F), 1.5521874F, (-732.4313F), (-904.0F), (-904.0F), (-904.0F));
      wall0.isTrapezoidal();
      wall0.getXArcCircleCenter();
      wall0.getWallAtStart();
      wall0.getYArcCircleCenter();
      wall0.setPattern((TextureImage) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.move((-3652.0894F), (-3652.0894F));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall(876.1265F, 912.5F, (-1.0F), 1574.6F, 912.5F);
      wall0.getPoints();
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.getYEnd();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      wall0.getRightSideTexture();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall(1357.0F, 912.5F, 0.0F, 1574.6F, 912.5F);
      wall0.getPoints();
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.getYEnd();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      Float float0 = wall0.getHeight();
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall(0.0F, 2.0F, 0.0F, 689.31F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Y_END", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      Integer integer0 = Integer.valueOf((-1));
      Integer.divideUnsigned((-1), (-1848));
      wall0.setLeftSideColor(integer0);
      Integer.valueOf(0);
      wall0.setLeftSideShininess(0.0F);
      wall0.setRightSideShininess((-1));
      Integer.valueOf((-1));
      Integer integer1 = Integer.valueOf(0);
      Integer.remainderUnsigned((-1466), (-2629));
      wall0.setLeftSideColor(integer1);
      wall0.setWallAtStart((Wall) null);
      wall0.getLength();
      wall0.getYStart();
      wall0.setWallAtStart((Wall) null);
      wall0.getLeftSideShininess();
      wall0.getLeftSideTexture();
      wall0.setXStart(687.31F);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall((-3651.39F), (-3651.39F), 2.0F, 2.0F, 286.7F);
      Integer.valueOf(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = Integer.valueOf(0);
      Integer.compareUnsigned(15, 53);
      wall0.setLeftSideColor(integer1);
      Float.compare(2.0F, 0.12249536F);
      wall0.setHeightAtEnd((Float) 0.12249536F);
      wall0.getRightSideColor();
      wall0.getLength();
      Wall wall1 = wall0.clone();
      wall1.move(2.0F, 0.0F);
      wall0.setLeftSideColor(integer1);
      wall1.getLevel();
      wall1.setLevel((Level) null);
      wall0.getYEnd();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall(1451.85F, (-1061.288F), 1451.85F, 1866.6324F, (-3725.207F));
      wall0.getYStart();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F);
      wall0.move((-1317.65F), 1961.9F);
      wall0.getYEnd();
      wall0.setWallAtStart(wall0);
      wall0.setRightSideShininess((-1317.65F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      wall0.intersectsRectangle((-1047.2368F), 1376.52F, (-473.0F), (-1047.2368F));
      Float float0 = new Float((double) 0.1F);
      float0.equals(float0);
      wall0.setHeight(float0);
      wall0.setWallAtEnd(wall0);
      wall0.containsWallStartAt(0.1F, 1483.0306F, 0.1F);
      Wall wall1 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float1 = wall1.getHeight();
      Wall wall2 = wall1.clone();
      wall2.setHeight(float1);
      wall2.setYEnd(0.1F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 877.6F, (-1.0F), 0.0F, 877.6F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("AH 5H]XUj \")8CNn", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setYStart((-1.0F));
      wall0.containsWallStartAt((-1.0F), 0.1F, 0.1F);
      wall0.setXStart(0.0F);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall(0.782851F, 0.782851F, 0.782851F, 0.782851F, 0.782851F, 0.782851F);
      wall0.getHeight();
      wall0.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall((-2944.0964F), (-2944.0964F), (-2944.0964F), (-2944.0964F), (-2944.0964F));
      Float float0 = new Float((-2944.0964F));
      wall0.setArcExtent(float0);
      wall0.containsPoint((-2944.0964F), (-2944.0964F), (-2944.0964F));
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall(1677.1235F, 1677.1235F, 1.0F, 3942.6F, 0.1F);
      Wall wall1 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float0 = wall1.getHeight();
      Wall wall2 = wall1.clone();
      wall2.setHeight(float0);
      wall0.setWallAtEnd(wall2);
      wall0.containsWallStartAt(3942.6F, 1677.1235F, 3942.6F);
      wall0.setYEnd(1.0F);
      wall1.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 1.0F, 1.0F);
      wall0.getXEnd();
      wall0.getRightSideColor();
      wall0.getRightSideTexture();
      Float.compare((-1.0F), 0.0F);
      Float.compare((-1), (-1));
      wall0.setRightSideShininess((-1677.4238F));
      Float.compare(0.0F, (-1));
      wall0.setArcExtent((Float) 0.0F);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.setPattern((TextureImage) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall((-19.49F), (-19.49F), (-19.49F), (-19.49F), (-19.49F));
      Float float0 = new Float((-19.49F));
      wall0.isTrapezoidal();
      wall0.setWallAtEnd(wall0);
      wall0.containsWallStartAt((-19.49F), (-19.49F), (-19.49F));
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2429.8F), 0.0F, 2.0F, 0.0F, 0.0F);
      wall0.setYEnd(726.6F);
      Wall wall1 = wall0.clone();
      Wall wall2 = new Wall(2.0F, 2.0F, 0.0F, 0.0F, 0.0F, (-2429.8F));
      wall2.setWallAtStart(wall0);
      wall1.setWallAtStart(wall2);
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = (-2840.0056F);
      float float1 = (-1919.0F);
      float float2 = 0.0F;
      Wall wall0 = new Wall((-2840.0056F), (-2840.0056F), (-2840.0056F), (-1919.0F), 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      Wall wall1 = new Wall(0.0F, (-1.0F), (-1859.5F), 1.0F, (-1.0F));
      Wall wall2 = wall1.clone();
      PropertyChangeEvent propertyChangeEvent0 = null;
      try {
        propertyChangeEvent0 = new PropertyChangeEvent((Object) null, "", "", wall2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float0 = wall0.getHeight();
      Wall wall1 = wall0.clone();
      wall1.setHeight(float0);
      Wall wall2 = wall1.clone();
      wall2.setYEnd(989.598F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall(1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F);
      wall0.isTrapezoidal();
      wall0.setWallAtStart(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.getHeight();
      wall0.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      wall0.getLeftSideShininess();
      wall0.setRightSideShininess(0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(":FeDM", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("ELEVATION", propertyChangeListenerProxy0);
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("9V$lxv/&ZD.\"B4l", propertyChangeListenerProxy0);
      PropertyChangeListenerProxy propertyChangeListenerProxy3 = new PropertyChangeListenerProxy("RIGHT_SIDE_SHININESS", propertyChangeListenerProxy0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy3);
      wall0.getLeftSideShininess();
      wall0.intersectsRectangle((-1626.012F), (-1736.1617F), 4.0F, 0.0F);
      wall0.setArcExtent((Float) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall((-2943.8643F), (-2943.8643F), (-2943.8643F), (-2943.8643F), (-2943.8643F), (-2943.8643F));
      wall0.containsWallEndAt((-2943.8643F), (-2943.8643F), (-2943.8643F));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall(0.0F, 2.0F, 0.0F, 689.31F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Y_END", propertyChangeListener0);
      Integer integer0 = Integer.valueOf((-1));
      Float float0 = new Float((-2690.3F));
      float0.floatValue();
      Float float1 = new Float(970.105);
      float1.floatValue();
      float float2 = new Float((double) 0.0F);
      wall0.setArcExtent((Float) 0.0F);
      wall0.setHeight(float0);
      Wall wall1 = wall0.clone();
      wall1.getLeftSideColor();
      wall1.containsWallStartAt(1.0F, (-1), 0.0F);
      wall0.setRightSideColor(integer0);
      wall1.containsWallEndAt(0.0F, 0.0F, 689.31F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall(0.0F, 2.0F, 0.0F, 689.31F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Y_END", propertyChangeListener0);
      Integer integer0 = Integer.valueOf((-1));
      Integer.remainderUnsigned(1943, 1943);
      wall0.setLeftSideColor(integer0);
      Wall wall1 = new Wall(0.0F, 2.0F, 211.53676F, 1943, 0.0F, 0.0F);
      wall1.getXEnd();
      wall1.isTrapezoidal();
      wall0.setThickness(4.0F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall(1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F);
      wall0.isTrapezoidal();
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall(1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F);
      Wall wall1 = wall0.clone();
      wall0.move(1.0F, 1.0F);
      wall0.getYEnd();
      Wall wall2 = wall0.clone();
      wall2.setWallAtStart(wall0);
      wall0.setRightSideShininess(1.0F);
      wall2.getLeftSideShininess();
      wall2.setRightSideShininess(1962.9F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("3\"eJO]\"GVun?9$", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("bGpbNJ2IIof", propertyChangeListenerProxy0);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy1);
      wall1.getLeftSideShininess();
      wall2.intersectsRectangle(1.0F, 0.0F, 0.0F, (-1626.012F));
      wall0.setHeightAtEnd((Float) null);
      wall2.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall((-3652.698F), (-3652.698F), (-3652.698F), (-3652.698F), (-3652.698F));
      wall0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall(2.4823825F, (-0.36656672F), 2.4823825F, (-0.36656672F), (-0.36656672F), (-0.36656672F));
      Integer.valueOf(20);
      Float float0 = new Float((float) 36);
      Float.isFinite(2.4823825F);
      wall0.setHeightAtEnd(float0);
      wall0.intersectsRectangle(36, (-0.36656672F), (-1164.0059F), (-1164.0059F));
      Float float1 = new Float((-0.36656672F));
      wall0.isTrapezoidal();
      wall0.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      wall0.setHeight(float0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall((-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F));
      Float float0 = wall0.getHeight();
      wall0.setHeight(float0);
      wall0.getRightSideTexture();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall(1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F);
      wall0.isTrapezoidal();
      wall0.intersectsRectangle(1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F);
      Float float0 = new Float(5081.2720009647);
      wall0.setArcExtent(float0);
      wall0.isTrapezoidal();
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall((-2735.76F), 1.0F, (-2735.76F), 0.1F, 0.1F, 0.1F);
      Integer integer0 = new Integer(243);
      Integer.toUnsignedLong(243);
      integer0.equals("Y_END");
      wall0.setRightSideColor(integer0);
      wall0.getXEnd();
      wall0.isTrapezoidal();
      wall0.setThickness(0.1F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float(0.0F);
      wall0.setArcExtent(float0);
      wall0.containsWallEndAt(1647.6418F, 4992.13F, 4992.13F);
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 2.0F, 0.1F, 1911.61F, 0.1F);
      Wall wall1 = new Wall(1.0F, 0.1F, (-1.0F), 3888.81F, 719.3949F, (-4730.8F));
      Float float0 = new Float((double) (-1.0F));
      wall1.setYStart((-1.0F));
      Object object0 = new Object();
      wall1.containsWallEndAt(759.38153F, 719.3949F, 1.0F);
      float0.equals(wall1);
      wall1.setHeight(float0);
      wall1.clone();
      wall1.getStartPointToEndPointDistance();
      wall1.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall(1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F);
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2);
      integer0.equals(integer1);
      wall0.setRightSideColor(integer1);
      wall0.move(1.0F, 1.0F);
      wall0.getYEnd();
      Wall wall2 = wall0.clone();
      wall2.setWallAtStart(wall1);
      wall2.setWallAtStart(wall0);
      wall0.setRightSideShininess(1.0F);
      wall2.getLeftSideShininess();
      Float float0 = new Float(0.0F);
      Object object0 = new Object();
      float0.equals(object0);
      wall1.setHeight(float0);
      Wall wall3 = wall2.clone();
      wall3.containsWallEndAt(1.0F, 0.1F, (-2131.0F));
      wall1.getLeftSideColor();
      wall1.containsWallStartAt(539.56006F, (-2072.5933F), 371.0F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall((-1620.5278F), (-1620.5278F), 1.0F, (-2068.0F), (-2068.0F));
      wall0.getThickness();
      wall0.clone();
      Level level0 = new Level("0]@>7S]el\"", 0.01F, 0.01F, 0.01F);
      Wall wall1 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float0 = new Float(0.01F);
      Wall wall2 = wall1.clone();
      wall2.setHeight(float0);
      Wall wall3 = wall2.clone();
      wall0.setHeight(float0);
      wall3.clone();
      wall1.setYEnd((-748.084F));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall(1.55F, 1.55F, 1.55F, 1.55F, 1.55F, 1.55F);
      float float0 = new Float(1.55F);
      Float float1 = new Float(2.0);
      float1.floatValue();
      wall0.setArcExtent((Float) 2.0F);
      wall0.isTrapezoidal();
      wall0.containsWallEndAt(1.55F, (-561.6F), 1.55F);
      float float2 = new Float((double) 1.55F);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall(1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F);
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2);
      integer0.equals(integer1);
      wall0.setRightSideColor(integer1);
      wall0.move(1.0F, 1.0F);
      wall0.getYEnd();
      Wall wall2 = wall0.clone();
      wall2.setWallAtStart(wall1);
      wall2.setWallAtStart(wall0);
      wall0.setRightSideShininess(1.0F);
      wall2.getLeftSideShininess();
      Float float0 = new Float(0.0F);
      Object object0 = new Object();
      float0.equals(object0);
      wall1.setHeight(float0);
      Wall wall3 = wall2.clone();
      wall3.containsWallEndAt(1.0F, 0.1F, (-2131.0F));
      wall1.getLeftSideColor();
      wall1.containsWallStartAt(539.56006F, (-2073.0F), 371.0F);
      wall3.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall(0.782851F, 0.782851F, 0.782851F, 0.782851F, 0.782851F, 0.782851F);
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall((-1918.2273F), (-1918.2273F), (-1918.2273F), (-1918.2273F), (-1918.2273F), (-1918.2273F));
      Integer integer0 = new Integer((-84));
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.setRightSideShininess((-3652.0894F));
      Float float0 = new Float((-3652.0894F));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall(0.0F, 0.0F, (-1620.5278F), (-2068.0F), 1.0F, (-2068.0F));
      wall0.getThickness();
      Wall wall1 = wall0.clone();
      Level level0 = new Level("0]@>7S]el\"", 0.01F, 0.01F, 0.01F);
      level0.getElevation();
      Level level1 = level0.clone();
      level1.clone();
      level0.setFloorThickness(0.0F);
      level1.getHeight();
      wall0.setLevel(level1);
      wall0.intersectsRectangle(0.0F, 1259.0F, 1.0F, 1.0F);
      wall0.getWallAtEnd();
      wall0.getXEnd();
      Wall.Property.values();
      wall1.setArcExtent((Float) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getHeight();
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall(1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F);
      wall0.move((-1317.65F), 1961.9F);
      wall0.getYEnd();
      wall0.setWallAtStart(wall0);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.getYEnd();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float0 = new Float(1.0F);
      wall0.containsWallEndAt((-330.618F), (-640.9911F), (-640.9911F));
      Float.min((-1067.9297F), (-1067.9297F));
      Wall wall1 = wall0.clone();
      wall1.setArcExtent(float0);
      wall1.setHeight(float0);
      Wall wall2 = wall1.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall1.getLeftSideColor();
      wall2.containsWallStartAt((-1170.024F), (-640.9911F), (-611.9911F));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float0 = wall0.getHeight();
      wall0.containsWallEndAt((-330.618F), (-640.9911F), (-640.9911F));
      Float.min((-1067.9297F), (-1067.9297F));
      Wall wall1 = wall0.clone();
      wall1.setArcExtent(float0);
      wall1.setHeight(float0);
      Wall wall2 = wall1.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall1.getLeftSideColor();
      wall2.containsWallStartAt((-1170.024F), (-640.9911F), (-611.9911F));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Float float0 = Float.valueOf(1956.1443F);
      Wall wall0 = new Wall((-1.0F), (-1170.024F), 1.0F, 931.7366F, (-1.0F), 878.0F);
      Float.min((-2994.1545F), (-1170.024F));
      Wall wall1 = new Wall((-2994.1545F), (-2994.1545F), 931.7366F, (-2994.1545F), 1.0F, (-126.55033F));
      wall0.setLeftSideShininess(1956.1443F);
      wall0.setArcExtent(float0);
      wall0.setThickness((-2994.1545F));
      wall0.containsWallEndAt((-2994.1545F), (-816.80475F), 2017.9F);
      wall1.setWallAtStart(wall0);
      Float.floatToIntBits((-4404.114F));
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(1962.1108F, 1962.1108F, 1962.1108F, 1962.1108F, 1962.1108F);
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer(0);
      integer0.equals(integer0);
      wall0.setRightSideColor(integer0);
      wall0.move(1.0F, 1.0F);
      wall0.getYEnd();
      Wall wall2 = wall0.clone();
      wall2.setWallAtStart(wall1);
      wall2.setWallAtStart(wall0);
      wall2.move(0.029411765F, (-1300.895F));
      wall0.setLeftSideColor(integer0);
      wall2.getPoints();
      wall0.getArcExtent();
      wall1.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall(1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F);
      wall0.move((-1317.65F), 1961.9F);
      wall0.getYEnd();
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall0);
      wall1.setRightSideShininess((-1317.65F));
      wall1.getLeftSideShininess();
      wall1.getLeftSideColor();
      wall0.containsWallStartAt(3923.8F, (-1745.5767F), (-2826.3132F));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall(1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F);
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer(0);
      Integer.compareUnsigned(0, 0);
      integer0.equals(integer0);
      wall0.move(1.0F, 0.2F);
      wall1.getYEnd();
      wall1.clone();
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      wall1.move((-3441.0F), 0.2F);
      wall0.setLeftSideColor((Integer) null);
      wall0.getPoints();
      wall0.getArcExtent();
      wall1.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall(1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F);
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer(0);
      integer0.equals(integer0);
      wall0.setRightSideColor(integer0);
      wall0.move(1.0F, 1.0F);
      wall0.getYEnd();
      Wall wall2 = wall0.clone();
      wall2.setWallAtStart(wall1);
      wall2.setWallAtStart(wall0);
      wall0.setRightSideShininess(1.0F);
      Float float0 = new Float((float) 2);
      Wall wall3 = new Wall((-1.0F), 1961.9F, 0.0F, 1961.9F, 0, 0);
      wall0.getLength();
      wall3.getPattern();
      wall3.isTrapezoidal();
      wall1.getArcExtent();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall((-3652.698F), (-3652.698F), (-3652.698F), (-3652.698F), (-3652.698F));
      wall0.setThickness(243.9115F);
      Level level0 = new Level("A Zgl>\"ReEA?n", (-3652.698F), (-3652.698F), (-3652.698F));
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Wall wall0 = new Wall((-732.4313F), 1.5521874F, (-732.4313F), (-904.0F), (-904.0F), (-904.0F));
      assertEquals((-732.4313F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(905.5522F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-904.0F), wall0.getHeight(), 0.01F);
      assertEquals((-904.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(905.5522F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-732.4313F), wall0.getXEnd(), 0.01F);
      assertEquals((-732.4313F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals((-904.0F), wall0.getThickness(), 0.01F);
      assertEquals((-451.2239F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("X</JG{{LhT429o;#l", (PropertyChangeListener) null);
      assertEquals("X</JG{{LhT429o;#l", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-732.4313F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(905.5522F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-904.0F), wall0.getHeight(), 0.01F);
      assertEquals((-904.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(905.5522F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-732.4313F), wall0.getXEnd(), 0.01F);
      assertEquals((-732.4313F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals((-904.0F), wall0.getThickness(), 0.01F);
      assertEquals((-451.2239F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals("X</JG{{LhT429o;#l", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals((-732.4313F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(905.5522F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-904.0F), wall0.getHeight(), 0.01F);
      assertEquals((-904.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(905.5522F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-732.4313F), wall0.getXEnd(), 0.01F);
      assertEquals((-732.4313F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals((-904.0F), wall0.getThickness(), 0.01F);
      assertEquals((-451.2239F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals((-732.4313F), float0, 0.01F);
      assertEquals((-732.4313F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(905.5522F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-904.0F), wall0.getHeight(), 0.01F);
      assertEquals((-904.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(905.5522F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-732.4313F), wall0.getXEnd(), 0.01F);
      assertEquals((-732.4313F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals((-904.0F), wall0.getThickness(), 0.01F);
      assertEquals((-451.2239F), wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals((-732.4313F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(905.5522F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-904.0F), wall0.getHeight(), 0.01F);
      assertEquals((-904.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(905.5522F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-732.4313F), wall0.getXEnd(), 0.01F);
      assertEquals((-732.4313F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals((-904.0F), wall0.getThickness(), 0.01F);
      assertEquals((-451.2239F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1);
      
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.getHeight();
      wall0.getLength();
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 1.5521874F, 1.5521874F, 286.7F, 286.7F);
      Integer.valueOf(2146419171);
      Integer.compareUnsigned((-1), 53);
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Integer integer0 = Integer.valueOf(2146419171);
      wall0.setLeftSideColor(integer0);
      Integer integer1 = new Integer(15);
      Float float0 = Float.valueOf(0.0F);
      wall0.setHeightAtEnd(float0);
      Integer integer2 = new Integer(2146419171);
      wall0.move((-1.0F), (-1));
      Integer integer3 = Integer.valueOf((-55));
      wall0.setLeftSideColor(integer3);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.setHeightAtEnd(float0);
      wall0.getYArcCircleCenter();
      wall0.setPattern((TextureImage) null);
      wall0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall((-3652.698F), (-3652.698F), (-3652.698F), (-3652.698F), (-3652.698F));
      Float float0 = new Float(0.0);
      float0.equals((Object) null);
      wall0.setArcExtent(float0);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall((-3649.8938F), (-3649.8938F), (-3649.8938F), (-3649.8938F), (-3649.8938F));
      wall0.intersectsRectangle((-3649.8938F), (-3649.8938F), (-3649.8938F), (-3649.8938F));
      wall0.setPattern((TextureImage) null);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float0 = wall0.getHeight();
      Wall wall1 = wall0.clone();
      wall1.setHeight(float0);
      wall1.setRightSideShininess(1.0F);
      wall1.getLeftSideShininess();
      Float float1 = new Float((-2801.5784F));
      Object object0 = new Object();
      Float.valueOf((-1455.0F));
      Float float2 = Float.valueOf((-1455.0F));
      float2.equals(float1);
      Float float3 = Float.valueOf(1803.92F);
      wall1.setHeight(float3);
      Wall wall2 = wall1.clone();
      wall0.containsWallEndAt(876.1265F, (-892.4904F), 0.029411765F);
      wall2.getLeftSideColor();
      wall2.containsWallStartAt(2530.0F, 371.0F, (-1847.49F));
      wall2.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall((-2735.76F), 1.0F, (-2735.76F), 0.1F, 0.1F, 0.1F);
      Float float0 = new Float(291.6475533);
      float0.equals("Y_END");
      wall0.setHeight(float0);
      Wall wall1 = wall0.clone();
      Wall wall2 = new Wall((-768.9538F), 1.0F, (-1397.1F), 92.92085F, (-2735.76F), 1.0F);
      Wall wall3 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float1 = wall3.getHeight();
      Wall wall4 = wall3.clone();
      wall4.setHeight(float1);
      wall4.setXEnd((-330.618F));
      wall1.intersectsRectangle((-1171.0F), (-768.9538F), (-715.1073F), 1.0F);
      wall2.getLength();
      wall4.getPattern();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall((-163.27F), (-163.27F), (-163.27F), (-163.27F), (-163.27F), (-163.27F));
      Float float0 = wall0.getHeight();
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall(3942.6F, 1677.1235F, 1677.1235F, 3942.6F, 1677.1235F, 1.0F);
      Wall wall1 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float0 = wall1.getHeight();
      Wall wall2 = wall1.clone();
      wall2.setRightSideTexture((HomeTexture) null);
      wall2.setArcExtent(float0);
      Wall wall3 = new Wall((-1.0F), (-330.618F), 1677.1235F, 1.0F, (-1170.024F), (-1170.024F));
      wall3.setWallAtStart(wall2);
      wall3.containsWallStartAt(3942.6F, (-1.0F), 1677.1235F);
      Float float1 = wall0.getHeight();
      Wall wall4 = wall0.clone();
      wall1.setHeight(float1);
      wall2.setWallAtStart(wall4);
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      Level level0 = new Level("com.eteks.sweethome3d.tools.URLContent", (-3652.0894F), 0, (-3652.0894F));
      wall0.setLevel(level0);
      Float float0 = new Float((-19.494043F));
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.getYEnd();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setArcExtent((Float) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), 2.0F, 2.0F, 286.7F);
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf(0);
      Integer.compareUnsigned(15, 53);
      wall0.setLeftSideColor(integer0);
      Integer integer1 = new Integer(0);
      wall0.setHeightAtEnd((Float) 0.12249536F);
      wall0.getRightSideColor();
      wall0.move(2.0F, 0.0F);
      wall0.setLeftSideColor(integer0);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float0 = new Float(1.0F);
      wall0.containsWallEndAt((-330.618F), (-640.9911F), (-640.9911F));
      Float.min((-1170.024F), (-1170.024F));
      Wall wall1 = wall0.clone();
      wall1.setArcExtent(float0);
      wall1.setHeight(float0);
      Wall wall2 = wall1.clone();
      wall2.containsWallEndAt((-1170.024F), 1574.6F, 1.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      String string0 = "com.eteks.sweethome3d.model.HomeTexture";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader0, "RIGHT_SIDE_TEXTURE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource RIGHT_SIDE_TEXTURE
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall(1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F);
      wall0.containsPoint(1.5521874F, 1.5521874F, 1.5521874F);
      wall0.intersectsRectangle(1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getLevel();
      wall0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall((-1918.2273F), (-526.8F), (-526.8F), (-1918.2273F), (-2931.141F));
      Float float0 = new Float((-2816.7F));
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt((-1918.2273F), (-2816.7F), (-2931.141F));
      float float1 = new Float((-2931.141F));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall((-4352.2F), 1315.0269F, 3038.0762F, 0.0F, (-503.631F));
      wall0.setXEnd(0.0F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      wall0.setXEnd(4944.118F);
      wall0.intersectsRectangle((-1047.2368F), 1376.52F, (-473.0F), (-1047.2368F));
      Float float0 = new Float((double) 0.1F);
      wall0.isTrapezoidal();
      Float.compare(1650.3368F, 1650.3368F);
      Float.compare((-1278.7562F), 3390.2854F);
      Float.compare(0.0F, (-671.6917F));
      Float.compare(0, 926.662F);
      Float.compare(0.0F, 101.4F);
      wall0.setHeightAtEnd((Float) 101.4F);
      wall0.setWallAtEnd(wall0);
      wall0.containsWallStartAt(1014.199F, 0.0F, 1014.199F);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall(1.55F, 1.55F, 1.55F, 1.55F, 1.55F, 1.55F);
      Float float0 = new Float(1.55F);
      wall0.setArcExtent(float0);
      wall0.getYArcCircleCenter();
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 1.5521874F, 1.5521874F, 286.7F, 286.7F);
      Integer.valueOf((-1));
      Integer.valueOf(2146419171);
      Integer.compareUnsigned((-1), 53);
      Integer.valueOf((-1));
      Integer.valueOf(0);
      Integer.valueOf((-1));
      Integer integer0 = Integer.valueOf(0);
      wall0.setLeftSideColor(integer0);
      Integer integer1 = new Integer(15);
      Float float0 = Float.valueOf(0.0F);
      wall0.setHeightAtEnd(float0);
      wall0.getRightSideColor();
      wall0.move((-1.0F), (-1));
      Integer integer2 = Integer.valueOf((-55));
      wall0.setLeftSideColor(integer2);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      wall0.intersectsRectangle((-1047.2368F), 1376.52F, (-473.0F), (-1047.2368F));
      Float float0 = new Float((double) 0.1F);
      float0.equals(float0);
      wall0.setHeight(float0);
      Wall wall1 = wall0.clone();
      Float.compare(3283.3384F, 1131.0F);
      Float.compare(3511.904F, 1);
      wall0.setHeight((Float) 3511.904F);
      wall1.clone();
      wall1.setYEnd((-473.0F));
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F);
      Wall wall1 = wall0.clone();
      wall0.move(1961.9F, 1961.9F);
      wall0.getYEnd();
      Wall wall2 = wall0.clone();
      wall2.setWallAtStart(wall0);
      wall0.setRightSideShininess(1961.9F);
      wall2.getLeftSideShininess();
      wall2.setRightSideShininess(3923.8F);
      wall2.getLeftSideColor();
      wall1.containsPoint(2392.9854F, 2392.9854F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall((-3651.712F), (-3651.712F), (-3651.712F), (-3651.712F), (-3651.712F));
      Float float0 = new Float((-3651.712F));
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall((-19.494043F), (-19.494043F), (-19.494043F), (-19.494043F), (-19.494043F), (-19.494043F));
      wall0.setXEnd(4944.118F);
      wall0.intersectsRectangle((-19.494043F), (-19.494043F), (-473.0F), (-19.494043F));
      Float float0 = new Float((double) (-19.494043F));
      wall0.isTrapezoidal();
      Integer integer0 = new Integer((-329));
      Object object0 = new Object();
      integer0.equals(object0);
      wall0.setRightSideColor(integer0);
      wall0.getRightSideColor();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      wall0.setYStart(0.0F);
      wall0.setXEnd(4944.118F);
      wall0.intersectsRectangle((-1047.2368F), 1376.52F, (-473.0F), (-1047.2368F));
      Float float0 = new Float((double) 0.1F);
      wall0.isTrapezoidal();
      Float.compare(1650.3368F, 1650.3368F);
      Float.compare((-1278.7562F), 3390.2854F);
      Float.compare(0.0F, (-671.6917F));
      Float.compare(0, 926.662F);
      Float.compare(0.0F, 101.4F);
      wall0.setHeightAtEnd((Float) 101.4F);
      wall0.setWallAtEnd(wall0);
      wall0.containsWallStartAt(1014.199F, 0.0F, 1014.199F);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = Float.valueOf(1956.1443F);
      Wall wall0 = new Wall((-1.0F), (-1170.024F), 1.0F, 931.7366F, (-1.0F), 878.0F);
      Float.min((-2994.1545F), (-1170.024F));
      Wall wall1 = new Wall((-2994.1545F), (-2994.1545F), 931.7366F, (-2994.1545F), 1.0F, (-126.55033F));
      wall0.setLeftSideShininess(1956.1443F);
      wall0.setArcExtent(float0);
      wall0.setThickness((-2994.1545F));
      wall0.containsWallEndAt((-2994.1545F), (-816.80475F), 2017.9F);
      wall1.setWallAtStart(wall0);
      Float.floatToIntBits((-4404.114F));
      wall1.setHeightAtEnd((Float) (-4404.114F));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall(1896.3F, 0.0F, 0.0F, 1896.3F, 0.0F, (-1.0F));
      wall0.getYStart();
      Integer.valueOf(0);
      Integer.valueOf(422);
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf(0);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      wall0.setXEnd(4944.118F);
      wall0.intersectsRectangle((-1047.2368F), 1376.52F, (-473.0F), (-1047.2368F));
      Float float0 = new Float((double) 0.1F);
      wall0.isTrapezoidal();
      wall0.setWallAtEnd(wall0);
      wall0.containsWallStartAt(1014.199F, 0.0F, 1014.199F);
      wall0.setRightSideShininess((-1.0F));
      Wall wall1 = wall0.getWallAtEnd();
      wall1.setYEnd(1376.52F);
      wall1.containsPoint((-473.0F), 1.0F, 1376.52F);
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall(1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F);
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2);
      integer0.equals(integer1);
      wall0.setRightSideColor(integer1);
      wall0.move(1.0F, 1.0F);
      wall0.getYEnd();
      Wall wall2 = wall0.clone();
      wall2.setWallAtStart(wall1);
      wall2.setWallAtStart(wall0);
      wall0.setRightSideShininess(1.0F);
      float float0 = new Float((float) 2);
      Float float1 = new Float(0.0F);
      Object object0 = new Object();
      wall1.clone();
      wall0.move(0.0F, 1962.9F);
      wall1.setLeftSideColor(integer0);
      wall0.getLevel();
      wall1.setLevel((Level) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall(1677.1235F, 1677.1235F, 1.0F, 3942.6F, 1911.61F);
      Wall wall1 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float0 = wall1.getHeight();
      Wall wall2 = wall1.clone();
      wall2.setHeight(float0);
      wall0.setWallAtEnd(wall2);
      wall0.containsWallStartAt(3942.6F, 1677.1235F, 3942.6F);
      wall0.setYEnd(1.0F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall(1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F);
      wall0.isTrapezoidal();
      wall0.intersectsRectangle(1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F);
      wall0.getLeftSideShininess();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall(0.01F, 3507.2F, 3507.2F, (-3971.0F), 0.0F);
      wall0.getPoints();
      Float float0 = new Float(0.0);
      Float.min((-3644.986F), 388.00894F);
      wall0.setYStart((-3644.986F));
      Float.min(0.0F, (-3971.0F));
      Float.isFinite(0.0F);
      Object object0 = new Object();
      wall0.setLeftSideShininess(388.00894F);
      float0.equals(object0);
      wall0.setHeight(float0);
      wall0.getHeight();
      wall0.setXStart(0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall(1677.1235F, 1677.1235F, 1677.1235F, 1677.1235F, 1677.1235F, 1677.1235F);
      wall0.getYEnd();
      Float float0 = new Float((-2298.3F));
      Object object0 = new Object();
      float0.equals(object0);
      wall0.setArcExtent(float0);
      wall0.setHeight(float0);
      wall0.clone();
      wall0.intersectsRectangle(1677.1235F, 1677.1235F, (-2298.3F), (-943.15186F));
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall wall0 = new Wall(2319.536F, 2319.536F, (-4054.3967F), 2.0F, 2.0F);
      wall0.isTrapezoidal();
      wall0.getXArcCircleCenter();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.getYEnd();
      Float float0 = new Float((-2546.0));
      Object object0 = new Object();
      float0.equals(object0);
      wall0.setArcExtent(float0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall((-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F));
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      Float float0 = wall0.getHeight();
      wall0.setHeight(float0);
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("!/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.!/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      Integer integer0 = new Integer(45);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall(1677.1235F, 1.0F, 1.0F, 1677.1235F, 0.0F, (-595.5923F));
      wall0.getLength();
      wall0.move(1.0F, (-1908.928F));
      wall0.getPattern();
      wall0.getThickness();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.containsWallStartAt((-3652.0894F), (-210.75983F), 364.45813F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.02F), (-330.618F), (-1170.02F));
      Float float0 = new Float(1.0F);
      wall0.containsWallEndAt((-330.618F), (-640.9911F), (-640.9911F));
      Float.min((-1170.02F), (-1170.02F));
      Wall wall1 = wall0.clone();
      wall1.setArcExtent(float0);
      wall1.setHeight(float0);
      wall1.isTrapezoidal();
      wall1.containsWallEndAt((-640.9911F), 1.0F, (-1170.02F));
      Float float1 = new Float((double) (-330.618F));
      wall1.getLength();
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall(1677.1235F, 1677.1235F, 1.0F, 3942.6F, 1911.61F);
      Float.floatToIntBits(0.1F);
      wall0.setArcExtent((Float) 0.1F);
      Float float0 = new Float(0.0);
      float0.floatValue();
      Float float1 = new Float(5852.1997F);
      float1.floatValue();
      Float float2 = new Float(0.0F);
      float2.floatValue();
      wall0.setHeight((Float) 0.0F);
      Wall wall1 = wall0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("^tCb~BR}", propertyChangeListenerProxy0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy1);
      wall0.getLeftSideShininess();
      wall0.setWallAtEnd(wall1);
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall((-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F));
      wall0.setYStart((-3652.1707F));
      Float float0 = wall0.getHeight();
      wall0.setHeight(float0);
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      wall0.setXEnd(4944.118F);
      wall0.intersectsRectangle((-1047.2368F), 1376.52F, (-473.0F), (-1047.2368F));
      Float float0 = new Float((double) 0.1F);
      wall0.isTrapezoidal();
      wall0.setWallAtEnd(wall0);
      wall0.containsWallStartAt(1014.199F, 0.0F, 1014.199F);
      Wall wall1 = wall0.getWallAtEnd();
      wall1.containsPoint((-473.0F), 1.0F, 1376.52F);
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 1.0F, (-1.0F), (-1.0F));
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(272);
      Integer integer3 = new Integer(272);
      Integer.divideUnsigned(272, 1073741824);
      Integer.remainderUnsigned(2, 272);
      Integer.min(1444, 0);
      integer2.equals(integer3);
      Integer.getInteger("x[kSDdyx3v3 O", integer3);
      integer0.equals(integer1);
      wall0.setLeftSideColor(integer1);
      wall0.getXArcCircleCenter();
      Wall wall1 = wall0.clone();
      wall0.getPattern();
      Float float0 = new Float(0.0);
      Float.max(1367.0F, 0);
      Object object0 = new Object();
      float0.equals(object0);
      wall0.setArcExtent(float0);
      wall0.getPattern();
      wall0.getWallAtStart();
      wall1.move((-2619.0F), 1073741824);
      Float float1 = Float.valueOf((-2619.0F));
      wall1.setHeightAtEnd(float1);
      wall0.getXArcCircleCenter();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall((-1695.59F), (-1695.59F), (-1695.59F), (-1695.59F), 2411.6426F);
      Integer.valueOf(730);
      Integer.valueOf(2170);
      Integer.valueOf((-2938));
      Integer integer0 = Integer.valueOf(2);
      wall0.setRightSideShininess((-2938));
      wall0.setRightSideColor(integer0);
      wall0.setLeftSideShininess((-1695.59F));
      wall0.getRightSideShininess();
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.getHeight();
      wall0.getLeftSideColor();
      wall0.containsWallStartAt(4944.118F, 4944.118F, 714.7202F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall(1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F);
      Wall wall1 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float0 = wall1.getHeight();
      Wall wall2 = wall1.clone();
      wall2.setHeight(float0);
      wall0.setWallAtEnd(wall2);
      Wall wall3 = wall0.clone();
      wall0.move(1.0F, 1.0F);
      wall0.getYEnd();
      Wall wall4 = wall0.clone();
      wall0.setRightSideShininess(1.0F);
      wall4.getLeftSideShininess();
      wall4.setRightSideShininess(1962.9F);
      wall4.getLeftSideColor();
      wall3.containsWallStartAt(1962.9F, 0.0F, 1.0F);
      Level level0 = new Level("0]@>7S]el\"", 0.01F, 0.01F, 0.01F);
      level0.getElevation();
      Level level1 = level0.clone();
      level1.getHeight();
      wall0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall((-3651.39F), (-3651.39F), 2.0F, 2.0F, 286.7F);
      Integer.valueOf(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = Integer.valueOf(0);
      wall0.setLeftSideColor(integer1);
      Float.compare(2.0F, 0.12249536F);
      wall0.setHeightAtEnd((Float) 0.12249536F);
      wall0.getRightSideColor();
      wall0.getLength();
      Wall wall1 = wall0.clone();
      wall1.move(2.0F, 0.0F);
      wall0.setLeftSideColor(integer1);
      wall1.getLevel();
      wall1.setLevel((Level) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getLength();
      wall1.getStartPointToEndPointDistance();
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall(3942.6F, 1677.1235F, 1677.1235F, 3942.6F, 1677.1235F, 1.0F);
      Wall wall1 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      Float float0 = wall1.getHeight();
      Wall wall2 = wall1.clone();
      wall2.setRightSideTexture((HomeTexture) null);
      wall2.setArcExtent(float0);
      Wall wall3 = new Wall((-1.0F), (-330.618F), 1677.1235F, 1.0F, (-1170.024F), (-1170.024F));
      wall3.containsWallStartAt(3942.6F, (-1.0F), 1677.1235F);
      Float float1 = wall0.getHeight();
      Wall wall4 = wall0.clone();
      wall1.setHeight(float1);
      wall2.setWallAtStart(wall4);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1170.024F), (float)float0, 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = wall0.containsWallEndAt((-330.618F), (-640.9911F), (-640.9911F));
      assertFalse(boolean0);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float1 = Float.min((-1067.9297F), (-1067.9297F));
      assertEquals((-1067.9297F), float1, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      wall1.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-377.69608F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1138267.8F, wall1.getLength(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-895.1266F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setHeight(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-377.69608F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1138267.8F, wall1.getLength(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-895.1266F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-377.69608F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1138267.8F, wall1.getLength(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-895.1266F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1138267.8F, wall2.getLength(), 0.01F);
      assertEquals((-895.1266F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-377.69608F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall2.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-377.69608F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1138267.8F, wall1.getLength(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-895.1266F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1138267.8F, wall2.getLength(), 0.01F);
      assertEquals((-895.1266F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-377.69608F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float float2 = wall2.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-377.69608F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1138267.8F, wall1.getLength(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-895.1266F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1138267.8F, wall2.getLength(), 0.01F);
      assertEquals((-895.1266F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-377.69608F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall0.setWallAtEnd(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-377.69608F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1138267.8F, wall1.getLength(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-895.1266F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1138267.8F, wall2.getLength(), 0.01F);
      assertEquals((-895.1266F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-377.69608F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      boolean boolean1 = wall2.intersectsRectangle((-662.76654F), (-1170.024F), 0.0F, (-330.618F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-377.69608F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1138267.8F, wall1.getLength(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-895.1266F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1138267.8F, wall2.getLength(), 0.01F);
      assertEquals((-895.1266F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-377.69608F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall(876.1265F, 1648.3F, 0.0F, 876.1265F, (-1903.7268F), (-501.236F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1648.3F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1167.8397F, wall0.getLength(), 0.01F);
      assertEquals(1262.2133F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(876.1265F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1167.8397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-501.236F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(876.1265F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1903.7268F), wall0.getThickness(), 0.01F);
      assertEquals(438.06326F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getLength();
      assertEquals(1167.8397F, float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1648.3F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1167.8397F, wall0.getLength(), 0.01F);
      assertEquals(1262.2133F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(876.1265F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1167.8397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-501.236F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(876.1265F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1903.7268F), wall0.getThickness(), 0.01F);
      assertEquals(438.06326F, wall0.getXArcCircleCenter(), 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1648.3F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1167.8397F, wall0.getLength(), 0.01F);
      assertEquals(1262.2133F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(876.1265F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1167.8397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-501.236F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(876.1265F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1903.7268F), wall0.getThickness(), 0.01F);
      assertEquals(438.06326F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint((-3652.0894F), (-3652.0894F), (-3652.0894F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1170.024F), (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite((-1170.024F));
      assertTrue(boolean0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      wall0.setXStart((-4737.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4737.0F), wall0.getXStart(), 0.01F);
      assertEquals((-2533.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4559.331F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(4559.331F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      
      wall1.setHeight(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4737.0F), wall0.getXStart(), 0.01F);
      assertEquals((-2533.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4559.331F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(4559.331F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4737.0F), wall0.getXStart(), 0.01F);
      assertEquals((-2533.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4559.331F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(4559.331F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-320.0F), (-320.0F), 0.0F, (-320.0F), 0.0F);
      assertEquals(452.54834F, wall0.getLength(), 0.01F);
      assertEquals(452.54834F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-160.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-320.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-320.0F), wall0.getThickness(), 0.01F);
      assertEquals((-320.0F), wall0.getYStart(), 0.01F);
      assertEquals((-160.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setXEnd(4944.118F);
      assertEquals(4954.463F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4954.463F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(4944.118F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-160.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2472.059F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-320.0F), wall0.getThickness(), 0.01F);
      assertEquals((-320.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, (-320.0F), (-320.0F));
      assertFalse(boolean0);
      assertEquals(4954.463F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4954.463F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(4944.118F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-160.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2472.059F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-320.0F), wall0.getThickness(), 0.01F);
      assertEquals((-320.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float0 = new Float((double) (-320.0F));
      assertEquals((-320.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4954.463F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4954.463F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(4944.118F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-160.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2472.059F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-320.0F), wall0.getThickness(), 0.01F);
      assertEquals((-320.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(4954.463F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4954.463F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(4944.118F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-160.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2472.059F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-320.0F), wall0.getThickness(), 0.01F);
      assertEquals((-320.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean2 = wall0.containsWallStartAt(1014.199F, 0.0F, 1014.199F);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(4954.463F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4954.463F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(4944.118F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-160.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2472.059F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-320.0F), wall0.getThickness(), 0.01F);
      assertEquals((-320.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setRightSideShininess((-1.0F));
      assertEquals(4954.463F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4954.463F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(4944.118F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-160.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2472.059F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-320.0F), wall0.getThickness(), 0.01F);
      assertEquals((-320.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals(4954.463F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4954.463F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(4944.118F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-160.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2472.059F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-320.0F), wall0.getThickness(), 0.01F);
      assertEquals((-320.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4954.463F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4944.118F, wall1.getXEnd(), 0.01F);
      assertEquals((-320.0F), wall1.getYStart(), 0.01F);
      assertEquals((-160.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2472.059F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4954.463F, wall1.getLength(), 0.01F);
      assertEquals((-320.0F), wall1.getThickness(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(wall1);
      
      wall1.setYEnd(1377.1561F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(4944.118F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(528.57806F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2472.059F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1377.1561F, wall0.getYEnd(), 0.01F);
      assertEquals(5227.298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5227.298F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-320.0F), wall0.getThickness(), 0.01F);
      assertEquals((-320.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5227.298F, wall1.getLength(), 0.01F);
      assertEquals(4944.118F, wall1.getXEnd(), 0.01F);
      assertEquals((-320.0F), wall1.getYStart(), 0.01F);
      assertEquals(528.57806F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2472.059F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(5227.298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1377.1561F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-320.0F), wall1.getThickness(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      boolean boolean3 = wall1.containsPoint((-473.0F), 1.0F, 1377.1561F);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(4944.118F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(528.57806F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2472.059F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1377.1561F, wall0.getYEnd(), 0.01F);
      assertEquals(5227.298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5227.298F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-320.0F), wall0.getThickness(), 0.01F);
      assertEquals((-320.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5227.298F, wall1.getLength(), 0.01F);
      assertEquals(4944.118F, wall1.getXEnd(), 0.01F);
      assertEquals((-320.0F), wall1.getYStart(), 0.01F);
      assertEquals(528.57806F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2472.059F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(5227.298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1377.1561F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-320.0F), wall1.getThickness(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      boolean boolean4 = wall1.isTrapezoidal();
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(4944.118F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(528.57806F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2472.059F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1377.1561F, wall0.getYEnd(), 0.01F);
      assertEquals(5227.298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5227.298F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-320.0F), wall0.getThickness(), 0.01F);
      assertEquals((-320.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5227.298F, wall1.getLength(), 0.01F);
      assertEquals(4944.118F, wall1.getXEnd(), 0.01F);
      assertEquals((-320.0F), wall1.getYStart(), 0.01F);
      assertEquals(528.57806F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2472.059F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(5227.298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1377.1561F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-320.0F), wall1.getThickness(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall((-3668.0605F), (-3668.0605F), (-3668.0605F), (-3668.0605F), (-3668.0605F), (-3668.0605F));
      assertEquals((-3668.0605F), wall0.getThickness(), 0.01F);
      assertEquals((-3668.0605F), wall0.getXStart(), 0.01F);
      assertEquals((-3668.0605F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3668.0605F), wall0.getXEnd(), 0.01F);
      assertEquals((-3668.0605F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3668.0605F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3668.0605F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3668.0605F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals((-3668.0605F), float0, 0.01F);
      assertEquals((-3668.0605F), wall0.getThickness(), 0.01F);
      assertEquals((-3668.0605F), wall0.getXStart(), 0.01F);
      assertEquals((-3668.0605F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3668.0605F), wall0.getXEnd(), 0.01F);
      assertEquals((-3668.0605F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3668.0605F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3668.0605F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3668.0605F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart(1.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1170.024F), (float)float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      wall1.setHeight(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      
      boolean boolean0 = wall2.containsWallStartAt((-330.618F), 1593.7625F, 1.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall2.setYEnd(989.598F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(989.598F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1042.7351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(495.299F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1042.7351F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float float1 = wall1.getYEnd();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1170.024F), float1, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, (-2186.0F), 2.0F, 0.0F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2187.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1092.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2186.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2187.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("_MD!A7b6^xWt2WH\"g", (PropertyChangeListener) null);
      assertEquals("_MD!A7b6^xWt2WH\"g", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2187.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1092.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2186.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2187.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals("_MD!A7b6^xWt2WH\"g", propertyChangeListenerProxy0.getPropertyName());
      
      Wall wall1 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1170.024F), (float)float0, 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotNull(float0);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      
      wall2.setHeight(float0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall0.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2187.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1092.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2186.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2187.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall0.setLeftSideShininess(2.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2187.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1092.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2186.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2187.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      float float1 = wall0.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(1.0F, float1, 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2187.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1092.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2186.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2187.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = wall0.containsWallEndAt((-330.618F), (-640.9911F), (-640.9911F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      
      float float1 = Float.min((-1067.9297F), (-1067.9297F));
      assertEquals((-1067.9297F), float1, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      wall1.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(906.9636F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-888.0234F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1269.304F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setHeight(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(906.9636F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-888.0234F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1269.304F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(906.9636F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-888.0234F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1269.304F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(1269.304F, wall2.getLength(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-888.0234F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(906.9636F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Integer integer0 = wall1.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(906.9636F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-888.0234F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1269.304F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNull(integer0);
      
      Wall wall3 = wall1.clone();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(906.9636F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-888.0234F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1269.304F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall3.getArcExtent(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(1.0F, wall3.getHeight(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(906.9636F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall3.getYEnd(), 0.01F);
      assertEquals((-330.618F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-330.618F), wall3.getXEnd(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals(1269.304F, wall3.getLength(), 0.01F);
      assertEquals((-888.0234F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotNull(wall3);
      
      wall2.setYEnd((-1847.49F));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(906.9636F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-888.0234F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1269.304F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1527.0101F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1847.49F), wall2.getYEnd(), 0.01F);
      assertEquals(1958.5945F, wall2.getLength(), 0.01F);
      assertEquals(1878.0005F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-1226.7563F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      
      wall0.setLeftSideColor((Integer) null);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall(1511.1156F, 1511.1156F, 1511.1156F, (-1907.9916F), (-1907.9916F), (-1907.9916F));
      assertEquals((-1907.9916F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(1511.1156F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3419.1072F, wall0.getLength(), 0.01F);
      assertEquals((-1907.9916F), wall0.getHeight(), 0.01F);
      assertEquals((-198.43799F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1511.1156F, wall0.getXStart(), 0.01F);
      assertEquals((-1907.9916F), wall0.getYEnd(), 0.01F);
      assertEquals(1511.1156F, wall0.getYStart(), 0.01F);
      assertEquals(1511.1156F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3419.1072F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt((-751.5445F), 1511.1156F, 1511.1156F);
      assertTrue(boolean0);
      assertEquals((-1907.9916F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(1511.1156F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3419.1072F, wall0.getLength(), 0.01F);
      assertEquals((-1907.9916F), wall0.getHeight(), 0.01F);
      assertEquals((-198.43799F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1511.1156F, wall0.getXStart(), 0.01F);
      assertEquals((-1907.9916F), wall0.getYEnd(), 0.01F);
      assertEquals(1511.1156F, wall0.getYStart(), 0.01F);
      assertEquals(1511.1156F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3419.1072F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = Float.valueOf((-2619.0F));
      assertEquals((-2619.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-1907.9916F), wall0.getThickness(), 0.01F);
      assertEquals((-2619.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1511.1156F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3419.1072F, wall0.getLength(), 0.01F);
      assertEquals((-1907.9916F), wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-198.43799F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1511.1156F, wall0.getXStart(), 0.01F);
      assertEquals((-1907.9916F), wall0.getYEnd(), 0.01F);
      assertEquals(1511.1156F, wall0.getYStart(), 0.01F);
      assertEquals(1511.1156F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3419.1072F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      int int0 = Float.compare(0.0F, (-2807.65F));
      assertEquals(1, int0);
      
      wall0.setArcExtent((Float) (-2807.65F));
      assertEquals((-1907.9916F), wall0.getThickness(), 0.01F);
      assertEquals((-2619.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.066206E7F, wall0.getLength(), 0.01F);
      assertEquals(4902.053F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1511.1156F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1907.9916F), wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-198.43799F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1511.1156F, wall0.getXStart(), 0.01F);
      assertEquals((-1907.9916F), wall0.getYEnd(), 0.01F);
      assertEquals(1511.1156F, wall0.getYStart(), 0.01F);
      assertEquals(3419.1072F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2807.65F), wall0.getArcExtent(), 0.01F);
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertEquals(3419.1072F, float1, 0.01F);
      assertEquals((-1907.9916F), wall0.getThickness(), 0.01F);
      assertEquals((-2619.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.066206E7F, wall0.getLength(), 0.01F);
      assertEquals(4902.053F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1511.1156F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1907.9916F), wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-198.43799F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1511.1156F, wall0.getXStart(), 0.01F);
      assertEquals((-1907.9916F), wall0.getYEnd(), 0.01F);
      assertEquals(1511.1156F, wall0.getYStart(), 0.01F);
      assertEquals(3419.1072F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2807.65F), wall0.getArcExtent(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      float float2 = wall0.getXArcCircleCenter();
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(4902.053F, float2, 0.01F);
      assertEquals((-1907.9916F), wall0.getThickness(), 0.01F);
      assertEquals((-2619.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.066206E7F, wall0.getLength(), 0.01F);
      assertEquals(4902.053F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1511.1156F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1907.9916F), wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-198.43799F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1511.1156F, wall0.getXStart(), 0.01F);
      assertEquals((-1907.9916F), wall0.getYEnd(), 0.01F);
      assertEquals(1511.1156F, wall0.getYStart(), 0.01F);
      assertEquals(3419.1072F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2807.65F), wall0.getArcExtent(), 0.01F);
      
      Float float3 = wall0.getHeightAtEnd();
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-2619.0F), (float)float3, 0.01F);
      assertEquals((-1907.9916F), wall0.getThickness(), 0.01F);
      assertEquals((-2619.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.066206E7F, wall0.getLength(), 0.01F);
      assertEquals(4902.053F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1511.1156F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1907.9916F), wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-198.43799F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1511.1156F, wall0.getXStart(), 0.01F);
      assertEquals((-1907.9916F), wall0.getYEnd(), 0.01F);
      assertEquals(1511.1156F, wall0.getYStart(), 0.01F);
      assertEquals(3419.1072F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2807.65F), wall0.getArcExtent(), 0.01F);
      assertNotNull(float3);
      
      Integer integer0 = new Integer(272);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(272, (int)integer0);
      assertNotNull(integer0);
      
      long long0 = Integer.toUnsignedLong(1);
      assertEquals(1L, long0);
      
      String string0 = Integer.toUnsignedString(272);
      assertEquals("272", string0);
      assertNotNull(string0);
      
      Integer integer1 = new Integer(272);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(272, (int)integer1);
      assertNotNull(integer1);
      
      int int1 = Integer.max(272, 272);
      assertFalse(int1 == int0);
      assertEquals(272, int1);
      
      boolean boolean1 = integer0.equals(integer1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      wall0.setRightSideColor(integer1);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1907.9916F), wall0.getThickness(), 0.01F);
      assertEquals((-2619.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(272, (int)wall0.getRightSideColor());
      assertEquals(1.066206E7F, wall0.getLength(), 0.01F);
      assertEquals(4902.053F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1511.1156F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1907.9916F), wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-198.43799F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1511.1156F, wall0.getXStart(), 0.01F);
      assertEquals((-1907.9916F), wall0.getYEnd(), 0.01F);
      assertEquals(1511.1156F, wall0.getYStart(), 0.01F);
      assertEquals(3419.1072F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2807.65F), wall0.getArcExtent(), 0.01F);
      
      float float4 = wall0.getRightSideShininess();
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      assertEquals((-1907.9916F), wall0.getThickness(), 0.01F);
      assertEquals((-2619.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(272, (int)wall0.getRightSideColor());
      assertEquals(1.066206E7F, wall0.getLength(), 0.01F);
      assertEquals(4902.053F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1511.1156F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1907.9916F), wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-198.43799F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1511.1156F, wall0.getXStart(), 0.01F);
      assertEquals((-1907.9916F), wall0.getYEnd(), 0.01F);
      assertEquals(1511.1156F, wall0.getYStart(), 0.01F);
      assertEquals(3419.1072F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2807.65F), wall0.getArcExtent(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1907.9916F), wall0.getThickness(), 0.01F);
      assertEquals((-2619.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(272, (int)wall0.getRightSideColor());
      assertEquals(1.066206E7F, wall0.getLength(), 0.01F);
      assertEquals(4902.053F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1511.1156F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1907.9916F), wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-198.43799F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1511.1156F, wall0.getXStart(), 0.01F);
      assertEquals((-1907.9916F), wall0.getYEnd(), 0.01F);
      assertEquals(1511.1156F, wall0.getYStart(), 0.01F);
      assertEquals(3419.1072F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2807.65F), wall0.getArcExtent(), 0.01F);
      assertEquals(4902.053F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-198.43799F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1907.9916F), wall1.getHeight(), 0.01F);
      assertEquals(1511.1156F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.066206E7F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1907.9916F), wall1.getThickness(), 0.01F);
      assertEquals(272, (int)wall1.getRightSideColor());
      assertEquals((-1907.9916F), wall1.getYEnd(), 0.01F);
      assertEquals((-2619.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1511.1156F, wall1.getXStart(), 0.01F);
      assertEquals(3419.1072F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2807.65F), wall1.getArcExtent(), 0.01F);
      assertEquals(1511.1156F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertTrue(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-1907.9916F), wall0.getThickness(), 0.01F);
      assertEquals((-2619.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(272, (int)wall0.getRightSideColor());
      assertEquals(1.066206E7F, wall0.getLength(), 0.01F);
      assertEquals(4902.053F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1511.1156F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1907.9916F), wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-198.43799F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1511.1156F, wall0.getXStart(), 0.01F);
      assertEquals((-1907.9916F), wall0.getYEnd(), 0.01F);
      assertEquals(1511.1156F, wall0.getYStart(), 0.01F);
      assertEquals(3419.1072F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2807.65F), wall0.getArcExtent(), 0.01F);
      assertEquals(4902.053F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-198.43799F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1907.9916F), wall1.getHeight(), 0.01F);
      assertEquals(1511.1156F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.066206E7F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1907.9916F), wall1.getThickness(), 0.01F);
      assertEquals(272, (int)wall1.getRightSideColor());
      assertEquals((-1907.9916F), wall1.getYEnd(), 0.01F);
      assertEquals((-2619.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1511.1156F, wall1.getXStart(), 0.01F);
      assertEquals(3419.1072F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2807.65F), wall1.getArcExtent(), 0.01F);
      assertEquals(1511.1156F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1.066206E7F, wall2.getLength(), 0.01F);
      assertEquals((-2807.65F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertEquals(1511.1156F, wall2.getYStart(), 0.01F);
      assertEquals(4902.053F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1511.1156F, wall2.getXEnd(), 0.01F);
      assertEquals((-1907.9916F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3419.1072F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(272, (int)wall2.getRightSideColor());
      assertEquals((-1907.9916F), wall2.getHeight(), 0.01F);
      assertEquals((-198.43799F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1907.9916F), wall2.getYEnd(), 0.01F);
      assertEquals((-2619.0F), wall2.getHeightAtEnd(), 0.01F);
      assertEquals(1511.1156F, wall2.getXStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall(0.0F, 2.0F, 0.0F, 689.31F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(687.31F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(689.31F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(345.655F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Y_END", propertyChangeListener0);
      assertEquals("Y_END", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float((-2690.3F));
      assertEquals((-2690.3F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-2690.3F), float1, 0.01F);
      
      Float float2 = new Float(970.105);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(970.105F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((double) 0.0F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setArcExtent(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(687.31F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(689.31F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(345.655F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-5.612312E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setHeight(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2690.3F), wall0.getHeight(), 0.01F);
      assertEquals(687.31F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(689.31F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(345.655F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-5.612312E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2690.3F), wall0.getHeight(), 0.01F);
      assertEquals(687.31F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(689.31F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(345.655F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-5.612312E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(689.31F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(687.31F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2690.3F), wall1.getHeight(), 0.01F);
      assertEquals((-5.612312E18F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(687.31F, wall1.getLength(), 0.01F);
      assertEquals(345.655F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      Integer integer1 = wall1.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2690.3F), wall0.getHeight(), 0.01F);
      assertEquals(687.31F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(689.31F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(345.655F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-5.612312E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(689.31F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(687.31F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2690.3F), wall1.getHeight(), 0.01F);
      assertEquals((-5.612312E18F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(687.31F, wall1.getLength(), 0.01F);
      assertEquals(345.655F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(integer1);
      
      wall0.setRightSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2690.3F), wall0.getHeight(), 0.01F);
      assertEquals(687.31F, wall0.getLength(), 0.01F);
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertEquals(689.31F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(345.655F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-5.612312E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, 0.0F, 689.31F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2690.3F), wall0.getHeight(), 0.01F);
      assertEquals(687.31F, wall0.getLength(), 0.01F);
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertEquals(689.31F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(345.655F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-5.612312E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(689.31F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(687.31F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2690.3F), wall1.getHeight(), 0.01F);
      assertEquals((-5.612312E18F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(687.31F, wall1.getLength(), 0.01F);
      assertEquals(345.655F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float4 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2690.3F), wall0.getHeight(), 0.01F);
      assertEquals(687.31F, wall0.getLength(), 0.01F);
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertEquals(689.31F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(345.655F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-5.612312E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotNull(float4);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-270.6F), 298.0F, 1.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-270.6F), wall0.getXEnd(), 0.01F);
      assertEquals(402.46188F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(298.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(402.46188F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-134.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(149.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Level level0 = new Level("0]@>7S]el\"", 0.01F, 0.01F, 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getFloorThickness(), 0.01F);
      assertEquals("0]@>7S]el\"", level0.getName());
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      float float0 = level0.getElevation();
      assertEquals(0.01F, float0, 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getFloorThickness(), 0.01F);
      assertEquals("0]@>7S]el\"", level0.getName());
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getFloorThickness(), 0.01F);
      assertEquals("0]@>7S]el\"", level0.getName());
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.01F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level1.getHeight(), 0.01F);
      assertEquals(0.01F, level1.getElevation(), 0.01F);
      assertEquals("0]@>7S]el\"", level1.getName());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      
      float float1 = level1.getHeight();
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.01F, float1, 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getFloorThickness(), 0.01F);
      assertEquals("0]@>7S]el\"", level0.getName());
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.01F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level1.getHeight(), 0.01F);
      assertEquals(0.01F, level1.getElevation(), 0.01F);
      assertEquals("0]@>7S]el\"", level1.getName());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      wall0.setLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-270.6F), wall0.getXEnd(), 0.01F);
      assertEquals(402.46188F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(298.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(402.46188F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-134.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(149.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getFloorThickness(), 0.01F);
      assertEquals("0]@>7S]el\"", level0.getName());
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.01F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level1.getHeight(), 0.01F);
      assertEquals(0.01F, level1.getElevation(), 0.01F);
      assertEquals("0]@>7S]el\"", level1.getName());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      wall0.setLeftSideShininess(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-270.6F), wall0.getXEnd(), 0.01F);
      assertEquals(402.46188F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(298.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(402.46188F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-134.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(149.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      float float2 = wall0.getXArcCircleCenter();
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-134.8F), float2, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-270.6F), wall0.getXEnd(), 0.01F);
      assertEquals(402.46188F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(298.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(402.46188F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-134.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(149.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall(876.1265F, 912.5F, (-1.0F), 1574.6F, 912.5F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(437.56326F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1098.9664F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1243.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1098.9664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1574.6F, wall0.getYEnd(), 0.01F);
      assertEquals(912.5F, wall0.getYStart(), 0.01F);
      assertEquals(876.1265F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(912.5F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(437.56326F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1098.9664F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1243.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1098.9664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1574.6F, wall0.getYEnd(), 0.01F);
      assertEquals(912.5F, wall0.getYStart(), 0.01F);
      assertEquals(876.1265F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(912.5F, wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(437.56326F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1098.9664F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1243.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1098.9664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1574.6F, wall0.getYEnd(), 0.01F);
      assertEquals(912.5F, wall0.getYStart(), 0.01F);
      assertEquals(876.1265F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(912.5F, wall0.getThickness(), 0.01F);
      assertNull(level0);
      
      wall0.setLevel((Level) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(437.56326F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1098.9664F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1243.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1098.9664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1574.6F, wall0.getYEnd(), 0.01F);
      assertEquals(912.5F, wall0.getYStart(), 0.01F);
      assertEquals(876.1265F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(912.5F, wall0.getThickness(), 0.01F);
      
      float float0 = wall0.getYEnd();
      assertEquals(1574.6F, float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(437.56326F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1098.9664F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1243.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1098.9664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1574.6F, wall0.getYEnd(), 0.01F);
      assertEquals(912.5F, wall0.getYStart(), 0.01F);
      assertEquals(876.1265F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(912.5F, wall0.getThickness(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(wall0));
      assertNotNull(linkedList1);
      
      LinkedList<Wall> linkedList2 = new LinkedList<Wall>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(wall0));
      assertNotNull(linkedList2);
      
      boolean boolean0 = linkedList2.add(wall0);
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertTrue(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(437.56326F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1098.9664F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1243.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1098.9664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1574.6F, wall0.getYEnd(), 0.01F);
      assertEquals(912.5F, wall0.getYStart(), 0.01F);
      assertEquals(876.1265F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(912.5F, wall0.getThickness(), 0.01F);
      assertEquals(1, linkedList2.size());
      assertTrue(linkedList2.contains(wall0));
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      
      List<Wall> list1 = Wall.clone((List<Wall>) linkedList2);
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(list1.equals((Object)list0));
      assertEquals(1, linkedList2.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(linkedList2.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      wall0.setRightSideColor((Integer) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(437.56326F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1098.9664F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1243.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1098.9664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1574.6F, wall0.getYEnd(), 0.01F);
      assertEquals(912.5F, wall0.getYStart(), 0.01F);
      assertEquals(876.1265F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(912.5F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall((-2735.76F), 1.0F, (-2735.76F), 0.1F, 0.1F, 0.1F);
      assertEquals(0.9F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2735.76F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(243);
      assertEquals(243, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("Y_END");
      assertFalse(boolean0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.9F, wall0.getLength(), 0.01F);
      assertEquals(243, (int)wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2735.76F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      
      int int0 = Float.compare(735.0F, (-489.0F));
      assertEquals(1, int0);
      
      int int1 = Float.compare(0.01F, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = Float.compare(0.0F, 0.0F);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = Float.compare(1.0F, (-1.0F));
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      wall0.setArcExtent((Float) (-1.0F));
      assertEquals(243, (int)wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2736.5837F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.93863297F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(243, (int)wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2736.5837F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.93863297F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall((-2944.0964F), (-2944.0964F), (-2944.0964F), (-2944.0964F), (-2944.0964F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-2944.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2944.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2944.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getYEnd();
      assertEquals((-2944.0964F), float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-2944.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2944.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2944.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-2944.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2944.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2944.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2944.0964F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2944.0964F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2944.0964F), wall1.getYStart(), 0.01F);
      assertEquals((-2944.0964F), wall1.getYEnd(), 0.01F);
      assertEquals((-2944.0964F), wall1.getXEnd(), 0.01F);
      assertEquals((-2944.0964F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2944.0964F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-2944.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2944.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2944.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2944.0964F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2944.0964F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2944.0964F), wall1.getYStart(), 0.01F);
      assertEquals((-2944.0964F), wall1.getYEnd(), 0.01F);
      assertEquals((-2944.0964F), wall1.getXEnd(), 0.01F);
      assertEquals((-2944.0964F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2944.0964F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setRightSideShininess((-2944.0964F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-2944.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2944.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2944.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2944.0964F), wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2944.0964F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2944.0964F), wall1.getYStart(), 0.01F);
      assertEquals((-2944.0964F), wall1.getYEnd(), 0.01F);
      assertEquals((-2944.0964F), wall1.getXEnd(), 0.01F);
      assertEquals((-2944.0964F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2944.0964F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float1 = wall1.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-2944.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2944.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2944.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2944.0964F), wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2944.0964F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2944.0964F), wall1.getYStart(), 0.01F);
      assertEquals((-2944.0964F), wall1.getYEnd(), 0.01F);
      assertEquals((-2944.0964F), wall1.getXEnd(), 0.01F);
      assertEquals((-2944.0964F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2944.0964F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall0.containsWallStartAt((-2944.0964F), 0.0F, (-2944.0964F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-2944.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2944.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2944.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-2944.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(0.0F, float1, 0.01F);
      
      wall0.setHeightAtEnd((Float) 0.0F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertTrue(boolean0);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall((-1248.7668F), 0.0F, (-1248.7668F), 2840.8645F, 0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2840.8645F, wall0.getLength(), 0.01F);
      assertEquals((-1248.7668F), wall0.getXEnd(), 0.01F);
      assertEquals(2840.8645F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1248.7668F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2840.8645F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1420.4323F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1248.7668F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2840.8645F, wall0.getLength(), 0.01F);
      assertEquals((-1248.7668F), wall0.getXEnd(), 0.01F);
      assertEquals(2840.8645F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1248.7668F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2840.8645F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1420.4323F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1248.7668F), wall0.getXStart(), 0.01F);
      assertEquals((-1248.7668F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2840.8645F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2840.8645F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1420.4323F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2840.8645F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1248.7668F), wall1.getXStart(), 0.01F);
      assertEquals((-1248.7668F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall((-3651.39F), (-3651.39F), 2.0F, 2.0F, 286.7F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(286.7F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1824.695F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3651.39F), wall0.getYStart(), 0.01F);
      assertEquals((-3651.39F), wall0.getXStart(), 0.01F);
      assertEquals(5166.6733F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5166.6733F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1824.695F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      int int0 = Integer.compareUnsigned(15, 53);
      assertEquals((-1), int0);
      
      wall0.setLeftSideColor(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(286.7F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1824.695F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3651.39F), wall0.getYStart(), 0.01F);
      assertEquals((-3651.39F), wall0.getXStart(), 0.01F);
      assertEquals(5166.6733F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5166.6733F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1824.695F), wall0.getYArcCircleCenter(), 0.01F);
      
      int int1 = Float.compare(2.0F, 0.0F);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      wall0.setHeightAtEnd((Float) 0.0F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(286.7F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1824.695F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3651.39F), wall0.getYStart(), 0.01F);
      assertEquals((-3651.39F), wall0.getXStart(), 0.01F);
      assertEquals(5166.6733F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5166.6733F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1824.695F), wall0.getYArcCircleCenter(), 0.01F);
      
      Integer integer3 = wall0.getRightSideColor();
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(286.7F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1824.695F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3651.39F), wall0.getYStart(), 0.01F);
      assertEquals((-3651.39F), wall0.getXStart(), 0.01F);
      assertEquals(5166.6733F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5166.6733F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1824.695F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(integer3);
      
      float float0 = wall0.getLength();
      assertEquals(5166.6733F, float0, 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(286.7F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1824.695F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3651.39F), wall0.getYStart(), 0.01F);
      assertEquals((-3651.39F), wall0.getXStart(), 0.01F);
      assertEquals(5166.6733F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5166.6733F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1824.695F), wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(286.7F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1824.695F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3651.39F), wall0.getYStart(), 0.01F);
      assertEquals((-3651.39F), wall0.getXStart(), 0.01F);
      assertEquals(5166.6733F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5166.6733F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1824.695F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1824.695F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(5166.6733F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3651.39F), wall1.getYStart(), 0.01F);
      assertEquals((-3651.39F), wall1.getXStart(), 0.01F);
      assertEquals((-1824.695F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(5166.6733F, wall1.getLength(), 0.01F);
      assertEquals(286.7F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      wall1.move(2.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(286.7F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1824.695F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3651.39F), wall0.getYStart(), 0.01F);
      assertEquals((-3651.39F), wall0.getXStart(), 0.01F);
      assertEquals(5166.6733F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5166.6733F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1824.695F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(4.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3649.39F), wall1.getXStart(), 0.01F);
      assertEquals(5166.6733F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3651.39F), wall1.getYStart(), 0.01F);
      assertEquals((-1824.695F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-1822.695F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5166.6733F, wall1.getLength(), 0.01F);
      assertEquals(286.7F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(1.5521874F, float0, 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall((-19.494043F), (-19.494043F), (-19.494043F), (-19.494043F), (-19.494043F), (-19.494043F));
      assertEquals((-19.494043F), wall0.getThickness(), 0.01F);
      assertEquals((-19.494043F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.494043F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-19.494043F), wall0.getYEnd(), 0.01F);
      assertEquals((-19.494043F), wall0.getXEnd(), 0.01F);
      assertEquals((-19.494043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.494043F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-19.494043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move((-19.494043F), (-19.494043F));
      assertEquals((-19.494043F), wall0.getThickness(), 0.01F);
      assertEquals((-38.988087F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-38.988087F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-38.988087F), wall0.getYEnd(), 0.01F);
      assertEquals((-38.988087F), wall0.getXEnd(), 0.01F);
      assertEquals((-38.988087F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.494043F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-38.988087F), wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setXEnd((-19.494043F));
      assertEquals((-19.494043F), wall0.getThickness(), 0.01F);
      assertEquals((-38.988087F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-38.988087F), wall0.getXStart(), 0.01F);
      assertEquals((-29.241066F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.494043F, wall0.getLength(), 0.01F);
      assertEquals((-38.988087F), wall0.getYEnd(), 0.01F);
      assertEquals((-19.494043F), wall0.getXEnd(), 0.01F);
      assertEquals((-38.988087F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.494043F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.494043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-19.494043F), wall0.getThickness(), 0.01F);
      assertEquals((-38.988087F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-38.988087F), wall0.getXStart(), 0.01F);
      assertEquals((-29.241066F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.494043F, wall0.getLength(), 0.01F);
      assertEquals((-38.988087F), wall0.getYEnd(), 0.01F);
      assertEquals((-19.494043F), wall0.getXEnd(), 0.01F);
      assertEquals((-38.988087F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.494043F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.494043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      boolean boolean0 = wall0.containsWallStartAt((-19.494043F), (-19.494043F), (-19.494043F));
      assertFalse(boolean0);
      assertEquals((-19.494043F), wall0.getThickness(), 0.01F);
      assertEquals((-38.988087F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-38.988087F), wall0.getXStart(), 0.01F);
      assertEquals((-29.241066F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.494043F, wall0.getLength(), 0.01F);
      assertEquals((-38.988087F), wall0.getYEnd(), 0.01F);
      assertEquals((-19.494043F), wall0.getXEnd(), 0.01F);
      assertEquals((-38.988087F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.494043F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.494043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals((-19.494043F), wall0.getThickness(), 0.01F);
      assertEquals((-38.988087F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-38.988087F), wall0.getXStart(), 0.01F);
      assertEquals((-29.241066F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.494043F, wall0.getLength(), 0.01F);
      assertEquals((-38.988087F), wall0.getYEnd(), 0.01F);
      assertEquals((-19.494043F), wall0.getXEnd(), 0.01F);
      assertEquals((-38.988087F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.494043F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.494043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1.0F), 1055.7F, 0.0F, 0.0F, 572.824F);
      assertEquals(1055.7004F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(527.85F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(572.824F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1055.7004F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1055.7F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess((-2429.8F));
      assertEquals(1055.7004F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(527.85F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(572.824F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-2429.8F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(1055.7004F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1055.7F, wall0.getXEnd(), 0.01F);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max((-66.484F), (-1161.592F));
      assertEquals((-66.484F), float1, 0.01F);
      
      wall0.setYStart(0.0F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1055.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(527.85F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(572.824F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2429.8F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(1055.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1055.7F, wall0.getXEnd(), 0.01F);
      
      float float2 = Float.min(0.0F, 0.0F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      float float3 = Float.sum(627.95F, 0.0F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(627.95F, float3, 0.01F);
      
      float float4 = Float.sum(320.0201F, 0.0F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(320.0201F, float4, 0.01F);
      
      float float5 = Float.min(0.0F, (-1.0F));
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertEquals((-1.0F), float5, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float5, 0.01F);
      assertEquals(8.6204444E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5.910823E-6F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1055.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(572.824F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2429.8F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(1055.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1055.7F, wall0.getXEnd(), 0.01F);
      
      Float float6 = wall0.getHeightAtEnd();
      assertEquals(8.6204444E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5.910823E-6F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1055.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(572.824F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2429.8F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(1055.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1055.7F, wall0.getXEnd(), 0.01F);
      assertNull(float6);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(8.6204444E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5.910823E-6F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1055.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(572.824F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2429.8F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(1055.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1055.7F, wall0.getXEnd(), 0.01F);
      assertNull(integer0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(8.6204444E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5.910823E-6F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1055.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(572.824F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2429.8F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(1055.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1055.7F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      
      Float float7 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals((-1170.024F), (float)float7, 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotNull(float7);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      
      wall2.setHeight(float7);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall0.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(8.6204444E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5.910823E-6F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1055.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(572.824F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2429.8F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(1055.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1055.7F, wall0.getXEnd(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall(1961.9F, 1961.9F, 1961.9F, 1961.9F, 1961.9F);
      assertEquals(1961.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1961.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1961.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1961.9F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1961.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1961.9F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1961.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1961.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1961.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1961.9F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1961.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1961.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1961.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1961.9F, wall1.getYStart(), 0.01F);
      assertEquals(1961.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1961.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1961.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1961.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1961.9F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      wall0.move(1.0F, 1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1962.9F, wall0.getYStart(), 0.01F);
      assertEquals(1962.9F, wall0.getXStart(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1962.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1962.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1962.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1962.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      
      float float0 = wall0.getYEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1962.9F, float0, 0.01F);
      assertEquals(1962.9F, wall0.getYStart(), 0.01F);
      assertEquals(1962.9F, wall0.getXStart(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1962.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1962.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1962.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1962.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1962.9F, wall0.getYStart(), 0.01F);
      assertEquals(1962.9F, wall0.getXStart(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1962.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1962.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1962.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1962.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1962.9F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1962.9F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(1962.9F, wall2.getYStart(), 0.01F);
      assertEquals(1961.9F, wall2.getThickness(), 0.01F);
      assertEquals(1962.9F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1962.9F, wall2.getYEnd(), 0.01F);
      assertEquals(1962.9F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      
      wall2.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1962.9F, wall0.getYStart(), 0.01F);
      assertEquals(1962.9F, wall0.getXStart(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1962.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1962.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1962.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1962.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1962.9F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1962.9F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(1962.9F, wall2.getYStart(), 0.01F);
      assertEquals(1961.9F, wall2.getThickness(), 0.01F);
      assertEquals(1962.9F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1962.9F, wall2.getYEnd(), 0.01F);
      assertEquals(1962.9F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float float1 = wall2.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(1962.9F, wall0.getYStart(), 0.01F);
      assertEquals(1962.9F, wall0.getXStart(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1962.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1962.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1962.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1962.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1962.9F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1962.9F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(1962.9F, wall2.getYStart(), 0.01F);
      assertEquals(1961.9F, wall2.getThickness(), 0.01F);
      assertEquals(1962.9F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1962.9F, wall2.getYEnd(), 0.01F);
      assertEquals(1962.9F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall2.setRightSideShininess(1962.9F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1962.9F, wall0.getYStart(), 0.01F);
      assertEquals(1962.9F, wall0.getXStart(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1962.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1962.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1962.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1962.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1962.9F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1962.9F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1962.9F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(1962.9F, wall2.getYStart(), 0.01F);
      assertEquals(1961.9F, wall2.getThickness(), 0.01F);
      assertEquals(1962.9F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1962.9F, wall2.getYEnd(), 0.01F);
      assertEquals(1962.9F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      int int0 = Float.floatToIntBits((-4404.114F));
      assertEquals((-980836119), int0);
      
      wall1.setHeightAtEnd((Float) (-4404.114F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(1962.9F, wall0.getYStart(), 0.01F);
      assertEquals(1962.9F, wall0.getXStart(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1962.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1962.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1962.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1962.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1961.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1961.9F, wall1.getYStart(), 0.01F);
      assertEquals(1961.9F, wall1.getThickness(), 0.01F);
      assertEquals((-4404.114F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1961.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1961.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1961.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1961.9F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("3\"eJO]\"GVun?9$", propertyChangeListener0);
      assertEquals("3\"eJO]\"GVun?9$", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("bGpbNJ2IIof", propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("3\"eJO]\"GVun?9$", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("bGpbNJ2IIof", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      wall1.addPropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals(1962.9F, wall0.getYStart(), 0.01F);
      assertEquals(1962.9F, wall0.getXStart(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1962.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1962.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1962.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1962.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1961.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1961.9F, wall1.getYStart(), 0.01F);
      assertEquals(1961.9F, wall1.getThickness(), 0.01F);
      assertEquals((-4404.114F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1961.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1961.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1961.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1961.9F, wall1.getXStart(), 0.01F);
      assertEquals("3\"eJO]\"GVun?9$", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("bGpbNJ2IIof", propertyChangeListenerProxy1.getPropertyName());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      
      float float2 = wall1.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(1962.9F, wall0.getYStart(), 0.01F);
      assertEquals(1962.9F, wall0.getXStart(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1962.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1962.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1962.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1962.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1961.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1961.9F, wall1.getYStart(), 0.01F);
      assertEquals(1961.9F, wall1.getThickness(), 0.01F);
      assertEquals((-4404.114F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1961.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1961.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1961.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1961.9F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      boolean boolean0 = wall2.intersectsRectangle(1.0F, 0.0F, 0.0F, (-1626.012F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(boolean0);
      assertEquals(1962.9F, wall0.getYStart(), 0.01F);
      assertEquals(1962.9F, wall0.getXStart(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1962.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1962.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1962.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1962.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1962.9F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1962.9F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1962.9F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(1962.9F, wall2.getYStart(), 0.01F);
      assertEquals(1961.9F, wall2.getThickness(), 0.01F);
      assertEquals(1962.9F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1962.9F, wall2.getYEnd(), 0.01F);
      assertEquals(1962.9F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall2.setArcExtent((Float) null);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1962.9F, wall0.getYStart(), 0.01F);
      assertEquals(1962.9F, wall0.getXStart(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1962.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1962.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1962.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1962.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1962.9F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1962.9F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1962.9F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(1962.9F, wall2.getYStart(), 0.01F);
      assertEquals(1961.9F, wall2.getThickness(), 0.01F);
      assertEquals(1962.9F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1962.9F, wall2.getYEnd(), 0.01F);
      assertEquals(1962.9F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      float float3 = wall1.getStartPointToEndPointDistance();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(1962.9F, wall0.getYStart(), 0.01F);
      assertEquals(1962.9F, wall0.getXStart(), 0.01F);
      assertEquals(1961.9F, wall0.getThickness(), 0.01F);
      assertEquals(1962.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1962.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1962.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1962.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1961.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1961.9F, wall1.getYStart(), 0.01F);
      assertEquals(1961.9F, wall1.getThickness(), 0.01F);
      assertEquals((-4404.114F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1961.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1961.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1961.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1961.9F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getYEnd();
      assertEquals((-3652.0894F), float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall(507.0995F, 507.0995F, 507.0995F, (-3105.426F), (-3105.426F));
      assertEquals(507.0995F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3612.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(507.0995F, wall0.getYStart(), 0.01F);
      assertEquals((-3105.426F), wall0.getThickness(), 0.01F);
      assertEquals((-3105.426F), wall0.getYEnd(), 0.01F);
      assertEquals(3612.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(507.0995F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1299.1633F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(507.0995F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(507.0995F, 507.0995F);
      assertEquals(1014.199F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2598.3267F), wall0.getYEnd(), 0.01F);
      assertEquals((-792.06384F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1014.199F, wall0.getYStart(), 0.01F);
      assertEquals((-3105.426F), wall0.getThickness(), 0.01F);
      assertEquals(3612.5256F, wall0.getLength(), 0.01F);
      assertEquals(3612.5256F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1014.199F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1014.199F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(3612.5256F, float0, 0.01F);
      assertEquals(1014.199F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2598.3267F), wall0.getYEnd(), 0.01F);
      assertEquals((-792.06384F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1014.199F, wall0.getYStart(), 0.01F);
      assertEquals((-3105.426F), wall0.getThickness(), 0.01F);
      assertEquals(3612.5256F, wall0.getLength(), 0.01F);
      assertEquals(3612.5256F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1014.199F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1014.199F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = Integer.max(0, 6);
      assertEquals(6, int0);
      
      boolean boolean0 = integer0.equals(object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean0);
      
      wall0.setRightSideColor(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1014.199F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2598.3267F), wall0.getYEnd(), 0.01F);
      assertEquals((-792.06384F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1014.199F, wall0.getYStart(), 0.01F);
      assertEquals((-3105.426F), wall0.getThickness(), 0.01F);
      assertEquals(3612.5256F, wall0.getLength(), 0.01F);
      assertEquals(3612.5256F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1014.199F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1014.199F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Integer integer1 = Integer.valueOf(2683);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(2683, (int)integer1);
      assertNotNull(integer1);
      
      wall0.setRightSideColor(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(1014.199F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2598.3267F), wall0.getYEnd(), 0.01F);
      assertEquals((-792.06384F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1014.199F, wall0.getYStart(), 0.01F);
      assertEquals((-3105.426F), wall0.getThickness(), 0.01F);
      assertEquals(3612.5256F, wall0.getLength(), 0.01F);
      assertEquals(3612.5256F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2683, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1014.199F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1014.199F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = float1.equals(object1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(object1, object0);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1014.199F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2598.3267F), wall0.getYEnd(), 0.01F);
      assertEquals((-792.06384F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1014.199F, wall0.getYStart(), 0.01F);
      assertEquals((-3105.426F), wall0.getThickness(), 0.01F);
      assertEquals(3612.5256F, wall0.getLength(), 0.01F);
      assertEquals(3612.5256F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2683, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1014.199F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1014.199F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1014.199F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2598.3267F), wall0.getYEnd(), 0.01F);
      assertEquals((-792.06384F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1014.199F, wall0.getYStart(), 0.01F);
      assertEquals((-3105.426F), wall0.getThickness(), 0.01F);
      assertEquals(3612.5256F, wall0.getLength(), 0.01F);
      assertEquals(3612.5256F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2683, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1014.199F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1014.199F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float2 = wall0.getHeightAtEnd();
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertEquals(1014.199F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2598.3267F), wall0.getYEnd(), 0.01F);
      assertEquals((-792.06384F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1014.199F, wall0.getYStart(), 0.01F);
      assertEquals((-3105.426F), wall0.getThickness(), 0.01F);
      assertEquals(3612.5256F, wall0.getLength(), 0.01F);
      assertEquals(3612.5256F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2683, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1014.199F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1014.199F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(float2);
      
      float float3 = wall0.getLength();
      assertEquals(float3, float0, 0.01F);
      assertEquals(3612.5256F, float3, 0.01F);
      assertEquals(1014.199F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2598.3267F), wall0.getYEnd(), 0.01F);
      assertEquals((-792.06384F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1014.199F, wall0.getYStart(), 0.01F);
      assertEquals((-3105.426F), wall0.getThickness(), 0.01F);
      assertEquals(3612.5256F, wall0.getLength(), 0.01F);
      assertEquals(3612.5256F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2683, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1014.199F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1014.199F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 1.5521874F, 1.5521874F, 286.7F, 286.7F);
      assertEquals(285.14816F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals(286.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(286.7F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(144.1261F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.7760937F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(285.14816F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(2146419171);
      assertEquals(2146419171, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compareUnsigned((-1), 53);
      assertEquals(1, int0);
      
      Integer integer1 = Integer.valueOf((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf((-1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals((-1), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf((-1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = Integer.valueOf(2146419171);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(2146419171, (int)integer4);
      assertNotNull(integer4);
      
      wall0.setLeftSideColor(integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(285.14816F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2146419171, (int)wall0.getLeftSideColor());
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals(286.7F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(286.7F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(144.1261F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.7760937F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(285.14816F, wall0.getLength(), 0.01F);
      
      Integer integer5 = new Integer(15);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertEquals(15, (int)integer5);
      assertNotNull(integer5);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(2146419171, (-1.0F), 1.0F, 644.8782F, 2146419171, (-949.93646F));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-949.93646F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0732096E9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.1464192E9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.1464192E9F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(321.9391F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(644.8782F, wall1.getYEnd(), 0.01F);
      assertEquals(2.1464192E9F, wall1.getLength(), 0.01F);
      assertEquals(2.1464192E9F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(285.14816F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2146419171, (int)wall0.getLeftSideColor());
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals(286.7F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(286.7F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(144.1261F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.7760937F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(285.14816F, wall0.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-949.93646F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0732096E9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.1464192E9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.1464192E9F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(321.9391F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(644.8782F, wall1.getYEnd(), 0.01F);
      assertEquals(2.1464192E9F, wall1.getLength(), 0.01F);
      assertEquals(2.1464192E9F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNotNull(wall2);
      
      wall2.setLeftSideShininess(53);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(53.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Float float1 = wall2.getHeight();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1170.024F), (float)float1, 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(53.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(float1);
      
      Wall wall3 = wall2.clone();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(53.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-330.618F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-584.512F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(53.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-330.618F), wall3.getThickness(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall3.getHeight(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(1217.0735F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotNull(wall3);
      
      wall3.setHeight(float1);
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(53.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-330.618F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-584.512F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(53.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-330.618F), wall3.getThickness(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall3.getHeight(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(1217.0735F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      
      boolean boolean0 = wall3.containsWallStartAt(2103.0288F, 2103.0288F, 1.0F);
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(boolean0);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(53.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-330.618F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-584.512F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(53.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-330.618F), wall3.getThickness(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-164.809F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall3.getHeight(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(1217.0735F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      
      wall0.setYEnd((-1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(0.27609372F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2146419171, (int)wall0.getLeftSideColor());
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2.5911767F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(286.7F, wall0.getThickness(), 0.01F);
      assertEquals(2.5911767F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.7760937F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("CCqYJZ9,RfI\"s<lI]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.CCqYJZ9,RfI\"s<lI]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall((-2943.8643F), (-2943.8643F), (-2943.8643F), (-2943.8643F), (-2943.8643F));
      assertEquals((-2943.8643F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2943.8643F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2943.8643F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2943.8643F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2943.8643F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2943.8643F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2943.8643F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeightAtEnd();
      assertEquals((-2943.8643F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2943.8643F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2943.8643F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2943.8643F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2943.8643F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2943.8643F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2943.8643F), wall0.getXStart(), 0.01F);
      assertNull(float0);
      
      wall0.setArcExtent((Float) null);
      assertEquals((-2943.8643F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2943.8643F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2943.8643F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2943.8643F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2943.8643F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2943.8643F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2943.8643F), wall0.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-2943.8643F), (-2943.8643F), (-2943.8643F));
      assertFalse(boolean0);
      assertEquals((-2943.8643F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2943.8643F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2943.8643F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2943.8643F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2943.8643F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2943.8643F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2943.8643F), wall0.getXStart(), 0.01F);
      
      wall0.setArcExtent((Float) null);
      assertEquals((-2943.8643F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2943.8643F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2943.8643F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2943.8643F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2943.8643F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2943.8643F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2943.8643F), wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall((-3653.381F), (-3653.381F), (-3653.381F), (-3653.381F), (-3653.381F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3653.381F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3653.381F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3653.381F), wall0.getYEnd(), 0.01F);
      assertEquals((-3653.381F), wall0.getThickness(), 0.01F);
      assertEquals((-3653.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-3653.381F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3653.381F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness((-3653.381F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3653.381F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3653.381F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3653.381F), wall0.getYEnd(), 0.01F);
      assertEquals((-3653.381F), wall0.getThickness(), 0.01F);
      assertEquals((-3653.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-3653.381F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3653.381F), wall0.getYStart(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3653.381F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3653.381F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3653.381F), wall0.getYEnd(), 0.01F);
      assertEquals((-3653.381F), wall0.getThickness(), 0.01F);
      assertEquals((-3653.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-3653.381F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3653.381F), wall0.getYStart(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall((-319.24493F), 1.0F, (-319.24493F), (-2735.76F), 0.1F);
      assertEquals((-319.24493F), wall0.getXEnd(), 0.01F);
      assertEquals(2736.76F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2735.76F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-319.24493F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1367.38F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-319.24493F), wall0.getXStart(), 0.01F);
      assertEquals(2736.76F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(243);
      assertEquals(243, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("Y_END");
      assertFalse(boolean0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-319.24493F), wall0.getXEnd(), 0.01F);
      assertEquals(2736.76F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2735.76F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(243, (int)wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-319.24493F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1367.38F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-319.24493F), wall0.getXStart(), 0.01F);
      assertEquals(2736.76F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall(2559.9683F, (-3652.0894F), (-3652.0894F), 2559.9683F, 2559.9683F, (-3652.0894F));
      assertEquals(8785.176F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(2559.9683F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-546.06055F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-546.06055F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.9683F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8785.176F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2559.9683F, wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(2559.9683F);
      assertEquals(2559.9683F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      int int0 = Float.compare(0.0F, (-2807.65F));
      assertEquals(1, int0);
      
      wall0.setArcExtent((Float) (-2807.65F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6706.9385F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.739548E7F, wall0.getLength(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(2559.9683F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2559.9683F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8785.176F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2807.65F), wall0.getArcExtent(), 0.01F);
      assertEquals((-6706.9385F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.9683F, wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6706.9385F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.739548E7F, wall0.getLength(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(2559.9683F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2559.9683F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8785.176F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2807.65F), wall0.getArcExtent(), 0.01F);
      assertEquals((-6706.9385F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.9683F, wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      
      // Undeclared exception!
      wall0.containsWallEndAt((-1.0F), 2634.57F, (-3652.0894F));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall((-2735.76F), 1.0F, (-2735.76F), 0.1F, 0.1F, 0.1F);
      assertEquals(0.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2735.76F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2735.76F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.9F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(243);
      assertEquals(243, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Float.compare(1650.3368F, 1650.3368F);
      assertEquals(0, int0);
      
      int int1 = Float.compare((-1278.7562F), 3390.2854F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = Float.compare(0.0F, (-671.6917F));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      int int3 = Float.compare(0, 926.662F);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      int int4 = Float.compare(0.0F, 101.4F);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals((-1), int4);
      
      wall0.setHeightAtEnd((Float) 101.4F);
      assertEquals(0.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2735.76F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXEnd(), 0.01F);
      assertEquals(0.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(101.4F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2735.76F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.9F, wall0.getLength(), 0.01F);
      
      Integer integer1 = wall0.getRightSideColor();
      assertEquals(0.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2735.76F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXEnd(), 0.01F);
      assertEquals(0.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(101.4F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2735.76F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.9F, wall0.getLength(), 0.01F);
      assertNull(integer1);
      
      float float0 = wall0.getLength();
      assertEquals(0.9F, float0, 0.01F);
      assertEquals(0.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2735.76F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXEnd(), 0.01F);
      assertEquals(0.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(101.4F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2735.76F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.9F, wall0.getLength(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2735.76F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXEnd(), 0.01F);
      assertEquals(0.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(101.4F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2735.76F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.9F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.55F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-2735.76F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2735.76F), wall1.getXStart(), 0.01F);
      assertEquals(101.4F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.9F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2735.76F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      wall1.move(243, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2735.76F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXEnd(), 0.01F);
      assertEquals(0.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(101.4F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2735.76F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.9F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.01F, wall1.getYStart(), 0.01F);
      assertEquals((-2492.76F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.11F, wall1.getYEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-2492.76F), wall1.getXEnd(), 0.01F);
      assertEquals(0.56F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(101.4F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.9F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2492.76F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Integer integer2 = Integer.valueOf(1517);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int4));
      assertFalse(integer2.equals((Object)int3));
      assertEquals(1517, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf(0);
      assertFalse(integer3.equals((Object)int4));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int3));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int1));
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      
      wall0.setLeftSideColor(integer3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer3.equals((Object)int4));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int3));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int1));
      assertEquals(0.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2735.76F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXEnd(), 0.01F);
      assertEquals(0.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(101.4F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2735.76F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.9F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Level level0 = wall1.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2735.76F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXEnd(), 0.01F);
      assertEquals(0.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(101.4F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2735.76F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.9F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.01F, wall1.getYStart(), 0.01F);
      assertEquals((-2492.76F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.11F, wall1.getYEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-2492.76F), wall1.getXEnd(), 0.01F);
      assertEquals(0.56F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(101.4F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.9F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2492.76F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(level0);
      
      wall1.setLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2735.76F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2735.76F), wall0.getXEnd(), 0.01F);
      assertEquals(0.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(101.4F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2735.76F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.9F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.01F, wall1.getYStart(), 0.01F);
      assertEquals((-2492.76F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.11F, wall1.getYEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-2492.76F), wall1.getXEnd(), 0.01F);
      assertEquals(0.56F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(101.4F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.9F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2492.76F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall(1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.5521874F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.5521874F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      
      wall0.setXEnd((-1204.0F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-601.2239F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1205.5522F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1205.5522F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(1796.7067F, 512.0F, 512.0F, (-1242.3F));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-601.2239F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1205.5522F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1205.5522F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float(1726.1);
      assertEquals(1726.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-601.2239F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1205.5522F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1205.5522F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1170.024F), (float)float1, 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotNull(float1);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      
      wall2.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall0.setWallAtEnd(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-601.2239F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1205.5522F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1205.5522F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      boolean boolean3 = wall0.containsWallStartAt((-779.6F), (-1242.3F), (-1274.5605F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-601.2239F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1205.5522F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1205.5522F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Wall wall3 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-601.2239F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1205.5522F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1205.5522F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      assertEquals((-1170.024F), wall3.getHeight(), 0.01F);
      assertEquals((-164.809F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-584.512F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall3.getXEnd(), 0.01F);
      assertEquals((-330.618F), wall3.getThickness(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-1170.024F), wall3.getYEnd(), 0.01F);
      assertEquals(1217.0735F, wall3.getLength(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotNull(wall3);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall(1.552F, 2.0F, 1.552F, 2.0F, 2.0F, 2.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.552F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.552F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.552F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(2146419171);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2146419171, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(2146419171);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2146419171, (int)integer2);
      assertNotNull(integer2);
      
      wall0.setLeftSideColor(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2146419171, (int)wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.552F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.552F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.552F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float0 = new Float((float) 2146419171);
      assertEquals(2.1464192E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(2.1464192E9F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2146419171, (int)wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.552F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.552F, wall0.getXStart(), 0.01F);
      assertEquals(1.552F, wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(2146419171, 2.0F, (-1164.0059F), 0.0F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(2.1464192E9F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2146419171, (int)wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.552F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.552F, wall0.getXStart(), 0.01F);
      assertEquals(1.552F, wall0.getXArcCircleCenter(), 0.01F);
      
      Float float1 = new Float((double) 2146419171);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2.1464192E9F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(2.1464192E9F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2146419171, (int)wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.552F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.552F, wall0.getXStart(), 0.01F);
      assertEquals(1.552F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(2.1464192E9F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2146419171, (int)wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.552F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.552F, wall0.getXStart(), 0.01F);
      assertEquals(1.552F, wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean2 = wall0.containsWallStartAt(0.0F, (-1), (-1164.0059F));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(2.1464192E9F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2146419171, (int)wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.552F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.552F, wall0.getXStart(), 0.01F);
      assertEquals(1.552F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall((-8.0F), (-8.0F), (-904.0F), (-8.0F), (-8.0F));
      assertEquals((-8.0F), wall0.getThickness(), 0.01F);
      assertEquals((-8.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-8.0F), wall0.getYStart(), 0.01F);
      assertEquals((-456.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(896.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-8.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(896.0F, wall0.getLength(), 0.01F);
      assertEquals((-8.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-904.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1.0F, (-732.4313F), (-8.0F), 2611.0F, 3651.36F, 1762.7F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-8.0F), wall1.getXEnd(), 0.01F);
      assertEquals(3343.4434F, wall1.getLength(), 0.01F);
      assertEquals(2611.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(939.28436F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-732.4313F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3343.4434F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1762.7F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3651.36F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-8.0F), wall0.getThickness(), 0.01F);
      assertEquals((-8.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-8.0F), wall0.getYStart(), 0.01F);
      assertEquals((-456.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(896.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-8.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(896.0F, wall0.getLength(), 0.01F);
      assertEquals((-8.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-904.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertNull(float0);
      
      Wall wall2 = wall0.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-8.0F), wall0.getThickness(), 0.01F);
      assertEquals((-8.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-8.0F), wall0.getYStart(), 0.01F);
      assertEquals((-456.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(896.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-8.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(896.0F, wall0.getLength(), 0.01F);
      assertEquals((-8.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-904.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-8.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-904.0F), wall2.getXEnd(), 0.01F);
      assertEquals(896.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-8.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(896.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-8.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-8.0F), wall2.getYStart(), 0.01F);
      assertEquals((-456.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-8.0F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals((-8.0F), wall0.getThickness(), 0.01F);
      assertEquals((-8.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-8.0F), wall0.getYStart(), 0.01F);
      assertEquals((-456.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(896.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-8.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(896.0F, wall0.getLength(), 0.01F);
      assertEquals((-8.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-904.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      wall2.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-8.0F), wall0.getThickness(), 0.01F);
      assertEquals((-8.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-8.0F), wall0.getYStart(), 0.01F);
      assertEquals((-456.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(896.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-8.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(896.0F, wall0.getLength(), 0.01F);
      assertEquals((-8.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-904.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-8.0F), wall1.getXEnd(), 0.01F);
      assertEquals(3343.4434F, wall1.getLength(), 0.01F);
      assertEquals(2611.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(939.28436F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-732.4313F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3343.4434F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1762.7F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3651.36F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-8.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-904.0F), wall2.getXEnd(), 0.01F);
      assertEquals(896.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-8.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(896.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-8.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-8.0F), wall2.getYStart(), 0.01F);
      assertEquals((-456.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-8.0F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(boolean0);
      assertEquals((-8.0F), wall1.getXEnd(), 0.01F);
      assertEquals(3343.4434F, wall1.getLength(), 0.01F);
      assertEquals(2611.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(939.28436F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-732.4313F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3343.4434F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1762.7F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3651.36F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      wall1.setYEnd(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-8.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-732.4313F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(733.4865F, wall1.getLength(), 0.01F);
      assertEquals((-3.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-365.71564F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(733.4865F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1762.7F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3651.36F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-1620.5278F), (-1620.5278F), 1.0F, (-2068.0F), (-2068.0F));
      assertNull(wall0.getHeight());
      assertEquals((-1620.5278F), wall0.getXStart(), 0.01F);
      assertEquals((-1620.5278F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-809.7639F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1682.1367F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1682.1367F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1844.2639F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2068.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2068.0F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getThickness();
      assertEquals((-2068.0F), float0, 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1620.5278F), wall0.getXStart(), 0.01F);
      assertEquals((-1620.5278F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-809.7639F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1682.1367F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1682.1367F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1844.2639F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2068.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2068.0F), wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeight());
      assertEquals((-1620.5278F), wall0.getXStart(), 0.01F);
      assertEquals((-1620.5278F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-809.7639F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1682.1367F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1682.1367F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1844.2639F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2068.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2068.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2068.0F), wall1.getThickness(), 0.01F);
      assertEquals(1682.1367F, wall1.getLength(), 0.01F);
      assertEquals(1682.1367F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2068.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-809.7639F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1620.5278F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1844.2639F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1620.5278F), wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      Level level0 = new Level("0]@>7S]el\"", 0.01F, 0.01F, 0.01F);
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals("0]@>7S]el\"", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Wall wall2 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertNotNull(wall2);
      
      Float float1 = new Float(0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.01F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Wall wall3 = wall2.clone();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals((-584.512F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall3.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1170.024F), wall3.getYEnd(), 0.01F);
      assertEquals((-1170.024F), wall3.getHeight(), 0.01F);
      assertEquals(1217.0735F, wall3.getLength(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-330.618F), wall3.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotNull(wall3);
      
      wall3.setHeight(float1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals((-584.512F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall3.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1170.024F), wall3.getYEnd(), 0.01F);
      assertEquals(1217.0735F, wall3.getLength(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-330.618F), wall3.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      Wall wall4 = wall3.clone();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals((-584.512F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall3.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1170.024F), wall3.getYEnd(), 0.01F);
      assertEquals(1217.0735F, wall3.getLength(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-330.618F), wall3.getThickness(), 0.01F);
      assertEquals((-584.512F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall4.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall4.getLength(), 0.01F);
      assertEquals((-1170.024F), wall4.getYEnd(), 0.01F);
      assertEquals((-164.809F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall4.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall4.getHeight(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getLeftSideColor());
      assertFalse(wall4.isTrapezoidal());
      assertEquals((-330.618F), wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall4.getXStart(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall4);
      assertNotSame(wall3, wall2);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall3);
      assertNotNull(wall4);
      
      wall0.setHeight(float1);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals((-1620.5278F), wall0.getXStart(), 0.01F);
      assertEquals((-1620.5278F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-809.7639F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1682.1367F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1682.1367F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1844.2639F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2068.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2068.0F), wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall4);
      assertNotSame(wall0, wall2);
      
      wall2.setXStart((-611.9911F));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertEquals((-611.9911F), wall2.getXStart(), 0.01F);
      assertEquals((-471.30457F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1204.3539F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1204.3539F, wall2.getLength(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      
      Wall wall5 = wall4.clone();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall4));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall5.equals((Object)wall4));
      assertFalse(wall5.equals((Object)wall0));
      assertFalse(wall5.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall3));
      assertFalse(wall5.equals((Object)wall2));
      assertEquals((-611.9911F), wall2.getXStart(), 0.01F);
      assertEquals((-471.30457F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1204.3539F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1204.3539F, wall2.getLength(), 0.01F);
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals((-584.512F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall3.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1170.024F), wall3.getYEnd(), 0.01F);
      assertEquals(1217.0735F, wall3.getLength(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-330.618F), wall3.getThickness(), 0.01F);
      assertEquals((-584.512F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall4.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall4.getLength(), 0.01F);
      assertEquals((-1170.024F), wall4.getYEnd(), 0.01F);
      assertEquals((-164.809F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall4.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall4.getHeight(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getLeftSideColor());
      assertFalse(wall4.isTrapezoidal());
      assertEquals((-330.618F), wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall4.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall5.getYEnd(), 0.01F);
      assertNull(wall5.getLeftSideColor());
      assertEquals((-584.512F), wall5.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall5.getXEnd(), 0.01F);
      assertEquals(0.01F, wall5.getHeight(), 0.01F);
      assertEquals(0.0F, wall5.getRightSideShininess(), 0.01F);
      assertNull(wall5.getHeightAtEnd());
      assertEquals(1217.0735F, wall5.getLength(), 0.01F);
      assertFalse(wall5.isTrapezoidal());
      assertEquals((-330.618F), wall5.getThickness(), 0.01F);
      assertEquals(1.0F, wall5.getXStart(), 0.01F);
      assertEquals(1.0F, wall5.getYStart(), 0.01F);
      assertEquals((-164.809F), wall5.getXArcCircleCenter(), 0.01F);
      assertNull(wall5.getArcExtent());
      assertNull(wall5.getRightSideColor());
      assertEquals(1217.0735F, wall5.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall5);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall4);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall5);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall5);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall3);
      assertNotSame(wall5, wall4);
      assertNotSame(wall5, wall0);
      assertNotSame(wall5, wall1);
      assertNotSame(wall5, wall3);
      assertNotSame(wall5, wall2);
      assertNotNull(wall5);
      
      wall2.setYEnd((-748.084F));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall5));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertEquals((-611.9911F), wall2.getXStart(), 0.01F);
      assertEquals((-471.30457F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(800.186F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-373.542F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals(800.186F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals((-748.084F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall5);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      
      float float2 = wall5.getXStart();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall5));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall4));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall5));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall5));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall5.equals((Object)wall4));
      assertFalse(wall5.equals((Object)wall0));
      assertFalse(wall5.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall3));
      assertFalse(wall5.equals((Object)wall2));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(1.0F, float2, 0.01F);
      assertEquals((-611.9911F), wall2.getXStart(), 0.01F);
      assertEquals((-471.30457F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(800.186F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-373.542F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals(800.186F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals((-748.084F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals((-584.512F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall3.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1170.024F), wall3.getYEnd(), 0.01F);
      assertEquals(1217.0735F, wall3.getLength(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-330.618F), wall3.getThickness(), 0.01F);
      assertEquals((-584.512F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall4.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall4.getLength(), 0.01F);
      assertEquals((-1170.024F), wall4.getYEnd(), 0.01F);
      assertEquals((-164.809F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall4.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall4.getHeight(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getLeftSideColor());
      assertFalse(wall4.isTrapezoidal());
      assertEquals((-330.618F), wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall4.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall5.getYEnd(), 0.01F);
      assertNull(wall5.getLeftSideColor());
      assertEquals((-584.512F), wall5.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall5.getXEnd(), 0.01F);
      assertEquals(0.01F, wall5.getHeight(), 0.01F);
      assertEquals(0.0F, wall5.getRightSideShininess(), 0.01F);
      assertNull(wall5.getHeightAtEnd());
      assertEquals(1217.0735F, wall5.getLength(), 0.01F);
      assertFalse(wall5.isTrapezoidal());
      assertEquals((-330.618F), wall5.getThickness(), 0.01F);
      assertEquals(1.0F, wall5.getXStart(), 0.01F);
      assertEquals(1.0F, wall5.getYStart(), 0.01F);
      assertEquals((-164.809F), wall5.getXArcCircleCenter(), 0.01F);
      assertNull(wall5.getArcExtent());
      assertNull(wall5.getRightSideColor());
      assertEquals(1217.0735F, wall5.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall5);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall4);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall5);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall5);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall3);
      assertNotSame(wall5, wall4);
      assertNotSame(wall5, wall0);
      assertNotSame(wall5, wall1);
      assertNotSame(wall5, wall3);
      assertNotSame(wall5, wall2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall((-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F), (-3652.1707F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.1707F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3652.1707F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.1707F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.1707F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.1707F), wall0.getXEnd(), 0.01F);
      assertEquals((-3652.1707F), wall0.getThickness(), 0.01F);
      assertEquals((-3652.1707F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.1707F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-3652.1707F), (float)float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.1707F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3652.1707F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.1707F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.1707F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.1707F), wall0.getXEnd(), 0.01F);
      assertEquals((-3652.1707F), wall0.getThickness(), 0.01F);
      assertEquals((-3652.1707F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.1707F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-3652.1707F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-3652.1707F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = Float.valueOf(0.0F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.1707F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3652.1707F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.1707F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.1707F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.1707F), wall0.getXEnd(), 0.01F);
      assertEquals((-3652.1707F), wall0.getThickness(), 0.01F);
      assertEquals((-3652.1707F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.1707F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setHeight((Float) null);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.1707F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals((-3652.1707F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.1707F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.1707F), wall0.getXEnd(), 0.01F);
      assertEquals((-3652.1707F), wall0.getThickness(), 0.01F);
      assertEquals((-3652.1707F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.1707F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.1707F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals((-3652.1707F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.1707F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.1707F), wall0.getXEnd(), 0.01F);
      assertEquals((-3652.1707F), wall0.getThickness(), 0.01F);
      assertEquals((-3652.1707F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.1707F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall(1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F, 1.5521874F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(1.5521874F, 1.5521874F, 1.5521874F);
      assertTrue(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-2619.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2619.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2619.0F), float2, 0.01F);
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits(0.0F);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = Float.floatToIntBits(0.0F);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      wall0.setArcExtent((Float) 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      boolean boolean2 = wall0.containsWallEndAt(0, 0, 1384.0F);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Float float3 = new Float(2.0226054402883165E-5);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(2.0226054E-5F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      float float4 = wall0.getLength();
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.5521874F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.5521874F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5521874F, wall0.getXEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getYEnd(), 0.01F);
      assertEquals(1.5521874F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.5521874F, wall0.getYStart(), 0.01F);
      assertEquals(1.5521874F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall(17.154688F, (-1.0F), (-2991.63F), (-1125.7776F), 0.0F, (-1.0F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1487.2375F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(17.154688F, wall0.getXStart(), 0.01F);
      assertEquals((-1125.7776F), wall0.getYEnd(), 0.01F);
      assertEquals(3212.1501F, wall0.getLength(), 0.01F);
      assertEquals(3212.1501F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2991.63F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-563.3888F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      float float0 = wall0.getXEnd();
      assertEquals((-2991.63F), float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1487.2375F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(17.154688F, wall0.getXStart(), 0.01F);
      assertEquals((-1125.7776F), wall0.getYEnd(), 0.01F);
      assertEquals(3212.1501F, wall0.getLength(), 0.01F);
      assertEquals(3212.1501F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2991.63F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-563.3888F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1487.2375F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(17.154688F, wall0.getXStart(), 0.01F);
      assertEquals((-1125.7776F), wall0.getYEnd(), 0.01F);
      assertEquals(3212.1501F, wall0.getLength(), 0.01F);
      assertEquals(3212.1501F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2991.63F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-563.3888F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setThickness(612.58307F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1487.2375F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(17.154688F, wall0.getXStart(), 0.01F);
      assertEquals((-1125.7776F), wall0.getYEnd(), 0.01F);
      assertEquals(3212.1501F, wall0.getLength(), 0.01F);
      assertEquals(3212.1501F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(612.58307F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2991.63F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-563.3888F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall((-19.49F), 0.1F, 0.1F, (-19.49F), 0.1F);
      assertEquals((-9.695F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-19.49F), wall0.getYEnd(), 0.01F);
      assertEquals(27.704443F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-9.695F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(27.704443F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.49F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(0.1F, 0.1F);
      assertEquals((-9.594999F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.39F), wall0.getXStart(), 0.01F);
      assertEquals(27.704443F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(27.704443F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2F, wall0.getXEnd(), 0.01F);
      assertEquals((-9.594999F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.39F), wall0.getYEnd(), 0.01F);
      
      wall0.setXEnd(0.1F);
      assertEquals((-19.39F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(27.633823F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-9.594999F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.39F), wall0.getYEnd(), 0.01F);
      assertEquals((-9.6449995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(27.633823F, wall0.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-19.39F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(27.633823F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-9.594999F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.39F), wall0.getYEnd(), 0.01F);
      assertEquals((-9.6449995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(27.633823F, wall0.getLength(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt((-19.49F), 0.1F, (-19.49F));
      assertFalse(boolean0);
      assertEquals((-19.39F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(27.633823F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-9.594999F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.39F), wall0.getYEnd(), 0.01F);
      assertEquals((-9.6449995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(27.633823F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(45);
      assertEquals(45, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(45, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      
      wall0.setRightSideColor(integer0);
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(45, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall((-3652.698F), (-3652.698F), (-3652.698F), (-3652.698F), (-3652.698F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.698F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.698F), wall0.getYStart(), 0.01F);
      assertEquals((-3652.698F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.698F), wall0.getXEnd(), 0.01F);
      assertEquals((-3652.698F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.698F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.698F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Level level0 = new Level("A Zgl>\"ReEA?n", (-3652.698F), (-3652.698F), (-3652.698F));
      assertEquals("A Zgl>\"ReEA?n", level0.getName());
      assertEquals((-3652.698F), level0.getFloorThickness(), 0.01F);
      assertEquals((-3652.698F), level0.getElevation(), 0.01F);
      assertEquals((-3652.698F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.698F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.698F), wall0.getYStart(), 0.01F);
      assertEquals((-3652.698F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.698F), wall0.getXEnd(), 0.01F);
      assertEquals((-3652.698F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.698F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.698F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals("A Zgl>\"ReEA?n", level0.getName());
      assertEquals((-3652.698F), level0.getFloorThickness(), 0.01F);
      assertEquals((-3652.698F), level0.getElevation(), 0.01F);
      assertEquals((-3652.698F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1023.0F), (-1023.0F), 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-511.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1023.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1446.7405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-511.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1023.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1446.7405F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXStart(0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-511.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1023.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1446.7405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-511.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1023.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1446.7405F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-511.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1023.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1446.7405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-511.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1023.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1446.7405F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(textureImage0);
      
      float float0 = wall0.getXEnd();
      assertEquals((-1023.0F), float0, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-511.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1023.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1446.7405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-511.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1023.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1446.7405F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1170.024F), (float)float0, 0.01F);
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNotNull(float0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setYEnd((-1170.024F));
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall(0.0F, (-1897.098F), (-684.68F), 0.0F, 9.052765F, (-684.68F));
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1897.098F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-342.34F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2016.8707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2016.8707F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(9.052765F, wall0.getThickness(), 0.01F);
      assertEquals((-948.549F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-684.68F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-684.68F), wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1897.098F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-342.34F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2016.8707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2016.8707F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(9.052765F, wall0.getThickness(), 0.01F);
      assertEquals((-948.549F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-684.68F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-684.68F), wall0.getHeight(), 0.01F);
      assertNotNull(floatArray0);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1897.098F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-342.34F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2016.8707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2016.8707F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(9.052765F, wall0.getThickness(), 0.01F);
      assertEquals((-948.549F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-684.68F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-684.68F), wall0.getHeight(), 0.01F);
      assertNull(level0);
      
      wall0.setLevel((Level) null);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1897.098F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-342.34F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2016.8707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2016.8707F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(9.052765F, wall0.getThickness(), 0.01F);
      assertEquals((-948.549F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-684.68F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-684.68F), wall0.getHeight(), 0.01F);
      
      float float0 = wall0.getYEnd();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1897.098F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-342.34F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2016.8707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2016.8707F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(9.052765F, wall0.getThickness(), 0.01F);
      assertEquals((-948.549F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-684.68F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-684.68F), wall0.getHeight(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = null;
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1170.024F), (float)float0, 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotNull(float0);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      
      wall2.setHeight(float0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall0.setWallAtEnd(wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Float float1 = new Float(0.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      wall2.setArcExtent((Float) 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(9.562137E18F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.70786652E18F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall0.setHeight(float0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      boolean boolean0 = wall2.isTrapezoidal();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(boolean0);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(9.562137E18F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.70786652E18F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall0.move((-1170.024F), (-330.618F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-4822.1133F), wall0.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals((-3982.7073F), wall0.getYEnd(), 0.01F);
      assertEquals((-4822.1133F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4822.1133F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3982.7073F), wall0.getYStart(), 0.01F);
      assertEquals((-3982.7073F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-4822.1133F), wall0.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals((-3982.7073F), wall0.getYEnd(), 0.01F);
      assertEquals((-4822.1133F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4822.1133F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3982.7073F), wall0.getYStart(), 0.01F);
      assertEquals((-3982.7073F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      Integer integer0 = Integer.valueOf(45);
      assertEquals(45, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(65);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(65, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(65);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(65, (int)integer2);
      assertNotNull(integer2);
      
      wall2.setLeftSideColor((Integer) null);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(9.562137E18F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.70786652E18F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-4822.1133F), wall0.getXStart(), 0.01F);
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertEquals((-3982.7073F), wall0.getYEnd(), 0.01F);
      assertEquals((-4822.1133F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4822.1133F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3982.7073F), wall0.getYStart(), 0.01F);
      assertEquals((-3982.7073F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess((-4267.71F));
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4267.71F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals((-3652.0894F), float0, 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4267.71F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-330.618F), (-1170.024F), (-330.618F), (-1170.024F));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1170.024F), (float)float0, 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(float0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      wall1.setHeight(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("~#&b(*TGgCLlPjbDtI", propertyChangeListener0);
      assertEquals("~#&b(*TGgCLlPjbDtI", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals("~#&b(*TGgCLlPjbDtI", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.intersectsRectangle(1.0F, 0.0F, 1.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      
      wall2.setLeftSideShininess(4917.52F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(4917.52F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float float1 = wall2.getRightSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(4917.52F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float float2 = wall1.getRightSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      float float3 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals((-584.512F), float3, 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Integer integer0 = Integer.valueOf(1152);
      assertEquals(1152, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(15);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(15, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(15);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(15, (int)integer2);
      assertNotNull(integer2);
      
      wall0.setLeftSideColor(integer2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(15, (int)wall0.getLeftSideColor());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      boolean boolean1 = wall1.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertTrue(boolean1 == boolean0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(15, (int)wall0.getLeftSideColor());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      float float4 = wall2.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(4917.52F, float4, 0.01F);
      assertEquals((-330.618F), wall0.getXEnd(), 0.01F);
      assertEquals(1217.0735F, wall0.getLength(), 0.01F);
      assertEquals((-584.512F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-164.809F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(15, (int)wall0.getLeftSideColor());
      assertEquals((-330.618F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1170.024F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1170.024F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1217.0735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1217.0735F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1170.024F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1217.0735F, wall1.getLength(), 0.01F);
      assertEquals((-330.618F), wall1.getThickness(), 0.01F);
      assertEquals((-1170.024F), wall1.getHeight(), 0.01F);
      assertEquals((-584.512F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-330.618F), wall1.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1170.024F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-584.512F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-330.618F), wall2.getXEnd(), 0.01F);
      assertEquals((-164.809F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1217.0735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1170.024F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-330.618F), wall2.getThickness(), 0.01F);
      assertEquals(1217.0735F, wall2.getLength(), 0.01F);
      assertEquals(4917.52F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-367.2F), (-1.0F), 1733.695F);
      assertEquals(3284.8894F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertEquals(3284.8894F, wall0.getLength(), 0.01F);
      assertEquals((-2009.6447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1733.695F, wall0.getHeight(), 0.01F);
      assertEquals((-367.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(3284.8894F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertEquals(3284.8894F, wall0.getLength(), 0.01F);
      assertEquals((-2009.6447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1733.695F, wall0.getHeight(), 0.01F);
      assertEquals((-367.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals((-3652.0894F), float0, 0.01F);
      assertEquals(3284.8894F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertEquals(3284.8894F, wall0.getLength(), 0.01F);
      assertEquals((-2009.6447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1733.695F, wall0.getHeight(), 0.01F);
      assertEquals((-367.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(3284.8894F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertEquals(3284.8894F, wall0.getLength(), 0.01F);
      assertEquals((-2009.6447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1733.695F, wall0.getHeight(), 0.01F);
      assertEquals((-367.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall1);
      
      float float1 = wall0.getYArcCircleCenter();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-2009.6447F), float1, 0.01F);
      assertEquals(3284.8894F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertEquals(3284.8894F, wall0.getLength(), 0.01F);
      assertEquals((-2009.6447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1733.695F, wall0.getHeight(), 0.01F);
      assertEquals((-367.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      float float2 = wall0.getXStart();
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals((-3652.0894F), float2, 0.01F);
      assertEquals(3284.8894F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertEquals(3284.8894F, wall0.getLength(), 0.01F);
      assertEquals((-2009.6447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1733.695F, wall0.getHeight(), 0.01F);
      assertEquals((-367.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("eazWXF", propertyChangeListener0);
      assertEquals("eazWXF", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals("eazWXF", propertyChangeListenerProxy0.getPropertyName());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall((-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F), (-3652.0894F));
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd((-3652.0894F));
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals((-3652.0894F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3652.0894F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3652.0894F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3652.0894F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3652.0894F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3652.0894F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3652.0894F), wall0.getYEnd(), 0.01F);
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall((-1316.6854F), (-1316.6854F), 0.0F, 0.0F, (-211.96962F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-211.96962F), wall0.getThickness(), 0.01F);
      assertEquals((-1316.6854F), wall0.getXStart(), 0.01F);
      assertEquals((-658.3427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1862.0743F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1862.0743F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1316.6854F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-658.3427F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.move(0.0F, 1.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-211.96962F), wall0.getThickness(), 0.01F);
      assertEquals((-1316.6854F), wall0.getXStart(), 0.01F);
      assertEquals((-658.3427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1862.0743F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1862.0743F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1315.6854F), wall0.getYStart(), 0.01F);
      assertEquals((-657.3427F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-211.96962F), wall0.getThickness(), 0.01F);
      assertEquals((-1316.6854F), wall0.getXStart(), 0.01F);
      assertEquals((-658.3427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1862.0743F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1862.0743F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1315.6854F), wall0.getYStart(), 0.01F);
      assertEquals((-657.3427F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      Wall wall1 = new Wall((-3286.5894F), 3327.29F, (-748.084F), (-1316.6854F), 0.0F, 2550.645F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1005.3023F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5292.4966F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2550.645F, wall1.getHeight(), 0.01F);
      assertEquals(3327.29F, wall1.getYStart(), 0.01F);
      assertEquals(5292.4966F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2017.3367F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1316.6854F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-748.084F), wall1.getXEnd(), 0.01F);
      assertEquals((-3286.5894F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      
      Wall wall2 = new Wall(2108.27F, 2550.645F, (-1.0F), 594.3F, (-211.96962F), 594.3F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-211.96962F), wall2.getThickness(), 0.01F);
      assertEquals(2108.27F, wall2.getXStart(), 0.01F);
      assertEquals(594.3F, wall2.getYEnd(), 0.01F);
      assertEquals(594.3F, wall2.getHeight(), 0.01F);
      assertEquals(2550.645F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2876.857F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2876.857F, wall2.getLength(), 0.01F);
      assertEquals(1572.4725F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1053.635F, wall2.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      
      wall2.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-211.96962F), wall0.getThickness(), 0.01F);
      assertEquals((-1316.6854F), wall0.getXStart(), 0.01F);
      assertEquals((-658.3427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1862.0743F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1862.0743F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1315.6854F), wall0.getYStart(), 0.01F);
      assertEquals((-657.3427F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-211.96962F), wall2.getThickness(), 0.01F);
      assertEquals(2108.27F, wall2.getXStart(), 0.01F);
      assertEquals(594.3F, wall2.getYEnd(), 0.01F);
      assertEquals(594.3F, wall2.getHeight(), 0.01F);
      assertEquals(2550.645F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2876.857F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2876.857F, wall2.getLength(), 0.01F);
      assertEquals(1572.4725F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1053.635F, wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setWallAtStart(wall1);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(1005.3023F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5292.4966F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2550.645F, wall1.getHeight(), 0.01F);
      assertEquals(3327.29F, wall1.getYStart(), 0.01F);
      assertEquals(5292.4966F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2017.3367F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1316.6854F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-748.084F), wall1.getXEnd(), 0.01F);
      assertEquals((-3286.5894F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-211.96962F), wall2.getThickness(), 0.01F);
      assertEquals(2108.27F, wall2.getXStart(), 0.01F);
      assertEquals(594.3F, wall2.getYEnd(), 0.01F);
      assertEquals(594.3F, wall2.getHeight(), 0.01F);
      assertEquals(2550.645F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2876.857F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2876.857F, wall2.getLength(), 0.01F);
      assertEquals(1572.4725F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1053.635F, wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Wall wall3 = wall2.getWallAtStart();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals((-211.96962F), wall2.getThickness(), 0.01F);
      assertEquals(2108.27F, wall2.getXStart(), 0.01F);
      assertEquals(594.3F, wall2.getYEnd(), 0.01F);
      assertEquals(594.3F, wall2.getHeight(), 0.01F);
      assertEquals(2550.645F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2876.857F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2876.857F, wall2.getLength(), 0.01F);
      assertEquals(1572.4725F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1053.635F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1316.6854F), wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getLeftSideColor());
      assertEquals(5292.4966F, wall3.getLength(), 0.01F);
      assertEquals((-748.084F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals((-3286.5894F), wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(5292.4966F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-2017.3367F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(3327.29F, wall3.getYStart(), 0.01F);
      assertEquals(1005.3023F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(2550.645F, wall3.getHeight(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotNull(wall3);
  }
}
