/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:27:40 GMT 2019
 */

package org.sat4j.minisat.learning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.card.MaxWatchCard;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IOrder;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.GateTranslator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActiveLearning_ESTest extends ActiveLearning_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-1808.0));
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0.95, 0.0, 391.0, 0);
      PureOrder pureOrder0 = new PureOrder(2490);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, fixedPeriodRestarts0, basicLauncher0);
      ILits iLits0 = solver0.getVocabulary();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>((-1));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      IVecInt iVecInt0 = solver1.getOutLearnt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(iLits0, iVecInt0, true, 0);
      boolean boolean0 = activeLearning0.learningCondition(maxWatchCard0);
      assertEquals((-1808.0), activeLearning0.getActivityPercent(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(0.0);
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn((DataStructureFactory) null).when(solver0).getDSFactory();
      doReturn((IOrder) null).when(solver0).getOrder();
      doReturn((SolverStats) null).when(solver0).getStats();
      doReturn((ILits) null).when(solver0).getVocabulary();
      activeLearning0.setSolver(solver0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      activeLearning0.setLimit(27);
      int int0 = activeLearning0.getLimit();
      assertEquals(27, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      activeLearning0.setLimit((-1418));
      int int0 = activeLearning0.getLimit();
      assertEquals((-1418), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(0.0);
      double double0 = activeLearning0.getActivityPercent();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      double double0 = activeLearning0.getActivityPercent();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(1);
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      // Undeclared exception!
      try { 
        activeLearning0.learningCondition(unitClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(14);
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      activeLearning0.setOrder(levelBasedVarOrderHeap0);
      // Undeclared exception!
      try { 
        activeLearning0.learningCondition(unitClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(1);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-5.3023));
      activeLearning0.setOrder(levelBasedVarOrderHeap0);
      boolean boolean0 = activeLearning0.learningCondition(unitClause0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(1);
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      activeLearning0.setOrder(levelBasedVarOrderHeap0);
      boolean boolean0 = activeLearning0.learningCondition(unitClause0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      int int0 = activeLearning0.getLimit();
      assertEquals(0, int0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      String string0 = activeLearning0.toString();
      assertEquals("Limit learning to clauses containing active literals (95.0%)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>((-2099.773943497));
      // Undeclared exception!
      try { 
        activeLearning0.setSolver((Solver<MixedDataStructureDanielWL>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-3492.69637));
      double double0 = activeLearning0.getActivityPercent();
      assertEquals((-3492.69637), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>((-1383.8842916));
      activeLearning0.setActivityPercent((-1383.8842916));
      assertEquals((-1383.8842916), activeLearning0.getActivityPercent(), 0.01);
  }
}
