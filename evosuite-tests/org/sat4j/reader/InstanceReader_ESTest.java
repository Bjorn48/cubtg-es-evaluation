/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:51:38 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Map;
import java.util.zip.ZipException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.reader.AAGReader;
import org.sat4j.reader.AIGReader;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.reader.Reader;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.encoding.Policy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstanceReader_ESTest extends InstanceReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null, false);
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, checkMUSSolutionListener0);
      AIGReader aIGReader0 = new AIGReader(maxSatDecorator0);
      InstanceReader instanceReader0 = new InstanceReader(optToSatAdapter0, aIGReader0);
      int[] intArray0 = new int[7];
      MockFile mockFile0 = new MockFile("unsat subformula: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      instanceReader0.decode(intArray0, (PrintWriter) mockPrintWriter0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams((-251), (-251), (-251), (-251));
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, arminRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(optToSatAdapter0);
      DimacsReader dimacsReader0 = new DimacsReader(minOneDecorator0);
      InstanceReader instanceReader0 = new InstanceReader(optToSatAdapter0, dimacsReader0);
      int[] intArray0 = new int[6];
      String string0 = instanceReader0.decode(intArray0);
      assertEquals("0 0 0 0 0 0 0", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EZCNF");
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      InstanceReader instanceReader0 = new InstanceReader(dimacsOutputSolver0);
      try { 
        instanceReader0.parseInstance("EZCNF");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorDIMACS error: wrong max number of variables
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("QH");
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      AAGReader aAGReader0 = new AAGReader(dimacsOutputSolver0);
      InstanceReader instanceReader0 = new InstanceReader(dimacsOutputSolver0, aAGReader0);
      // Undeclared exception!
      instanceReader0.parseInstance("QH");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("http/.b52.b$z2.aig.gz");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      try { 
        instanceReader0.parseInstance("http//.b52.b$z2.aig.gz");
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      // Undeclared exception!
      try { 
        instanceReader0.parseInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/VRT`4eCVMW3lgl");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "6.aag");
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      // Undeclared exception!
      try { 
        instanceReader0.parseInstance("http://VRT`4eCVMW3lglN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/.bz2.bz2");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "EZCNF");
      try { 
        instanceReader0.parseInstance("ht1tp:/.bz2.bz2");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      // Undeclared exception!
      try { 
        instanceReader0.hasAMapping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsOutputSolver0);
      InstanceReader instanceReader0 = new InstanceReader(minimal4InclusionModel0);
      // Undeclared exception!
      try { 
        instanceReader0.handleFileName((String) null, "=vpQ/%67hK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      // Undeclared exception!
      try { 
        instanceReader0.getMapping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      int[] intArray0 = new int[1];
      InstanceReader instanceReader0 = new InstanceReader(dimacsOutputSolver0);
      // Undeclared exception!
      try { 
        instanceReader0.decode(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Policy policy0 = new Policy();
      ClausalCardinalitiesDecorator<Solver<MixedDataStructureDanielWLConciseBinary>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Solver<MixedDataStructureDanielWLConciseBinary>>((Solver<MixedDataStructureDanielWLConciseBinary>) null, policy0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(clausalCardinalitiesDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      AAGReader aAGReader0 = new AAGReader(optToSatAdapter0);
      InstanceReader instanceReader0 = new InstanceReader(optToSatAdapter0, aAGReader0);
      try { 
        instanceReader0.parseInstance("~EmD7,z");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Policy policy0 = new Policy();
      ClausalCardinalitiesDecorator<Solver<MixedDataStructureDanielWLConciseBinary>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Solver<MixedDataStructureDanielWLConciseBinary>>((Solver<MixedDataStructureDanielWLConciseBinary>) null, policy0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(clausalCardinalitiesDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      AAGReader aAGReader0 = new AAGReader(optToSatAdapter0);
      InstanceReader instanceReader0 = new InstanceReader(optToSatAdapter0, aAGReader0);
      Reader reader0 = instanceReader0.handleFileName("U,4)D=_X.aag", "");
      Reader reader1 = instanceReader0.handleFileName("U,4)D=_X.aag", "y/na5");
      assertSame(reader1, reader0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      instanceReader0.handleFileName(".aig", ".aig");
      try { 
        instanceReader0.parseInstance(".aig");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams((-251), (-251), (-251), (-251));
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, arminRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(optToSatAdapter0);
      DimacsReader dimacsReader0 = new DimacsReader(minOneDecorator0);
      InstanceReader instanceReader0 = new InstanceReader(optToSatAdapter0, dimacsReader0);
      instanceReader0.handleFileName("(SIY", "EZCNF");
      Reader reader0 = instanceReader0.handleFileName("EZCNF", "EZCNF");
      assertFalse(reader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      instanceReader0.handleFileName(";B", ";B");
      try { 
        instanceReader0.parseInstance(";B");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      // Undeclared exception!
      try { 
        instanceReader0.parseInstance((InputStream) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Use a domain specific Reader (LecteurDimacs, AIGReader, etc.) for stream input 
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams((-251), (-251), (-251), (-251));
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, arminRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(optToSatAdapter0);
      DimacsReader dimacsReader0 = new DimacsReader(minOneDecorator0);
      InstanceReader instanceReader0 = new InstanceReader(optToSatAdapter0, dimacsReader0);
      boolean boolean0 = instanceReader0.hasAMapping();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Binary");
      // Undeclared exception!
      try { 
        instanceReader0.decode((int[]) null, (PrintWriter) mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams((-251), (-251), (-251), (-251));
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, arminRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(optToSatAdapter0);
      DimacsReader dimacsReader0 = new DimacsReader(minOneDecorator0);
      InstanceReader instanceReader0 = new InstanceReader(optToSatAdapter0, dimacsReader0);
      Map<Integer, String> map0 = instanceReader0.getMapping();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Policy policy0 = new Policy();
      ClausalCardinalitiesDecorator<Solver<MixedDataStructureDanielWLConciseBinary>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Solver<MixedDataStructureDanielWLConciseBinary>>((Solver<MixedDataStructureDanielWLConciseBinary>) null, policy0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(clausalCardinalitiesDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      AAGReader aAGReader0 = new AAGReader(optToSatAdapter0);
      InstanceReader instanceReader0 = new InstanceReader(optToSatAdapter0, aAGReader0);
      int[] intArray0 = new int[3];
      String string0 = instanceReader0.decode(intArray0);
      assertEquals("", string0);
  }
}
