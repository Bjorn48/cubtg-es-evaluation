/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:47:58 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.cnf.CBClause;
import org.sat4j.minisat.core.ActivityLCDS;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.LBDConflictTimer;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActivityLCDS_ESTest extends ActivityLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solver<CardinalityDataStructureYanMax> solver0 = (Solver<CardinalityDataStructureYanMax>) mock(Solver.class, new ViolatedAssumptionAnswer());
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, miniSATRestarts0);
      ConflictTimer conflictTimer0 = activityLCDS0.getTimer();
      assertSame(conflictTimer0, miniSATRestarts0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, (ConflictTimer) null);
      // Undeclared exception!
      try { 
        activityLCDS0.reduce((IVec<Constr>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.ActivityLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, lubyRestarts0);
      // Undeclared exception!
      try { 
        activityLCDS0.onConflictAnalysis((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.ActivityLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solver<CardinalityDataStructure> solver0 = (Solver<CardinalityDataStructure>) mock(Solver.class, new ViolatedAssumptionAnswer());
      NoRestarts noRestarts0 = new NoRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, noRestarts0);
      Constr constr0 = mock(Constr.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(constr0).learnt();
      activityLCDS0.onConflictAnalysis(constr0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solver<CardinalityDataStructure> solver0 = (Solver<CardinalityDataStructure>) mock(Solver.class, new ViolatedAssumptionAnswer());
      NoRestarts noRestarts0 = new NoRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, noRestarts0);
      Constr constr0 = mock(Constr.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(constr0).learnt();
      activityLCDS0.onConflictAnalysis(constr0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = (Solver<CardinalityDataStructure>) mock(Solver.class, new ViolatedAssumptionAnswer());
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, (-1158));
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, tabuListDecorator0, miniSATRestarts0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver1, lBDConflictTimer0);
      solver1.setVerbose(true);
      activityLCDS0.reduce((IVec<Constr>) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(1787);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, naturalStaticOrder0, (RestartStrategy) null);
      IVecInt iVecInt0 = VecInt.EMPTY;
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      CBClause cBClause0 = new CBClause(iVecInt0, iLits0, false);
      percentLengthLearning0.learns(cBClause0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, (ConflictTimer) null);
      Vec<Constr> vec0 = new Vec<Constr>();
      activityLCDS0.reduce(vec0);
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, naturalStaticOrder0, (RestartStrategy) null);
      IVecInt iVecInt0 = VecInt.EMPTY;
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      CBClause cBClause0 = new CBClause(iVecInt0, iLits0, true);
      percentLengthLearning0.learns(cBClause0);
      percentLengthLearning0.learns(cBClause0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, (ConflictTimer) null);
      Vec<Constr> vec0 = new Vec<Constr>();
      // Undeclared exception!
      try { 
        activityLCDS0.reduce(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solver<CardinalityDataStructure> solver0 = (Solver<CardinalityDataStructure>) mock(Solver.class, new ViolatedAssumptionAnswer());
      NoRestarts noRestarts0 = new NoRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, noRestarts0);
      activityLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = (Solver<CardinalityDataStructure>) mock(Solver.class, new ViolatedAssumptionAnswer());
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, (-1158));
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, tabuListDecorator0, miniSATRestarts0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver1, lBDConflictTimer0);
      String string0 = activityLCDS0.toString();
      assertEquals("Activity based learned constraints deletion strategy with timer check every -1158 if the learned constraints reach increasing bounds: 5000 step 1000", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-409.20166));
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams((-2293.7879051), 0);
      PureOrder pureOrder0 = new PureOrder(0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0.0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, arminRestarts0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, arminRestarts0);
      activityLCDS0.onPropagation((Constr) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = activityLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, naturalStaticOrder0, (RestartStrategy) null);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, (ConflictTimer) null);
      activityLCDS0.onClauseLearning((Constr) null);
  }
}
