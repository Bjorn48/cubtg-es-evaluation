* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Heap
* Starting Client-0
* Connecting to master process on port 18367
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Executing tests from 1 test class for carving
[MASTER] 13:30:42.728 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.core.Heap'.
[MASTER] 13:30:42.811 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.VarOrderTest'.
[MASTER] 13:30:42.850 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.core.IOrder'.
[MASTER] 13:30:42.918 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.constraints.ClausalDataStructureWL'.
[MASTER] 13:30:42.948 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.constraints.AbstractDataStructureFactory'.
[MASTER] 13:30:42.979 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.core.DataStructureFactory'.
[MASTER] 13:30:42.982 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.specs.IVec'.
[MASTER] 13:30:42.984 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.core.ILits'.
[MASTER] 13:30:42.986 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.core.Constr'.
[MASTER] 13:30:43.019 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.specs.IConstr'.
[MASTER] 13:30:43.020 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.core.Vec'.
[MASTER] 13:30:43.108 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.constraints.cnf.Lits'.
[MASTER] 13:30:43.137 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.specs.UnitPropagationListener'.
[MASTER] 13:30:43.138 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.core.Learner'.
[MASTER] 13:30:43.139 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.orders.VarOrderHeap'.
[MASTER] 13:30:43.177 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.core.IPhaseSelectionStrategy'.
[MASTER] 13:30:43.179 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy'.
[MASTER] 13:30:43.181 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy'.
[MASTER] 13:30:43.197 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.minisat.core.Propagatable'.
 - Carving test org.sat4j.minisat.VarOrderTest.testNumberOfInterestingVariables
 - Carving test org.sat4j.minisat.VarOrderTest.testVarDecayActivity
 - Carving test org.sat4j.minisat.VarOrderTest.testUpdateVar
 - Carving test org.sat4j.minisat.VarOrderTest.testUndo
 - Carving test org.sat4j.minisat.VarOrderTest.testSetVarDecay
 - Carving test org.sat4j.minisat.VarOrderTest.testNewVarint
 - Carving test org.sat4j.minisat.VarOrderTest.testGetVocabulary
[MASTER] 13:30:44.519 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.core.LiteralsUtils'.
[MASTER] 13:30:44.542 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.specs.IVecInt'.
[MASTER] 13:30:44.543 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.core.VecInt'.
[MASTER] 13:30:44.587 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.specs.IteratorInt'.
[MASTER] 13:30:44.589 [logback-1] WARN  CarvingClassLoader - Instrumenting class 'org.sat4j.core.VecInt$1'.
 - Carving test org.sat4j.minisat.VarOrderTest.testNewVar
 - Carving test org.sat4j.minisat.VarOrderTest.testSelect
 -> Carved 1 tests for class class org.sat4j.minisat.core.Heap from existing JUnit tests
 -> Carved 9 tests for class class org.sat4j.core.Vec from existing JUnit tests
 -> Carved 9 tests for class class org.sat4j.minisat.constraints.cnf.Lits from existing JUnit tests
 -> Carved 9 tests for class class org.sat4j.minisat.constraints.ClausalDataStructureWL from existing JUnit tests
 -> Carved 9 tests for class class org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy from existing JUnit tests
 -> Carved 9 tests for class class org.sat4j.minisat.orders.VarOrderHeap from existing JUnit tests
 -> Carved 1 tests for class class org.sat4j.core.LiteralsUtils from existing JUnit tests
 -> Carved 1 tests for class class org.sat4j.core.VecInt from existing JUnit tests
* Generating tests for class org.sat4j.minisat.core.Heap
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[Progress:>                             0%] [Cov:>                                  0%]* Total number of test goals for DYNAMOSA: 548
* Using seed 1550493035658
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 203 / 548
[Progress:>                             0%] [Cov:====================>              59%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.546875
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5084745762711864
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.43260188087774293
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8571428571428571
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6428571428571429
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.4745762711864407
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 303
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             0%] [Cov:=======================>           66%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 404
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.6875
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6610169491525424
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.64576802507837
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3684210526315789
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7142857142857143
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.576271186440678
[Progress:>                             0%] [Cov:========================>          69%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 504
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             0%] [Cov:=========================>         72%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 607
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.6875
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6779661016949152
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.6520376175548589
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.42105263157894735
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7857142857142857
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6271186440677966
[Progress:>                             0%] [Cov:=========================>         72%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 712
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             0%] [Cov:=========================>         73%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 818
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             0%] [Cov:==========================>        77%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 924
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             0%] [Cov:===========================>       79%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1027
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             0%] [Cov:===========================>       79%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1127
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             0%] [Cov:===========================>       79%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.711864406779661
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.6990595611285266
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5789473684210527
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6949152542372882
[Progress:>                             0%] [Cov:============================>      80%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1227
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1327
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.711864406779661
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.6990595611285266
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6949152542372882
[Progress:>                             0%] [Cov:============================>      80%][Progress:>                             0%] [Cov:============================>      80%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1428
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1531
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.711864406779661
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.6990595611285266
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6949152542372882
[Progress:>                             0%] [Cov:============================>      80%][Progress:>                             0%] [Cov:============================>      80%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1633
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.711864406779661
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.6990595611285266
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6949152542372882
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1735
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             0%] [Cov:============================>      80%][Progress:>                             0%] [Cov:============================>      80%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1840
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.711864406779661
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.6990595611285266
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6949152542372882
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1945
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             0%] [Cov:============================>      80%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2048
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             0%] [Cov:============================>      80%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2151
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             1%] [Cov:============================>      80%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.711864406779661
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.6990595611285266
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6949152542372882
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2257
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.711864406779661
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.6990595611285266
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6949152542372882
[Progress:>                             1%] [Cov:============================>      80%]* naaame: 
[Progress:>                             1%] [Cov:============================>      81%]* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2359
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7288135593220338
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7021943573667712
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.711864406779661
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2465
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             1%] [Cov:============================>      81%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2565
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7457627118644068
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7304075235109718
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7288135593220338
[Progress:>                             1%] [Cov:============================>      82%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2667
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7457627118644068
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7304075235109718
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7288135593220338
[Progress:>                             1%] [Cov:============================>      82%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2755
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             1%] [Cov:============================>      82%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7457627118644068
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7304075235109718
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7288135593220338
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7457627118644068
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7304075235109718
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7288135593220338

* Search finished after 121s and 25 generations, 20749 statements, best individual has fitness: 137.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7457627118644068
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7304075235109718
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7288135593220338
* Minimizing test suite
[MASTER] 13:33:54.523 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 64
* Number of covered goals: 54
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 75%
* Total number of goals: 59
* Number of covered goals: 44
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 13
* Number of covered goals: 13
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 77%
* Total number of goals: 319
* Number of covered goals: 246
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 63%
* Total number of goals: 19
* Number of covered goals: 12
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 59
* Number of covered goals: 43
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7457627118644068
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7304075235109718
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7288135593220338
* Generated 64 tests with total length 538
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:34:38.146 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7178833333333333% of time used, but only 7/64 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 18%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7457627118644068
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7304075235109718
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7288135593220338
* Compiling and checking tests
[MASTER] 13:35:02.751 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<1>
[MASTER] 13:35:02.751 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Heap heap0 = new Heap((VariableComparator) null);
heap0.setBounds(2084);
heap0.insert(2);
assertEquals(0, heap0.size());
assertEquals(2, heap0.getmin());


[MASTER] 13:35:06.654 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 13:35:06.656 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[8];
doubleArray0[0] = 1.0E-100;
doubleArray0[1] = (-1574.83731235395);
doubleArray0[2] = (-2202.875);
doubleArray0[3] = 0.0;
doubleArray0[4] = 0.0;
doubleArray0[5] = 0.0;
doubleArray0[6] = 0.0;
doubleArray0[7] = 0.0;
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
Heap heap0 = new Heap(activityBasedVariableComparator0);
int int0 = 0;
heap0.heapProperty(int0);
int int1 = (-3834);
heap0.heapProperty(int0);
heap0.get(int1);
int int2 = (-1187);
heap0.setBounds(int2);
heap0.heapProperty();
int int3 = 313;
heap0.increase(int3);

[MASTER] 13:35:06.975 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 13:35:06.976 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Heap heap0 = new Heap((VariableComparator) null);
heap0.setBounds(15);
heap0.insert(6);
boolean boolean0 = heap0.heapProperty();
assertTrue(heap0.empty());
assertTrue(boolean0);

heap0.insert(6);

[MASTER] 13:35:07.159 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 13:35:07.160 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Heap heap0 = new Heap((VariableComparator) null);
assertNotNull(heap0);
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());

heap0.setBounds(1);
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());

heap0.insert(0);
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());

heap0.increase(0);

[MASTER] 13:35:08.205 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 13:35:08.206 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[2];
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

int int0 = 3;
heap0.setBounds(3);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.insert(0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.increase(0);
heap0.getmin();
heap0.insert(0);
heap0.percolateDown(0);

[MASTER] 13:35:08.515 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<1>
[MASTER] 13:35:08.516 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator((double[]) null);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

heap0.insert(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

boolean boolean0 = heap0.heapProperty();
assertTrue(boolean0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

boolean boolean1 = heap0.inHeap(12);
assertFalse(boolean1);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertFalse(boolean1 == boolean0);

heap0.get(12);

[MASTER] 13:35:09.378 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 13:35:09.383 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[2];
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.setBounds(9);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.setBounds(9);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.insert(9);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

boolean boolean0 = heap0.heapProperty();
assertTrue(boolean0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

boolean boolean1 = heap0.heapProperty();
assertTrue(boolean1);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertEquals(2, doubleArray0.length);
assertTrue(boolean1 == boolean0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.increase(9);

[MASTER] 13:35:09.743 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 13:35:09.744 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[2];
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.setBounds(3);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.insert(0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.getmin();
heap0.insert(0);
heap0.increase(0);
heap0.percolateUp(3);

[MASTER] 13:35:10.584 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<1>
[MASTER] 13:35:10.594 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator((double[]) null);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

heap0.insert(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

boolean boolean0 = heap0.heapProperty();
assertTrue(boolean0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

boolean boolean1 = heap0.inHeap(12);
assertFalse(boolean1);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertFalse(boolean1 == boolean0);

heap0.setBounds((-733));

[MASTER] 13:35:11.049 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<1>
[MASTER] 13:35:11.049 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[2];
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.setBounds(3);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.insert(0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.getmin();

[MASTER] 13:35:12.670 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<1>
[MASTER] 13:35:12.671 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[2];
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.setBounds(2167);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.insert(6);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

boolean boolean0 = heap0.empty();
assertTrue(boolean0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.setBounds(0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);


[MASTER] 13:35:13.708 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<1>
[MASTER] 13:35:13.709 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[2];
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.setBounds(3);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.insert(0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.increase(0);
heap0.getmin();
heap0.insert(0);
heap0.increase(0);
heap0.percolateUp(3);

[MASTER] 13:35:14.002 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 13:35:14.002 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator((double[]) null);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());

heap0.insert(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());

boolean boolean0 = heap0.heapProperty();
assertTrue(boolean0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());


[MASTER] 13:35:17.385 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 13:35:17.393 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Heap heap0 = new Heap((VariableComparator) null);
assertNotNull(heap0);
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());

int int0 = 0;
heap0.heapProperty(int0);

[MASTER] 13:35:19.250 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 13:35:19.250 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Heap heap0 = new Heap((VariableComparator) null);
assertNotNull(heap0);
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

heap0.setBounds(1);
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

heap0.insert(0);
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

heap0.getmin();

[MASTER] 13:35:19.715 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 13:35:19.720 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator((double[]) null);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());

heap0.insert(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());

boolean boolean0 = heap0.ok((-1856));
assertFalse(boolean0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());

boolean boolean1 = heap0.empty();
assertTrue(boolean1);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertFalse(boolean1 == boolean0);

boolean boolean2 = heap0.empty();
assertTrue(boolean2);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

heap0.setBounds((-1856));

[MASTER] 13:35:19.920 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<1>
[MASTER] 13:35:19.921 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator((double[]) null);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

heap0.insert(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

heap0.getmin();
heap0.ok(12);
heap0.percolateDown(12);

[MASTER] 13:35:20.087 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 13:35:20.088 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Heap heap0 = new Heap((VariableComparator) null);
assertNotNull(heap0);
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

heap0.setBounds(1);
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

heap0.insert(0);
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

boolean boolean0 = heap0.heapProperty();
assertTrue(boolean0);
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());


[MASTER] 13:35:20.215 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<1>
[MASTER] 13:35:20.216 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator((double[]) null);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

heap0.insert(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());

int int0 = heap0.size();
assertEquals(0, int0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());


[MASTER] 13:35:20.582 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<1>
[MASTER] 13:35:20.582 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Heap heap0 = new Heap((VariableComparator) null);
assertNotNull(heap0);
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());

heap0.setBounds(1);
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());

heap0.insert(0);
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());

boolean boolean0 = heap0.inHeap(0);
assertFalse(boolean0);
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());


[MASTER] 13:35:20.880 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<1>
[MASTER] 13:35:20.881 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[2];
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.setBounds(3);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.insert(0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(2, doubleArray0.length);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);

heap0.increase(0);
heap0.getmin();
heap0.insert(0);
heap0.percolateDown(0);

[MASTER] 13:35:21.164 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 13:35:21.165 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator((double[]) null);
assertNotNull(activityBasedVariableComparator0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

heap0.setBounds(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

heap0.insert(12);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

int int0 = heap0.size();
assertEquals(0, int0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());

boolean boolean0 = heap0.heapProperty(1);
assertTrue(boolean0);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());


* Writing tests to file
* Writing JUnit test case 'Heap_ESTest' to evosuite-tests
* Done!

* Computation finished
