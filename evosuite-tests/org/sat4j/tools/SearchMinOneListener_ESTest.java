/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:16:25 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.RandomAccessModel;
import org.sat4j.tools.SearchMinOneListener;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SearchMinOneListener_ESTest extends SearchMinOneListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, (RandomAccessModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SearchMinOneListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      int[] intArray0 = new int[0];
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(43);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, eMARestarts0);
      searchMinOneListener0.init(solver0);
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, solver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cards with degree 1 are clauses!!!!
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams((-2689));
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, noRestarts0, mUSLauncher0);
      searchMinOneListener0.init(solver0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-712);
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1424
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      Lbool lbool0 = Lbool.TRUE;
      // Undeclared exception!
      try { 
        searchMinOneListener0.end(lbool0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      Lbool lbool0 = Lbool.FALSE;
      searchMinOneListener0.end(lbool0);
      assertEquals("F", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, (RandomAccessModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SearchMinOneListener", e);
      }
  }
}
