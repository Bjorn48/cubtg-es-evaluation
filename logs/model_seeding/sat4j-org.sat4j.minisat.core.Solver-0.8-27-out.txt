* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 13179
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550582318727
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.19109947643979058
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.10914051841746249
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.06933333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.11278195488721804
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.25984251968503935
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2125984251968504
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.07639836289222374
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 270
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.27486910994764396
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.17462482946793997
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.12933333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.15037593984962405
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3464566929133858
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.29133858267716534
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.11732605729877217
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 343
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3150087260034904
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.20054570259208732
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.14533333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17293233082706766
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.41732283464566927
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3543307086614173
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1364256480218281
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 428
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3228621291448517
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2100954979536153
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.148
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19172932330827067
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.47244094488188976
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4015748031496063
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.14733969986357434
[MASTER] 14:20:37.251 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 514
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3307155322862129
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21691678035470668
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.15333333333333332
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21428571428571427
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5275590551181102
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.44881889763779526
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15552523874488403
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 602
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.343804537521815
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.22646657571623466
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.22133333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.23308270676691728
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5590551181102362
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.48031496062992124
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2019099590723056
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 671
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3568935427574171
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.23465211459754434
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.23066666666666666
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.23684210526315788
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6062992125984252
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5118110236220472
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.21145975443383355
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 758
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 791
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.36910994764397903
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24283765347885403
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.25466666666666665
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2556390977443609
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6692913385826772
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5669291338582677
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.22237380627557982
* Search finished after 125s and 8 generations, 14798 statements, best individual has fitness: 2702.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.36910994764397903
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24283765347885403
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.25466666666666665
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2556390977443609
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6692913385826772
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5669291338582677
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.22237380627557982
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.36910994764397903
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24283765347885403
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.25466666666666665
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2556390977443609
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6692913385826772
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5669291338582677
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.22237380627557982
* Minimizing test suite
[MASTER] 14:22:07.939 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 39%
* Total number of goals: 1146
* Number of covered goals: 443
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 24%
* Total number of goals: 733
* Number of covered goals: 178
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 27%
* Total number of goals: 750
* Number of covered goals: 202
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 26%
* Total number of goals: 266
* Number of covered goals: 68
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 72%
* Total number of goals: 127
* Number of covered goals: 91
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 57%
* Total number of goals: 127
* Number of covered goals: 72
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 22%
* Total number of goals: 733
* Number of covered goals: 163
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.36910994764397903
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24283765347885403
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.25466666666666665
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2556390977443609
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6692913385826772
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5669291338582677
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.22237380627557982
* Generated 135 tests with total length 3006
* Resulting test suite's coverage: 45% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 14:23:05.853 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7115666666666667% of time used, but only 15/135 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.36910994764397903
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24283765347885403
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.25466666666666665
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2556390977443609
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6692913385826772
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5669291338582677
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.22237380627557982
* Compiling and checking tests
[MASTER] 14:23:47.042 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 14:23:47.046 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 14:23:47.093 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 14:23:47.094 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileSystemHandling.shouldAllThrowIOExceptions();
FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h:h|<)");
ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
EMARestarts eMARestarts0 = new EMARestarts();
Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, tabuListDecorator0, eMARestarts0);
solver0.isSatisfiable(true);
assertEquals(1, solver0.nVars());

solver0.reset();
assertFalse(solver0.isSolverKeptHot());


[MASTER] 14:23:51.985 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 14:23:51.991 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
byteArray0[0] = (byte)14;
byteArray0[1] = (byte) (-24);
FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
Random.setNextRandom((-1718));
PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
SearchParams searchParams0 = new SearchParams(5000);
searchParams0.getInitConflictBound();
PureOrder pureOrder0 = new PureOrder(5);
pureOrder0.getVariableHeuristics();
NoRestarts noRestarts0 = new NoRestarts();
SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
noRestarts0.onRestart();
MUSLauncher mUSLauncher0 = new MUSLauncher();
mUSLauncher0.log("");
Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
solver0.setTimeoutMs(494L);
ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(1274.34304287);
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(varOrderHeap0).toString();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, tabuListDecorator0, noRestarts0);
solver1.isSatisfiable();
assertEquals(1, solver1.nVars());

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(9);
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
LubyRestarts lubyRestarts0 = new LubyRestarts(1964);
lubyRestarts0.onRestart();
Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0);
solver2.createBlockingClauseForCurrentModel();
assertEquals(2147483, solver2.getTimeout());


[MASTER] 14:23:58.158 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 14:23:58.159 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
SearchParams searchParams0 = new SearchParams();
PureOrder pureOrder0 = new PureOrder(5);
pureOrder0.getVariableHeuristics();
RestartStrategy restartStrategy0 = null;
MUSLauncher mUSLauncher0 = new MUSLauncher();
Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, (RestartStrategy) null, mUSLauncher0);
LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 14:24:00.054 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 14:24:00.055 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
SearchParams searchParams0 = new SearchParams();
PureOrder pureOrder0 = new PureOrder(5);
pureOrder0.getVariableHeuristics();
MUSLauncher mUSLauncher0 = new MUSLauncher();
PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
pureOrder0.varDecayActivity();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, (RestartStrategy) null);
solver0.cancelUntilTrailLevel(5);
NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, (SearchParams) null, pureOrder0, (RestartStrategy) null);
IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver1);
solver1.addAtMost(iVecInt0, 6);
assertEquals(2, solver1.nVars());


[MASTER] 14:24:00.894 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 14:24:00.897 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

PureOrder pureOrder0 = new PureOrder(5);
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

double[] doubleArray0 = pureOrder0.getVariableHeuristics();
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);
assertNotNull(doubleArray0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, pureOrder0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());

ILogAble iLogAble0 = solver0.getLogger();
assertNotNull(iLogAble0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWL>(5);
assertNotNull(fixedLengthLearning1);
assertEquals(5, fixedLengthLearning1.getMaxLength());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning1, mixedDataStructureDanielWL0, (SearchParams) null, pureOrder0, miniSATRestarts0, iLogAble0);
assertNotNull(solver1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(5, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, fixedLengthLearning1.getMaxLength());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructure>();
assertNotNull(fixedLengthLearning2);
assertEquals(3, fixedLengthLearning2.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning2, cardinalityDataStructure0, pureOrder0, miniSATRestarts0);
assertNotNull(solver2);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning2.getMaxLength());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(1, solver2.nVars());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());

int[] intArray0 = new int[8];
intArray0[0] = (-842);
intArray0[1] = 5;
intArray0[2] = 5;
intArray0[3] = 5;
intArray0[4] = 5;
intArray0[5] = 5;
intArray0[6] = 5;
intArray0[7] = 5;
solver2.backtrack(intArray0);

[MASTER] 14:24:02.172 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 14:24:02.211 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL1);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

ILits iLits0 = clausalDataStructureWL1.getVocabulary();
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(0).when(varOrderHeap0).select();
doReturn((String) null).when(varOrderHeap0).toString();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, (-1329));
assertNotNull(tabuListDecorator0);

tabuListDecorator0.undo(0);
EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

int int0 = tabuListDecorator0.select();
assertEquals(0, int0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());

eMARestarts0.init(searchParams0, solverStats0);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());

eMARestarts0.onRestart();
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(eMARestarts0.shouldRestart());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, tabuListDecorator0, eMARestarts0);
assertNotNull(solver0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(eMARestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

solver0.setTimeout((-1329));
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(3, solver0.nVars());
assertEquals((-1329), solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(2);
assertNotNull(fixedLengthLearning0);
assertEquals(2, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, tabuListDecorator0, eMARestarts0);
assertNotNull(solver1);
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(2, fixedLengthLearning0.getMaxLength());

LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver1.fixedSize(0);
assertNotNull(learnedConstraintsDeletionStrategy0);
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(2, fixedLengthLearning0.getMaxLength());

ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams1 = new SearchParams(0.0, 0.0, 0.0, 0);
assertNotNull(searchParams1);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertFalse(searchParams1.equals((Object)searchParams0));

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, searchParams1, tabuListDecorator0, eMARestarts0);
assertNotNull(solver2);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(eMARestarts0.shouldRestart());
assertFalse(searchParams1.equals((Object)searchParams0));

Map<String, Number> map0 = solver2.getStat();
assertNotNull(map0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(17, map0.size());
assertFalse(map0.isEmpty());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(eMARestarts0.shouldRestart());
assertFalse(searchParams1.equals((Object)searchParams0));

tabuListDecorator0.init();
LearningStrategy<MixedDataStructureSingleWL> learningStrategy0 = (LearningStrategy<MixedDataStructureSingleWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver3 = new Solver<MixedDataStructureSingleWL>(learningStrategy0, mixedDataStructureSingleWL0, tabuListDecorator0, eMARestarts0);
assertNotNull(solver3);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0, solver3.nConstraints());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(2, solver3.newVar());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(1, solver3.realNumberOfVariables());
assertFalse(solver3.isSolverKeptHot());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(1, solver3.nVars());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.decisionLevel());

solver3.varBumpActivity(34);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(3, solver3.nVars());
assertEquals(0, solver3.nConstraints());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(4, solver3.newVar());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(3, solver3.realNumberOfVariables());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isSolverKeptHot());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.decisionLevel());

solver0.isSatisfiable();

[MASTER] 14:24:03.354 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 14:24:03.366 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

LubyRestarts lubyRestarts0 = new LubyRestarts(1964);
assertNotNull(lubyRestarts0);
assertEquals(1964, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(1964, lubyRestarts0.getFactor());
assertEquals(1964L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, naturalStaticOrder0, lubyRestarts0);
assertNotNull(solver0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1964, lubyRestarts0.getFactor());
assertEquals(1964L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Constr constr0 = solver0.propagate();
assertNull(constr0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1964, lubyRestarts0.getFactor());
assertEquals(1964L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, lubyRestarts0);
assertNotNull(solver1);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1964, lubyRestarts0.getFactor());
assertEquals(1964L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NaturalStaticOrder naturalStaticOrder1 = (NaturalStaticOrder)solver1.getOrder();
assertSame(naturalStaticOrder0, naturalStaticOrder1);
assertSame(naturalStaticOrder1, naturalStaticOrder0);
assertNotNull(naturalStaticOrder1);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1964, lubyRestarts0.getFactor());
assertEquals(1964L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SimplificationType simplificationType0 = SimplificationType.NO_SIMPLIFICATION;
solver0.setSimplifier(simplificationType0);
assertSame(naturalStaticOrder0, naturalStaticOrder1);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1964, lubyRestarts0.getFactor());
assertEquals(1964L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, naturalStaticOrder0, lubyRestarts0);
assertNotNull(solver2);
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1964, lubyRestarts0.getFactor());
assertEquals(1964L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver2.record((Constr) null);

[MASTER] 14:24:04.294 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 14:24:04.308 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
assertNotNull(activeLearning0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

PureOrder pureOrder0 = new PureOrder(5);
assertNotNull(pureOrder0);
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

double[] doubleArray0 = pureOrder0.getVariableHeuristics();
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);
assertNotNull(doubleArray0);
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getIgnoredclauses());

eMARestarts0.init(searchParams0, solverStats0);
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getIgnoredclauses());

eMARestarts0.onRestart();
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

mUSLauncher0.log("");
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, pureOrder0, eMARestarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());

SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
solver0.setSimplifier(simplificationType0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, (SearchParams) null, pureOrder0, eMARestarts0);
assertNotNull(solver1);
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());

Lbool lbool0 = solver1.truthValue(5);
assertNotNull(lbool0);
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("U", lbool0.toString());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());

NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, (SearchParams) null, pureOrder0, eMARestarts0);
assertNotNull(solver2);
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

Map<String, Number> map0 = solver2.getStat();
assertNotNull(map0);
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.nConstraints());
assertEquals(4, solver2.newVar());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(map0.isEmpty());
assertEquals(17, map0.size());


[MASTER] 14:24:05.138 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 14:24:05.144 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

PureOrder pureOrder0 = new PureOrder(5);
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

pureOrder0.varDecayActivity();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

ArminRestarts arminRestarts0 = new ArminRestarts();
assertNotNull(arminRestarts0);
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());

boolean boolean0 = arminRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());

arminRestarts0.onBackjumpToRootLevel();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());

arminRestarts0.newLearnedClause((Constr) null, 481);
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(5);
assertNotNull(fixedLengthLearning0);
assertEquals(5, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, arminRestarts0);
assertNotNull(solver0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(5, fixedLengthLearning0.getMaxLength());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());

SearchParams searchParams0 = new SearchParams(1547.709, 0.0, (-834.3714121984726), 5);
assertNotNull(searchParams0);
assertEquals((-834.3714121984726), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(1547.709, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

ILogAble iLogAble0 = solver0.getLogger();
assertNotNull(iLogAble0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(5, fixedLengthLearning0.getMaxLength());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, arminRestarts0, iLogAble0);
assertNotNull(solver1);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(5, fixedLengthLearning0.getMaxLength());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.nVars());
assertEquals((-834.3714121984726), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(1547.709, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());

activeLearning0.setSolver(solver1);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(5, fixedLengthLearning0.getMaxLength());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals((-834.3714121984726), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(1547.709, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());

int[] intArray0 = new int[0];
LearntWLClause learntWLClause0 = (LearntWLClause)solver0.addClauseOnTheFly(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertNotNull(learntWLClause0);
assertTrue(learntWLClause0.learnt());
assertEquals(0, learntWLClause0.size());
assertFalse(learntWLClause0.simplify());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(learntWLClause0.isSatisfied());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(5, fixedLengthLearning0.getMaxLength());
assertEquals(10, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());

SearchParams searchParams1 = null;
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

levelBasedVarOrderHeap0.init();

[MASTER] 14:24:05.867 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 14:24:05.868 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
assertNotNull(percentLengthLearning0);
assertEquals(0, percentLengthLearning0.getLimit());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

int int1 = (-3195);
PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

ArminRestarts arminRestarts0 = new ArminRestarts();
assertNotNull(arminRestarts0);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, arminRestarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());

solver0.assume(0);

[MASTER] 14:24:06.729 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 14:24:06.736 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
assertNotNull(percentLengthLearning0);
assertEquals(0, percentLengthLearning0.getLimit());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

PureOrder pureOrder0 = new PureOrder((-3195));
assertNotNull(pureOrder0);
assertEquals((-3195), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

ArminRestarts arminRestarts0 = new ArminRestarts();
assertNotNull(arminRestarts0);
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

String string0 = "";
mUSLauncher0.log("");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, arminRestarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-3195), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());

solver0.assume(0);

[MASTER] 14:24:11.829 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 14:24:11.834 [logback-1] WARN  JUnitAnalyzer - Failing test:
 boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, tabuListDecorator0, eMARestarts0);
assertNotNull(solver0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());

boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h:h|<)");
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

solver0.reset();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) eMARestarts0, learnedConstraintsEvaluationType0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, eMARestarts0);
assertNotNull(solver1);
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

boolean boolean3 = solver1.isSatisfiable();
assertTrue(boolean3);
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(boolean3 == boolean2);
assertFalse(boolean3 == boolean1);
assertFalse(boolean3 == boolean0);

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams1 = new SearchParams();
assertNotNull(searchParams1);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams1, tabuListDecorator0, eMARestarts0);
assertNotNull(solver2);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(eMARestarts0.shouldRestart());
assertFalse(searchParams1.equals((Object)searchParams0));

UnitClause unitClause0 = new UnitClause((-722));
assertNotNull(unitClause0);
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(unitClause0.learnt());
assertFalse(unitClause0.simplify());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.size());

double double0 = unitClause0.getActivity();
assertEquals(0.0, double0, 0.01);
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(unitClause0.learnt());
assertFalse(unitClause0.simplify());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.size());

solver2.enqueue((-363), (Constr) unitClause0);

[MASTER] 14:24:12.490 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 14:24:12.495 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(328.434508205387, (-1495));
assertNotNull(searchParams0);
assertEquals((-1495), searchParams0.getInitConflictBound());
assertEquals(328.434508205387, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertEquals((-1495), searchParams0.getInitConflictBound());
assertEquals(328.434508205387, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

SearchParams searchParams1 = new SearchParams();
assertNotNull(searchParams1);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));

double double1 = searchParams1.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertNotSame(searchParams1, searchParams0);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double1, double0, 0.01);

PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
assertNotNull(phaseCachingAutoEraseStrategy0);
assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseCachingAutoEraseStrategy0);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log("");
iLogAble0.log("");
iLogAble0.log("org.sat4j.minisat.core.Solver$10");
iLogAble0.log("org.sat4j.minisat.core.Solver$10");
iLogAble0.log("");
Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams1, levelBasedVarOrderHeap0, lubyRestarts0, iLogAble0);
assertNotNull(solver0);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams1.equals((Object)searchParams0));

boolean boolean0 = solver0.assume(7);
assertTrue(boolean0);
assertNotSame(searchParams1, searchParams0);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.getPropagationLevel());
assertEquals(1, solver0.decisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams1.equals((Object)searchParams0));


[MASTER] 14:24:13.044 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 14:24:13.056 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

StatisticsSolver statisticsSolver0 = new StatisticsSolver();
assertNotNull(statisticsSolver0);
assertEquals(0, statisticsSolver0.nConstraints());
assertEquals(0, statisticsSolver0.nVars());
assertEquals(0, statisticsSolver0.realNumberOfVariables());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

int int0 = solver0.nAssigns();
assertEquals(0, int0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 14:24:13.610 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 14:24:13.612 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

double double0 = naturalStaticOrder0.varActivity(732);
assertEquals(0.0, double0, 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

LubyRestarts lubyRestarts0 = new LubyRestarts(1964);
assertNotNull(lubyRestarts0);
assertEquals(1964, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(1964, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1964L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1964, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1964L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver0.model(1964);

[MASTER] 14:24:14.502 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 14:24:14.508 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap1);
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertNotNull(clauseOnlyLearning1);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

int[] intArray0 = new int[3];
intArray0[0] = 0;
intArray0[1] = 0;
intArray0[2] = 32;
VecInt vecInt0 = new VecInt(intArray0);
assertArrayEquals(new int[] {0, 0, 32}, intArray0);
assertEquals(3, intArray0.length);
assertNotNull(vecInt0);
assertEquals(3, vecInt0.size());
assertEquals(32, vecInt0.last());
assertFalse(vecInt0.isEmpty());

VecInt vecInt1 = new VecInt();
assertNotNull(vecInt1);
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());
assertFalse(vecInt1.equals((Object)vecInt0));

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Constr constr0 = cardinalityDataStructureYanMin0.createUnregisteredClause(vecInt0);
assertArrayEquals(new int[] {0, 0, 32}, intArray0);
assertNotSame(vecInt0, vecInt1);
assertEquals(3, intArray0.length);
assertNotNull(constr0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(constr0.learnt());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertFalse(constr0.canBePropagatedMultipleTimes());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertFalse(constr0.simplify());
assertEquals(3, constr0.size());
assertFalse(constr0.isSatisfied());
assertFalse(constr0.locked());
assertTrue(vecInt0.equals((Object)vecInt1));

int int0 = constr0.size();
assertEquals(3, int0);
assertArrayEquals(new int[] {0, 0, 32}, intArray0);
assertNotSame(vecInt0, vecInt1);
assertEquals(3, intArray0.length);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(constr0.learnt());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertFalse(constr0.canBePropagatedMultipleTimes());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertFalse(constr0.simplify());
assertEquals(3, constr0.size());
assertFalse(constr0.isSatisfied());
assertFalse(constr0.locked());
assertTrue(vecInt0.equals((Object)vecInt1));

constr0.setActivity(0);
assertArrayEquals(new int[] {0, 0, 32}, intArray0);
assertNotSame(vecInt0, vecInt1);
assertEquals(3, intArray0.length);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(constr0.learnt());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertFalse(constr0.canBePropagatedMultipleTimes());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertFalse(constr0.simplify());
assertEquals(3, constr0.size());
assertFalse(constr0.isSatisfied());
assertFalse(constr0.locked());
assertTrue(vecInt0.equals((Object)vecInt1));

ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>();
assertNotNull(activeLearning1);
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure0, levelBasedVarOrderHeap1, lubyRestarts0);
assertNotNull(solver0);
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

activeLearning1.setSolver(solver0);
assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure1);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure1, levelBasedVarOrderHeap1, lubyRestarts0);
assertNotNull(solver1);
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertFalse(solver1.equals((Object)solver0));

IVecInt iVecInt0 = solver1.analyzeFinalConflictInTermsOfAssumptions(constr0, vecInt0, (-820));
assertArrayEquals(new int[] {0, 0, 32}, intArray0);
assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
assertNotSame(solver1, solver0);
assertNotSame(vecInt0, vecInt1);
assertEquals(3, intArray0.length);
assertNull(iVecInt0);
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(constr0.learnt());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertFalse(constr0.canBePropagatedMultipleTimes());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertFalse(constr0.simplify());
assertEquals(3, constr0.size());
assertFalse(constr0.isSatisfied());
assertFalse(constr0.locked());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertFalse(solver1.equals((Object)solver0));
assertTrue(vecInt0.equals((Object)vecInt1));

int[] intArray1 = solver1.findModel();
assertArrayEquals(new int[] {}, intArray1);
assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
assertNotSame(solver1, solver0);
assertNotSame(intArray1, intArray0);
assertEquals(0, intArray1.length);
assertNotNull(intArray1);
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(5, solver1.nVars());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertFalse(solver1.equals((Object)solver0));
assertFalse(intArray1.equals((Object)intArray0));


[MASTER] 14:24:15.070 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 14:24:15.072 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(1191);
assertNotNull(fixedLengthLearning0);
assertEquals(1191, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(4398);
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4398, searchParams0.getInitConflictBound());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(1191, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4398, searchParams0.getInitConflictBound());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver0.varBumpActivity(32);

[MASTER] 14:24:15.923 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 14:24:15.929 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PureOrder pureOrder0 = new PureOrder(5);
assertNotNull(pureOrder0);
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

double[] doubleArray0 = pureOrder0.getVariableHeuristics();
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);
assertNotNull(doubleArray0);
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());

LubyRestarts lubyRestarts0 = new LubyRestarts(5);
assertNotNull(lubyRestarts0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(5, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(5, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(5L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(5, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(2, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>((-52));
assertNotNull(percentLengthLearning0);
assertEquals((-52), percentLengthLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(5, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(2, lubyRestarts0.luby());
assertEquals((-52), percentLengthLearning0.getLimit());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver0.unset(5);
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(5, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(2, lubyRestarts0.luby());
assertEquals((-52), percentLengthLearning0.getLimit());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SearchParams searchParams0 = new SearchParams(5, (-127));
assertNotNull(searchParams0);
assertEquals((-127), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(5.0, searchParams0.getConflictBoundIncFactor(), 0.01);

UnitClause unitClause0 = new UnitClause((-722));
assertNotNull(unitClause0);
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(unitClause0.isSatisfied());
assertFalse(unitClause0.simplify());
assertEquals(0.0, unitClause0.getActivity(), 0.01);

double double0 = unitClause0.getActivity();
assertEquals(0.0, double0, 0.01);
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(unitClause0.isSatisfied());
assertFalse(unitClause0.simplify());
assertEquals(0.0, unitClause0.getActivity(), 0.01);

UnitClause unitClause1 = (UnitClause)solver0.addConstr(unitClause0);
assertSame(unitClause0, unitClause1);
assertSame(unitClause1, unitClause0);
assertNotNull(unitClause1);
assertEquals(5, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(5, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(2, lubyRestarts0.luby());
assertEquals((-52), percentLengthLearning0.getLimit());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nConstraints());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(unitClause0.isSatisfied());
assertFalse(unitClause0.simplify());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertEquals(1, unitClause1.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause1.canBeSatisfiedByCountingLiterals());
assertTrue(unitClause1.isSatisfied());
assertEquals(0.0, unitClause1.getActivity(), 0.01);
assertFalse(unitClause1.simplify());
assertEquals(1, unitClause1.size());
assertFalse(unitClause1.canBePropagatedMultipleTimes());
assertFalse(unitClause1.learnt());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

solver0.record(unitClause1);

[MASTER] 14:24:16.730 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 14:24:16.751 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap1);
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
assertNotNull(activeLearning0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ILits iLits0 = cardinalityDataStructure0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

int int0 = 500;
NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = mock(MixedDataStructureDanielWL.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(mixedDataStructureDanielWL0).getVocabulary();
SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

PureOrder pureOrder0 = new PureOrder(500);
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(500, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 500);
assertNotNull(tabuListDecorator0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(500, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertNotNull(fixedPeriodRestarts0);
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0);
assertNotNull(solver0);
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(500, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());

VecInt vecInt0 = new VecInt(500);
assertNotNull(vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

IVecInt iVecInt0 = solver0.dimacs2internal(vecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertNotNull(iVecInt0);
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(500, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(iVecInt0.equals((Object)vecInt0));

ActiveLearning<MixedDataStructureSingleWL> activeLearning1 = new ActiveLearning<MixedDataStructureSingleWL>();
assertNotNull(activeLearning1);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

SearchParams searchParams1 = new SearchParams((-147));
assertNotNull(searchParams1);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals((-147), searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(activeLearning1, mixedDataStructureSingleWL0, searchParams1, pureOrder0, fixedPeriodRestarts0, mUSLauncher0);
assertNotNull(solver1);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals((-147), searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(500, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(searchParams1.equals((Object)searchParams0));

ILits iLits1 = solver1.getVocabulary();
assertNotSame(searchParams1, searchParams0);
assertNotSame(iLits1, iLits0);
assertNotNull(iLits1);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals((-147), searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(3, iLits1.nVars());
assertEquals(0, iLits1.realnVars());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(500, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(iLits1.equals((Object)iLits0));

CBClause cBClause0 = new CBClause(iVecInt0, iLits1, true);
assertNotNull(cBClause0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(500, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals((-147), searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(5, solver1.nVars());
assertEquals(0, iLits1.realnVars());
assertEquals(5, iLits1.nVars());
assertEquals(0.0, cBClause0.getActivity(), 0.01);
assertTrue(cBClause0.learnt());
assertFalse(cBClause0.simplify());
assertEquals(0, cBClause0.size());
assertFalse(searchParams0.equals((Object)searchParams1));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(iLits1.equals((Object)iLits0));

MUSLauncher mUSLauncher1 = new MUSLauncher();
assertNotNull(mUSLauncher1);
assertEquals(0L, mUSLauncher1.getBeginTime());
assertFalse(mUSLauncher1.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
assertFalse(mUSLauncher1.equals((Object)mUSLauncher0));

mUSLauncher0.log((String) null);
assertNotSame(mUSLauncher0, mUSLauncher1);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.equals((Object)mUSLauncher1));

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-3964));
assertNotNull(fixedLengthLearning0);
assertEquals((-3964), fixedLengthLearning0.getMaxLength());

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap1, fixedPeriodRestarts0, mUSLauncher0);
assertNotNull(solver2);
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals((-3964), fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertFalse(mUSLauncher0.equals((Object)mUSLauncher1));
assertFalse(searchParams0.equals((Object)searchParams1));

solver2.forget(1504);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
