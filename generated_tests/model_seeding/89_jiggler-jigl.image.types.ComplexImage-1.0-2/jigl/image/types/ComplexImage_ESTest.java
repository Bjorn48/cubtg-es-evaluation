/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 16:59:20 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import javax.swing.JLayeredPane;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 0;
      int int1 = 8;
      ComplexImage complexImage0 = new ComplexImage(0, 8);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage();
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      
      RealGrayImage realGrayImage1 = realGrayImage0.add(0.0F);
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(8, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      
      ComplexImage complexImage3 = complexImage0.copy();
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(8, complexImage3.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      
      // Undeclared exception!
      try { 
        complexImage2.set((-2769), (-4978), 1.0F, (float) (-4978));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(458, 1367);
      assertNotNull(complexImage0);
      assertEquals(1367, complexImage0.Y());
      assertEquals(458, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      
      int int6 = rOI0.lx();
      assertEquals(0, int6);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      
      int int8 = rOI0.ly();
      assertEquals(0, int8);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int8 == int7);
      assertTrue(int8 == int2);
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int0);
      assertTrue(int8 == int3);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 0, (-2045.987F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex(1525.4593582544771, 1525.4593582544771);
      assertNotNull(complex0);
      assertEquals((short)2157, complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(2157.3252F, complex0.floatValue(), 0.01F);
      assertEquals(2157, complex0.intValue());
      assertEquals(2157.3253115837674, complex0.magnitude(), 0.01);
      assertEquals(2157.3253115837674, complex0.doubleValue(), 0.01);
      assertEquals(1525.4593505859375, complex0.imaginary(), 0.01);
      assertEquals(2157L, complex0.longValue());
      assertEquals((byte)109, complex0.byteValue());
      assertEquals(1525.4593505859375, complex0.imag(), 0.01);
      assertEquals(1525.4593505859375, complex0.real(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals((short)2157, complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(2157.3252F, complex0.floatValue(), 0.01F);
      assertEquals(2157, complex0.intValue());
      assertEquals(2157.3253115837674, complex0.magnitude(), 0.01);
      assertEquals(2157.3253115837674, complex0.doubleValue(), 0.01);
      assertEquals(1525.4593505859375, complex0.imaginary(), 0.01);
      assertEquals(2157L, complex0.longValue());
      assertEquals((byte)109, complex0.byteValue());
      assertEquals(1525.4593505859375, complex0.imag(), 0.01);
      assertEquals(1525.4593505859375, complex0.real(), 0.01);
      assertEquals(1525.4593505859375, complex1.imag(), 0.01);
      assertEquals(2157, complex1.intValue());
      assertEquals(2157.3253115837674, complex1.magnitude(), 0.01);
      assertEquals(2157.3253115837674, complex1.doubleValue(), 0.01);
      assertEquals((byte)109, complex1.byteValue());
      assertEquals(2157L, complex1.longValue());
      assertEquals(2157.3252F, complex1.floatValue(), 0.01F);
      assertEquals(1525.4593505859375, complex1.real(), 0.01);
      assertEquals((short)2157, complex1.shortValue());
      assertEquals(1525.4593505859375, complex1.imaginary(), 0.01);
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      // Undeclared exception!
      try { 
        complexImage0.clear(complex1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(2366, 2366, 2366, 2366);
      assertNotNull(rOI0);
      assertEquals(2366, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(2366, rOI0.lx());
      assertEquals(2366, rOI0.ux());
      assertEquals(2366, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(2366, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(2366, rOI0.lx());
      assertEquals(2366, rOI0.ux());
      assertEquals(2366, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(2366, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(2366, rOI0.lx());
      assertEquals(2366, rOI0.ux());
      assertEquals(2366, rOI0.uy());
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(0, 0, (-1149), (-1149));
      assertNotNull(rOI0);
      assertEquals(1150, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1150, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals((-1149), rOI0.ux());
      assertEquals((-1149), rOI0.uy());
      
      rOI0.setROI((-1149), 1, 1, 2366);
      assertEquals(1, rOI0.uy());
      assertEquals(1151, rOI0.X());
      assertEquals(2366, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals((-1149), rOI0.ux());
      assertEquals(2366, rOI0.ly());
      
      rOI0.setROI(259, (-1149), (-1149), (-1149));
      assertEquals(259, rOI0.lx());
      assertEquals((-1149), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1409, rOI0.X());
      assertEquals((-1149), rOI0.ux());
      assertEquals((-1149), rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1409, int0);
      assertEquals(259, rOI0.lx());
      assertEquals((-1149), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1409, rOI0.X());
      assertEquals((-1149), rOI0.ux());
      assertEquals((-1149), rOI0.uy());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(259, rOI0.lx());
      assertEquals((-1149), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1409, rOI0.X());
      assertEquals((-1149), rOI0.ux());
      assertEquals((-1149), rOI0.uy());
      assertFalse(int1 == int0);
      
      ComplexImage complexImage1 = complexImage0.subtract((-1096.8666F), 0.0F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      complexImage0.divide(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1149
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(2893, 308, (-3092.886F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = (-1149);
      ROI rOI0 = new ROI(0, 0, (-1149), (-1149));
      assertNotNull(rOI0);
      assertEquals(1150, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1150, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals((-1149), rOI0.ux());
      assertEquals((-1149), rOI0.uy());
      
      rOI0.setROI((-1149), 1, 1, 2366);
      assertEquals(1, rOI0.uy());
      assertEquals(1151, rOI0.X());
      assertEquals(2366, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals((-1149), rOI0.ux());
      assertEquals(2366, rOI0.ly());
      
      rOI0.setROI(259, (-1149), (-1149), (-1149));
      assertEquals(259, rOI0.lx());
      assertEquals((-1149), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1409, rOI0.X());
      assertEquals((-1149), rOI0.ux());
      assertEquals((-1149), rOI0.uy());
      
      int int1 = rOI0.X();
      assertEquals(1409, int1);
      assertEquals(259, rOI0.lx());
      assertEquals((-1149), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1409, rOI0.X());
      assertEquals((-1149), rOI0.ux());
      assertEquals((-1149), rOI0.uy());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(1, int2);
      assertEquals(259, rOI0.lx());
      assertEquals((-1149), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1409, rOI0.X());
      assertEquals((-1149), rOI0.ux());
      assertEquals((-1149), rOI0.uy());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ComplexImage complexImage1 = complexImage0.divide((float) 2366, 2802.9F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1149
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.copy();
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-29), (-29), (float) (-29));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -29
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 1037;
      ComplexImage complexImage1 = new ComplexImage(1037, 1037);
      assertNotNull(complexImage1);
      assertEquals(1037, complexImage1.Y());
      assertEquals(1037, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int1 = 0;
      int int2 = (-460);
      // Undeclared exception!
      try { 
        complexImage1.get(0, (-460));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -460
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = complexImage0.X();
      assertEquals(0, int0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int1 = complexImage0.Y();
      assertEquals(0, int1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary((-3060), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-695), (-695));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(0, 0, 2366, (-2769));
      assertNotNull(rOI0);
      assertEquals(2367, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(2367, int0);
      assertEquals(2367, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertEquals(2770, int1);
      assertEquals(2367, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(2367, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      rOI0.setROI(999, 0, (-1125), 2770);
      assertEquals(999, rOI0.lx());
      assertEquals(2125, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(2770, rOI0.ly());
      assertEquals((-1125), rOI0.ux());
      assertEquals(2771, rOI0.Y());
      
      int int3 = rOI0.ux();
      assertEquals((-1125), int3);
      assertEquals(999, rOI0.lx());
      assertEquals(2125, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(2770, rOI0.ly());
      assertEquals((-1125), rOI0.ux());
      assertEquals(2771, rOI0.Y());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      int int4 = rOI0.uy();
      assertEquals(0, int4);
      assertEquals(999, rOI0.lx());
      assertEquals(2125, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(2770, rOI0.ly());
      assertEquals((-1125), rOI0.ux());
      assertEquals(2771, rOI0.Y());
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      
      int int5 = rOI0.ux();
      assertEquals((-1125), int5);
      assertEquals(999, rOI0.lx());
      assertEquals(2125, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(2770, rOI0.ly());
      assertEquals((-1125), rOI0.ux());
      assertEquals(2771, rOI0.Y());
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      
      int int6 = rOI0.lx();
      assertEquals(999, int6);
      assertEquals(999, rOI0.lx());
      assertEquals(2125, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(2770, rOI0.ly());
      assertEquals((-1125), rOI0.ux());
      assertEquals(2771, rOI0.Y());
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      
      rOI0.setROI(2770, (-1125), 999, 2137);
      assertEquals(2137, rOI0.ly());
      assertEquals(3263, rOI0.Y());
      assertEquals(1772, rOI0.X());
      assertEquals(2770, rOI0.lx());
      assertEquals((-1125), rOI0.uy());
      assertEquals(999, rOI0.ux());
      
      int int7 = rOI0.ux();
      assertEquals(999, int7);
      assertEquals(2137, rOI0.ly());
      assertEquals(3263, rOI0.Y());
      assertEquals(1772, rOI0.X());
      assertEquals(2770, rOI0.lx());
      assertEquals((-1125), rOI0.uy());
      assertEquals(999, rOI0.ux());
      assertTrue(int7 == int6);
      assertFalse(int7 == int5);
      assertFalse(int7 == int3);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      
      int int8 = rOI0.lx();
      assertEquals(2770, int8);
      assertEquals(2137, rOI0.ly());
      assertEquals(3263, rOI0.Y());
      assertEquals(1772, rOI0.X());
      assertEquals(2770, rOI0.lx());
      assertEquals((-1125), rOI0.uy());
      assertEquals(999, rOI0.ux());
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertTrue(int8 == int1);
      assertFalse(int8 == int6);
      assertFalse(int8 == int7);
      assertFalse(int8 == int3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int5);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 2366, (float) (-1125), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(0, 0, (-1149), (-1149));
      assertNotNull(rOI0);
      assertEquals(1150, rOI0.X());
      assertEquals((-1149), rOI0.uy());
      assertEquals(1150, rOI0.Y());
      assertEquals((-1149), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      rOI0.setROI((-1149), 1, 1, 2366);
      assertEquals(2366, rOI0.Y());
      assertEquals(1151, rOI0.X());
      assertEquals((-1149), rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(2366, rOI0.ly());
      assertEquals(1, rOI0.lx());
      
      rOI0.setROI(259, (-1149), (-1149), (-1149));
      assertEquals(1409, rOI0.X());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals((-1149), rOI0.ly());
      assertEquals(259, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1409, int0);
      assertEquals(1409, rOI0.X());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals((-1149), rOI0.ly());
      assertEquals(259, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(1409, rOI0.X());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals((-1149), rOI0.ly());
      assertEquals(259, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertFalse(int1 == int0);
      
      ComplexImage complexImage1 = complexImage0.divide((float) 2366, 2802.9F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage2.imag();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = complexImage0.add(693.0F, (float) (-1149));
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      
      complexImage0.subtract(complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 18;
      ROI rOI0 = new ROI(18, 18, 18, 18);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(18, rOI0.uy());
      assertEquals(18, rOI0.ux());
      assertEquals(18, rOI0.lx());
      assertEquals(18, rOI0.ly());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(18, 18, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-2019), (-2380), (-2380), 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(362, rOI0.X());
      assertEquals(2381, rOI0.Y());
      assertEquals((-2019), rOI0.lx());
      assertEquals((-2380), rOI0.uy());
      assertEquals((-2380), rOI0.ux());
      
      int int1 = rOI0.X();
      assertEquals(362, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(362, rOI0.X());
      assertEquals(2381, rOI0.Y());
      assertEquals((-2019), rOI0.lx());
      assertEquals((-2380), rOI0.uy());
      assertEquals((-2380), rOI0.ux());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(2381, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(362, rOI0.X());
      assertEquals(2381, rOI0.Y());
      assertEquals((-2019), rOI0.lx());
      assertEquals((-2380), rOI0.uy());
      assertEquals((-2380), rOI0.ux());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      float float0 = (-1371.351F);
      // Undeclared exception!
      try { 
        complexImage0.get(1363, (-37));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -37
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(454, 2366, 2366, 2366);
      assertNotNull(rOI0);
      assertEquals(2366, rOI0.lx());
      assertEquals(1913, rOI0.X());
      assertEquals(2366, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(454, rOI0.ux());
      assertEquals(2366, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1913, int0);
      assertEquals(2366, rOI0.lx());
      assertEquals(1913, rOI0.X());
      assertEquals(2366, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(454, rOI0.ux());
      assertEquals(2366, rOI0.ly());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int1);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      
      int int2 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int2);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = new Integer(0);
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int4);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      
      int int5 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int5);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      
      int int6 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int6);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertFalse(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      
      int int7 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int7);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertFalse(int7 == int0);
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      
      int int8 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int8);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int8 == int5);
      assertTrue(int8 == int2);
      assertFalse(int8 == int0);
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertTrue(int8 == int3);
      assertTrue(int8 == int6);
      assertTrue(int8 == int1);
      
      int int9 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int9);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int9 == int6);
      assertFalse(int9 == int0);
      assertTrue(int9 == int4);
      assertTrue(int9 == int3);
      assertTrue(int9 == int2);
      assertTrue(int9 == int7);
      assertTrue(int9 == int1);
      assertTrue(int9 == int8);
      assertTrue(int9 == int5);
      
      int int10 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int10);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int10 == int7);
      assertFalse(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int8);
      assertFalse(int10 == int6);
      assertFalse(int10 == int1);
      assertFalse(int10 == int4);
      assertFalse(int10 == int0);
      assertFalse(int10 == int9);
      assertFalse(int10 == int5);
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 2366, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(18, 18, 18, 18);
      assertNotNull(rOI0);
      assertEquals(18, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(18, rOI0.ux());
      assertEquals(18, rOI0.uy());
      assertEquals(18, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.set(18, 655, (float) 18, (float) 655, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(0, 0, (-1149), (-1149));
      assertNotNull(rOI0);
      assertEquals(1150, rOI0.X());
      assertEquals((-1149), rOI0.uy());
      assertEquals(1150, rOI0.Y());
      assertEquals((-1149), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI((-1149), 1, 1, 2366);
      assertEquals(1, rOI0.uy());
      assertEquals(2366, rOI0.Y());
      assertEquals(1151, rOI0.X());
      assertEquals((-1149), rOI0.ux());
      assertEquals(2366, rOI0.ly());
      assertEquals(1, rOI0.lx());
      
      rOI0.setROI(259, (-1149), (-1149), (-1149));
      assertEquals((-1149), rOI0.ly());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals(1409, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(259, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1409, int0);
      assertEquals((-1149), rOI0.ly());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals(1409, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(259, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals((-1149), rOI0.ly());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals(1409, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(259, rOI0.lx());
      assertFalse(int1 == int0);
      
      ComplexImage complexImage1 = complexImage0.divide((float) 2366, 2802.9F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      RealGrayImage realGrayImage0 = complexImage2.imag();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      double double1 = complex1.magnitude();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(double1, double0, 0.01);
      
      ComplexImage complexImage3 = complexImage2.clear(complex1);
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      // Undeclared exception!
      try { 
        complexImage0.set((-2769), 2759, (float) 0, (float) (-2769));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2759
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(0, 0, (-1149), (-1149));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals(1150, rOI0.Y());
      assertEquals(1150, rOI0.X());
      
      rOI0.setROI((-1149), 1, 1, 2366);
      assertEquals(1, rOI0.lx());
      assertEquals(2366, rOI0.ly());
      assertEquals((-1149), rOI0.ux());
      assertEquals(2366, rOI0.Y());
      assertEquals(1151, rOI0.X());
      assertEquals(1, rOI0.uy());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      
      rOI0.setROI(259, (-1149), (-1149), (-1149));
      assertEquals((-1149), rOI0.ly());
      assertEquals(259, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1409, rOI0.X());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1409, int0);
      assertEquals((-1149), rOI0.ly());
      assertEquals(259, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1409, rOI0.X());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals((-1149), rOI0.ly());
      assertEquals(259, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1409, rOI0.X());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertFalse(int1 == int0);
      
      ComplexImage complexImage1 = complexImage0.divide((float) 2366, 2802.9F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      RealGrayImage realGrayImage1 = complexImage2.imag();
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ImageProducer imageProducer0 = complexImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(1, 399, 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 399
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 18;
      ROI rOI0 = new ROI(18, 0, (-16777216), (-963));
      assertNotNull(rOI0);
      assertEquals((-16777216), rOI0.ux());
      assertEquals((-963), rOI0.uy());
      assertEquals(964, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(18, rOI0.lx());
      assertEquals(16777235, rOI0.X());
      
      ROI rOI1 = new ROI(0, 0, 2366, (-2769));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals((-2769), rOI1.uy());
      assertEquals(2366, rOI1.lx());
      assertEquals(2367, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(2770, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI1.setROI((-87), (-294), 0, 999);
      assertNotSame(rOI1, rOI0);
      assertEquals(88, rOI1.X());
      assertEquals(999, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals((-87), rOI1.ux());
      assertEquals(1294, rOI1.Y());
      assertEquals((-294), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.X();
      assertNotSame(rOI1, rOI0);
      assertEquals(88, int1);
      assertEquals(88, rOI1.X());
      assertEquals(999, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals((-87), rOI1.ux());
      assertEquals(1294, rOI1.Y());
      assertEquals((-294), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      
      int int2 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1294, int2);
      assertEquals(88, rOI1.X());
      assertEquals(999, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals((-87), rOI1.ux());
      assertEquals(1294, rOI1.Y());
      assertEquals((-294), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = rOI1.X();
      assertNotSame(rOI1, rOI0);
      assertEquals(88, int3);
      assertEquals(88, rOI1.X());
      assertEquals(999, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals((-87), rOI1.ux());
      assertEquals(1294, rOI1.Y());
      assertEquals((-294), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      
      Integer integer0 = new Integer((-2769));
      assertNotNull(integer0);
      assertEquals((-2769), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int3));
      
      int int4 = 1;
      // Undeclared exception!
      try { 
        complexImage0.setReal(1, (-1), (-2405.1145F), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -295
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-460), (-460), 1384.0F, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(0, 0, 2337, (-2769));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(2337, rOI0.lx());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2338, rOI0.X());
      assertEquals(2770, rOI0.Y());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 0, (float) (-2769));
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(0, 2337, (-19.0F), (float) 2337);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(434, 1367);
      assertNotNull(complexImage0);
      assertEquals(1367, complexImage0.Y());
      assertEquals(434, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      int int5 = rOI0.lx();
      assertEquals(0, int5);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      
      int int7 = rOI0.ly();
      assertEquals(0, int7);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int7 == int4);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 0, (-2045.987F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(12, 12);
      assertNotNull(complexImage0);
      assertEquals(12, complexImage0.Y());
      assertEquals(12, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      rOI0.setROI((-1149), 1, 1, 2366);
      assertEquals(1, rOI0.lx());
      assertEquals(2366, rOI0.ly());
      assertEquals(1151, rOI0.X());
      assertEquals((-1149), rOI0.ux());
      assertEquals(2366, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int0 = rOI0.lx();
      assertEquals(1, int0);
      assertEquals(1, rOI0.lx());
      assertEquals(2366, rOI0.ly());
      assertEquals(1151, rOI0.X());
      assertEquals((-1149), rOI0.ux());
      assertEquals(2366, rOI0.Y());
      assertEquals(1, rOI0.uy());
      
      int int1 = rOI0.lx();
      assertEquals(1, int1);
      assertEquals(1, rOI0.lx());
      assertEquals(2366, rOI0.ly());
      assertEquals(1151, rOI0.X());
      assertEquals((-1149), rOI0.ux());
      assertEquals(2366, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertTrue(int1 == int0);
      
      int int2 = new Integer(1);
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      ROI rOI1 = new ROI(0, 0, 2366, (-2769));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(2770, rOI1.Y());
      assertEquals(2366, rOI1.lx());
      assertEquals(2367, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals((-2769), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int3 = rOI1.X();
      assertNotSame(rOI1, rOI0);
      assertEquals(2367, int3);
      assertEquals(0, rOI1.ly());
      assertEquals(2770, rOI1.Y());
      assertEquals(2366, rOI1.lx());
      assertEquals(2367, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals((-2769), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(2770, int4);
      assertEquals(0, rOI1.ly());
      assertEquals(2770, rOI1.Y());
      assertEquals(2366, rOI1.lx());
      assertEquals(2367, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals((-2769), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2769
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((-1067.0F));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.real = realGrayImage1;
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, complexImage0.real.X());
      assertEquals(0.0F, complexImage0.real.absSum(), 0.01F);
      assertEquals(0, complexImage0.real.Y());
      assertEquals(32767.0F, complexImage0.real.min(), 0.01F);
      assertEquals(0.0, complexImage0.real.sqrSum(), 0.01);
      assertEquals(0.0F, complexImage0.real.addSum(), 0.01F);
      assertEquals((-32768.0F), complexImage0.real.max(), 0.01F);
      
      ComplexImage complexImage2 = complexImage0.subtract((-1292.2F), (-3478.1077F));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ROI rOI0 = new ROI(0, 0, 2366, (-2769));
      assertNotNull(rOI0);
      assertEquals(2366, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2367, rOI0.X());
      assertEquals(2770, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(2367, int0);
      assertEquals(2366, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2367, rOI0.X());
      assertEquals(2770, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertEquals(2770, int1);
      assertEquals(2366, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2367, rOI0.X());
      assertEquals(2770, rOI0.Y());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage2.getImag(3565, 3565, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 1239;
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertFalse(complexImage0.equals((Object)complexImage1));
      
      float float0 = (-1067.0F);
      RealGrayImage realGrayImage1 = realGrayImage0.add((-1067.0F));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage0, complexImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertFalse(complexImage0.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      
      ComplexImage complexImage1 = complexImage0.add(1048.626F, 0.0F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      rOI0.setROI((-3674), 1, (-16777216), 1);
      assertEquals((-3674), rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(16773543, rOI0.X());
      assertEquals(1, rOI0.ly());
      
      int int6 = rOI0.ux();
      assertEquals((-16777216), int6);
      assertEquals((-3674), rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(16773543, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      
      int int7 = rOI0.ly();
      assertEquals(1, int7);
      assertEquals((-3674), rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(16773543, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-2019), (-2380), (-2380), 0);
      assertNotNull(rOI0);
      assertEquals((-2380), rOI0.ux());
      assertEquals((-2019), rOI0.lx());
      assertEquals((-2380), rOI0.uy());
      assertEquals(362, rOI0.X());
      assertEquals(2381, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.X();
      assertEquals(362, int1);
      assertEquals((-2380), rOI0.ux());
      assertEquals((-2019), rOI0.lx());
      assertEquals((-2380), rOI0.uy());
      assertEquals(362, rOI0.X());
      assertEquals(2381, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(2381, int2);
      assertEquals((-2380), rOI0.ux());
      assertEquals((-2019), rOI0.lx());
      assertEquals((-2380), rOI0.uy());
      assertEquals(362, rOI0.X());
      assertEquals(2381, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(362, 2381, (-1371.351F), 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2381
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI((-2), (-2), (-2), (-2));
      assertNotNull(rOI0);
      assertEquals((-2), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals((-2), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-2), rOI0.uy());
      assertEquals((-2), rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals((-2), int0);
      assertEquals((-2), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals((-2), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-2), rOI0.uy());
      assertEquals((-2), rOI0.ux());
      
      int int1 = new Integer((-2));
      assertEquals((-2), int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals((-2), int2);
      assertEquals((-2), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals((-2), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-2), rOI0.uy());
      assertEquals((-2), rOI0.ux());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ly();
      assertEquals((-2), int3);
      assertEquals((-2), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals((-2), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-2), rOI0.uy());
      assertEquals((-2), rOI0.ux());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((-16777216), (-2022), (float) (-2), (float) (-2), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      complexImage0.setImag(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(1239, (-2920), (float) 0, 709.75696F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.set(1, 1, (Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(0, 0, (-1149), (-1149));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1150, rOI0.Y());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals(1150, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1150, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1150, rOI0.Y());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals(1150, rOI0.X());
      
      int int1 = rOI0.Y();
      assertEquals(1150, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1150, rOI0.Y());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals(1150, rOI0.X());
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.add(1272.1F, (float) (-1149), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1149
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      int int0 = 1253;
      float float0 = 1.0F;
      ComplexImage complexImage1 = complexImage0.divide((float) 1253, 1.0F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 2366;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = new Integer(0);
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      
      int int5 = rOI0.lx();
      assertEquals(0, int5);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(32.6015F, 4.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((-1067.0F));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI(0, 0, 2366, (-2769));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertEquals(2367, rOI0.X());
      assertEquals((-2769), rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(2367, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertEquals(2367, rOI0.X());
      assertEquals((-2769), rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertEquals(2770, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertEquals(2367, rOI0.X());
      assertEquals((-2769), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(1, 2405, (float) 1, (float) 16, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2405
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-1421), 2337, 2337, (-2769));
      assertNotNull(rOI0);
      assertEquals(2337, rOI0.lx());
      assertEquals(2337, rOI0.ly());
      assertEquals((-2769), rOI0.uy());
      assertEquals(5107, rOI0.Y());
      assertEquals(3759, rOI0.X());
      assertEquals((-1421), rOI0.ux());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) (-1421), 2282.203F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 2298;
      float float0 = 0.0F;
      ROI rOI0 = new ROI(2298, 2298, 2298, 2298);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(2298, rOI0.ux());
      assertEquals(2298, rOI0.uy());
      assertEquals(2298, rOI0.lx());
      assertEquals(2298, rOI0.ly());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      rOI0.setROI(2298, 2298, 2298, 2298);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(2298, rOI0.ux());
      assertEquals(2298, rOI0.uy());
      assertEquals(2298, rOI0.lx());
      assertEquals(2298, rOI0.ly());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        complexImage0.getImag(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 0;
      int int1 = 2366;
      ComplexImage complexImage1 = new ComplexImage(2366, 2366);
      assertNotNull(complexImage1);
      assertEquals(2366, complexImage1.X());
      assertEquals(2366, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      complexImage1.copy();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 16;
      int int1 = 1;
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((-1067.0F));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI(0, 0, 2366, 1);
      assertNotNull(rOI0);
      assertEquals(2, rOI0.Y());
      assertEquals(2366, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(2367, rOI0.X());
      
      int int2 = rOI0.X();
      assertEquals(2367, int2);
      assertEquals(2, rOI0.Y());
      assertEquals(2366, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(2367, rOI0.X());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = rOI0.Y();
      assertEquals(2, int3);
      assertEquals(2, rOI0.Y());
      assertEquals(2366, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(2367, rOI0.X());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(0, 2366, 0, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2366, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(2367, rOI0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 0, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 0;
      int int1 = (-2769);
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      
      int int6 = rOI0.lx();
      assertEquals(0, int6);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(0, 0, (float) 0, (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage(0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 1227;
      // Undeclared exception!
      try { 
        complexImage0.multiply(1227, 1227, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(0, 0, 2366, (-2769));
      assertNotNull(rOI0);
      assertEquals(2367, rOI0.X());
      assertEquals(2366, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2770, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(2367, int0);
      assertEquals(2367, rOI0.X());
      assertEquals(2366, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2770, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 0, 32767.0F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-2769), (-2769), 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-954), (-954), 181, 454);
      assertNotNull(rOI0);
      assertEquals(1136, rOI0.X());
      assertEquals((-954), rOI0.uy());
      assertEquals(1409, rOI0.Y());
      assertEquals((-954), rOI0.ux());
      assertEquals(454, rOI0.ly());
      assertEquals(181, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1136, int0);
      assertEquals(1136, rOI0.X());
      assertEquals((-954), rOI0.uy());
      assertEquals(1409, rOI0.Y());
      assertEquals((-954), rOI0.ux());
      assertEquals(454, rOI0.ly());
      assertEquals(181, rOI0.lx());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      
      ComplexImage complexImage2 = complexImage1.divide((-2757.179F), 2325.331F);
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = new ComplexImage();
      assertNotNull(complexImage3);
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      
      int int1 = complexImage3.X();
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(0, int1);
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(int1 == int0);
      
      int int2 = complexImage3.Y();
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(0, int2);
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      // Undeclared exception!
      try { 
        complexImage3.getImaginary((-3060), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((-1067.0F));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.setImag(realGrayImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-2758), (-2758), (-0.4163092F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2758
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI((-2019), (-2380), (-2380), 0);
      assertNotNull(rOI0);
      assertEquals((-2380), rOI0.ux());
      assertEquals((-2019), rOI0.lx());
      assertEquals((-2380), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(2381, rOI0.Y());
      assertEquals(362, rOI0.X());
      
      int int1 = rOI0.X();
      assertEquals(362, int1);
      assertEquals((-2380), rOI0.ux());
      assertEquals((-2019), rOI0.lx());
      assertEquals((-2380), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(2381, rOI0.Y());
      assertEquals(362, rOI0.X());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(2381, int2);
      assertEquals((-2380), rOI0.ux());
      assertEquals((-2019), rOI0.lx());
      assertEquals((-2380), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(2381, rOI0.Y());
      assertEquals(362, rOI0.X());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string0 = complexImage0.toString();
      assertNotNull(string0);
      assertEquals("0:0\n0:0\n", string0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(362, 2381, (-1371.351F), 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2381
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 1239;
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      
      int int1 = 0;
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(1239, (-2920), (float) 0, 715.501F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      
      int int6 = rOI0.lx();
      assertEquals(0, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int5);
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      
      int int8 = rOI0.ly();
      assertEquals(0, int8);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertTrue(int8 == int6);
      assertTrue(int8 == int0);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      
      int int9 = rOI0.lx();
      assertEquals(0, int9);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int9 == int7);
      assertTrue(int9 == int6);
      assertTrue(int9 == int1);
      assertTrue(int9 == int3);
      assertTrue(int9 == int4);
      assertTrue(int9 == int5);
      assertTrue(int9 == int0);
      assertTrue(int9 == int8);
      assertTrue(int9 == int2);
      
      int int10 = rOI0.ux();
      assertEquals(0, int10);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int10 == int0);
      assertTrue(int10 == int8);
      assertTrue(int10 == int2);
      assertTrue(int10 == int9);
      assertTrue(int10 == int1);
      assertTrue(int10 == int7);
      assertTrue(int10 == int6);
      assertTrue(int10 == int3);
      assertTrue(int10 == int4);
      assertTrue(int10 == int5);
      
      int int11 = rOI0.ly();
      assertEquals(0, int11);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int11 == int10);
      assertTrue(int11 == int8);
      assertTrue(int11 == int4);
      assertTrue(int11 == int2);
      assertTrue(int11 == int7);
      assertTrue(int11 == int6);
      assertTrue(int11 == int9);
      assertTrue(int11 == int0);
      assertTrue(int11 == int3);
      assertTrue(int11 == int5);
      assertTrue(int11 == int1);
      
      int int12 = 2366;
      ROI rOI1 = new ROI(0, 0, 2366, 0);
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(2367, rOI1.X());
      assertEquals(2366, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int13 = rOI1.X();
      assertNotSame(rOI1, rOI0);
      assertEquals(2367, int13);
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(2367, rOI1.X());
      assertEquals(2366, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(int13 == int8);
      assertFalse(int13 == int3);
      assertFalse(int13 == int4);
      assertFalse(int13 == int11);
      assertFalse(int13 == int1);
      assertFalse(int13 == int12);
      assertFalse(int13 == int0);
      assertFalse(int13 == int2);
      assertFalse(int13 == int5);
      assertFalse(int13 == int10);
      assertFalse(int13 == int9);
      assertFalse(int13 == int7);
      assertFalse(int13 == int6);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int14 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int14);
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(2367, rOI1.X());
      assertEquals(2366, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(int14 == int12);
      assertFalse(int14 == int0);
      assertFalse(int14 == int5);
      assertFalse(int14 == int2);
      assertFalse(int14 == int11);
      assertFalse(int14 == int1);
      assertFalse(int14 == int3);
      assertFalse(int14 == int4);
      assertFalse(int14 == int8);
      assertFalse(int14 == int13);
      assertFalse(int14 == int10);
      assertFalse(int14 == int9);
      assertFalse(int14 == int7);
      assertFalse(int14 == int6);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(13, 13, 13, 13);
      assertNotNull(rOI0);
      assertEquals(13, rOI0.uy());
      assertEquals(13, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(13, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(13, rOI0.lx());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) integer0, (float) 13, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(0, 0, 2366, (-2769));
      assertNotNull(rOI0);
      assertEquals(2367, rOI0.X());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals((-2769), rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage1 = complexImage0.subtract((float) (-2769), 1287.1096F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getMagnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      float float0 = 0.0F;
      ROI rOI0 = new ROI(0, 0, 2366, (-2769));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2367, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(2367, int0);
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2367, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertEquals(2770, int1);
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2367, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((-1067.0F));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.imag = realGrayImage1;
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, complexImage0.imag.X());
      assertEquals(0.0F, complexImage0.imag.absSum(), 0.01F);
      assertEquals(0, complexImage0.imag.Y());
      assertEquals(0.0, complexImage0.imag.sqrSum(), 0.01);
      assertEquals(0.0F, complexImage0.imag.addSum(), 0.01F);
      assertEquals((-32768.0F), complexImage0.imag.max(), 0.01F);
      assertEquals(32767.0F, complexImage0.imag.min(), 0.01F);
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.set(16, 1, (float) 16, (float) 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(1037, 3843);
      assertNotNull(complexImage1);
      assertEquals(1037, complexImage1.X());
      assertEquals(3843, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage1.diff(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-2019), (-2380), (-2380), 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(362, rOI0.X());
      assertEquals((-2380), rOI0.ux());
      assertEquals(2381, rOI0.Y());
      assertEquals((-2380), rOI0.uy());
      assertEquals((-2019), rOI0.lx());
      
      int int1 = rOI0.X();
      assertEquals(362, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(362, rOI0.X());
      assertEquals((-2380), rOI0.ux());
      assertEquals(2381, rOI0.Y());
      assertEquals((-2380), rOI0.uy());
      assertEquals((-2019), rOI0.lx());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(2381, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(362, rOI0.X());
      assertEquals((-2380), rOI0.ux());
      assertEquals(2381, rOI0.Y());
      assertEquals((-2380), rOI0.uy());
      assertEquals((-2019), rOI0.lx());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(98, 0, (-373), 98, (float) 0, (-2391.593F));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(98, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage0.imaginary();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertFalse(complexImage0.equals((Object)complexImage1));
      
      float float0 = (-1371.351F);
      // Undeclared exception!
      try { 
        complexImage0.get(1363, (-37));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -37
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(13, 13, 13, 13);
      assertNotNull(rOI0);
      assertEquals(13, rOI0.uy());
      assertEquals(13, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(13, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(13, rOI0.lx());
      
      ComplexImage complexImage1 = complexImage0.add((float) (-2400), (-115.587F));
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      rOI0.setROI((-2400), 128, 13, 13);
      assertEquals(2414, rOI0.X());
      assertEquals(13, rOI0.uy());
      assertEquals(116, rOI0.Y());
      assertEquals(128, rOI0.ly());
      assertEquals((-2400), rOI0.ux());
      assertEquals(13, rOI0.lx());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) integer0, (float) 13, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-2769), 255, 883, (-1149));
      assertNotNull(rOI0);
      assertEquals((-2769), rOI0.ux());
      assertEquals(3653, rOI0.X());
      assertEquals(255, rOI0.ly());
      assertEquals(883, rOI0.lx());
      assertEquals((-1149), rOI0.uy());
      assertEquals(1405, rOI0.Y());
      
      rOI0.setROI(128, 883, 2366, 2357);
      assertEquals(128, rOI0.ux());
      assertEquals(2357, rOI0.ly());
      assertEquals(1475, rOI0.Y());
      assertEquals(2366, rOI0.lx());
      assertEquals(2239, rOI0.X());
      assertEquals(883, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(2239, int0);
      assertEquals(128, rOI0.ux());
      assertEquals(2357, rOI0.ly());
      assertEquals(1475, rOI0.Y());
      assertEquals(2366, rOI0.lx());
      assertEquals(2239, rOI0.X());
      assertEquals(883, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertEquals(1475, int1);
      assertEquals(128, rOI0.ux());
      assertEquals(2357, rOI0.ly());
      assertEquals(1475, rOI0.Y());
      assertEquals(2366, rOI0.lx());
      assertEquals(2239, rOI0.X());
      assertEquals(883, rOI0.uy());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(2366, 883, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1766
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(18, 18, 18, 18);
      assertNotNull(rOI0);
      assertEquals(18, rOI0.ux());
      assertEquals(18, rOI0.uy());
      assertEquals(18, rOI0.ly());
      assertEquals(18, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(18, int0);
      assertEquals(18, rOI0.ux());
      assertEquals(18, rOI0.uy());
      assertEquals(18, rOI0.ly());
      assertEquals(18, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertEquals(18, int1);
      assertEquals(18, rOI0.ux());
      assertEquals(18, rOI0.uy());
      assertEquals(18, rOI0.ly());
      assertEquals(18, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.lx();
      assertEquals(18, int2);
      assertEquals(18, rOI0.ux());
      assertEquals(18, rOI0.uy());
      assertEquals(18, rOI0.ly());
      assertEquals(18, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ux();
      assertEquals(18, int3);
      assertEquals(18, rOI0.ux());
      assertEquals(18, rOI0.uy());
      assertEquals(18, rOI0.ly());
      assertEquals(18, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.lx();
      assertEquals(18, int4);
      assertEquals(18, rOI0.ux());
      assertEquals(18, rOI0.uy());
      assertEquals(18, rOI0.ly());
      assertEquals(18, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      
      int int5 = rOI0.ux();
      assertEquals(18, int5);
      assertEquals(18, rOI0.ux());
      assertEquals(18, rOI0.uy());
      assertEquals(18, rOI0.ly());
      assertEquals(18, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int6 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int6);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      
      int int7 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int7);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int4);
      assertTrue(int7 == int6);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      
      int int8 = rOI1.uy();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int8);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int8 == int7);
      assertTrue(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int2);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      
      int int9 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int9);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int5);
      assertTrue(int9 == int8);
      assertFalse(int9 == int3);
      assertFalse(int9 == int1);
      assertFalse(int9 == int2);
      assertTrue(int9 == int6);
      assertFalse(int9 == int0);
      assertFalse(int9 == int4);
      assertTrue(int9 == int7);
      
      int int10 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int10);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int10 == int6);
      assertFalse(int10 == int2);
      assertFalse(int10 == int0);
      assertFalse(int10 == int4);
      assertTrue(int10 == int9);
      assertTrue(int10 == int7);
      assertFalse(int10 == int5);
      assertTrue(int10 == int8);
      assertFalse(int10 == int3);
      assertFalse(int10 == int1);
      
      int int11 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int11);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int11 == int5);
      assertTrue(int11 == int9);
      assertFalse(int11 == int2);
      assertFalse(int11 == int4);
      assertTrue(int11 == int8);
      assertTrue(int11 == int7);
      assertFalse(int11 == int0);
      assertTrue(int11 == int6);
      assertTrue(int11 == int10);
      assertFalse(int11 == int1);
      assertFalse(int11 == int3);
      
      int int12 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int12);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int12 == int0);
      assertTrue(int12 == int6);
      assertTrue(int12 == int10);
      assertTrue(int12 == int11);
      assertFalse(int12 == int2);
      assertTrue(int12 == int7);
      assertTrue(int12 == int9);
      assertFalse(int12 == int5);
      assertFalse(int12 == int3);
      assertFalse(int12 == int4);
      assertTrue(int12 == int8);
      assertFalse(int12 == int1);
      
      int int13 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int13);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertTrue(int13 == int9);
      assertFalse(int13 == int4);
      assertTrue(int13 == int6);
      assertFalse(int13 == int0);
      assertTrue(int13 == int10);
      assertFalse(int13 == int1);
      assertTrue(int13 == int12);
      assertFalse(int13 == int5);
      assertTrue(int13 == int8);
      assertFalse(int13 == int2);
      assertTrue(int13 == int7);
      assertFalse(int13 == int3);
      assertTrue(int13 == int11);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int14 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int14);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertTrue(int14 == int11);
      assertTrue(int14 == int9);
      assertFalse(int14 == int4);
      assertFalse(int14 == int3);
      assertTrue(int14 == int7);
      assertFalse(int14 == int1);
      assertFalse(int14 == int2);
      assertTrue(int14 == int6);
      assertFalse(int14 == int0);
      assertTrue(int14 == int10);
      assertTrue(int14 == int13);
      assertTrue(int14 == int12);
      assertTrue(int14 == int8);
      assertFalse(int14 == int5);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int15 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int15);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(int15 == int5);
      assertTrue(int15 == int8);
      assertFalse(int15 == int4);
      assertTrue(int15 == int7);
      assertFalse(int15 == int2);
      assertTrue(int15 == int6);
      assertTrue(int15 == int10);
      assertFalse(int15 == int0);
      assertFalse(int15 == int1);
      assertTrue(int15 == int14);
      assertTrue(int15 == int12);
      assertTrue(int15 == int9);
      assertFalse(int15 == int3);
      assertTrue(int15 == int11);
      assertTrue(int15 == int13);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      
      int int6 = rOI0.lx();
      assertEquals(0, int6);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int7 == int1);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int0);
      
      int int8 = rOI0.ly();
      assertEquals(0, int8);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int8 == int6);
      assertTrue(int8 == int1);
      assertTrue(int8 == int2);
      assertTrue(int8 == int3);
      assertTrue(int8 == int0);
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertTrue(int8 == int5);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(255, 1037);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(0, (-3220), 0, (-2769));
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals((-2769), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-3220), rOI0.uy());
      assertEquals(452, rOI0.Y());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals((-2769), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-3220), rOI0.uy());
      assertEquals(452, rOI0.Y());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertEquals(452, int1);
      assertEquals(1, rOI0.X());
      assertEquals((-2769), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-3220), rOI0.uy());
      assertEquals(452, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((ComplexImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal((-467), (-467));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      float float0 = 1449.9426F;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      
      rOI0.setROI(0, 0, (-1453), 0);
      assertEquals(0, rOI0.uy());
      assertEquals((-1453), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1454, rOI0.X());
      
      int int6 = rOI0.lx();
      assertEquals(0, int6);
      assertEquals(0, rOI0.uy());
      assertEquals((-1453), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1454, rOI0.X());
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      
      int int7 = rOI0.ux();
      assertEquals((-1453), int7);
      assertEquals(0, rOI0.uy());
      assertEquals((-1453), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1454, rOI0.X());
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract((-3005.0F), (float) (-141));
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(0, (-2790), (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2790
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ly();
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int2);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int3);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI1.uy();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int4);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      int int5 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int5);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      
      int int6 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int6);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      
      int int7 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int7);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      
      int int8 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int8);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int8 == int4);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      assertTrue(int8 == int2);
      assertTrue(int8 == int0);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      
      int int9 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int9);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int9 == int3);
      assertTrue(int9 == int5);
      assertTrue(int9 == int4);
      assertTrue(int9 == int2);
      assertTrue(int9 == int6);
      assertTrue(int9 == int8);
      assertTrue(int9 == int7);
      assertTrue(int9 == int0);
      assertTrue(int9 == int1);
      
      int int10 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int10);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int10 == int3);
      assertTrue(int10 == int0);
      assertTrue(int10 == int5);
      assertTrue(int10 == int8);
      assertTrue(int10 == int6);
      assertTrue(int10 == int4);
      assertTrue(int10 == int7);
      assertTrue(int10 == int1);
      assertTrue(int10 == int2);
      assertTrue(int10 == int9);
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(0, 0, 2366, (-2769));
      assertNotNull(rOI0);
      assertEquals(2770, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2367, rOI0.X());
      assertEquals(2366, rOI0.lx());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ComplexImage complexImage1 = complexImage0.subtract((float) (-2769), 1287.1096F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      complexImage1.divide(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((-1067.0F));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI(0, 0, 2366, (-2769));
      assertNotNull(rOI0);
      assertEquals(2367, rOI0.X());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals((-2769), rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.Y();
      assertEquals(2770, int0);
      assertEquals(2367, rOI0.X());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals((-2769), rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(1, 2405, (float) 1, (float) 16, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2405
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI(0, 0, 2366, (-2769));
      assertNotNull(rOI0);
      assertEquals(2367, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(16, (-3081), 149.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3081
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(458, 1367);
      assertNotNull(complexImage0);
      assertEquals(458, complexImage0.X());
      assertEquals(1367, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      
      int int6 = rOI0.lx();
      assertEquals(0, int6);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int7 == int1);
      assertTrue(int7 == int4);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int3);
      
      int int8 = rOI0.ly();
      assertEquals(0, int8);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int8 == int3);
      assertTrue(int8 == int0);
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertTrue(int8 == int2);
      assertTrue(int8 == int1);
      
      Complex complex0 = new Complex((-2113.2165576), (-2113.2165576));
      assertNotNull(complex0);
      assertEquals(2988.5396F, complex0.floatValue(), 0.01F);
      assertEquals((-2113.216552734375), complex0.imaginary(), 0.01);
      assertEquals((byte) (-84), complex0.byteValue());
      assertEquals((-2113.216552734375), complex0.imag(), 0.01);
      assertEquals((-2113.216552734375), complex0.real(), 0.01);
      assertEquals((-2.356194490192345), complex0.arg(), 0.01);
      assertEquals(2988, complex0.intValue());
      assertEquals(2988L, complex0.longValue());
      assertEquals((short)2988, complex0.shortValue());
      assertEquals(2988.539442604029, complex0.magnitude(), 0.01);
      assertEquals(2988.539442604029, complex0.doubleValue(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals(2988.5396F, complex0.floatValue(), 0.01F);
      assertEquals((-2113.216552734375), complex0.imaginary(), 0.01);
      assertEquals((byte) (-84), complex0.byteValue());
      assertEquals((-2113.216552734375), complex0.imag(), 0.01);
      assertEquals((-2113.216552734375), complex0.real(), 0.01);
      assertEquals((-2.356194490192345), complex0.arg(), 0.01);
      assertEquals(2988, complex0.intValue());
      assertEquals(2988L, complex0.longValue());
      assertEquals((short)2988, complex0.shortValue());
      assertEquals(2988.539442604029, complex0.magnitude(), 0.01);
      assertEquals(2988.539442604029, complex0.doubleValue(), 0.01);
      assertEquals(2988.5396F, complex1.floatValue(), 0.01F);
      assertEquals((byte) (-84), complex1.byteValue());
      assertEquals(2988, complex1.intValue());
      assertEquals((-2113.216552734375), complex1.imag(), 0.01);
      assertEquals((-2.356194490192345), complex1.arg(), 0.01);
      assertEquals(2988.539442604029, complex1.magnitude(), 0.01);
      assertEquals(2988.539442604029, complex1.doubleValue(), 0.01);
      assertEquals((-2113.216552734375), complex1.real(), 0.01);
      assertEquals((short)2988, complex1.shortValue());
      assertEquals(2988L, complex1.longValue());
      assertEquals((-2113.216552734375), complex1.imaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      // Undeclared exception!
      try { 
        complexImage0.set(1367, 0, complex1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1367
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(0, 0, (-1149), (-1149));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1150, rOI0.X());
      assertEquals((-1149), rOI0.uy());
      assertEquals(1150, rOI0.Y());
      assertEquals((-1149), rOI0.ux());
      
      rOI0.setROI((-1149), 1, 1, 2366);
      assertEquals(2366, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1151, rOI0.X());
      assertEquals((-1149), rOI0.ux());
      assertEquals(2366, rOI0.ly());
      assertEquals(1, rOI0.uy());
      
      rOI0.setROI(259, (-1149), (-1149), (-1149));
      assertEquals(1, rOI0.Y());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals(1409, rOI0.X());
      assertEquals(259, rOI0.lx());
      assertEquals((-1149), rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1409, int0);
      assertEquals(1, rOI0.Y());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals(1409, rOI0.X());
      assertEquals(259, rOI0.lx());
      assertEquals((-1149), rOI0.ly());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals(1409, rOI0.X());
      assertEquals(259, rOI0.lx());
      assertEquals((-1149), rOI0.ly());
      assertFalse(int1 == int0);
      
      ComplexImage complexImage1 = complexImage0.divide((float) 2366, 2802.9F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage2.imag();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = complexImage0.addbuffer(1363, 0, (float) 0, (-879.33093F));
      assertNotNull(complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage3.Y());
      assertEquals(1363, complexImage3.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage3.set(3918, 0, (-278.0F), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((-1067.0F));
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      int int0 = 325;
      ROI rOI0 = new ROI(0, 0, 2366, (-2769));
      assertNotNull(rOI0);
      assertEquals(2367, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      
      int int1 = rOI0.X();
      assertEquals(2367, int1);
      assertEquals(2367, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(2770, int2);
      assertEquals(2367, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals((-2769), rOI0.uy());
      assertEquals(2366, rOI0.lx());
      assertEquals(2770, rOI0.Y());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.set(255, 325, 0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 2366;
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(2366, 8, 2366, 2366, (float) 2366, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-2898), 1766, 1766, 1, (float) 1, 2806.0F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(458, 1367);
      assertNotNull(complexImage0);
      assertEquals(1367, complexImage0.Y());
      assertEquals(458, complexImage0.X());
      
      int int0 = 1708;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.uy();
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      
      int int5 = rOI0.lx();
      assertEquals(0, int5);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertFalse(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      
      int int7 = rOI0.lx();
      assertEquals(0, int7);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int7 == int5);
      assertTrue(int7 == int4);
      assertFalse(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      
      int int8 = rOI0.ux();
      assertEquals(0, int8);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int8 == int1);
      assertTrue(int8 == int4);
      assertTrue(int8 == int6);
      assertTrue(int8 == int5);
      assertFalse(int8 == int0);
      assertTrue(int8 == int3);
      assertTrue(int8 == int2);
      assertTrue(int8 == int7);
      
      int int9 = rOI0.ly();
      assertEquals(0, int9);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int9 == int2);
      assertTrue(int9 == int8);
      assertTrue(int9 == int1);
      assertTrue(int9 == int7);
      assertTrue(int9 == int4);
      assertTrue(int9 == int5);
      assertFalse(int9 == int0);
      assertTrue(int9 == int3);
      assertTrue(int9 == int6);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1708, 1367, (-32768.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1367
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.set(2247, 2247, (Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 2261;
      int int1 = (-1733);
      // Undeclared exception!
      try { 
        complexImage0.subtract(2946, (-1733), (float) 2946, (float) 2261);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 16;
      int int1 = 1;
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      
      int int0 = 0;
      float float0 = 0.0F;
      ROI rOI0 = null;
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int1 = complexImage1.X();
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, int1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertTrue(int1 == int0);
      
      int int2 = complexImage1.Y();
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, int2);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      // Undeclared exception!
      try { 
        complexImage1.getImaginary((-3060), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(0, 0, (-1149), (-1149));
      assertNotNull(rOI0);
      assertEquals(1150, rOI0.X());
      assertEquals((-1149), rOI0.uy());
      assertEquals(1150, rOI0.Y());
      assertEquals((-1149), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      rOI0.setROI(259, (-1149), (-1149), (-1149));
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1409, rOI0.X());
      assertEquals((-1149), rOI0.ly());
      assertEquals(259, rOI0.lx());
      
      rOI0.setROI(259, (-1), (-1236), 1689);
      assertEquals(1689, rOI0.ly());
      assertEquals((-1236), rOI0.ux());
      assertEquals(1496, rOI0.X());
      assertEquals(259, rOI0.lx());
      assertEquals(1691, rOI0.Y());
      assertEquals((-1), rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1496, int0);
      assertEquals(1689, rOI0.ly());
      assertEquals((-1236), rOI0.ux());
      assertEquals(1496, rOI0.X());
      assertEquals(259, rOI0.lx());
      assertEquals(1691, rOI0.Y());
      assertEquals((-1), rOI0.uy());
      
      int int1 = rOI0.Y();
      assertEquals(1691, int1);
      assertEquals(1689, rOI0.ly());
      assertEquals((-1236), rOI0.ux());
      assertEquals(1496, rOI0.X());
      assertEquals(259, rOI0.lx());
      assertEquals(1691, rOI0.Y());
      assertEquals((-1), rOI0.uy());
      assertFalse(int1 == int0);
      
      ComplexImage complexImage1 = complexImage0.divide((float) 2366, 2802.9F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ComplexImage complexImage3 = complexImage2.diff(complexImage1);
      assertNotNull(complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      ComplexImage complexImage4 = complexImage2.divide((float) (-1), 0.0F);
      assertNotNull(complexImage4);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage4);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage0);
      assertSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage4.X());
      assertEquals(0, complexImage4.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage1));
      
      RealGrayImage realGrayImage1 = complexImage2.imag();
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage4);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ImageProducer imageProducer0 = complexImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage4);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(1691, (-2053), 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2053
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI(0, 0, 0, 3827);
      assertEquals(3827, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3828, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(3827, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3828, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(3827, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3828, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(3827, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3828, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(3827, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3828, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      
      rOI0.setROI((-1), (-1), (-1), 2137);
      assertEquals(2139, rOI0.Y());
      assertEquals((-1), rOI0.uy());
      assertEquals((-1), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(2137, rOI0.ly());
      assertEquals((-1), rOI0.lx());
      
      int int5 = rOI0.ux();
      assertEquals((-1), int5);
      assertEquals(2139, rOI0.Y());
      assertEquals((-1), rOI0.uy());
      assertEquals((-1), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(2137, rOI0.ly());
      assertEquals((-1), rOI0.lx());
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      
      int int6 = rOI0.lx();
      assertEquals((-1), int6);
      assertEquals(2139, rOI0.Y());
      assertEquals((-1), rOI0.uy());
      assertEquals((-1), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(2137, rOI0.ly());
      assertEquals((-1), rOI0.lx());
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(1.0F, (-176.18F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(13, 13, 13, 13);
      assertNotNull(rOI0);
      assertEquals(13, rOI0.uy());
      assertEquals(13, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(13, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(13, rOI0.lx());
      
      ComplexImage complexImage1 = new ComplexImage(1037, 1037);
      assertNotNull(complexImage1);
      assertEquals(1037, complexImage1.X());
      assertEquals(1037, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage1.real();
      complexImage1.min();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      
      int int6 = rOI0.lx();
      assertEquals(0, int6);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int7 == int3);
      assertTrue(int7 == int0);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.lx();
      assertEquals(0, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        complexImage0.add(904, (-20), (float) 1, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 18;
      float float0 = 0.0F;
      int int1 = 2366;
      ROI rOI0 = new ROI(0, 0, 2366, (-2769));
      assertNotNull(rOI0);
      assertEquals((-2769), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(2367, rOI0.X());
      assertEquals(2770, rOI0.Y());
      assertEquals(2366, rOI0.lx());
      
      int int2 = rOI0.X();
      assertEquals(2367, int2);
      assertEquals((-2769), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(2367, rOI0.X());
      assertEquals(2770, rOI0.Y());
      assertEquals(2366, rOI0.lx());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.Y();
      assertEquals(2770, int3);
      assertEquals((-2769), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(2367, rOI0.X());
      assertEquals(2770, rOI0.Y());
      assertEquals(2366, rOI0.lx());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(18, 18, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(0, 0, (-1149), (-1149));
      assertNotNull(rOI0);
      assertEquals(1150, rOI0.X());
      assertEquals((-1149), rOI0.uy());
      assertEquals(1150, rOI0.Y());
      assertEquals((-1149), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI((-1149), 1, 1, 2881);
      assertEquals(2881, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(1151, rOI0.X());
      assertEquals((-1149), rOI0.ux());
      assertEquals(2881, rOI0.Y());
      assertEquals(1, rOI0.lx());
      
      rOI0.setROI(259, (-1149), (-1149), (-1149));
      assertEquals((-1149), rOI0.ly());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-1149), rOI0.ux());
      assertEquals(1409, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(259, rOI0.lx());
      
      rOI0.setROI(259, 2, (-4067), 236);
      assertEquals(4327, rOI0.X());
      assertEquals((-4067), rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(2, rOI0.uy());
      assertEquals(236, rOI0.ly());
      assertEquals(259, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(4327, int0);
      assertEquals(4327, rOI0.X());
      assertEquals((-4067), rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(2, rOI0.uy());
      assertEquals(236, rOI0.ly());
      assertEquals(259, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertEquals(235, int1);
      assertEquals(4327, rOI0.X());
      assertEquals((-4067), rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(2, rOI0.uy());
      assertEquals(236, rOI0.ly());
      assertEquals(259, rOI0.lx());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(863, (-1149));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1149
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.set(1253, 1253, (Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(458, 1367);
      assertNotNull(complexImage0);
      assertEquals(1367, complexImage0.Y());
      assertEquals(458, complexImage0.X());
      
      int int0 = 1708;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      rOI0.setROI(0, 458, 0, 1708);
      assertEquals(1, rOI0.X());
      assertEquals(1708, rOI0.ly());
      assertEquals(458, rOI0.uy());
      assertEquals(1251, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.uy();
      assertEquals(458, int3);
      assertEquals(1, rOI0.X());
      assertEquals(1708, rOI0.ly());
      assertEquals(458, rOI0.uy());
      assertEquals(1251, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(1, rOI0.X());
      assertEquals(1708, rOI0.ly());
      assertEquals(458, rOI0.uy());
      assertEquals(1251, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      
      int int5 = rOI0.lx();
      assertEquals(0, int5);
      assertEquals(1, rOI0.X());
      assertEquals(1708, rOI0.ly());
      assertEquals(458, rOI0.uy());
      assertEquals(1251, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertTrue(int5 == int2);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(1, rOI0.X());
      assertEquals(1708, rOI0.ly());
      assertEquals(458, rOI0.uy());
      assertEquals(1251, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertFalse(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      
      int int7 = rOI0.lx();
      assertEquals(0, int7);
      assertEquals(1, rOI0.X());
      assertEquals(1708, rOI0.ly());
      assertEquals(458, rOI0.uy());
      assertEquals(1251, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertTrue(int7 == int2);
      assertFalse(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int4);
      assertFalse(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      
      int int8 = rOI0.ux();
      assertEquals(0, int8);
      assertEquals(1, rOI0.X());
      assertEquals(1708, rOI0.ly());
      assertEquals(458, rOI0.uy());
      assertEquals(1251, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertFalse(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int4);
      assertTrue(int8 == int6);
      assertFalse(int8 == int0);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertTrue(int8 == int2);
      
      int int9 = rOI0.ly();
      assertEquals(1708, int9);
      assertEquals(1, rOI0.X());
      assertEquals(1708, rOI0.ly());
      assertEquals(458, rOI0.uy());
      assertEquals(1251, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertFalse(int9 == int1);
      assertFalse(int9 == int3);
      assertFalse(int9 == int7);
      assertFalse(int9 == int2);
      assertFalse(int9 == int4);
      assertFalse(int9 == int8);
      assertFalse(int9 == int5);
      assertFalse(int9 == int6);
      assertTrue(int9 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1708, 1367, (-32768.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1825
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 2893;
      int int1 = 308;
      int int2 = 255;
      int int3 = 1;
      int int4 = complexImage0.Y();
      assertEquals(0, int4);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1, 1, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(0, 0, (-1149), (-1149));
      assertNotNull(rOI0);
      assertEquals((-1149), rOI0.ux());
      assertEquals(1150, rOI0.X());
      assertEquals(1150, rOI0.Y());
      assertEquals((-1149), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      rOI0.setROI(259, (-1149), (-1149), (-1149));
      assertEquals((-1149), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-1149), rOI0.uy());
      assertEquals(1409, rOI0.X());
      assertEquals(259, rOI0.lx());
      assertEquals((-1149), rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1409, int0);
      assertEquals((-1149), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-1149), rOI0.uy());
      assertEquals(1409, rOI0.X());
      assertEquals(259, rOI0.lx());
      assertEquals((-1149), rOI0.ly());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals((-1149), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-1149), rOI0.uy());
      assertEquals(1409, rOI0.X());
      assertEquals(259, rOI0.lx());
      assertEquals((-1149), rOI0.ly());
      assertFalse(int1 == int0);
      
      rOI0.setROI(1, 737, (-366), (-16777216));
      assertEquals((-366), rOI0.ux());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(368, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(737, rOI0.ly());
      assertEquals(16777954, rOI0.Y());
      
      ComplexImage complexImage1 = complexImage0.divide((float) 2366, 2802.9F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      RealGrayImage realGrayImage1 = complexImage2.imag();
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ComplexImage complexImage3 = complexImage2.clear();
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      ImageProducer imageProducer0 = complexImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(1, (-2053), 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2053
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 1239;
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      
      int int1 = 0;
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(458, 1367);
      assertNotNull(complexImage0);
      assertEquals(1367, complexImage0.Y());
      assertEquals(458, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      
      int int2 = new Integer(1367);
      assertEquals(1367, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int3);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      
      int int6 = rOI0.lx();
      assertEquals(0, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertTrue(int7 == int0);
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertFalse(int7 == int2);
      assertTrue(int7 == int6);
      
      int int8 = rOI0.ly();
      assertEquals(0, int8);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      assertTrue(int8 == int0);
      assertTrue(int8 == int1);
      assertTrue(int8 == int3);
      assertFalse(int8 == int2);
      assertTrue(int8 == int4);
      
      complexImage0.setReal((RealGrayImage) null);
      assertEquals(1367, complexImage0.Y());
      assertEquals(458, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 0, (-2045.987F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = (-1099);
      int int1 = (-790);
      // Undeclared exception!
      try { 
        complexImage0.get((-2155), (-1099));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-651), (-1), 1.0F, (-21.5386F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.set((-2769), (-2769), (float) (-2769), (float) (-2769));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(458, 1367);
      assertNotNull(complexImage0);
      assertEquals(1367, complexImage0.Y());
      assertEquals(458, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      
      ROI rOI1 = new ROI(1367, 458, 1367, 3164);
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(1367, rOI1.ux());
      assertEquals(3164, rOI1.ly());
      assertEquals(2707, rOI1.Y());
      assertEquals(1367, rOI1.lx());
      assertEquals(458, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.set(0, 3164, (float) 1367, (float) 3164, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3622
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(0, 0, (-2415.9019F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-1), 590, (-3220), (-1));
      assertNotNull(rOI0);
      assertEquals((-1), rOI0.uy());
      assertEquals(3220, rOI0.X());
      assertEquals(592, rOI0.Y());
      assertEquals((-1), rOI0.lx());
      assertEquals(590, rOI0.ly());
      assertEquals((-3220), rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(3220, int0);
      assertEquals((-1), rOI0.uy());
      assertEquals(3220, rOI0.X());
      assertEquals(592, rOI0.Y());
      assertEquals((-1), rOI0.lx());
      assertEquals(590, rOI0.ly());
      assertEquals((-3220), rOI0.ux());
      
      int int1 = rOI0.Y();
      assertEquals(592, int1);
      assertEquals((-1), rOI0.uy());
      assertEquals(3220, rOI0.X());
      assertEquals(592, rOI0.Y());
      assertEquals((-1), rOI0.lx());
      assertEquals(590, rOI0.ly());
      assertEquals((-3220), rOI0.ux());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((ComplexImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      float float0 = (-579.0F);
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage();
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      realGrayImage0.add((-1067.0F));
      ROI rOI0 = new ROI(0, 0, 2366, (-2769));
      rOI0.X();
      ComplexImage complexImage1 = new ComplexImage(1037, 1037);
      complexImage1.real();
      float float0 = (-1366.5F);
      // Undeclared exception!
      try { 
        complexImage1.divide(float0, (float) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }
}
