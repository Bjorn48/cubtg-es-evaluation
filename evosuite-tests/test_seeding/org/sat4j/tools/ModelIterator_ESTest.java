/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:00:33 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.FakeConstr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModelIterator_ESTest extends ModelIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false).when(abstractMinimalModel0).isSatisfiable();
      doReturn(false).when(abstractMinimalModel0).isSatisfiable(anyBoolean());
      doReturn(0).when(abstractMinimalModel0).nConstraints();
      doReturn((int[]) null).when(abstractMinimalModel0).primeImplicant();
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(abstractMinimalModel0);
      lexicoDecorator0.model();
      lexicoDecorator0.model();
      lexicoDecorator0.nConstraints();
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.model();
      VecInt vecInt0 = new VecInt(0);
      lexicoDecorator0.addBlockingClause(vecInt0);
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.primeImplicant();
      ModelIterator modelIterator0 = new ModelIterator(lexicoDecorator0);
      modelIterator0.isSatisfiable(false);
      modelIterator0.reset();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3716;
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, true).when(abstractMinimalModel0).isSatisfiable();
      doReturn(false).when(abstractMinimalModel0).isSatisfiable(anyBoolean());
      doReturn(3716).when(abstractMinimalModel0).nConstraints();
      doReturn(0).when(abstractMinimalModel0).nVars();
      doReturn((Object) intArray0, (Object) null).when(abstractMinimalModel0).primeImplicant();
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(abstractMinimalModel0);
      lexicoDecorator0.model();
      lexicoDecorator0.model();
      lexicoDecorator0.nConstraints();
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.model();
      VecInt vecInt0 = new VecInt(3716);
      lexicoDecorator0.addBlockingClause(vecInt0);
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.primeImplicant();
      ModelIterator modelIterator0 = new ModelIterator(lexicoDecorator0);
      modelIterator0.isSatisfiable(false);
      modelIterator0.reset();
      // Undeclared exception!
      try { 
        modelIterator0.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 3716;
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(abstractMinimalModel0).isSatisfiable();
      doReturn(3716).when(abstractMinimalModel0).nConstraints();
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(abstractMinimalModel0);
      lexicoDecorator0.model();
      lexicoDecorator0.model();
      lexicoDecorator0.nConstraints();
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.model();
      VecInt vecInt0 = new VecInt(3716);
      vecInt0.set(4, 3);
      lexicoDecorator0.addBlockingClause(vecInt0);
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      modelIterator0.setExpectedNumberOfClauses(128);
      modelIterator0.setTimeout(0);
      modelIterator0.isSatisfiable();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iLits0).nVars();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 0);
      minWatchCard0.size();
      int[] intArray0 = new int[0];
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn(minWatchCard0).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(abstractMinimalModel0).nVars();
      doReturn(intArray0).when(abstractMinimalModel0).primeImplicant();
      ModelIterator modelIterator0 = new ModelIterator(abstractMinimalModel0, 0);
      modelIterator0.isSatisfiable();
      modelIterator0.primeImplicant();
      modelIterator0.isSatisfiable((IVecInt) vecInt0);
      modelIterator0.isSatisfiable();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(abstractMinimalModel0).isSatisfiable();
      doReturn((int[]) null).when(abstractMinimalModel0).primeImplicant();
      doReturn(false).when(abstractMinimalModel0).primeImplicant(anyInt());
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(abstractMinimalModel0);
      lexicoDecorator0.model();
      int int0 = 3542;
      lexicoDecorator0.primeImplicant(3542);
      lexicoDecorator0.model();
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.model();
      lexicoDecorator0.primeImplicant();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ModelIterator modelIterator0 = new ModelIterator(dimacsOutputSolver0);
      try { 
        modelIterator0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3712;
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(3712).when(abstractMinimalModel0).nVars();
      doReturn(intArray0).when(abstractMinimalModel0).primeImplicant();
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(abstractMinimalModel0);
      ModelIterator modelIterator0 = new ModelIterator(lexicoDecorator0);
      modelIterator0.primeImplicant();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      
      // Undeclared exception!
      try { 
        modelIterator0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[3];
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      abstractMinimalModelArray0[0] = (AbstractMinimalModel) minimal4CardinalityModel0;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(abstractMinimalModelArray0[0]);
      abstractMinimalModelArray0[1] = abstractMinimalModel0;
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(abstractMinimalModel0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(minimal4CardinalityModel0, iVecInt0);
      abstractMinimalModelArray0[2] = (AbstractMinimalModel) minimal4InclusionModel0;
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(stringArray0, abstractMinimalModelArray0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(manyCore0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver1).isSatisfiable(anyBoolean());
      doReturn(0, 0).when(iSolver1).nVars();
      doReturn((int[]) null).when(iSolver1).primeImplicant();
      doReturn((IConstr) null).when(iSolver1).addClause(any(org.sat4j.specs.IVecInt.class));
      ModelIterator modelIterator0 = new ModelIterator(iSolver1);
      modelIterator0.setExpectedNumberOfClauses((-74));
      IVecInt iVecInt1 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      modelIterator0.addClause(iVecInt1);
      modelIterator0.nVars();
      modelIterator0.isSatisfiable();
      // Undeclared exception!
      try { 
        modelIterator0.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false).when(abstractMinimalModel0).isSatisfiable();
      doReturn(0).when(abstractMinimalModel0).nConstraints();
      doReturn((int[]) null).when(abstractMinimalModel0).primeImplicant();
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(abstractMinimalModel0);
      lexicoDecorator0.model();
      lexicoDecorator0.model();
      lexicoDecorator0.nConstraints();
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.model();
      VecInt vecInt0 = new VecInt(0);
      lexicoDecorator0.addBlockingClause(vecInt0);
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.primeImplicant();
      ModelIterator modelIterator0 = new ModelIterator(lexicoDecorator0);
      modelIterator0.reset();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(anyBoolean());
      doReturn((int[]) null).when(iSolver0).model();
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(iSolver0).discardCurrentModel();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      modelIterator0.nVars();
      modelIterator0.setExpectedNumberOfClauses(0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      modelIterator0.addClause(iVecInt0);
      modelIterator0.nVars();
      modelIterator0.isSatisfiable();
      modelIterator0.model();
      modelIterator0.reset();
      modelIterator0.reset();
      modelIterator0.reset();
      modelIterator0.reset();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2113396604);
      intArray0[1] = 46;
      intArray0[2] = (-960);
      intArray0[4] = 46;
      intArray0[5] = 46;
      intArray0[6] = 46;
      intArray0[7] = 0;
      intArray0[8] = 46;
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false).when(abstractMinimalModel0).isSatisfiable();
      doReturn(true, false).when(abstractMinimalModel0).isSatisfiable(anyBoolean());
      doReturn(46).when(abstractMinimalModel0).nConstraints();
      doReturn(intArray0).when(abstractMinimalModel0).primeImplicant();
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(abstractMinimalModel0);
      lexicoDecorator0.model();
      lexicoDecorator0.model();
      lexicoDecorator0.nConstraints();
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.model();
      VecInt vecInt0 = new VecInt(46);
      lexicoDecorator0.addBlockingClause(vecInt0);
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.primeImplicant();
      ModelIterator modelIterator0 = new ModelIterator(lexicoDecorator0);
      modelIterator0.setTimeoutMs(2147483647L);
      modelIterator0.isSatisfiable(false);
      modelIterator0.reset();
      System.setCurrentTimeMillis(46);
      modelIterator0.isSatisfiable();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      // Undeclared exception!
      try { 
        modelIterator0.isSatisfiable(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = (-1971L);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter((ISolver) null, (-1971L), (SolutionFoundListener) null);
      // Undeclared exception!
      try { 
        modelIteratorToSATAdapter0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null, 0L);
      modelIterator0.numberOfModelsFoundSoFar();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      // Undeclared exception!
      try { 
        modelIterator0.isSatisfiable((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null).when(abstractMinimalModel0).discardCurrentModel();
      doReturn(false, false).when(abstractMinimalModel0).isSatisfiable();
      doReturn(false, false, false).when(abstractMinimalModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false, false, false).when(abstractMinimalModel0).isSatisfiable(anyBoolean());
      doReturn(0).when(abstractMinimalModel0).nConstraints();
      doReturn((int[]) null).when(abstractMinimalModel0).primeImplicant();
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(abstractMinimalModel0);
      lexicoDecorator0.model();
      lexicoDecorator0.model();
      lexicoDecorator0.nConstraints();
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.model();
      VecInt vecInt0 = new VecInt(0);
      lexicoDecorator0.addBlockingClause(vecInt0);
      IVecInt iVecInt0 = vecInt0.push((-1401));
      lexicoDecorator0.admitABetterSolution();
      lexicoDecorator0.isSatisfiable();
      vecInt0.sortUnique();
      lexicoDecorator0.primeImplicant();
      SubModelIterator subModelIterator0 = new SubModelIterator(lexicoDecorator0, vecInt0, 62L);
      subModelIterator0.numberOfModelsFoundSoFar();
      subModelIterator0.numberOfModelsFoundSoFar();
      subModelIterator0.isSatisfiable((IVecInt) vecInt0);
      subModelIterator0.isSatisfiable(iVecInt0);
      subModelIterator0.isSatisfiable();
      subModelIterator0.isSatisfiable();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      subModelIterator0.discardCurrentModel();
      vecInt0.sort(comparator0);
      subModelIterator0.isSatisfiable();
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2292;
      intArray0[1] = 2146641167;
      intArray0[2] = 2292;
      intArray0[3] = (-3340);
      intArray0[4] = (-359);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iSolver0).isSatisfiable(anyBoolean());
      doReturn(intArray0).when(iSolver0).model();
      doReturn(680, (-2147483647)).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).discardCurrentModel();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      modelIterator0.nVars();
      modelIterator0.setExpectedNumberOfClauses(680);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      FakeConstr.instance();
      modelIterator0.nVars();
      modelIterator0.isSatisfiable();
      modelIterator0.model();
      modelIterator0.reset();
      modelIterator0.reset();
      modelIterator0.reset();
      modelIterator0.reset();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3716;
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(abstractMinimalModel0).discardCurrentModel();
      doReturn(true, true).when(abstractMinimalModel0).isSatisfiable();
      doReturn(false).when(abstractMinimalModel0).isSatisfiable(anyBoolean());
      doReturn(3716).when(abstractMinimalModel0).nConstraints();
      doReturn(3716).when(abstractMinimalModel0).nVars();
      doReturn((Object) intArray0, (Object) intArray0).when(abstractMinimalModel0).primeImplicant();
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(abstractMinimalModel0);
      lexicoDecorator0.model();
      lexicoDecorator0.model();
      lexicoDecorator0.nConstraints();
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.model();
      VecInt vecInt0 = new VecInt(3716);
      lexicoDecorator0.addBlockingClause(vecInt0);
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.primeImplicant();
      ModelIterator modelIterator0 = new ModelIterator(lexicoDecorator0);
      modelIterator0.isSatisfiable(false);
      modelIterator0.reset();
      modelIterator0.primeImplicant();
      modelIterator0.model();
      modelIterator0.numberOfModelsFoundSoFar();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[1];
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false).when(abstractMinimalModel0).isSatisfiable();
      doReturn(0).when(abstractMinimalModel0).nConstraints();
      doReturn((int[]) null).when(abstractMinimalModel0).primeImplicant();
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(abstractMinimalModel0);
      lexicoDecorator0.model();
      lexicoDecorator0.model();
      lexicoDecorator0.nConstraints();
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.model();
      VecInt vecInt0 = new VecInt(0);
      lexicoDecorator0.addBlockingClause(vecInt0);
      lexicoDecorator0.isSatisfiable();
      lexicoDecorator0.primeImplicant();
      SubModelIterator subModelIterator0 = new SubModelIterator(lexicoDecorator0, vecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.primeImplicant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      // Undeclared exception!
      try { 
        modelIterator0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iLits0).nVars();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      minWatchCard0.size();
      int[] intArray0 = new int[0];
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn(minWatchCard0).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(abstractMinimalModel0).nVars();
      doReturn(intArray0).when(abstractMinimalModel0).primeImplicant();
      ModelIterator modelIterator0 = new ModelIterator(abstractMinimalModel0, 0);
      modelIterator0.isSatisfiable();
      modelIterator0.primeImplicant();
      modelIterator0.isSatisfiable((IVecInt) vecInt0);
      modelIterator0.isSatisfiable();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(1206).when(iLits0).nVars();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(iVecInt0).get(anyInt());
      doReturn(1206, 1206, 1206, 0, 0).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 0);
      minWatchCard0.canBePropagatedMultipleTimes();
      minWatchCard0.size();
      int[] intArray0 = new int[0];
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn(minWatchCard0).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(abstractMinimalModel0).isSatisfiable(anyBoolean());
      doReturn(1206).when(abstractMinimalModel0).nVars();
      doReturn(intArray0).when(abstractMinimalModel0).primeImplicant();
      ModelIterator modelIterator0 = new ModelIterator(abstractMinimalModel0, 1206);
      modelIterator0.isSatisfiable();
      Vec<IVecInt> vec0 = new Vec<IVecInt>(266);
      modelIterator0.addAllClauses(vec0);
      modelIterator0.primeImplicant();
      modelIterator0.numberOfModelsFoundSoFar();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      // Undeclared exception!
      try { 
        modelIterator0.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iLits0).nVars();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 0);
      minWatchCard0.canBePropagatedMultipleTimes();
      minWatchCard0.size();
      int[] intArray0 = new int[0];
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn(minWatchCard0).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(abstractMinimalModel0).nVars();
      doReturn(intArray0).when(abstractMinimalModel0).primeImplicant();
      ModelIterator modelIterator0 = new ModelIterator(abstractMinimalModel0, 0);
      modelIterator0.isSatisfiable();
      modelIterator0.primeImplicant();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(Integer.MAX_VALUE);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMax0).getVocabulary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, arminRestarts0);
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.clone();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0, iVecInt0, checkMUSSolutionListener0);
      ModelIterator modelIterator0 = new ModelIterator(solver0, (-2548L));
      modelIterator0.isSatisfiable();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder(16384);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      iLits0.belongsToPool(16384);
      iLits0.nVars();
      iLits0.ensurePool(16384);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 3716);
      FileSystemHandling.shouldAllThrowIOExceptions();
      minWatchCard0.size();
      ModelIterator modelIterator0 = new ModelIterator(solver0, (-2548L));
      modelIterator0.isSatisfiable();
      // Undeclared exception!
      modelIterator0.primeImplicant();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(abstractMinimalModel0).nConstraints();
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(abstractMinimalModel0);
      lexicoDecorator0.model();
      lexicoDecorator0.model();
      lexicoDecorator0.nConstraints();
      FileSystemHandling.shouldAllThrowIOExceptions();
      lexicoDecorator0.model();
      VecInt vecInt0 = new VecInt(0);
      lexicoDecorator0.addBlockingClause(vecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(lexicoDecorator0, vecInt0, 0);
      subModelIterator0.numberOfModelsFoundSoFar();
      subModelIterator0.numberOfModelsFoundSoFar();
      subModelIterator0.isSatisfiable((IVecInt) vecInt0);
      subModelIterator0.isSatisfiable((IVecInt) vecInt0);
      subModelIterator0.isSatisfiable();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt1 = new VecInt(2806);
      SubModelIterator subModelIterator1 = new SubModelIterator(dimacsStringSolver0, vecInt1);
      subModelIterator1.addClause(vecInt1);
      try { 
        subModelIterator1.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(Integer.MAX_VALUE);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMax0).getVocabulary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, arminRestarts0);
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.clone();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0, iVecInt0, checkMUSSolutionListener0);
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4InclusionModel0, iVecInt0, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        subModelIterator0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iLits0).nVars();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      minWatchCard0.size();
      int[] intArray0 = new int[0];
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(abstractMinimalModel0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(abstractMinimalModel0).discardCurrentModel();
      doReturn((int[]) null).when(abstractMinimalModel0).model();
      doReturn(0).when(abstractMinimalModel0).nVars();
      doReturn(intArray0).when(abstractMinimalModel0).primeImplicant();
      ModelIterator modelIterator0 = new ModelIterator(abstractMinimalModel0, 0);
      modelIterator0.isSatisfiable();
      modelIterator0.primeImplicant();
      modelIterator0.model();
      boolean boolean0 = modelIterator0.isSatisfiable();
      assertEquals(2L, modelIterator0.numberOfModelsFoundSoFar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[17];
      stringArray0[0] = "";
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[3];
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      lightFactory0.lightSolver();
      abstractMinimalModelArray0[0] = (AbstractMinimalModel) minimal4CardinalityModel0;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(abstractMinimalModelArray0[0]);
      abstractMinimalModelArray0[1] = abstractMinimalModel0;
      ModelIterator modelIterator0 = new ModelIterator(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        modelIterator0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      // Undeclared exception!
      try { 
        modelIterator0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null, 0L);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      printWriter0.print('y');
      mockPrintWriter0.print('^');
      printWriter0.print('^');
      mockPrintWriter0.print('y');
      mockPrintWriter0.print('^');
      mockPrintWriter0.println();
      // Undeclared exception!
      try { 
        modelIterator0.printStat(printWriter0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[3];
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      abstractMinimalModelArray0[0] = (AbstractMinimalModel) minimal4CardinalityModel0;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(abstractMinimalModelArray0[0]);
      abstractMinimalModelArray0[1] = abstractMinimalModel0;
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(abstractMinimalModel0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(minimal4CardinalityModel0, iVecInt0);
      abstractMinimalModelArray0[2] = (AbstractMinimalModel) minimal4InclusionModel0;
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(stringArray0, abstractMinimalModelArray0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(manyCore0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      lightFactory0.createSolverByName("(#y+D");
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(singleSolutionDetector0, solutionFoundListener0);
      AbstractMinimalModel abstractMinimalModel1 = new AbstractMinimalModel(modelIteratorToSATAdapter0, solutionFoundListener0);
      IVecInt iVecInt1 = VecInt.EMPTY;
      AbstractMinimalModel abstractMinimalModel2 = new AbstractMinimalModel(abstractMinimalModel1, iVecInt1, solutionFoundListener0);
      // Undeclared exception!
      try { 
        abstractMinimalModel2.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }
}
