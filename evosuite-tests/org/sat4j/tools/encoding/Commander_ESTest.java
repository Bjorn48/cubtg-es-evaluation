/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 07:58:42 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.encoding.Commander;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Commander_ESTest extends Commander_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Commander commander0 = new Commander();
      VecInt vecInt0 = new VecInt(3, 3349);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      commander0.addExactlyOne(dimacsOutputSolver0, vecInt0);
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(3, vecInt0.size());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Commander commander0 = new Commander();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(iSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
      IConstr iConstr0 = commander0.addExactly(iSolver0, iVecInt0, (-1864));
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(3, (-1));
      // Undeclared exception!
      try { 
        commander0.addExactly(dimacsOutputSolver0, vecInt0, (-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 4
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Commander commander0 = new Commander();
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = (NegationDecorator<AbstractMinimalModel>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      ClausalCardinalitiesDecorator<NegationDecorator<AbstractMinimalModel>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<NegationDecorator<AbstractMinimalModel>>(negationDecorator0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(clausalCardinalitiesDecorator0);
      VecInt vecInt0 = new VecInt(0, (-1));
      vecInt0.shrink(1939);
      // Undeclared exception!
      try { 
        commander0.addExactly(singleSolutionDetector0, vecInt0, 1939);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Commander commander0 = new Commander();
      VecInt vecInt0 = new VecInt(425, (-2420));
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(iSolver0).nextFreeVarId(anyBoolean());
      IConstr iConstr0 = commander0.addAtMostOne(iSolver0, vecInt0);
      assertEquals(992, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Commander commander0 = new Commander();
      VecInt vecInt0 = new VecInt(3, 3);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Commander", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Commander commander0 = new Commander();
      // Undeclared exception!
      try { 
        commander0.addExactlyOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Commander commander0 = new Commander();
      VecInt vecInt0 = new VecInt(0, (-1));
      // Undeclared exception!
      try { 
        commander0.addExactly((ISolver) null, vecInt0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }
}
