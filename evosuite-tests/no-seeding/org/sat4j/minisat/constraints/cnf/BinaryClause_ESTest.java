/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:37:37 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryClause_ESTest extends BinaryClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.tail = (-1585);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("org.sat4j.minisat.core.SolverStats");
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1585
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      learntBinaryClause0.head = 705;
      int int0 = learntBinaryClause0.getAssertionLevel(vecInt0, 2);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.tail = (-1683);
      // Undeclared exception!
      try { 
        learntBinaryClause0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1684
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      VecInt vecInt1 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.calcReasonOnTheFly(1, vecInt0, vecInt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-138);
      VecInt vecInt0 = new VecInt(intArray0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 4313;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.hashCode();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-138);
      VecInt vecInt0 = new VecInt(intArray0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      boolean boolean0 = learntBinaryClause0.equals(learntBinaryClause0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-138);
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      int[] intArray1 = learntBinaryClause0.getLits();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertArrayEquals(new int[] {(-138), 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-138);
      VecInt vecInt0 = new VecInt(intArray0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-1.0));
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams(0.0, (-138), (-1.0), 3897);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      learntBinaryClause0.assertConstraintIfNeeded(solver0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-138);
      VecInt vecInt0 = new VecInt(intArray0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-1.0));
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, eMARestarts0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.assertConstraint(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -137
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      learntBinaryClause0.rescaleBy(0.0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.head = 1000;
      int int0 = learntBinaryClause0.get(1);
      assertEquals(2, int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-138);
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-1.0));
      // Undeclared exception!
      try { 
        activeLearning0.learns(originalBinaryClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.get((-925));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.tail = (-325);
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -325
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams(0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(2);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagate(solver0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, iLits0);
      originalBinaryClause0.head = 58;
      boolean boolean0 = originalBinaryClause0.simplify();
      assertFalse(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-138);
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -137
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-138);
      VecInt vecInt0 = new VecInt(intArray0);
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(32);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.remove(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -137
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.tail = 598;
      // Undeclared exception!
      try { 
        learntBinaryClause0.calcReason(2, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 598
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams(479.08506422784, (-1766.336032), (-138), (-138));
      PureOrder pureOrder0 = new PureOrder((-138));
      ArminRestarts arminRestarts0 = new ArminRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0, mUSLauncher0);
      ILits iLits0 = solver0.getVocabulary();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, iLits0);
      Constr constr0 = originalBinaryClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      learntBinaryClause0.getVocabulary();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      lits0.getFromPool(2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.getVocabulary();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-138);
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      int int0 = originalBinaryClause0.getAssertionLevel(vecInt0, (-1244));
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.incActivity(2192.32);
      double double0 = learntBinaryClause0.getActivity();
      assertEquals(2192.32, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.incActivity((-1.0));
      double double0 = learntBinaryClause0.getActivity();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      int int0 = learntBinaryClause0.get(1);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("hCnOP6");
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      lits0.getFromPool(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LubyRestarts lubyRestarts0 = new LubyRestarts(2);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, lubyRestarts0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.remove(solver0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 428);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 428
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2441);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagate((UnitPropagationListener) null, 2441);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2441
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.getAssertionLevel((IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      vecInt0.set(0, 3495);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.calcReasonOnTheFly(3495, vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3495
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.calcReason(3068, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, (-1376));
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1376
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.locked();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.calcReason(2, vecInt0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals(2, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      String string0 = learntBinaryClause0.toString((VarMapper) null);
      assertEquals("1[?] 1[?]", string0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("org.sat4j.minisat.core.SolverStats");
      String string0 = learntBinaryClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals("0[?] 0[?]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      int int0 = learntBinaryClause0.getAssertionLevel(vecInt0, 2);
      assertEquals(1, int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      lits0.satisfies(2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.isSatisfied();
      assertTrue(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.isSatisfied();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      LearntBinaryClause learntBinaryClause1 = new LearntBinaryClause(vecInt0, lits0);
      assertTrue(learntBinaryClause1.equals((Object)learntBinaryClause0));
      
      learntBinaryClause1.tail = (-4458);
      boolean boolean0 = learntBinaryClause1.equals(learntBinaryClause0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      LearntBinaryClause learntBinaryClause1 = new LearntBinaryClause(vecInt0, lits0);
      assertTrue(learntBinaryClause1.equals((Object)learntBinaryClause0));
      
      learntBinaryClause0.head = 2;
      boolean boolean0 = learntBinaryClause1.equals(learntBinaryClause0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.equals(vecInt0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      boolean boolean0 = learntBinaryClause0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      learntBinaryClause0.assertConstraint(solver0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, (-926));
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      int int0 = learntBinaryClause0.get(1);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals((-926), int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      vecInt0.remove(2);
      Lits lits0 = new Lits();
      vecInt0.push(3436);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1718
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      lits0.satisfies(2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.simplify();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = null;
      try {
        originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      int int0 = learntBinaryClause0.size();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.canBePropagatedMultipleTimes();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      double double0 = learntBinaryClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.calcReasonOnTheFly(2, vecInt0, vecInt0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals(2, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.getVocabulary();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      String string0 = learntBinaryClause0.toString();
      assertEquals("1[?] 1[?]", string0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      int int0 = learntBinaryClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(1, int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, (-188));
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -187
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      learntBinaryClause0.rescaleBy((-1.0));
      assertEquals(-0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      Constr constr0 = learntBinaryClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }
}
