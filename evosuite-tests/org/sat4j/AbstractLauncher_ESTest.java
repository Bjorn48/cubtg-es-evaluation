/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:40:29 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.ILauncherMode;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IProblem;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractLauncher_ESTest extends AbstractLauncher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      basicLauncher0.setDisplaySolutionLine(true);
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.setIncomplete(true);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      basicLauncher0.showAvailableSolvers((ASolverFactory<OptToSatAdapter>) null, "c ");
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.log("FATAL ");
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.displayResult();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.configureLauncher();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(dimacsStringSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(singleSolutionDetector0);
      mUSLauncher0.solve(maxSatDecorator0);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("c ");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray0[0] = "c ";
      mUSLauncher0.run(stringArray0);
      assertEquals(1392409281320L, mUSLauncher0.getBeginTime());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.setSilent(true);
      boolean boolean0 = mUSLauncher0.isSilent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[7];
      stringArray0[6] = "c ";
      mUSLauncher0.run(stringArray0);
      mUSLauncher0.getReader();
      assertEquals(1392409281320L, mUSLauncher0.getBeginTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[7];
      stringArray0[6] = "c ";
      mUSLauncher0.run(stringArray0);
      long long0 = mUSLauncher0.getBeginTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.beginTime = (-1336L);
      long long0 = mUSLauncher0.getBeginTime();
      assertEquals((-1336L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.solve((IProblem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      int[] intArray0 = new int[7];
      intArray0[0] = (-294);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(9);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, lubyRestarts0, mUSLauncher0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(minimal4CardinalityModel0);
      IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4CardinalityModel0, iVecInt0);
      // Undeclared exception!
      try { 
        mUSLauncher0.solve(subModelIterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -294
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.setLauncherMode((ILauncherMode) null);
      // Undeclared exception!
      try { 
        mUSLauncher0.setIncomplete(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.MUSLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.MUSLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("c ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "c ");
      stringArray0[0] = "c ";
      mUSLauncher0.run(stringArray0);
      try { 
        mUSLauncher0.readProblem("c ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorDIMACS error: wrong max number of variables
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      // Undeclared exception!
      try { 
        basicLauncher0.readProblem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.readProblem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      try { 
        mUSLauncher0.readProblem("http://");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: 
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      try { 
        mUSLauncher0.readProblem("c ");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.out = null;
      // Undeclared exception!
      try { 
        mUSLauncher0.displayHeader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.bufferizeLog();
      mUSLauncher0.usage();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.setSilent(true);
      mUSLauncher0.usage();
      assertTrue(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getLogWriter();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      boolean boolean0 = mUSLauncher0.isSilent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.displayLicense();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.bufferizeLog();
      mUSLauncher0.flushLog();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.flushLog();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[5];
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(aSolverFactory0).solverNames();
      mUSLauncher0.showAvailableSolvers(aSolverFactory0);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(aSolverFactory0).solverNames();
      // Undeclared exception!
      try { 
        mUSLauncher0.showAvailableSolvers(aSolverFactory0, "c ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(aSolverFactory0).solverNames();
      // Undeclared exception!
      try { 
        mUSLauncher0.showAvailableSolvers(aSolverFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[3];
      mUSLauncher0.feedWithDecorated = true;
      stringArray0[2] = "c ";
      mUSLauncher0.run(stringArray0);
      assertEquals(1392409281320L, mUSLauncher0.getBeginTime());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.addHook();
      // Undeclared exception!
      try { 
        mUSLauncher0.addHook();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hook previously registered
         //
         verifyException("java.lang.ApplicationShutdownHooks", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getLauncherMode();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.setLogWriter((PrintWriter) null);
      // Undeclared exception!
      try { 
        mUSLauncher0.usage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[0];
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(dimacsOutputSolverArray0);
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(manyCore0, vecInt0);
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<AbstractMinimalModel>(minimal4InclusionModel0, false);
      // Undeclared exception!
      try { 
        mUSLauncher0.solve(fullClauseSelectorSolver0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.bufferizeLog();
      mUSLauncher0.displayHeader();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.setLauncherMode((ILauncherMode) null);
      // Undeclared exception!
      try { 
        mUSLauncher0.getExitCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.setSilent(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "c ";
      mUSLauncher0.run(stringArray0);
      assertEquals(1392409281320L, mUSLauncher0.getBeginTime());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ExitCode exitCode0 = mUSLauncher0.getExitCode();
      // Undeclared exception!
      try { 
        mUSLauncher0.setExitCode(exitCode0);
       //  fail("Expecting exception: NoSuchFieldError");
       // Unstable assertion
      } catch(NoSuchFieldError e) {
         //
         // exitCode
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getReader();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getBeginTime();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        BasicLauncher.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
