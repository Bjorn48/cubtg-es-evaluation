/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:17:40 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Ladder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ladder_ESTest extends Ladder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(statisticsSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(3244, 3244, 3244, 3244, 3244).when(statisticsSolver0).nVars();
      doReturn(3244, 3244, 3244, 3125, 3244).when(statisticsSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(fullClauseSelectorSolver0);
      // Undeclared exception!
      ladder0.addExactlyOne(fullClauseSelectorSolver0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(3253, 3253, 3253, (-1896)).when(statisticsSolver0).nVars();
      StatisticsSolver statisticsSolver1 = new StatisticsSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(statisticsSolver0);
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(statisticsSolver1, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(statisticsSolver0).nVars();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(fullClauseSelectorSolver0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(statisticsSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(3244, 3244, 3244, 3244, (-2003)).when(statisticsSolver0).nVars();
      doReturn(3244, (-2003), 3244, 3244, 2852).when(statisticsSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(fullClauseSelectorSolver0, iVecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsStringSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      iVecInt0.shrink((-2895));
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(abstractMinimalModel0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      originalWLClause0.size();
      originalWLClause0.get(1);
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1682, 0).when(statisticsSolver0).nVars();
      doReturn(1675, 0, 0, 0).when(statisticsSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(fullClauseSelectorSolver0, iVecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(statisticsSolver0);
      Ladder ladder0 = new Ladder();
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(statisticsSolver0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(statisticsSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink(2);
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(fullClauseSelectorSolver0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(statisticsSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(fullClauseSelectorSolver0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      Constr constr0 = Constr.TAUTOLOGY;
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(3253, 3253, 3253, (-1896)).when(statisticsSolver0).nVars();
      doReturn((-1896), 3233, 3233, 0).when(statisticsSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(fullClauseSelectorSolver0);
      iVecInt0.push((-1896));
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(fullClauseSelectorSolver0, iVecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(statisticsSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(1670, 1670, (-2895)).when(statisticsSolver0).nVars();
      doReturn(1, 0).when(statisticsSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(fullClauseSelectorSolver0);
      ladder0.addExactlyOne(fullClauseSelectorSolver0, iVecInt0);
      assertEquals(1, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      Constr constr0 = Constr.TAUTOLOGY;
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(constr0, (IConstr) null, (IConstr) null, constr0, constr0).when(statisticsSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(3253, 3253, 3253, (-1896)).when(statisticsSolver0).nVars();
      doReturn((-1896), 3233, 3233, 3219, 3253).when(statisticsSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(fullClauseSelectorSolver0);
      iVecInt0.push((-1896));
      IConstr iConstr0 = ladder0.addAtMostOne(fullClauseSelectorSolver0, iVecInt0);
      assertEquals(3, iVecInt0.size());
      assertEquals(12, iConstr0.size());
  }
}
