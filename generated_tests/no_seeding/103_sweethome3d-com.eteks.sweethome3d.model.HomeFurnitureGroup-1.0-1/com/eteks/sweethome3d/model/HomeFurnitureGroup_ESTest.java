/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 14:08:30 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.math.BigDecimal;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomeFurnitureGroup_ESTest extends HomeFurnitureGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow2);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setY((-1017.60645F));
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.setHeight(2486.0F);
      homeFurnitureGroup1.getFurniture();
      homeFurnitureGroup1.setWidth(0.0F);
      homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[22];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 2093.1821F, 2093.1821F, 2093.1821F, 2093.1821F, true, 2093.1821F, 2093.1821F, sashArray0, integer0, (float[][]) null, true, 2093.1821F, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      Level level0 = new Level(">rt-uG", 2093.1821F, 2093.1821F, 2093.1821F);
      homeDoorOrWindow1.setLevel(level0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, ">rt-uG");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(13);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("]", temporaryURLContent0, temporaryURLContent0, 13, 13, 13, 13, true, 13, 13, sashArray0, integer0, (float[][]) null, true, 13, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "]");
      homeFurnitureGroup0.setX(387.28534F);
      homeFurnitureGroup0.setWidth(13);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, (-1256.0F), false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow2);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setY((-1017.60645F));
      homeFurnitureGroup0.setElevation((-1256.0F));
      homeFurnitureGroup0.getDepth();
      Integer.getInteger("", (-1));
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.clone();
      homeFurnitureGroup1.setHeight(0.0F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow2);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth((-403.9F));
      homeFurnitureGroup0.containsPoint(1230, (-275.286F), (-275.286F));
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setY(3109.9043F);
      homeFurnitureGroup0.getHeight();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(16);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 16, 16, 16, 16, true, 16, 16, sashArray0, integer0, (float[][]) null, true, 16, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getPrice();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("a@", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      linkedList0.removeLastOccurrence("");
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(1);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 1250.3F, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty");
      homeFurnitureGroup0.setWidth(1250.3F);
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.setDepth(1250.3F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" 1=", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 1970.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, 1970.9F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeDoorOrWindow0.clone();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      linkedList0.add((HomePieceOfFurniture) homeFurnitureGroup1);
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup1.clone();
      Sash sash0 = new Sash(2.0F, 3.4028235E38F, 674.296F, (-563.5357F), (-1249.95F));
      HomeFurnitureGroup homeFurnitureGroup3 = new HomeFurnitureGroup(linkedList0, "");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[3];
      Integer integer0 = new Integer(16);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 16, 16, 16, 16, true, 16, 16, sashArray0, integer0, (float[][]) null, true, 16, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[22];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, 714.9F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeDoorOrWindow0.clone();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "R1%");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getHeight();
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", temporaryURLContent0, 1970.9F, (-5855.53F), "", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
      homeFurnitureGroup0.isDeformable();
      homeFurnitureGroup1.isTexturable();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      Sash[] sashArray0 = new Sash[22];
      Integer integer0 = new Integer(1230);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("xb+gT{1+|", "_Adm4f[a?XM", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1230, 2093.1821F, 1230, 7.0F, false, 2093.1821F, 3.4028235E38F, sashArray0, (float[][]) null, "\"1Xa6]6w1^S<1 DC", true, true, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      Level level0 = new Level(">rt-uG", 2093.1821F, 2093.1821F, 2093.1821F);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setWidth(2093.1821F);
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup1.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup1.getCurrency();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 1970.9F, (-1256.0F), 2499.87F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(1970.9F, 2499.87F, 744.8241F, (-3146.5728F), 2499.87F);
      Sash sash2 = new Sash((-1181.732F), 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      sashArray0[4] = sash3;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 744.8241F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.61316F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.getCurrency();
      homeFurnitureGroup0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setModelMirrored(false);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup1.getIcon();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1254.9757F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent0, temporaryURLContent0, 1855.7367F, 3.4028235E38F, 3.4028235E38F, (-1151.0315F), false, "", integer0, (float[][]) null, false, 192.07176F, false);
      catalogDoorOrWindow0.compareTo(catalogPieceOfFurniture0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setHeight(0.0F);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeDoorOrWindow0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Q2f_KfJW}kRjrVpU^J");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation(714.9F);
      homeFurnitureGroup1.getDepth();
      Integer integer1 = Integer.getInteger("Q2f_KfJW}kRjrVpU^J", (-1));
      homeFurnitureGroup1.setColor(integer1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, (-1256.0F), false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow2);
      Integer integer1 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, (-1151.0315F), (-883.1F), (-2233.57F), (-1181.732F), false, 1.0F, 1230, sashArray0, integer1, (float[][]) null, true, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(homeDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow2);
      HomeDoorOrWindow homeDoorOrWindow4 = homeDoorOrWindow1.clone();
      HomeDoorOrWindow homeDoorOrWindow5 = homeDoorOrWindow4.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow5);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getIcon();
      homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      homeFurnitureGroup2.setHeight(1970.9F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[1];
      Integer integer0 = new Integer(4);
      String[] stringArray0 = new String[0];
      Long long0 = new Long(4);
      Float float0 = new Float((double) 4);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("&)7)A}s", "", "applicationSubFolder", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 3.4028235E38F, (-1.0F), (-1.0F), 3.4028235E38F, false, (-2794.502F), 3033.649F, sashArray0, (float[][]) null, "&)7)A}s", false, false, false, bigDecimal0, bigDecimal0, "");
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      linkedList0.add(homePieceOfFurniture1);
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, false, 4, 4, sashArray0, integer0, (float[][]) null, false, 4, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      String[] stringArray0 = new String[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Long long0 = new Long(1L);
      Sash[] sashArray0 = new Sash[4];
      Integer integer0 = new Integer(874);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(stringArray0[0], temporaryURLContent0, temporaryURLContent0, (-1181.732F), 0.3926991F, 1L, 874, false, (-1609.71F), 0.3926991F, sashArray0, integer0, (float[][]) null, true, 1L, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation((-1794.4728F));
      Integer.getInteger("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", 1243);
      Integer integer1 = new Integer(874);
      homeFurnitureGroup0.setColor(integer1);
      homeFurnitureGroup1.setHeight(1.07374182E9F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 1970.9F, (-1256.0F), 2499.87F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(1970.9F, 2499.87F, 744.8241F, (-3146.5728F), 2499.87F);
      Sash sash2 = new Sash(3.4028235E38F, 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      sashArray0[4] = sash3;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 744.8241F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.setMovable(false);
      homeFurnitureGroup0.setY(3.4028235E38F);
      homeFurnitureGroup0.containsPoint(1306.6F, (-1256.0F), 1230);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer.getInteger("");
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, (Integer) null, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      assertEquals((-1219.927F), sash0.getEndAngle(), 0.01F);
      assertEquals((-1181.732F), sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      assertEquals(3.4028235E38F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(1970.9F, sash1.getWidth(), 0.01F);
      assertEquals((-1219.927F), sash1.getXAxis(), 0.01F);
      assertEquals(1176.293F, sash1.getYAxis(), 0.01F);
      assertEquals(1970.9F, sash1.getEndAngle(), 0.01F);
      assertEquals(1970.9F, sash1.getStartAngle(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      assertEquals(1230, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(5, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((-628.0F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1256.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(5, sashArray0.length);
      
      Stream<HomePieceOfFurniture> stream0 = linkedList0.parallelStream();
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotNull(homeFurnitureGroup0);
      
      BigDecimal bigDecimal0 = homeFurnitureGroup0.getPrice();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(bigDecimal0);
      
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      homeFurnitureGroup0.setModelMirrored(true);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      homeFurnitureGroup0.setElevation((-1022.9626F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1022.9626F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1022.9626F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      float float0 = homeFurnitureGroup0.getDepth();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1022.9626F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1022.9626F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      homeFurnitureGroup0.setColor(integer0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1230, (int)homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1022.9626F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1022.9626F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[7];
      Integer integer0 = new Integer(47);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("j", temporaryURLContent0, temporaryURLContent0, 47, 47, 47, 47, true, 47, 47, sashArray0, integer0, (float[][]) null, true, 47, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "j");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getDepth();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1207);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 1970.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, 1970.9F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setElevation(1970.9F);
      Integer.getInteger("", 1207);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setHeight(1207);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, (-1256.0F), false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow2);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setY((-1017.60645F));
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.setTexture((HomeTexture) null);
      homeFurnitureGroup2.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup2.setTexture((HomeTexture) null);
      homeFurnitureGroup1.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, 714.9F, 0.0F, 0.0F, 1970.9F);
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, 714.9F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setAngle(3.4028235E38F);
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.getHeight();
      homeFurnitureGroup2.setX(1.0F);
      homeFurnitureGroup0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.4851F), 0.5F, (-1256.0F), 2499.87F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(0.0F, 2499.87F, 744.8241F, (-3146.5728F), 2499.87F);
      Sash sash2 = new Sash(3.4028235E38F, 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      sashArray0[4] = sash3;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("A!", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 744.8241F, true, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, true, (-1181.4851F), true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 0.5F, (-1256.0F), 2499.87F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(0.0F, 2499.87F, 744.8241F, (-3146.5728F), 2499.87F);
      Sash sash2 = new Sash(3.4028235E38F, 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      sashArray0[4] = sash3;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 744.8241F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1151.0315F), 0.0F, 0.0F, 1970.9F);
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setAngle(0.0F);
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup3 = homeFurnitureGroup2.clone();
      homeFurnitureGroup2.getHeight();
      homeFurnitureGroup1.getStaircaseCutOutShape();
      homeFurnitureGroup0.setWidth(1970.9F);
      homeFurnitureGroup0.getFurniture();
      homeFurnitureGroup3.getModel();
      Integer.getInteger("com.eteks.sweethome3d.model.HomeFurnitureGroup");
      homeFurnitureGroup2.setColor((Integer) null);
      homeFurnitureGroup2.containsPoint((-1090.951F), 714.9F, 4.0F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1151.0315F), 0.0F, 0.0F, 1970.9F);
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setAngle(3.4028235E38F);
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.getHeight();
      homeFurnitureGroup0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.setMovable(false);
      homeFurnitureGroup0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      String[] stringArray0 = new String[2];
      Long long0 = new Long(1L);
      Sash[] sashArray0 = new Sash[11];
      Sash sash0 = new Sash(1L, 1L, 1L, 1L, 1L);
      sashArray0[3] = sash0;
      float[][] floatArray0 = new float[3][4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("4nj", "4nj", "4nj", " 1=", stringArray0, long0, (Float) null, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1L, 1L, 1L, 1L, true, 1L, 1L, sashArray0, floatArray0, "4nj", true, true, true, bigDecimal0, bigDecimal0, "4nj");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "zQ");
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      System.setCurrentTimeMillis(604800000L);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 1970.9F, (-1256.0F), 2500.3152F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(1970.9F, 2500.3152F, 744.8241F, (-3146.5728F), 2500.3152F);
      Sash sash2 = new Sash((-1181.732F), 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      sashArray0[4] = sash3;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 744.8241F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1151.0315F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setAngle(1970.9F);
      homeFurnitureGroup0.intersectsRectangle(0.0F, 1476.4769F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 1970.9F, (-1256.0F), 2499.87F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(1970.9F, 2499.87F, 744.8241F, (-3146.5728F), 2499.87F);
      Sash sash2 = new Sash((-1181.732F), 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      sashArray0[4] = sash3;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 744.8241F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isTexturable();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[22];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, 714.9F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeDoorOrWindow0.clone();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setAngle(1970.9F);
      homeFurnitureGroup1.getHeight();
      homeFurnitureGroup0.setX(0.5F);
      homeFurnitureGroup0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, (-1256.0F), false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow2);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setY((-1017.60645F));
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.setHeight(2486.0F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1230);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.model.HomeFurnitureGroup");
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1969.5175F, 1969.5175F, 1969.5175F, 1969.5175F, false, 1969.5175F, 1969.5175F, sashArray0, integer0, (float[][]) null, false, 1969.5175F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeDoorOrWindow0.clone();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setDepth(1969.5175F);
      homeFurnitureGroup1.setElevation(1969.5175F);
      Integer.getInteger("", 1230);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup1.setHeight(1230);
      homeFurnitureGroup1.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup1.getFurniture();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[1];
      Integer.getInteger("");
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, (Integer) null, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.add((HomePieceOfFurniture) homeFurnitureGroup0);
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList1, "");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals(":4", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals(":4", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 4, true);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals(":4", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(5, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals(":4", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(4, (int)homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals(":4", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(4, (int)homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(5, sashArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = Integer.getInteger("", 4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("a@", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      linkedList0.removeLastOccurrence("");
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(1);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, false, 4, 1230.0F, sashArray0, integer0, (float[][]) null, false, 1250.3F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty");
      homeFurnitureGroup0.setWidth(3.4028235E38F);
      homeFurnitureGroup0.setElevation(1016.57F);
      homeFurnitureGroup0.setWidth((-1671.39F));
      homeFurnitureGroup0.getFurniture();
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 0.5F, (-1256.0F), 2499.87F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(0.0F, 2499.87F, 744.8241F, (-3146.5728F), 2499.87F);
      Sash sash2 = new Sash(3.4028235E38F, 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[1] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      sashArray0[4] = sash3;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 744.8241F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getFurniture();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1207);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 1970.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, 1970.9F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer.getInteger("", 1207);
      homeFurnitureGroup0.setHeight(1207);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[22];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1243.525F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, 714.9F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      Level level0 = new Level("rt-uG", 714.9F, 0.0F, 615.0F);
      Level level1 = level0.clone();
      homeDoorOrWindow1.setLevel(level1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      homeDoorOrWindow1.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "rt-uG");
      homeFurnitureGroup0.setWidth(714.9F);
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, ",;Vs,SgMe4}R|");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 0.5F, (-1256.0F), 2499.87F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(0.0F, 2499.87F, 714.9F, (-3146.5728F), 2499.87F);
      Sash sash2 = new Sash(3.4028235E38F, 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      sashArray0[4] = sash3;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.isResizable();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(2616.0F, 0.0F, (-273.9847F), (-273.9847F), 0.0F);
      Integer integer0 = new Integer(212);
      Integer integer1 = new Integer(1);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("qw!Bj", temporaryURLContent0, temporaryURLContent0, 1.0F, (-7606.2F), (-957.22F), 1230, false, (-4392.315F), (-957.22F), sashArray0, integer1, (float[][]) null, false, (-1.0F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "L(bO");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getIcon();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.clone();
      homeFurnitureGroup0.setHeight((-7606.2F));
      homeFurnitureGroup1.getModel();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.setElevation((-1022.9626F));
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.setColor(integer0);
      Integer integer1 = new Integer(1230);
      homeFurnitureGroup0.setColor(integer1);
      homeFurnitureGroup0.getDepth();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setHeight(4);
      homeFurnitureGroup0.getCurrency();
      homeFurnitureGroup0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      Integer integer0 = new Integer(1253);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("p+@8ZX9x", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 759.23114F, true, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, true, (-1181.732F), true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "p+@8ZX9x");
      homeFurnitureGroup0.getColor();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.intersectsRectangle(759.23114F, 759.23114F, (-1181.732F), 2351.0F);
      homeFurnitureGroup1.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer.getInteger("");
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, (Integer) null, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth(4);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      String[] stringArray0 = new String[1];
      Long long0 = new Long(1L);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(1L, 1L, 1L, 1L, 1L);
      sashArray0[3] = sash0;
      float[][] floatArray0 = new float[3][4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("4nj", "4nj", "4nj", " 1=", stringArray0, long0, (Float) null, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1L, 1L, 1L, 1L, true, 1L, 1L, sashArray0, floatArray0, "4nj", true, true, true, bigDecimal0, bigDecimal0, "4nj");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("com.eteks.sweethome3d.model.HomeFurnitureGroup", "", 4, "7Q{XfO}S&c~HO", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Object object0 = new Object();
      linkedList0.removeLastOccurrence(object0);
      Integer integer0 = new Integer((-2144496467));
      Integer.max((-2144496467), 4);
      Sash[] sashArray0 = new Sash[0];
      Integer integer1 = new Integer(4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, (-2525.7412F), (-2565.906F), (-2144496467), (-3422.4417F), true, 4, (-2648.0F), sashArray0, integer1, (float[][]) null, false, 199.3442F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPoints();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth((-1.0F));
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isDeformable();
      homeFurnitureGroup1.getHeight();
      homeFurnitureGroup0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("com.eteks.sweethome3d.model.HomeFurnitureGroup", "com.eteks.sweethome3d.model.HomeFurnitureGroup", 4, "com.eteks.sweethome3d.model.HomeFurnitureGroup", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomeFurnitureGroup", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, false, 4, 4, sashArray0, integer0, (float[][]) null, false, 4, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomeFurnitureGroup");
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.isDeformable();
      homeFurnitureGroup0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("FDHDE[U90/U", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      linkedList0.removeLastOccurrence("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(1);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 1250.3F, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomeFurnitureGroup");
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.getDepth();
      homeFurnitureGroup0.getColor();
      homeFurnitureGroup0.setColor((Integer) null);
      System.setCurrentTimeMillis((-605L));
      homeFurnitureGroup1.getDepth();
      homeFurnitureGroup0.setModelMirrored(false);
      homeFurnitureGroup2.isMovable();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(635.107F, 3.4028235E38F, 0.0F, 0.0F, (-559.945F));
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, (-725.379F), 1230, (-725.379F), 635.107F, true, 1016.57F, 1016.57F, sashArray0, integer0, (float[][]) null, true, (-1687.15F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "/{9iv/9y>A_%Qa");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setAngle(0.3926991F);
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup2.setX((-1022.9626F));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 1970.9F, (-1256.0F), 2499.87F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(1970.9F, 2499.87F, 744.8241F, (-3146.5728F), 2499.87F);
      Sash sash2 = new Sash((-1181.732F), 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 744.8241F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameVisible(false);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " doesn't contain texture ");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setX((-1.0F));
      Random.setNextRandom(1230);
      homeFurnitureGroup0.setAngle((-1.0F));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(714.9F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" 1=", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.isPointAt(1970.9F, 0.0F, 1230);
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1151.0315F), 0.0F, 0.0F, 1970.9F);
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, true, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, true, (-1151.0315F), true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "5(");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setAngle(714.9F);
      homeFurnitureGroup0.setWidth(1230);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash0;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" 1=", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setX((-1219.927F));
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(714.9F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      linkedList0.spliterator();
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" 1=", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.isPointAt(1970.9F, 0.0F, 1230);
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.containsPoint(0.0F, 2413.1626F, 2445.1897F);
      homeFurnitureGroup0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[22];
      Integer integer0 = new Integer(1230);
      Integer.toUnsignedString(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("8-Uq]k=#67", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, 714.9F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeDoorOrWindow0.clone();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "1%");
      homeFurnitureGroup0.isTopLeftPointAt(1970.9F, (-1605.81F), 714.9F);
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.isBottomLeftPointAt(1230, 1230, 1970.9F);
      homeFurnitureGroup0.setX(0.3926991F);
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      Random.setNextRandom(1230);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setX(0.3926991F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[1];
      Integer integer0 = new Integer(4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, false, 4, 4, sashArray0, integer0, (float[][]) null, false, 4, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 0.5F, (-1256.0F), 2499.87F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(2499.87F, 2499.87F, 714.9F, (-3146.5728F), 2499.87F);
      Sash sash2 = new Sash(3.4028235E38F, 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      sashArray0[4] = sash3;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(1253);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" 1=", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomeFurnitureGroup");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setNameAngle(1253);
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.getColor();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.setColor((Integer) null);
      System.setCurrentTimeMillis(1465L);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" 1=", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeDoorOrWindow0.setVisible(true);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.getModel();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getWidth();
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("a@", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(1);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 1250.3F, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setElevation(1);
      homeFurnitureGroup1.getDepth();
      Integer.getInteger("", 1);
      homeFurnitureGroup1.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup((List<HomePieceOfFurniture>) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setHeight(4);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[1];
      Integer.getInteger("");
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, (Integer) null, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.getModel();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      String[] stringArray0 = new String[10];
      Long long0 = new Long(1L);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(1L, 1L, 1L, 1L, 1L);
      float[][] floatArray0 = new float[3][4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("4nj", "4nj", "4nj", " 1=", stringArray0, long0, (Float) null, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1L, 1L, 1L, 1L, true, 1L, 1L, sashArray0, floatArray0, "4nj", true, true, true, bigDecimal0, bigDecimal0, "4nj");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "4nj");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth(4);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[22];
      int int0 = 1230;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, 714.9F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      Level level0 = new Level("rt-uG", (-1256.0F), 0.0F, 615.0F);
      Level level1 = level0.clone();
      homeDoorOrWindow1.setLevel(level1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow2);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "rt-uG");
      linkedList0.addLast(homeFurnitureGroup0);
      homeFurnitureGroup0.clone();
      Integer integer1 = new Integer(int0);
      homeFurnitureGroup0.setColor(integer1);
      System.setCurrentTimeMillis(int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1151.0315F), 0.0F, 0.0F, (-1219.927F));
      Sash sash1 = new Sash((-1219.927F), 3.4028235E38F, (-1151.0315F), 0.0F, (-1151.0315F));
      Integer integer0 = new Integer((-2146248653));
      Integer integer1 = new Integer((-2146248653));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1.0F, 1215.288F, 3.4028235E38F, 1176.293F, false, (-1404.3F), 1176.293F, sashArray0, integer1, (float[][]) null, false, 112.6545F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setX((-1296.9192F));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer.getInteger("");
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, (Integer) null, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(4);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.isResizable();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1151.0315F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setAngle(1970.9F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(16);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 16, 16, 16, 16, true, 16, 16, sashArray0, integer0, (float[][]) null, true, 16, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setColor(integer0);
      Integer integer1 = new Integer(16);
      homeFurnitureGroup0.setColor(integer1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3743.09F, (-1.0F), 1969.7349F, 2413.1626F, (-513.7614F));
      Sash sash1 = new Sash(2413.1626F, (-1219.927F), (-1256.0F), (-1256.0F), (-1.0F));
      Integer integer0 = new Integer(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" 1=", temporaryURLContent0, temporaryURLContent0, (-1181.732F), 714.61316F, 1230, (-1219.927F), false, 2413.1626F, 2413.1626F, sashArray0, integer0, (float[][]) null, false, 3743.09F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setVisible(false);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow2);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setAngle(2);
      homeFurnitureGroup0.isMovable();
      homeFurnitureGroup0.setDepth(1.0F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(1207);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 1970.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, 1970.9F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer1 = new Integer(1207);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow2);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.setNameXOffset(1016.57F);
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setY((-1017.60645F));
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.clone();
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1151.0315F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setX(1230);
      homeFurnitureGroup0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 1970.9F, (-1256.0F), 2499.87F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(1970.9F, 2499.87F, 744.8241F, (-3146.5728F), 2499.87F);
      Sash sash2 = new Sash((-1181.732F), 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      sashArray0[4] = sash3;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 744.8241F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      Integer.divideUnsigned(2997, 1230);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.containsPoint(3.4028235E38F, 714.9F, 2997);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1151.0315F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("a@", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      linkedList0.removeLastOccurrence("");
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer(1);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 1679.0101F, 1679.0101F, false, 4, 1230.0F, sashArray0, integer0, (float[][]) null, false, 1250.3F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setY(1016.57F);
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup1.getPrice();
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup3 = homeFurnitureGroup2.clone();
      homeFurnitureGroup3.setColor(integer0);
      homeFurnitureGroup3.clone();
      homeFurnitureGroup0.setHeight(4);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Sash sash0 = new Sash(0.0F, 2588.0F, 1247.1464F, (-4.0F), (-305.98615F));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "J";
      stringArray0[1] = "J";
      Long long0 = new Long(600000L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("J", "com.eteks.sweethome3d.model.HomeFurnitureGroup", "", "J", stringArray0, long0, (Float) null, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1220.0F, 0.0F, 600000L, 600000L, false, 2588.0F, 2.0F, sashArray0, (float[][]) null, "", false, false, false, bigDecimal0, bigDecimal0, "J");
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      linkedList0.add(homePieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "{\"B");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 880.5549F, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth(880.5549F);
      System.setCurrentTimeMillis(4);
      homeFurnitureGroup0.isTexturable();
      CatalogTexture catalogTexture0 = new CatalogTexture("", temporaryURLContent0, (-2576.6104F), 8192.0F, false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer((-1385));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, (-1385), (-1385), (-1385), (-1385), true, (-1385), (-1385), sashArray0, integer0, (float[][]) null, true, (-1385), true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth((-1385));
      homeFurnitureGroup0.getFurniture();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[1];
      Integer integer0 = new Integer(4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.containsPoint((-216.0F), 4, (-3530.2446F));
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(714.9F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" 1=", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.getModel();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[7];
      Integer integer0 = new Integer(47);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("j", temporaryURLContent0, temporaryURLContent0, 47, 47, 47, 47, true, 47, 47, sashArray0, integer0, (float[][]) null, true, 47, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "j");
      homeFurnitureGroup0.setY(461.6F);
      homeFurnitureGroup0.setWidth(0.0F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("a@", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      linkedList0.removeLastOccurrence("");
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer(1);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 1679.0101F, 1679.0101F, false, 4, 1230.0F, sashArray0, integer0, (float[][]) null, false, 1250.3F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty");
      homeFurnitureGroup0.setWidth(3.4028235E38F);
      homeFurnitureGroup0.intersectsRectangle(1970.9F, 3.4028235E38F, 1.0F, (-1427.028F));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("a@", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      linkedList0.removeLastOccurrence("");
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer(1);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 1679.0101F, 1679.0101F, false, 4, 1230.0F, sashArray0, integer0, (float[][]) null, false, 1250.3F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty");
      homeFurnitureGroup0.setWidth(3.4028235E38F);
      homeFurnitureGroup0.containsPoint(65.6202F, 3.4028235E38F, (-1805.5934F));
      homeFurnitureGroup0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setY((-1.0F));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 1970.9F, (-1256.0F), 2499.87F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(1970.9F, 2499.87F, 744.8241F, (-3146.5728F), 2499.87F);
      Sash sash2 = new Sash((-1181.732F), 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      sashArray0[4] = sash3;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 744.8241F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getWidth();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getDepth();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      String[] stringArray0 = new String[2];
      long long0 = 1L;
      Long long1 = new Long(1L);
      Sash[] sashArray0 = new Sash[11];
      Sash sash0 = new Sash(1L, 1L, 1L, 1L, 1L);
      sashArray0[3] = sash0;
      float[][] floatArray0 = new float[3][4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Dnj", "Dnj", "Dnj", " 1=", stringArray0, long1, (Float) null, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1L, 1L, 1L, 1L, true, 1L, 1L, sashArray0, floatArray0, "Dnj", false, false, true, bigDecimal0, bigDecimal0, "Dnj");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = " 1=";
      stringArray0[1] = "";
      Long long0 = Long.valueOf(1L);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = new Sash(0.0F, 1230.0F, 2351.0F, 2351.0F, (-257.67642F));
      Sash sash1 = new Sash(1230.0F, (-257.67642F), (-2670.7F), (-1610.0F), (-257.67642F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(0.0F, 2351.0F, 3063.8655F, 770.7224F, (-1610.0F));
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(3063.8655F, 0.0F, 0.0F, (-1610.0F), 2756.449F);
      sashArray0[3] = sash3;
      float[][] floatArray0 = new float[4][4];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 770.7224F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 2351.0F;
      floatArray1[0] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = (float) 1L;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = (-2670.7F);
      floatArray2[5] = 1230.0F;
      floatArray0[2] = floatArray2;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", " 1=", stringArray0, long0, (Float) null, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1230.0F, 1230.0F, 1230.0F, 1230.0F, true, (-1610.0F), 1230.0F, sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      linkedList0.add(homePieceOfFurniture0);
      Sash[] sashArray1 = new Sash[5];
      Sash sash4 = new Sash(3.4028235E38F, 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray1[3] = sash4;
      Sash sash5 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray1[4] = sash5;
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.setModelMirrored(false);
      homeFurnitureGroup0.setElevation((-1022.9626F));
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.setDepth(714.9F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[1];
      Integer integer0 = new Integer(4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(4);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 4, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 1970.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, 1970.9F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeDoorOrWindow0.clone();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setDepth(1970.9F);
      homeFurnitureGroup1.setElevation(1970.9F);
      Integer.getInteger("", 1230);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup1.setHeight(1230);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1207);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 1970.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, 1970.9F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.move(0.0F, (-96.98F));
      Integer integer1 = new Integer(1207);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setHeight(1207);
      homeFurnitureGroup0.getCurrency();
      System.setCurrentTimeMillis(0L);
      homeFurnitureGroup0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 1970.9F, (-1256.0F), 2499.87F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(1970.9F, 2499.87F, 744.8241F, (-3146.5728F), 2499.87F);
      Sash sash2 = new Sash((-1181.732F), 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      sashArray0[4] = sash3;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 744.8241F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setY(0.0F);
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getPlanIcon();
      homeFurnitureGroup0.setDepth(1176.293F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      String[] stringArray0 = new String[10];
      Long long0 = new Long(1L);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(1L, 1L, 1L, 1L, 1L);
      float[][] floatArray0 = new float[3][4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("4nj", "4nj", "4nj", " 1=", stringArray0, long0, (Float) null, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1L, 1L, 1L, 1L, false, 1L, 1L, sashArray0, floatArray0, "4nj", false, false, false, bigDecimal0, bigDecimal0, "4nj");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "4nj");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1151.0315F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setX(1230);
      homeFurnitureGroup0.setElevation(714.9F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(714.9F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" 1=", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      linkedList0.poll();
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setElevation(1970.9F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1151.0315F), 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 1970.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setAngle(1970.9F);
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1151.0315F), 0.0F, 0.0F, 1970.9F);
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setAngle(635.107F);
      homeFurnitureGroup0.setDepth((-3887.077F));
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(977);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 977, 977, 977, 977, true, 977, 977, sashArray0, integer0, (float[][]) null, true, 977, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.getIcon();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      assertEquals(1176.293F, sash0.getYAxis(), 0.01F);
      assertEquals(1970.9F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1219.927F), sash0.getXAxis(), 0.01F);
      assertEquals(1970.9F, sash0.getStartAngle(), 0.01F);
      assertEquals(1970.9F, sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[4] = sash0;
      Integer integer0 = new Integer(1230);
      assertEquals(1230, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" 1=", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(5, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1970.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1970.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(5, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1970.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1970.9F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(1970.9F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(" 1=", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertTrue(boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1970.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1970.9F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(1970.9F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(" 1=", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      
      Stream<HomePieceOfFurniture> stream0 = linkedList0.parallelStream();
      assertEquals(2, linkedList0.size());
      assertNotNull(stream0);
      
      boolean boolean2 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean2);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, linkedList0.size());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1970.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(5, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1970.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1970.9F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(1970.9F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(" 1=", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(1230, (int)homeDoorOrWindow2.getColor());
      assertEquals(714.9F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getShininess());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getCatalogId());
      assertEquals(1970.9F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(" 1=", homeDoorOrWindow2.getName());
      assertEquals(1970.9F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow2);
      
      boolean boolean3 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean3);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(4, linkedList0.size());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1970.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertEquals(5, sashArray0.length);
      
      Stream<HomePieceOfFurniture> stream1 = linkedList0.parallelStream();
      assertFalse(stream1.equals((Object)stream0));
      assertEquals(4, linkedList0.size());
      assertNotSame(stream1, stream0);
      assertNotNull(stream1);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(4, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNotNull(homeFurnitureGroup0);
      
      BigDecimal bigDecimal0 = homeFurnitureGroup0.getPrice();
      assertEquals(4, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(bigDecimal0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertEquals(4, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(1970.9F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(714.9F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(714.9F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(1970.9F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotNull(homeFurnitureGroup1);
      
      homeFurnitureGroup1.setAngle(0.0F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertEquals(4, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(1970.9F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(714.9F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(714.9F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(1970.9F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("FDHDE[U90/U", "FDHDE[U90/U", 4, "FDHDE[U90/U", uRLStreamHandler0);
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals("FDHDE[U90/U", uRL0.getHost());
      assertEquals("FDHDE[U90/U", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("fdhde[u90/u", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("FDHDE[U90/U", uRL0.getFile());
      assertEquals("FDHDE[U90/U:4", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals("FDHDE[U90/U", uRL0.getHost());
      assertEquals("FDHDE[U90/U", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("fdhde[u90/u", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("FDHDE[U90/U", uRL0.getFile());
      assertEquals("FDHDE[U90/U:4", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 1250.3F, true);
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals("FDHDE[U90/U", uRL0.getHost());
      assertEquals("FDHDE[U90/U", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("fdhde[u90/u", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("FDHDE[U90/U", uRL0.getFile());
      assertEquals("FDHDE[U90/U:4", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(1250.3F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(5, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals("FDHDE[U90/U", uRL0.getHost());
      assertEquals("FDHDE[U90/U", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("fdhde[u90/u", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("FDHDE[U90/U", uRL0.getFile());
      assertEquals("FDHDE[U90/U:4", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(1250.3F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(4, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals("FDHDE[U90/U", uRL0.getHost());
      assertEquals("FDHDE[U90/U", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("fdhde[u90/u", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("FDHDE[U90/U", uRL0.getFile());
      assertEquals("FDHDE[U90/U:4", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(1250.3F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(4, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(5, sashArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNotNull(homeFurnitureGroup0);
      
      float float0 = homeFurnitureGroup0.getDepth();
      assertEquals(4.0F, float0, 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      
      homeFurnitureGroup0.setDepth(1250.3F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1250.3F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3743.09F, (-1.0F), 1969.7349F, 2413.1626F, (-513.7614F));
      assertEquals((-513.7614F), sash0.getEndAngle(), 0.01F);
      assertEquals(1969.7349F, sash0.getWidth(), 0.01F);
      assertEquals(2413.1626F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getYAxis(), 0.01F);
      assertEquals(3743.09F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash(2413.1626F, (-2506.6F), (-1256.0F), (-1256.0F), (-1.0F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-1.0F), sash1.getEndAngle(), 0.01F);
      assertEquals((-2506.6F), sash1.getYAxis(), 0.01F);
      assertEquals((-1256.0F), sash1.getStartAngle(), 0.01F);
      assertEquals((-1256.0F), sash1.getWidth(), 0.01F);
      assertEquals(2413.1626F, sash1.getXAxis(), 0.01F);
      assertNotNull(sash1);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" 1=", temporaryURLContent0, temporaryURLContent0, (-1181.732F), 714.61316F, 1230, (-2506.6F), false, 2413.1626F, 2413.1626F, sashArray0, integer0, (float[][]) null, false, 3743.09F, false);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(714.61316F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(2, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-2506.6F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2413.1626F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1230.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(3743.09F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2413.1626F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(5, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(714.61316F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(2, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-2506.6F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2413.1626F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1230.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(3743.09F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2413.1626F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1181.732F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2413.1626F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1230.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2413.1626F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2, (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-590.866F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(714.61316F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-2506.6F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals((-2506.6F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(357.30658F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(714.61316F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(2, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-2506.6F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2413.1626F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1230.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(3743.09F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2413.1626F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1181.732F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(2413.1626F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-2506.6F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-2506.6F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(357.30658F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(714.61316F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-590.866F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(" 1=", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(2413.1626F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(2, (int)homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(1230.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertTrue(boolean0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(1, linkedList0.size());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(714.61316F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(2, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-2506.6F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2413.1626F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1230.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(3743.09F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2413.1626F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1181.732F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(2413.1626F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-2506.6F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-2506.6F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(357.30658F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(714.61316F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-590.866F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(" 1=", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(2413.1626F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(2, (int)homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(1230.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(714.61316F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(2, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-2506.6F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2413.1626F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1230.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(3743.09F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2413.1626F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1181.732F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2413.1626F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1230.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2413.1626F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2, (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-590.866F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(714.61316F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-2506.6F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals((-2506.6F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(357.30658F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(1230.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals((-590.866F), homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-1181.732F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(2413.1626F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertNull(homeDoorOrWindow2.getCatalogId());
      assertEquals(2, (int)homeDoorOrWindow2.getColor());
      assertEquals(714.61316F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals((-2506.6F), homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals(2413.1626F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(357.30658F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals((-2506.6F), homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(" 1=", homeDoorOrWindow2.getName());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow2);
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow2);
      assertTrue(boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(714.61316F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(2, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-2506.6F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2413.1626F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1230.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(3743.09F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2413.1626F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1181.732F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2413.1626F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1230.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2413.1626F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2, (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-590.866F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(714.61316F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-2506.6F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals((-2506.6F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(357.30658F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(1230.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals((-590.866F), homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-1181.732F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(2413.1626F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertNull(homeDoorOrWindow2.getCatalogId());
      assertEquals(2, (int)homeDoorOrWindow2.getColor());
      assertEquals(714.61316F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals((-2506.6F), homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals(2413.1626F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(357.30658F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals((-2506.6F), homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(" 1=", homeDoorOrWindow2.getName());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(5, sashArray0.length);
      
      Stream<HomePieceOfFurniture> stream0 = linkedList0.parallelStream();
      assertEquals(2, linkedList0.size());
      assertNotNull(stream0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "SE+lq!jG@j]#$yT6,Zm");
      assertEquals(2, linkedList0.size());
      assertEquals(2506.6F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals("SE+lq!jG@j]#$yT6,Zm", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-2506.6F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-2506.6F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean2 = homeFurnitureGroup0.containsPoint(2413.1626F, 1970.9F, 3121.0F);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, linkedList0.size());
      assertEquals(2506.6F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals("SE+lq!jG@j]#$yT6,Zm", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-2506.6F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-2506.6F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      
      boolean boolean3 = homeFurnitureGroup0.isDoorOrWindow();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(2, linkedList0.size());
      assertEquals(2506.6F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals("SE+lq!jG@j]#$yT6,Zm", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-2506.6F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-2506.6F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      
      homeFurnitureGroup0.setY((-473.1F));
      assertEquals(2, linkedList0.size());
      assertEquals(2506.6F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals("SE+lq!jG@j]#$yT6,Zm", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-473.1F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-2506.6F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-2506.6F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      assertEquals(1176.293F, sash0.getYAxis(), 0.01F);
      assertEquals(1970.9F, sash0.getStartAngle(), 0.01F);
      assertEquals(1970.9F, sash0.getWidth(), 0.01F);
      assertEquals(1970.9F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1219.927F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[4] = sash0;
      Integer integer0 = new Integer(1230);
      assertEquals(1230, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" 1=", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(5, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(1970.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(1970.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(5, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(1970.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(" 1=", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(1970.9F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertTrue(boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(" 1=", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(1970.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(" 1=", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(" 1=", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(1970.9F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      
      Stream<HomePieceOfFurniture> stream0 = linkedList0.parallelStream();
      assertEquals(2, linkedList0.size());
      assertNotNull(stream0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNotNull(homeFurnitureGroup0);
      
      BigDecimal bigDecimal0 = homeFurnitureGroup0.getPrice();
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(bigDecimal0);
      
      homeFurnitureGroup0.setModelMirrored(true);
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      
      Content content0 = homeFurnitureGroup0.getIcon();
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(content0);
      
      Content content1 = homeFurnitureGroup0.getModel();
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(content1);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertEquals(2, linkedList0.size());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(985.45F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(985.45F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(1970.9F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(714.9F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(" 1=", homeFurnitureGroup1.getName());
      assertEquals(714.9F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotNull(homeFurnitureGroup1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getProtocol());
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getProtocol());
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[8];
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 4, true);
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getProtocol());
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(8, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getProtocol());
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(4, (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(8, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getProtocol());
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(4, (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(8, sashArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(2.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNotNull(homeFurnitureGroup0);
      
      BigDecimal bigDecimal0 = homeFurnitureGroup0.getValueAddedTaxPercentage();
      assertEquals(1, linkedList0.size());
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(2.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("com.eteks.sweethome3d.model.HomeFurnitureGroup", "com.eteks.sweethome3d.model.HomeFurnitureGroup", 4, "com.eteks.sweethome3d.model.HomeFurnitureGroup", uRLStreamHandler0);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup:4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("com.eteks.sweethome3d.model.homefurnituregroup", uRL0.getProtocol());
      assertEquals(4, uRL0.getPort());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup:4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("com.eteks.sweethome3d.model.homefurnituregroup", uRL0.getProtocol());
      assertEquals(4, uRL0.getPort());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomeFurnitureGroup", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, false, 4, 4, sashArray0, integer0, (float[][]) null, false, 4, false);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup:4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("com.eteks.sweethome3d.model.homefurnituregroup", uRL0.getProtocol());
      assertEquals(4, uRL0.getPort());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getName());
      assertEquals(5, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup:4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("com.eteks.sweethome3d.model.homefurnituregroup", uRL0.getProtocol());
      assertEquals(4, uRL0.getPort());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(4, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow0.getName());
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      homeDoorOrWindow0.setNameAngle(1426.086F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup:4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("com.eteks.sweethome3d.model.homefurnituregroup", uRL0.getProtocol());
      assertEquals(4, uRL0.getPort());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(4, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow0.getName());
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6.08618F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(5, sashArray0.length);
      
      homeDoorOrWindow0.setAngle(548.78326F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup:4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("com.eteks.sweethome3d.model.homefurnituregroup", uRL0.getProtocol());
      assertEquals(4, uRL0.getPort());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(4, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow0.getName());
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6.08618F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.1461425F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(5, sashArray0.length);
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup:4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("com.eteks.sweethome3d.model.homefurnituregroup", uRL0.getProtocol());
      assertEquals(4, uRL0.getPort());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(4, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow0.getName());
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6.08618F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.1461425F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(5, sashArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomeFurnitureGroup");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(2.1461425F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0000002F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      HomeTexture homeTexture0 = homeFurnitureGroup0.getTexture();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(2.1461425F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0000002F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeTexture0);
      
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(2.1461425F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0000002F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      
      boolean boolean2 = homeFurnitureGroup0.isDeformable();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(2.1461425F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0000002F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      
      homeFurnitureGroup0.setModelMirrored(true);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(2.1461425F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0000002F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      
      Content content0 = homeFurnitureGroup0.getModel();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(2.1461425F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0000002F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(content0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.3926991F, 0.0F, (-3257.5437F), (-2072.5F), 3088.0F);
      assertEquals(3088.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-2072.5F), sash0.getStartAngle(), 0.01F);
      assertEquals((-3257.5437F), sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.3926991F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, (-1181.732F), 0.5F, (-3916.3F), 2499.87F);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(0.5F, sash1.getWidth(), 0.01F);
      assertEquals(2499.87F, sash1.getEndAngle(), 0.01F);
      assertEquals((-3916.3F), sash1.getStartAngle(), 0.01F);
      assertEquals((-1181.732F), sash1.getYAxis(), 0.01F);
      assertEquals(0.0F, sash1.getXAxis(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(0.0F, 2499.87F, 0.0F, (-3146.5728F), 2499.87F);
      assertFalse(sash2.equals((Object)sash1));
      assertFalse(sash2.equals((Object)sash0));
      assertEquals(0.0F, sash2.getXAxis(), 0.01F);
      assertEquals(0.0F, sash2.getWidth(), 0.01F);
      assertEquals(2499.87F, sash2.getYAxis(), 0.01F);
      assertEquals((-3146.5728F), sash2.getStartAngle(), 0.01F);
      assertEquals(2499.87F, sash2.getEndAngle(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(3.4028235E38F, 0.0F, 0.0F, 0.0F, (-1219.927F));
      assertFalse(sash3.equals((Object)sash1));
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash0));
      assertEquals((-1219.927F), sash3.getEndAngle(), 0.01F);
      assertEquals(3.4028235E38F, sash3.getXAxis(), 0.01F);
      assertEquals(0.0F, sash3.getYAxis(), 0.01F);
      assertEquals(0.0F, sash3.getWidth(), 0.01F);
      assertEquals(0.0F, sash3.getStartAngle(), 0.01F);
      assertNotNull(sash3);
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash((-1219.927F), 1176.293F, (-2072.5F), 0.0F, 0.0F);
      assertFalse(sash4.equals((Object)sash0));
      assertFalse(sash4.equals((Object)sash2));
      assertFalse(sash4.equals((Object)sash3));
      assertFalse(sash4.equals((Object)sash1));
      assertEquals((-1219.927F), sash4.getXAxis(), 0.01F);
      assertEquals(1176.293F, sash4.getYAxis(), 0.01F);
      assertEquals((-2072.5F), sash4.getWidth(), 0.01F);
      assertEquals(0.0F, sash4.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash4.getEndAngle(), 0.01F);
      assertNotNull(sash4);
      
      sashArray0[4] = sash4;
      Integer integer0 = new Integer(1230);
      assertEquals(1230, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 718.212F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, true, (-1181.732F), true);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(718.212F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(5, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(718.212F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(718.212F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(718.212F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(718.212F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1256.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-628.0F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(718.212F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertTrue(boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(718.212F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(1, linkedList0.size());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(718.212F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1256.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-628.0F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(718.212F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      
      Stream<HomePieceOfFurniture> stream0 = linkedList0.parallelStream();
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(718.21204F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getProtocol());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getProtocol());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[2];
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, integer0, (float[][]) null, true, 917.77185F, true);
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getProtocol());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(917.77185F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(2, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getProtocol());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(917.77185F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(4, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getProtocol());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(917.77185F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(4, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2, sashArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setWidth(917.77185F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(917.77185F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[1];
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 4, 4, 4, 4, true, 4, 4, sashArray0, (Integer) null, (float[][]) null, true, 4, true);
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(4.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(4.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(4.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(4.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(4.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      Level level0 = new Level("", 4, 4, 4);
      assertEquals(4.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(4.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(4.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      homeDoorOrWindow1.setLevel(level0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(4.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(8.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(4.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(4.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(4.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(4.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(4.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(4.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertTrue(boolean0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(1, linkedList0.size());
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(4.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(8.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(4.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(4.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(4.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertEquals(":4", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(4.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(4.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(4.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(4.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(4.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(4.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(1, sashArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(2, linkedList0.size());
      assertEquals(4.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(4.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNotNull(homeFurnitureGroup0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 4, "", uRLStreamHandler0);
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(":4", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(":4", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-2146754683));
      assertEquals((-2146754683), (int)integer0);
      assertNotNull(integer0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash(1.0F, 187.0F, (-1847.0F), (-1.0F), 665.9526F);
      assertEquals(187.0F, sash0.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(665.9526F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1847.0F), sash0.getWidth(), 0.01F);
      assertEquals(1.0F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      Sash sash1 = new Sash((-1.0F), (-2081.0F), 0.0F, 187.0F, 5017.0F);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-2081.0F), sash1.getYAxis(), 0.01F);
      assertEquals(5017.0F, sash1.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash1.getXAxis(), 0.01F);
      assertEquals(0.0F, sash1.getWidth(), 0.01F);
      assertEquals(187.0F, sash1.getStartAngle(), 0.01F);
      assertNotNull(sash1);
      
      Integer integer1 = new Integer((-598));
      assertEquals((-598), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("B{q|", temporaryURLContent0, temporaryURLContent0, 4575.624F, (-3896.4944F), 1.0F, 4, true, 513.0467F, 4575.624F, sashArray0, integer1, (float[][]) null, true, (-2081.0F), true);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(":4", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4575.624F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(513.0467F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals((-598), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("B{q|", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4575.624F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals((-3896.4944F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-2081.0F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(3, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(":4", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4575.624F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(513.0467F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals((-598), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("B{q|", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4575.624F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals((-3896.4944F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-2081.0F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(4575.624F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1948.2472F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(513.0467F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("B{q|", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(4575.624F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3896.4944F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(2287.812F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-598), (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(4, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(":4", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4575.624F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(513.0467F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals((-598), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("B{q|", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(4575.624F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals((-3896.4944F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-2081.0F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(4575.624F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1948.2472F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(513.0467F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("B{q|", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(4.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(4575.624F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3896.4944F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(2287.812F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-598), (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3, sashArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setWidth((-1.0F));
      assertEquals(1, linkedList0.size());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      
      float float0 = homeFurnitureGroup0.getDepth();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      
      float float1 = homeFurnitureGroup0.getWidth();
      assertEquals((-1.0F), float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(4.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[4];
      Integer integer0 = new Integer(1253);
      assertEquals(1253, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("p+@8ZX9x", temporaryURLContent0, temporaryURLContent0, 1970.9F, 1970.9F, 1970.9F, 759.24F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1253, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(759.24F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1253, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(759.24F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(759.24F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(759.24F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(985.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1253, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(1970.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1253, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(759.24F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(759.24F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(759.24F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(985.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1253, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(4, sashArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "p+@8ZX9x");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(1970.9001F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(759.24F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(759.24F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNotNull(homeFurnitureGroup0);
      
      Integer integer1 = homeFurnitureGroup0.getColor();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(1970.9001F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(759.24F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(759.24F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(integer1);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(1970.9001F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(759.24F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(759.24F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(759.24F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(759.24F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(1970.9001F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotNull(homeFurnitureGroup1);
      
      boolean boolean1 = homeFurnitureGroup1.intersectsRectangle((-1.0F), 2466.5237F, (-1181.732F), (-2240.693F));
      assertFalse(boolean1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(1970.9001F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(759.24F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(759.24F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(759.24F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(759.24F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(1970.9001F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      homeFurnitureGroup1.setColor((Integer) null);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(1970.9001F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(759.24F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(759.24F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(759.24F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(759.24F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(1970.9001F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(1970.9F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      System.setCurrentTimeMillis(1253);
      boolean boolean2 = homeFurnitureGroup0.isTexturable();
      assertTrue(boolean2);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(1970.9001F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(759.24F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(759.24F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      homeFurnitureGroup0.setColor(integer0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(1970.9001F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(985.45F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(985.45F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(759.24F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1253, (int)homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1970.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(759.24F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      sashArray0[4] = sashArray0[3];
      Integer integer0 = new Integer(1230);
      assertEquals(1230, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1254.9757F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1151.0315F), false);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1254.9757F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1151.0315F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(5, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1254.9757F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1151.0315F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-627.48785F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1254.9757F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1254.9757F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1151.0315F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-627.48785F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1254.9757F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(5, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1254.9757F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1151.0315F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-627.48785F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1254.9757F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1254.9757F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((-627.48785F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(1970.9F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setNameVisible(false);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1254.9757F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1151.0315F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-627.48785F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1254.9757F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1254.9757F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((-627.48785F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(1970.9F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Stream<HomePieceOfFurniture> stream0 = linkedList0.parallelStream();
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Q2f_KfJW}kRjrVpU^J");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setAngle((-1254.9757F));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1.6613535F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1.6613535F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(714.9F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(714.9F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(1.6613535F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotNull(homeFurnitureGroup1);
      
      BigDecimal bigDecimal0 = homeFurnitureGroup0.getPrice();
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1.6613535F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNull(bigDecimal0);
      
      homeFurnitureGroup0.setAngle((-2295.0F));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(4.6458225F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertNull(homeFurnitureGroup2.getColor());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertEquals(714.9F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup2.getName());
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals(714.9F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertFalse(homeFurnitureGroup2.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals(4.6458225F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(4.6458225F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotNull(homeFurnitureGroup2);
      
      HomeFurnitureGroup homeFurnitureGroup3 = homeFurnitureGroup1.clone();
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup3.isTexturable());
      assertFalse(homeFurnitureGroup3.isModelMirrored());
      assertFalse(homeFurnitureGroup3.isBackFaceShown());
      assertNull(homeFurnitureGroup3.getColor());
      assertFalse(homeFurnitureGroup3.isNameVisible());
      assertTrue(homeFurnitureGroup3.isDoorOrWindow());
      assertEquals(714.9F, homeFurnitureGroup3.getElevation(), 0.01F);
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup3.getName());
      assertTrue(homeFurnitureGroup3.isVisible());
      assertEquals(714.9F, homeFurnitureGroup3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup3.getDescription());
      assertEquals(0.0F, homeFurnitureGroup3.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getY(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup3.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup3.getShininess());
      assertNull(homeFurnitureGroup3.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup3.isResizable());
      assertEquals(1.6613535F, homeFurnitureGroup3.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup3.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup3.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup3.isDeformable());
      assertNull(homeFurnitureGroup3.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup3.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup3.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(4.6458225F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(714.9F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(714.9F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(1.6613535F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup3);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup3);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotNull(homeFurnitureGroup3);
      
      float float0 = homeFurnitureGroup3.getHeight();
      assertEquals(1970.9F, float0, 0.01F);
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup3));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup3));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup3.isTexturable());
      assertFalse(homeFurnitureGroup3.isModelMirrored());
      assertFalse(homeFurnitureGroup3.isBackFaceShown());
      assertNull(homeFurnitureGroup3.getColor());
      assertFalse(homeFurnitureGroup3.isNameVisible());
      assertTrue(homeFurnitureGroup3.isDoorOrWindow());
      assertEquals(714.9F, homeFurnitureGroup3.getElevation(), 0.01F);
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup3.getName());
      assertTrue(homeFurnitureGroup3.isVisible());
      assertEquals(714.9F, homeFurnitureGroup3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup3.getDescription());
      assertEquals(0.0F, homeFurnitureGroup3.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getY(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup3.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup3.getShininess());
      assertNull(homeFurnitureGroup3.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup3.isResizable());
      assertEquals(1.6613535F, homeFurnitureGroup3.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup3.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup3.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup3.isDeformable());
      assertNull(homeFurnitureGroup3.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup3.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup3.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(4.6458225F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(714.9F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(714.9F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(1.6613535F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup3);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup3);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      homeFurnitureGroup2.setX(1230);
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup3));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup3));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertNull(homeFurnitureGroup2.getColor());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertEquals(714.9F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup2.getName());
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals(714.9F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertFalse(homeFurnitureGroup2.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals(4.6458225F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(4.6458225F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup3);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup3);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      float float1 = homeFurnitureGroup1.getWidth();
      assertEquals(0.0F, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup3));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup3));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(4.6458225F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(714.9F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(714.9F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(1970.9F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("Q2f_KfJW}kRjrVpU^J", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(1.6613535F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup3);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup3);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, 2499.87F, 714.9F, (-3146.5728F), 2499.87F);
      assertEquals((-3146.5728F), sash0.getStartAngle(), 0.01F);
      assertEquals(2499.87F, sash0.getYAxis(), 0.01F);
      assertEquals(2499.87F, sash0.getEndAngle(), 0.01F);
      assertEquals(714.9F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash(3.4028235E38F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(3.4028235E38F, sash1.getXAxis(), 0.01F);
      assertEquals(0.0F, sash1.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash1.getWidth(), 0.01F);
      assertEquals((-1181.732F), sash1.getYAxis(), 0.01F);
      assertEquals((-1219.927F), sash1.getEndAngle(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[3] = sash1;
      Sash sash2 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals(1970.9F, sash2.getEndAngle(), 0.01F);
      assertEquals((-1219.927F), sash2.getXAxis(), 0.01F);
      assertEquals(744.8241F, sash2.getWidth(), 0.01F);
      assertEquals(1176.293F, sash2.getYAxis(), 0.01F);
      assertEquals(1970.9F, sash2.getStartAngle(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[4] = sash2;
      Integer integer0 = new Integer(1230);
      assertEquals(1230, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(744.8241F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(5, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(744.8241F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(744.8241F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(744.8241F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(744.8241F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(5, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(744.8241F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(744.8241F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(744.8241F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-628.0F), homeDoorOrWindow1.getY(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertTrue(boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(744.8241F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(744.8241F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(744.8241F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-628.0F), homeDoorOrWindow1.getY(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      
      Stream<HomePieceOfFurniture> stream0 = linkedList0.parallelStream();
      assertEquals(2, linkedList0.size());
      assertNotNull(stream0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(744.8241F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(2, linkedList0.size());
      assertNotNull(homeFurnitureGroup0);
      
      BigDecimal bigDecimal0 = homeFurnitureGroup0.getPrice();
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(744.8241F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(2, linkedList0.size());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 1970.9F, (-1256.0F), 2499.87F);
      assertEquals(2499.87F, sash0.getEndAngle(), 0.01F);
      assertEquals(1970.9F, sash0.getWidth(), 0.01F);
      assertEquals((-1181.732F), sash0.getYAxis(), 0.01F);
      assertEquals((-1256.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(1970.9F, 2499.87F, 744.8241F, (-3146.5728F), 2499.87F);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-3146.5728F), sash1.getStartAngle(), 0.01F);
      assertEquals(2499.87F, sash1.getYAxis(), 0.01F);
      assertEquals(744.8241F, sash1.getWidth(), 0.01F);
      assertEquals(1970.9F, sash1.getXAxis(), 0.01F);
      assertEquals(2499.87F, sash1.getEndAngle(), 0.01F);
      assertNotNull(sash1);
      
      Sash sash2 = new Sash((-1181.732F), 0.0F, 0.0F, 0.0F, (-1219.927F));
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals(0.0F, sash2.getWidth(), 0.01F);
      assertEquals(0.0F, sash2.getStartAngle(), 0.01F);
      assertEquals((-1181.732F), sash2.getXAxis(), 0.01F);
      assertEquals((-1219.927F), sash2.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash2.getYAxis(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      assertFalse(sash3.equals((Object)sash1));
      assertFalse(sash3.equals((Object)sash0));
      assertFalse(sash3.equals((Object)sash2));
      assertEquals(1970.9F, sash3.getEndAngle(), 0.01F);
      assertEquals((-1219.927F), sash3.getXAxis(), 0.01F);
      assertEquals(1176.293F, sash3.getYAxis(), 0.01F);
      assertEquals(744.8241F, sash3.getWidth(), 0.01F);
      assertEquals(1970.9F, sash3.getStartAngle(), 0.01F);
      assertNotNull(sash3);
      
      Integer integer0 = new Integer(1230);
      assertEquals(1230, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 744.8241F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(744.8241F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(744.8241F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertEquals(5, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(744.8241F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(744.8241F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(744.8241F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(744.8241F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(744.8241F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(744.8241F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(744.8241F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(744.8241F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(744.8241F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(744.8241F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(744.8241F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(744.8241F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-628.0F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(744.8241F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setNameVisible(false);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(744.8241F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(744.8241F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(744.8241F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(744.8241F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(744.8241F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(744.8241F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(744.8241F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-628.0F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(744.8241F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertTrue(boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(744.8241F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(744.8241F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(744.8241F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(744.8241F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(744.8241F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(744.8241F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals(744.8241F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-628.0F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(744.8241F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      
      Stream<HomePieceOfFurniture> stream0 = linkedList0.parallelStream();
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " doesn't contain texture ");
      assertEquals(1, linkedList0.size());
      assertEquals(744.8241F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(" doesn't contain texture ", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(744.8241F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(744.8241F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      BigDecimal bigDecimal0 = homeFurnitureGroup0.getPrice();
      assertEquals(1, linkedList0.size());
      assertEquals(744.8241F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(" doesn't contain texture ", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(744.8241F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(744.8241F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(bigDecimal0);
      
      homeFurnitureGroup0.setX((-1.0F));
      assertEquals(1, linkedList0.size());
      assertEquals(744.8241F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(" doesn't contain texture ", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(744.8241F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(744.8241F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPrice();
      assertEquals(1, linkedList0.size());
      assertEquals(744.8241F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(" doesn't contain texture ", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(744.8241F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(744.8241F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(bigDecimal1);
      
      Level level0 = homeFurnitureGroup0.getLevel();
      assertEquals(1, linkedList0.size());
      assertEquals(744.8241F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(" doesn't contain texture ", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(744.8241F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(744.8241F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(level0);
      
      homeFurnitureGroup0.setLevel((Level) null);
      assertEquals(1, linkedList0.size());
      assertEquals(744.8241F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(" doesn't contain texture ", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(744.8241F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(744.8241F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(3.4028235E38F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      assertEquals(3.4028235E38F, sash0.getXAxis(), 0.01F);
      assertEquals((-1181.732F), sash0.getYAxis(), 0.01F);
      assertEquals((-1219.927F), sash0.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[3] = sash0;
      Sash sash1 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(1970.9F, sash1.getWidth(), 0.01F);
      assertEquals((-1219.927F), sash1.getXAxis(), 0.01F);
      assertEquals(1970.9F, sash1.getStartAngle(), 0.01F);
      assertEquals(1176.293F, sash1.getYAxis(), 0.01F);
      assertEquals(1970.9F, sash1.getEndAngle(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[4] = sash1;
      Integer integer0 = new Integer(1230);
      assertEquals(1230, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(5, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1970.9F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals((-1256.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-628.0F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1230, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(714.9F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1256.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(1970.9F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1970.9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(5, sashArray0.length);
      
      Stream<HomePieceOfFurniture> stream0 = linkedList0.parallelStream();
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNotNull(homeFurnitureGroup0);
      
      BigDecimal bigDecimal0 = homeFurnitureGroup0.getPrice();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(bigDecimal0);
      
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      homeFurnitureGroup0.setModelMirrored(true);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertEquals(1, linkedList0.size());
      assertEquals(714.9F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(" 1=", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertEquals(714.9F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotNull(homeFurnitureGroup1);
      
      Content content0 = homeFurnitureGroup1.getPlanIcon();
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertEquals(1, linkedList0.size());
      assertEquals(714.9F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(" 1=", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertEquals(714.9F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNull(content0);
      
      homeFurnitureGroup1.setDepth(0.0F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertEquals(1, linkedList0.size());
      assertEquals(714.9F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(" 1=", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertEquals(714.9F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      float float0 = homeFurnitureGroup1.getWidth();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertEquals(1, linkedList0.size());
      assertEquals(714.9F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(" 1=", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertEquals(714.9F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      String[] stringArray0 = new String[2];
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Sash[] sashArray0 = new Sash[16];
      Sash sash0 = new Sash(1L, 1L, 2351.0F, 2351.0F, (-307.33508F));
      assertEquals(2351.0F, sash0.getWidth(), 0.01F);
      assertEquals((-307.33508F), sash0.getEndAngle(), 0.01F);
      assertEquals(1.0F, sash0.getXAxis(), 0.01F);
      assertEquals(1.0F, sash0.getYAxis(), 0.01F);
      assertEquals(2351.0F, sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      float[][] floatArray0 = new float[3][4];
      floatArray0[1] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Dnj", "Dnj", "Dnj", " 1=", stringArray0, long0, (Float) null, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1L, 1L, 1L, 1L, true, 1L, 1L, sashArray0, floatArray0, "Dnj", true, true, true, bigDecimal0, bigDecimal0, "Dnj");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Dnj", catalogDoorOrWindow0.getCreator());
      assertEquals("Dnj", catalogDoorOrWindow0.getDescription());
      assertEquals(1L, (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Dnj", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Dnj", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("Dnj", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(" 1=", catalogDoorOrWindow0.getInformation());
      assertEquals(2, stringArray0.length);
      assertEquals(16, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Dnj", catalogDoorOrWindow0.getCreator());
      assertEquals("Dnj", catalogDoorOrWindow0.getDescription());
      assertEquals(1L, (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Dnj", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Dnj", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("Dnj", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(" 1=", catalogDoorOrWindow0.getInformation());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("Dnj", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("Dnj", homePieceOfFurniture0.getCurrency());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals("Dnj", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("Dnj", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(2, stringArray0.length);
      assertEquals(16, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Dnj", catalogDoorOrWindow0.getCreator());
      assertEquals("Dnj", catalogDoorOrWindow0.getDescription());
      assertEquals(1L, (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Dnj", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Dnj", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("Dnj", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(" 1=", catalogDoorOrWindow0.getInformation());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("Dnj", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("Dnj", homePieceOfFurniture0.getCurrency());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals("Dnj", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("Dnj", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(2, stringArray0.length);
      assertEquals(16, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Dnj");
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals("Dnj", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("Dnj", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotNull(homeFurnitureGroup0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getValueAddedTax();
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals("Dnj", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("Dnj", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)100, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup0.setWidth((-2117.0F));
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-2117.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals("Dnj", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("Dnj", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " 1=";
      stringArray0[1] = "";
      Long long0 = Long.valueOf(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = new Sash(0.0F, 1230.0F, 2351.0F, 2351.0F, (-257.67642F));
      assertEquals((-257.67642F), sash0.getEndAngle(), 0.01F);
      assertEquals(2351.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(2351.0F, sash0.getWidth(), 0.01F);
      assertEquals(1230.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(1230.0F, (-257.67642F), (-2670.7F), (-1609.71F), (-257.67642F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-1609.71F), sash1.getStartAngle(), 0.01F);
      assertEquals(1230.0F, sash1.getXAxis(), 0.01F);
      assertEquals((-257.67642F), sash1.getEndAngle(), 0.01F);
      assertEquals((-257.67642F), sash1.getYAxis(), 0.01F);
      assertEquals((-2670.7F), sash1.getWidth(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(0.0F, 2351.0F, 3063.8655F, 770.7224F, (-646.0F));
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals(770.7224F, sash2.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash2.getXAxis(), 0.01F);
      assertEquals(2351.0F, sash2.getYAxis(), 0.01F);
      assertEquals((-646.0F), sash2.getEndAngle(), 0.01F);
      assertEquals(3063.8655F, sash2.getWidth(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(0.0F, 0.0F, 0.0F, (-1609.71F), 2756.449F);
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash1));
      assertFalse(sash3.equals((Object)sash0));
      assertEquals(0.0F, sash3.getWidth(), 0.01F);
      assertEquals((-1609.71F), sash3.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash3.getYAxis(), 0.01F);
      assertEquals(0.0F, sash3.getXAxis(), 0.01F);
      assertEquals(2756.449F, sash3.getEndAngle(), 0.01F);
      assertNotNull(sash3);
      
      sashArray0[3] = sash3;
      float[][] floatArray0 = new float[4][4];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 770.7224F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 2351.0F;
      floatArray1[3] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 2756.449F;
      floatArray2[1] = 1230.0F;
      floatArray2[2] = 1230.0F;
      floatArray2[3] = (float) 1L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 1L;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 0.0F;
      floatArray3[4] = (-2670.7F);
      floatArray3[5] = 1230.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray0[3] = floatArray4;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", " 1=", stringArray0, long0, (Float) null, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1230.0F, 1230.0F, 1230.0F, 1230.0F, true, (-1609.71F), 1230.0F, sashArray0, floatArray0, "", true, false, true, bigDecimal0, bigDecimal0, "");
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(1L, (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1230.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1609.71F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(1230.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(" 1=", catalogDoorOrWindow0.getInformation());
      assertEquals(1230.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(1230.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1230.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(1L, (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1230.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1609.71F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(1230.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(" 1=", catalogDoorOrWindow0.getInformation());
      assertEquals(1230.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(1230.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1230.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(615.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(615.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1230.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1230.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1230.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1230.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(1230.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertEquals(4, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(1L, (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1230.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1609.71F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(1230.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(" 1=", catalogDoorOrWindow0.getInformation());
      assertEquals(1230.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(1230.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1230.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(615.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(615.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1230.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1230.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1230.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1230.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(1230.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertEquals(4, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      Sash[] sashArray1 = new Sash[5];
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      Sash sash4 = new Sash(3.4028235E38F, (-1181.732F), 0.0F, 0.0F, (-1219.927F));
      assertFalse(sash4.equals((Object)sash3));
      assertFalse(sash4.equals((Object)sash1));
      assertFalse(sash4.equals((Object)sash0));
      assertFalse(sash4.equals((Object)sash2));
      assertEquals((-1219.927F), sash4.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash4.getStartAngle(), 0.01F);
      assertEquals((-1181.732F), sash4.getYAxis(), 0.01F);
      assertEquals(0.0F, sash4.getWidth(), 0.01F);
      assertEquals(3.4028235E38F, sash4.getXAxis(), 0.01F);
      assertNotNull(sash4);
      
      sashArray1[3] = sash4;
      Sash sash5 = new Sash((-1219.927F), 1176.293F, 1970.9F, 1970.9F, 1970.9F);
      assertFalse(sash5.equals((Object)sash3));
      assertFalse(sash5.equals((Object)sash1));
      assertFalse(sash5.equals((Object)sash0));
      assertFalse(sash5.equals((Object)sash2));
      assertFalse(sash5.equals((Object)sash4));
      assertEquals(1970.9F, sash5.getWidth(), 0.01F);
      assertEquals(1970.9F, sash5.getStartAngle(), 0.01F);
      assertEquals(1970.9F, sash5.getEndAngle(), 0.01F);
      assertEquals((-1219.927F), sash5.getXAxis(), 0.01F);
      assertEquals(1176.293F, sash5.getYAxis(), 0.01F);
      assertNotNull(sash5);
      
      sashArray1[4] = sash5;
      Integer integer0 = new Integer(1230);
      assertEquals(1230, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 1970.9F, 714.9F, false, 1970.9F, 1970.9F, sashArray1, integer0, (float[][]) null, false, (-1181.732F), false);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(1970.9F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1970.9F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertNull(catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(714.9F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1256.0F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(1970.9F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(5, sashArray1.length);
      assertNotNull(catalogDoorOrWindow1);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(1970.9F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1970.9F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertNull(catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(714.9F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1256.0F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(1970.9F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(5, sashArray1.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(1970.9F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1970.9F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertNull(catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(714.9F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1256.0F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(1970.9F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1970.9F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(714.9F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1230, (int)homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(1970.9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-628.0F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(985.45F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1970.9F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(5, sashArray1.length);
      assertNotNull(homeDoorOrWindow1);
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals(2, linkedList0.size());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(1970.9F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1970.9F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getId());
      assertEquals((-1181.732F), catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertNull(catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(714.9F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1256.0F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(1970.9F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1230, (int)catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(1970.9F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(714.9F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1230, (int)homeDoorOrWindow0.getColor());
      assertEquals(1970.9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1256.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(985.45F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1970.9F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1970.9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-628.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(714.9F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(5, sashArray1.length);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      Stream<HomePieceOfFurniture> stream0 = linkedList0.parallelStream();
      assertEquals(2, linkedList0.size());
      assertNotNull(stream0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(615.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(615.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotNull(homeFurnitureGroup0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPrice();
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(615.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(615.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(615.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(615.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup0.setModelMirrored(true);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertEquals(714.9F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(615.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(615.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup0.setElevation((-1022.9626F));
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1022.9626F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1022.9626F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(615.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(615.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      float float0 = homeFurnitureGroup0.getDepth();
      assertEquals(1230.0F, float0, 0.01F);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1022.9626F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1022.9626F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(615.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(615.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup0.setDepth(714.9F);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1022.9626F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(714.9F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1022.9626F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(" 1=", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1970.9F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(615.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(615.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1230.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("com.eteks.sweethome3d.model.HomeFurnitureGroup", "com.eteks.sweethome3d.model.HomeFurnitureGroup", 4, "com.eteks.sweethome3d.model.HomeFurnitureGroup", uRLStreamHandler0);
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup:4", uRL0.getAuthority());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getHost());
      assertEquals("com.eteks.sweethome3d.model.homefurnituregroup", uRL0.getProtocol());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup:4", uRL0.getAuthority());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getHost());
      assertEquals("com.eteks.sweethome3d.model.homefurnituregroup", uRL0.getProtocol());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Sash[] sashArray0 = new Sash[2];
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((double) 4);
      assertEquals(4.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomeFurnitureGroup", "com.eteks.sweethome3d.model.HomeFurnitureGroup", "", "com.eteks.sweethome3d.model.HomeFurnitureGroup", (String[]) null, long0, float0, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1719.1636F, 1.0F, 2.0F, 1013.2624F, true, (-1219.927F), 487.656F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomeFurnitureGroup", true, true, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.HomeFurnitureGroup");
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup:4", uRL0.getAuthority());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getHost());
      assertEquals("com.eteks.sweethome3d.model.homefurnituregroup", uRL0.getProtocol());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(1013.2624F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCreator());
      assertEquals((-1L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1719.1636F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1219.927F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCurrency());
      assertEquals(487.656F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getName());
      assertEquals(2, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup:4", uRL0.getAuthority());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getHost());
      assertEquals("com.eteks.sweethome3d.model.homefurnituregroup", uRL0.getProtocol());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(1013.2624F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCreator());
      assertEquals((-1L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1719.1636F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1219.927F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCurrency());
      assertEquals(487.656F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1013.2624F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(1013.2624F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homePieceOfFurniture0.getCurrency());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals(859.5818F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(1719.1636F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homePieceOfFurniture0.getName());
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2, sashArray0.length);
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean1 = linkedList0.add(homePieceOfFurniture0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup:4", uRL0.getAuthority());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", uRL0.getHost());
      assertEquals("com.eteks.sweethome3d.model.homefurnituregroup", uRL0.getProtocol());
      assertEquals(4, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(1013.2624F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCreator());
      assertEquals((-1L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(4.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1719.1636F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1219.927F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCurrency());
      assertEquals(487.656F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1013.2624F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(1013.2624F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homePieceOfFurniture0.getCurrency());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals(859.5818F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(1719.1636F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homePieceOfFurniture0.getName());
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2, sashArray0.length);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "I&R<|b>I.,Z3e");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(1719.1636F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1013.2624F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(859.5818F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1013.2624F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("I&R<|b>I.,Z3e", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNotNull(homeFurnitureGroup0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup0.setWidth((-1L));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(2.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1013.2624F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(859.5818F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1013.2624F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("I&R<|b>I.,Z3e", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      System.setCurrentTimeMillis(255L);
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)110, bigDecimal1.shortValue());
      assertEquals((byte)110, bigDecimal1.byteValue());
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(2.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1013.2624F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(859.5818F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1013.2624F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("I&R<|b>I.,Z3e", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource lightSource0 = new LightSource(0.0F, 1170.3429F, 1170.3429F, (-130), float0);
      assertEquals(1170.3429F, lightSource0.getZ(), 0.01F);
      assertEquals(1170.3429F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getDiameter(), 0.01F);
      assertEquals((-130), lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(683.40874);
      assertEquals(683.40875F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      LightSource lightSource1 = new LightSource(0.5F, 937.9F, (-662.4F), (-130), float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-662.4F), lightSource1.getZ(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals((-130), lightSource1.getColor());
      assertEquals(937.9F, lightSource1.getY(), 0.01F);
      assertEquals(683.40875F, lightSource1.getDiameter(), 0.01F);
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      Float float2 = new Float(331.9884129113102);
      assertEquals(331.9884F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      LightSource lightSource2 = new LightSource(1170.3429F, 0.5F, 0.0F, (-2146593793), float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertEquals(0.0F, lightSource2.getZ(), 0.01F);
      assertEquals((-2146593793), lightSource2.getColor());
      assertEquals(1170.3429F, lightSource2.getX(), 0.01F);
      assertEquals(0.5F, lightSource2.getY(), 0.01F);
      assertEquals(331.9884F, lightSource2.getDiameter(), 0.01F);
      assertNotNull(lightSource2);
      
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(504.24F, 985.45F, 570.729F, (-2146593793), float1);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertEquals(570.729F, lightSource3.getZ(), 0.01F);
      assertEquals(683.40875F, lightSource3.getDiameter(), 0.01F);
      assertEquals((-2146593793), lightSource3.getColor());
      assertEquals(985.45F, lightSource3.getY(), 0.01F);
      assertEquals(504.24F, lightSource3.getX(), 0.01F);
      assertNotNull(lightSource3);
      
      lightSourceArray0[3] = lightSource3;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[8];
      floatArray1[0] = (-835.2535F);
      floatArray1[1] = 985.45F;
      floatArray1[2] = 570.729F;
      floatArray1[3] = (-1181.732F);
      floatArray1[4] = 570.729F;
      floatArray1[5] = (float) (-2146593793);
      floatArray1[6] = 937.9F;
      floatArray1[7] = (-1181.732F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) (-2146593793);
      floatArray2[1] = 1170.3429F;
      floatArray2[2] = 937.9F;
      floatArray2[3] = (-1181.732F);
      floatArray2[4] = (-662.4F);
      floatArray2[5] = 0.0F;
      floatArray2[6] = 985.45F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[7];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) (-2146593793);
      floatArray3[1] = 1170.3429F;
      floatArray3[2] = 937.9F;
      floatArray3[3] = 1243.0F;
      floatArray3[4] = 0.5F;
      floatArray3[5] = 570.729F;
      floatArray3[6] = (-1181.732F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 570.729F;
      floatArray4[1] = 0.5F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = 0.5F;
      floatArray5[1] = 937.9F;
      floatArray5[2] = 0.0F;
      floatArray5[3] = (float) (-130);
      floatArray5[4] = 570.729F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = (-1181.732F);
      floatArray6[1] = 1243.0F;
      floatArray6[2] = 0.0F;
      floatArray6[3] = (float) (-2146593793);
      floatArray6[4] = (float) (-2146593793);
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = new BigDecimal((long) (-130));
      assertEquals((byte)126, bigDecimal0.byteValue());
      assertEquals((short) (-130), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight(";Qc>]2:7HBP", ";Qc>]2:7HBP", "G", (Content) null, (Content) null, (Content) null, (-662.4F), (-662.4F), (-1181.732F), 0.5F, false, lightSourceArray0, "G", floatArray0, "", true, true, false, bigDecimal0, bigDecimal0, "#O4b~o){KH]fm2");
      assertEquals((byte)126, bigDecimal0.byteValue());
      assertEquals((short) (-130), bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals(";Qc>]2:7HBP", catalogLight0.getName());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-662.4F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-662.4F), catalogLight0.getDepth(), 0.01F);
      assertEquals("#O4b~o){KH]fm2", catalogLight0.getCurrency());
      assertEquals("G", catalogLight0.getDescription());
      assertEquals(";Qc>]2:7HBP", catalogLight0.getId());
      assertEquals(0.5F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertEquals("G", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1181.732F), catalogLight0.getHeight(), 0.01F);
      assertEquals(4, lightSourceArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)126, bigDecimal0.byteValue());
      assertEquals((short) (-130), bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals(";Qc>]2:7HBP", catalogLight0.getName());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-662.4F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-662.4F), catalogLight0.getDepth(), 0.01F);
      assertEquals("#O4b~o){KH]fm2", catalogLight0.getCurrency());
      assertEquals("G", catalogLight0.getDescription());
      assertEquals(";Qc>]2:7HBP", catalogLight0.getId());
      assertEquals(0.5F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertEquals("G", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1181.732F), catalogLight0.getHeight(), 0.01F);
      assertEquals("G", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("G", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("#O4b~o){KH]fm2", homeLight0.getCurrency());
      assertEquals(";Qc>]2:7HBP", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-662.4F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-331.2F), homeLight0.getY(), 0.01F);
      assertEquals((-331.2F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-662.4F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getElevation(), 0.01F);
      assertEquals((-1181.732F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(";Qc>]2:7HBP", homeLight0.getName());
      assertEquals(4, lightSourceArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)126, bigDecimal0.byteValue());
      assertEquals((short) (-130), bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals(";Qc>]2:7HBP", catalogLight0.getName());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-662.4F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-662.4F), catalogLight0.getDepth(), 0.01F);
      assertEquals("#O4b~o){KH]fm2", catalogLight0.getCurrency());
      assertEquals("G", catalogLight0.getDescription());
      assertEquals(";Qc>]2:7HBP", catalogLight0.getId());
      assertEquals(0.5F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertEquals("G", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1181.732F), catalogLight0.getHeight(), 0.01F);
      assertEquals("G", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("G", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("#O4b~o){KH]fm2", homeLight0.getCurrency());
      assertEquals(";Qc>]2:7HBP", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-662.4F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-331.2F), homeLight0.getY(), 0.01F);
      assertEquals((-331.2F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-662.4F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getElevation(), 0.01F);
      assertEquals((-1181.732F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(";Qc>]2:7HBP", homeLight0.getName());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(";Qc>]2:7HBP", homeLight1.getName());
      assertEquals((-331.2F), homeLight1.getX(), 0.01F);
      assertEquals((-331.2F), homeLight1.getY(), 0.01F);
      assertEquals((-662.4F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("G", homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-662.4F), homeLight1.getWidth(), 0.01F);
      assertEquals((-1181.732F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(";Qc>]2:7HBP", homeLight1.getCatalogId());
      assertEquals("#O4b~o){KH]fm2", homeLight1.getCurrency());
      assertEquals("G", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(homeLight1);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight1);
      assertTrue(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(1, linkedList0.size());
      assertEquals((byte)126, bigDecimal0.byteValue());
      assertEquals((short) (-130), bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals(";Qc>]2:7HBP", catalogLight0.getName());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-662.4F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-662.4F), catalogLight0.getDepth(), 0.01F);
      assertEquals("#O4b~o){KH]fm2", catalogLight0.getCurrency());
      assertEquals("G", catalogLight0.getDescription());
      assertEquals(";Qc>]2:7HBP", catalogLight0.getId());
      assertEquals(0.5F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertEquals("G", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1181.732F), catalogLight0.getHeight(), 0.01F);
      assertEquals("G", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("G", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("#O4b~o){KH]fm2", homeLight0.getCurrency());
      assertEquals(";Qc>]2:7HBP", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-662.4F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-331.2F), homeLight0.getY(), 0.01F);
      assertEquals((-331.2F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-662.4F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getElevation(), 0.01F);
      assertEquals((-1181.732F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(";Qc>]2:7HBP", homeLight0.getName());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(";Qc>]2:7HBP", homeLight1.getName());
      assertEquals((-331.2F), homeLight1.getX(), 0.01F);
      assertEquals((-331.2F), homeLight1.getY(), 0.01F);
      assertEquals((-662.4F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("G", homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-662.4F), homeLight1.getWidth(), 0.01F);
      assertEquals((-1181.732F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(";Qc>]2:7HBP", homeLight1.getCatalogId());
      assertEquals("#O4b~o){KH]fm2", homeLight1.getCurrency());
      assertEquals("G", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, ";Qc>]2:7HBP");
      assertEquals(1, linkedList0.size());
      assertEquals("#O4b~o){KH]fm2", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-0.5F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(";Qc>]2:7HBP", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNotNull(homeFurnitureGroup0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertEquals(1, linkedList0.size());
      assertEquals("#O4b~o){KH]fm2", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-0.5F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(";Qc>]2:7HBP", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isTexturable());
      assertEquals(0.5F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-0.5F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(";Qc>]2:7HBP", homeFurnitureGroup1.getName());
      assertEquals("#O4b~o){KH]fm2", homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotNull(homeFurnitureGroup1);
      
      boolean boolean1 = homeFurnitureGroup1.isDoorOrWindow();
      assertFalse(boolean1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("#O4b~o){KH]fm2", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-0.5F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(";Qc>]2:7HBP", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isTexturable());
      assertEquals(0.5F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-0.5F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(";Qc>]2:7HBP", homeFurnitureGroup1.getName());
      assertEquals("#O4b~o){KH]fm2", homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      HomeTexture homeTexture0 = homeFurnitureGroup0.getTexture();
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertEquals(1, linkedList0.size());
      assertEquals("#O4b~o){KH]fm2", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-0.5F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(";Qc>]2:7HBP", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNull(homeTexture0);
      
      homeFurnitureGroup0.setName(";Qc>]2:7HBP");
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertEquals(1, linkedList0.size());
      assertEquals("#O4b~o){KH]fm2", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-0.5F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(";Qc>]2:7HBP", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = new Sash(0.0F, 4, 4, (-469.1155F), (-495.20383F));
      assertEquals((-469.1155F), sash0.getStartAngle(), 0.01F);
      assertEquals(4.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertEquals((-495.20383F), sash0.getEndAngle(), 0.01F);
      assertEquals(4.0F, sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "N\r5XSf ";
      stringArray0[1] = "N\r5XSf ";
      stringArray0[2] = "%T7\"h5{]pOJp";
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((-469.1155F));
      assertEquals((-469.1155F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("'0", "N\r5XSf ", "N\r5XSf ", "N\r5XSf ", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.0F, (-3733.3027F), 0L, (-469.1155F), true, (-196.93933F), 0.0F, sashArray0, (float[][]) null, "%T7\"h5{]pOJp", true, true, false, bigDecimal0, bigDecimal0, "%T7\"h5{]pOJp");
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-469.1155F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("%T7\"h5{]pOJp", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-3733.3027F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("N\r5XSf ", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("N\r5XSf ", catalogDoorOrWindow0.getInformation());
      assertEquals("'0", catalogDoorOrWindow0.getId());
      assertEquals("N\r5XSf ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("%T7\"h5{]pOJp", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-196.93933F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-469.1155F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(4, sashArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-469.1155F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("%T7\"h5{]pOJp", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-3733.3027F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("N\r5XSf ", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("N\r5XSf ", catalogDoorOrWindow0.getInformation());
      assertEquals("'0", catalogDoorOrWindow0.getId());
      assertEquals("N\r5XSf ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("%T7\"h5{]pOJp", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-196.93933F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-469.1155F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("'0", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-469.1155F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-3733.3027F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-469.1155F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1866.6514F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-196.93933F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals("%T7\"h5{]pOJp", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("N\r5XSf ", homeDoorOrWindow0.getName());
      assertEquals("N\r5XSf ", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(4, sashArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-469.1155F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("%T7\"h5{]pOJp", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-3733.3027F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("N\r5XSf ", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("N\r5XSf ", catalogDoorOrWindow0.getInformation());
      assertEquals("'0", catalogDoorOrWindow0.getId());
      assertEquals("N\r5XSf ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("%T7\"h5{]pOJp", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-196.93933F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-469.1155F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("'0", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-469.1155F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-3733.3027F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-469.1155F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1866.6514F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-196.93933F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals("%T7\"h5{]pOJp", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("N\r5XSf ", homeDoorOrWindow0.getName());
      assertEquals("N\r5XSf ", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(4, sashArray0.length);
      assertEquals(3, stringArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "xK@");
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("xK@", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(469.1155F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("%T7\"h5{]pOJp", homeFurnitureGroup0.getCurrency());
      assertEquals((-469.1155F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-469.1155F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setWidth((-2346.0437F));
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-2346.0437F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("xK@", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(469.1155F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("%T7\"h5{]pOJp", homeFurnitureGroup0.getCurrency());
      assertEquals((-469.1155F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-469.1155F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-2346.0437F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("xK@", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(469.1155F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("%T7\"h5{]pOJp", homeFurnitureGroup0.getCurrency());
      assertEquals((-469.1155F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-469.1155F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-469.1155F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals((-2346.0437F), homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(469.1155F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("xK@", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isTexturable());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals("%T7\"h5{]pOJp", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals((-469.1155F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotNull(homeFurnitureGroup1);
      
      HomeTexture homeTexture0 = homeFurnitureGroup1.getTexture();
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-2346.0437F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("xK@", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(469.1155F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("%T7\"h5{]pOJp", homeFurnitureGroup0.getCurrency());
      assertEquals((-469.1155F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-469.1155F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-469.1155F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals((-2346.0437F), homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(469.1155F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("xK@", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isTexturable());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals("%T7\"h5{]pOJp", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals((-469.1155F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNull(homeTexture0);
      
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0.0F, (-1181.732F), 1970.9F, (-1256.0F), 2499.87F);
      sashArray0[1] = sash0;
      Sash sash1 = new Sash(1970.9F, 2499.87F, 744.8241F, (-3146.5728F), 2499.87F);
      Sash sash2 = new Sash((-1181.732F), 0.0F, 0.0F, 0.0F, (-1219.927F));
      sashArray0[3] = sash2;
      Sash sash3 = new Sash((-1219.927F), 1176.293F, 744.8241F, 1970.9F, 1970.9F);
      Integer integer0 = new Integer(1230);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, 1970.9F, (-1256.0F), 744.8241F, 744.8241F, false, 1970.9F, 1970.9F, sashArray0, integer0, (float[][]) null, false, (-1181.732F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, " 1=");
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setY(0.0F);
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.isMovable());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      Integer integer0 = new Integer(1253);
      Integer integer1 = new Integer(1145);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("p+@8ZX9x", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, (-1028.26F), 1178.0F, false, 3.0F, (-1028.26F), sashArray0, integer1, (float[][]) null, true, 1970.9F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPoints();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, ")j@oqnU9.5ILq1G{I*A");
      homeFurnitureGroup0.setWidth(1970.9F);
      homeFurnitureGroup0.isDeformable();
      homeFurnitureGroup0.getHeight();
      assertEquals(1970.9F, homeFurnitureGroup0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "com.eteks.sweethome3d.model.HomeFurnitureGroup", 1, "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Integer integer0 = new Integer(4);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(730.582F, 326.464F, (-2178.1877F), 1, (-2687.21F));
      sashArray0[0] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", temporaryURLContent0, temporaryURLContent0, (-1.0F), 1.0F, 1.0F, 2.1457239E9F, true, (-3627.1497F), (-3627.1497F), sashArray0, integer0, (float[][]) null, true, 730.582F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "\")nXo<p{c*Hkf{5");
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getHeight();
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      Integer integer0 = new Integer(2146818359);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" 1=", temporaryURLContent0, temporaryURLContent0, 1230, (-1256.0F), (-1.0F), 0.0F, false, 0.3926991F, 1230, sashArray0, integer0, (float[][]) null, false, (-693.0F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.parallelStream();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setModelMirrored(false);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      List<HomePieceOfFurniture> list0 = homeFurnitureGroup1.getFurniture();
      assertFalse(list0.isEmpty());
      
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup1.isDeformable();
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isVisible());
  }
}
