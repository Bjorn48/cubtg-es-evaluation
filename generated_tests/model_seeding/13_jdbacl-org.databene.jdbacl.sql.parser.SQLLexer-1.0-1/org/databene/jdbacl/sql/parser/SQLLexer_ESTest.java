/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 04:01:52 GMT 2019
 */

package org.databene.jdbacl.sql.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.DFA;
import org.antlr.runtime.IntStream;
import org.databene.jdbacl.sql.parser.SQLLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLLexer_ESTest extends SQLLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.DFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mSTRING();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mQUOTED_NAME();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mINT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mIDENTIFIER();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mCOMMENT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      
      SQLLexer.DFA9 sQLLexer_DFA9_0 = sQLLexer0.new DFA9(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("1:1: Tokens : ( T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME );", sQLLexer_DFA9_0.getDescription());
      assertNotNull(sQLLexer_DFA9_0);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertFalse(DFA.debug);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__84();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      
      SQLLexer.DFA9 sQLLexer_DFA9_0 = sQLLexer0.dfa9;
      assertEquals("1:1: Tokens : ( T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME );", sQLLexer_DFA9_0.getDescription());
      assertNotNull(sQLLexer_DFA9_0);
      assertFalse(DFA.debug);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      doReturn(0).when(intStream0).mark();
      try { 
        sQLLexer_DFA9_0.predict(intStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.DFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(4, SQLLexer.INT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__79();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBETWEEN();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__96();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(43, SQLLexer.IN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__71();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(39, SQLLexer.LT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__113();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(37, SQLLexer.GT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__65();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mDATE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      
      sQLLexer0.mCOMMENT_COLUMN();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__68();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__82();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }
}
