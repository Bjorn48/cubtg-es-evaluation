/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:34:02 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModelIterator_ESTest extends ModelIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null, (-228L));
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-1));
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, arminRestarts0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      modelIterator0.isSatisfiable(iVecInt0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PureOrder pureOrder0 = new PureOrder(0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(82);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0, 0L);
      boolean boolean0 = modelIterator0.isSatisfiable();
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      SubModelIterator subModelIterator0 = new SubModelIterator(maxSatDecorator0, iVecInt0);
      subModelIterator0.reset();
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(219.5526901, (-2491));
      PureOrder pureOrder0 = new PureOrder(18);
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
      ModelIterator modelIterator0 = new ModelIterator(solver0, 1347L);
      modelIterator0.isSatisfiable();
      modelIterator0.primeImplicant();
      long long0 = modelIterator0.numberOfModelsFoundSoFar();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[7];
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(gateTranslator0).discardCurrentModel();
      doReturn((int[]) null).when(gateTranslator0).model();
      gateTranslatorArray0[1] = gateTranslator0;
      ModelIterator modelIterator0 = new ModelIterator(gateTranslatorArray0[1], (-2050L));
      modelIterator0.model();
      assertEquals(1L, modelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[7];
      int[] intArray0 = new int[1];
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(gateTranslator0).discardCurrentModel();
      doReturn(intArray0).when(gateTranslator0).model();
      gateTranslatorArray0[4] = gateTranslator0;
      ModelIterator modelIterator0 = new ModelIterator(gateTranslatorArray0[4], (-2050L));
      modelIterator0.model();
      assertEquals(1L, modelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[7];
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      gateTranslatorArray0[5] = gateTranslator0;
      ModelIterator modelIterator0 = new ModelIterator(gateTranslatorArray0[5], (-2050L));
      modelIterator0.isSatisfiable();
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ModelIterator modelIterator0 = new ModelIterator(dimacsOutputSolver0);
      // Undeclared exception!
      try { 
        modelIterator0.primeImplicant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      // Undeclared exception!
      try { 
        modelIterator0.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(true, minOneDecoratorArray0);
      FullClauseSelectorSolver<ManyCore<MinOneDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<MinOneDecorator>>(manyCore0, true);
      ModelIterator modelIterator0 = new ModelIterator(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        modelIterator0.primeImplicant();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ModelIterator modelIterator0 = new ModelIterator(dimacsOutputSolver0);
      // Undeclared exception!
      try { 
        modelIterator0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ModelIterator modelIterator0 = new ModelIterator(dimacsOutputSolver0);
      try { 
        modelIterator0.isSatisfiable(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ModelIterator modelIterator0 = new ModelIterator(statisticsSolver0, (-2281L));
      // Undeclared exception!
      try { 
        modelIterator0.isSatisfiable(true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter((ISolver) null, solutionFoundListener0);
      // Undeclared exception!
      try { 
        modelIteratorToSATAdapter0.isSatisfiable(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(219.5526901, (-2428));
      PureOrder pureOrder0 = new PureOrder(18);
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
      ModelIterator modelIterator0 = new ModelIterator(solver0, 1347L);
      modelIterator0.setTimeoutMs(9223372036854775807L);
      // Undeclared exception!
      try { 
        modelIterator0.isSatisfiable(true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal execution time.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      int[] intArray0 = new int[1];
      intArray0[0] = 596;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, noRestarts0, mUSLauncher0);
      ModelIterator modelIterator0 = new ModelIterator(solver0, 596);
      // Undeclared exception!
      try { 
        modelIterator0.isSatisfiable(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 596
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ModelIterator modelIterator0 = new ModelIterator(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt(878);
      try { 
        modelIterator0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter((ISolver) null, solutionFoundListener0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-2916));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      // Undeclared exception!
      try { 
        modelIteratorToSATAdapter0.isSatisfiable(iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ModelIterator modelIterator0 = new ModelIterator(dimacsOutputSolver0);
      try { 
        modelIterator0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts(82);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, solutionFoundListener0);
      modelIteratorToSATAdapter0.isSatisfiable();
      modelIteratorToSATAdapter0.model();
      assertEquals(1L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[7];
      ModelIterator modelIterator0 = new ModelIterator(gateTranslatorArray0[5], (-2050L));
      // Undeclared exception!
      try { 
        modelIterator0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PureOrder pureOrder0 = new PureOrder(0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(82);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0, 0L);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MinOneDecorator>(minOneDecorator0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      boolean boolean0 = modelIterator0.isSatisfiable(iVecInt0);
      assertFalse(boolean0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsOutputSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(minOneDecorator0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(3866.5738963373146, 3866.5738963373146, (-323.4036023), 2092);
      PureOrder pureOrder0 = new PureOrder(22);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, noRestarts0);
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, 366L, checkMUSSolutionListener0);
      boolean boolean0 = modelIteratorToSATAdapter0.isSatisfiable((IVecInt) readOnlyVecInt0);
      assertEquals(1L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ModelIterator modelIterator0 = new ModelIterator(dimacsOutputSolver0, (-1L));
      boolean boolean0 = modelIterator0.isSatisfiable(false);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      // Undeclared exception!
      try { 
        modelIterator0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(219.5526901, (-2491));
      PureOrder pureOrder0 = new PureOrder(18);
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
      ModelIterator modelIterator0 = new ModelIterator(solver0, 1347L);
      long long0 = modelIterator0.numberOfModelsFoundSoFar();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter((ISolver) null, solutionFoundListener0);
      // Undeclared exception!
      try { 
        modelIteratorToSATAdapter0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder(596);
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
      ModelIterator modelIterator0 = new ModelIterator(solver0, 596);
      modelIterator0.isSatisfiable(false);
      modelIterator0.primeImplicant();
      boolean boolean0 = modelIterator0.isSatisfiable(false);
      assertEquals(1L, modelIterator0.numberOfModelsFoundSoFar());
      assertFalse(boolean0);
  }
}
