/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:58:58 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.ConstrGroup;
import org.sat4j.core.EmptyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.FakeConstr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstrGroup_ESTest extends ConstrGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(false);
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>((DimacsOutputSolver) null, false);
      constrGroup0.add((IConstr) null);
      constrGroup0.add((IConstr) null);
      // Undeclared exception!
      try { 
        constrGroup0.removeFrom(fullClauseSelectorSolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(true);
      constrGroup0.add(constrGroup0);
      int int0 = constrGroup0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt();
      Constr constr0 = cardinalityDataStructure0.createUnregisteredClause(vecInt0);
      constrGroup0.add(constr0);
      boolean boolean0 = constrGroup0.learnt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(false);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, emptyVecInt0, false, (-4042));
      constrGroup0.add(minWatchCard0);
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      PureOrder pureOrder0 = new PureOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, pureOrder0, eMARestarts0);
      SubModelIterator subModelIterator0 = new SubModelIterator(solver0, emptyVecInt0, (-4042));
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(subModelIterator0);
      // Undeclared exception!
      try { 
        constrGroup0.removeFrom(minOneDecorator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      IConstr iConstr0 = FakeConstr.instance();
      constrGroup0.add(iConstr0);
      // Undeclared exception!
      try { 
        constrGroup0.learnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Fake IConstr
         //
         verifyException("org.sat4j.specs.FakeConstr", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      // Undeclared exception!
      try { 
        constrGroup0.getConstr((-794));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -794
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(true);
      boolean boolean0 = constrGroup0.learnt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(false);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      constrGroup0.removeFrom(dimacsStringSolver0);
      assertEquals(0.0, constrGroup0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(false);
      constrGroup0.add((IConstr) null);
      // Undeclared exception!
      try { 
        constrGroup0.learnt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(true);
      // Undeclared exception!
      try { 
        constrGroup0.add((IConstr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(true);
      constrGroup0.add(constrGroup0);
      IConstr iConstr0 = constrGroup0.getConstr(0);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(true);
      int int0 = constrGroup0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      constrGroup0.clear();
      assertFalse(constrGroup0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      // Undeclared exception!
      try { 
        constrGroup0.get(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(true);
      boolean boolean0 = constrGroup0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      String string0 = constrGroup0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(true);
      IConstr iConstr0 = constrGroup0.getConstr(0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup();
      // Undeclared exception!
      try { 
        constrGroup0.toString((VarMapper) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstrGroup constrGroup0 = new ConstrGroup(true);
      double double0 = constrGroup0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }
}
