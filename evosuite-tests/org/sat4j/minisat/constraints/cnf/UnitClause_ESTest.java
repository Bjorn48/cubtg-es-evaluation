/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:36:47 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnitClause_ESTest extends UnitClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-2559));
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      IVecInt iVecInt1 = minOneDecorator0.createBlockingClauseForCurrentModel();
      unitClause0.calcReasonOnTheFly((-2559), iVecInt0, iVecInt1);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-824));
      unitClause0.activity = 284.340395946;
      double double0 = unitClause0.getActivity();
      assertEquals(284.340395946, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(7);
      unitClause0.activity = (-2406.4222575);
      double double0 = unitClause0.getActivity();
      assertEquals((-2406.4222575), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(45);
      int int0 = unitClause0.get((-2212));
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-2386));
      int int0 = unitClause0.get(0);
      assertEquals((-2386), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(7);
      // Undeclared exception!
      try { 
        unitClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-2379));
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PureOrder pureOrder0 = new PureOrder((-2379));
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, pureOrder0, arminRestarts0);
      // Undeclared exception!
      try { 
        unitClause0.remove(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2379
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      UnitClause unitClause0 = new UnitClause((-1));
      // Undeclared exception!
      try { 
        unitClause0.calcReasonOnTheFly((-1), iVecInt0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      // Undeclared exception!
      try { 
        unitClause0.calcReason((-1), (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-950));
      // Undeclared exception!
      try { 
        unitClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(1458);
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, naturalStaticOrder0, fixedPeriodRestarts0);
      // Undeclared exception!
      try { 
        unitClause0.assertConstraintIfNeeded(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1459
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(2769);
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 460);
      LubyRestarts lubyRestarts0 = new LubyRestarts(2769);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, lubyRestarts0, mUSLauncher0);
      // Undeclared exception!
      try { 
        unitClause0.assertConstraint(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2768
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(579);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        unitClause0.calcReason((-1), iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      unitClause0.calcReason(0, iVecInt0);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1252));
      boolean boolean0 = unitClause0.learnt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      NoRestarts noRestarts0 = new NoRestarts();
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, noRestarts0);
      unitClause0.assertConstraint(solver0);
      assertFalse(unitClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(30);
      String string0 = unitClause0.toString();
      assertEquals("15", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("TMB Nre+g<,:.||W_");
      String string0 = unitClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(43);
      // Undeclared exception!
      try { 
        unitClause0.get(43);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      int int0 = unitClause0.get(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(101);
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, naturalStaticOrder0, arminRestarts0);
      unitClause0.remove(solver0);
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      // Undeclared exception!
      try { 
        unitClause0.calcReasonOnTheFly((-1), (IVecInt) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1843));
      unitClause0.setActivity((-1843));
      assertEquals((-1843.0), unitClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1094));
      // Undeclared exception!
      try { 
        unitClause0.propagate((UnitPropagationListener) null, (-1094));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      boolean boolean0 = unitClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(1135);
      unitClause0.register();
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      boolean boolean0 = unitClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-2737));
      // Undeclared exception!
      try { 
        unitClause0.locked();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      VecInt vecInt0 = new VecInt();
      int int0 = unitClause0.getAssertionLevel(vecInt0, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(798);
      // Undeclared exception!
      try { 
        unitClause0.rescaleBy(798);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      unitClause0.calcReasonOnTheFly((-2639), (IVecInt) null, (IVecInt) null);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1843));
      boolean boolean0 = unitClause0.simplify();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1250));
      String string0 = unitClause0.toString((VarMapper) null);
      assertEquals("-625", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(798);
      // Undeclared exception!
      try { 
        unitClause0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, arminRestarts0);
      unitClause0.assertConstraintIfNeeded(solver0);
      assertFalse(unitClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(13);
      unitClause0.forwardActivity(13);
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-950));
      unitClause0.incActivity((-950));
      assertEquals(1, unitClause0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(7);
      double double0 = unitClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(881);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        unitClause0.propagatePi(watcherBasedPrimeImplicantStrategy0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-25));
      boolean boolean0 = unitClause0.isSatisfied();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(458);
      int int0 = unitClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-2559));
      int int0 = unitClause0.size();
      assertEquals(1, int0);
  }
}
