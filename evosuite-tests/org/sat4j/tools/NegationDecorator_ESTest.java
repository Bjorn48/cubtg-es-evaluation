/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 21:48:21 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NegationDecorator_ESTest extends NegationDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, checkMUSSolutionListener0);
      ModelIterator modelIterator0 = new ModelIterator(minimal4CardinalityModel0);
      NegationDecorator<ModelIterator> negationDecorator0 = new NegationDecorator<ModelIterator>(modelIterator0);
      VecInt vecInt0 = new VecInt();
      boolean boolean0 = negationDecorator0.isSatisfiable((IVecInt) vecInt0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<GateTranslator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fullClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((IConstr) null).when(fullClauseSelectorSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(fullClauseSelectorSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      NegationDecorator<FullClauseSelectorSolver<GateTranslator>> negationDecorator0 = new NegationDecorator<FullClauseSelectorSolver<GateTranslator>>(fullClauseSelectorSolver0);
      VecInt vecInt0 = new VecInt(753);
      boolean boolean0 = negationDecorator0.isSatisfiable((IVecInt) vecInt0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClausalCardinalitiesDecorator<DimacsOutputSolver>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<DimacsOutputSolver>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 0);
      ManyCore<ClausalCardinalitiesDecorator<DimacsOutputSolver>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<DimacsOutputSolver>>(true, clausalCardinalitiesDecoratorArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0, false);
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      try { 
        negationDecorator0.isSatisfiable((IVecInt) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(statisticsSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(statisticsSolver0, iVecInt0);
      NegationDecorator<ModelIterator> negationDecorator0 = new NegationDecorator<ModelIterator>(subModelIterator0);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable(iVecInt0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>((Minimal4InclusionModel) null, false);
      NegationDecorator<FullClauseSelectorSolver<Minimal4InclusionModel>> negationDecorator0 = new NegationDecorator<FullClauseSelectorSolver<Minimal4InclusionModel>>(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable((IVecInt) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ManyCore<OptToSatAdapter> manyCore0 = (ManyCore<OptToSatAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn(2953, 0).when(manyCore0).nextFreeVarId(anyBoolean());
      doReturn(false).when(manyCore0).removeConstr(any(org.sat4j.specs.IConstr.class));
      NegationDecorator<ManyCore<OptToSatAdapter>> negationDecorator0 = new NegationDecorator<ManyCore<OptToSatAdapter>>(manyCore0);
      GateTranslator gateTranslator0 = new GateTranslator(negationDecorator0);
      NegationDecorator<GateTranslator> negationDecorator1 = new NegationDecorator<GateTranslator>(gateTranslator0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(negationDecorator0);
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      SubModelIterator subModelIterator0 = new SubModelIterator(negationDecorator1, iVecInt0, 0);
      NegationDecorator<ModelIterator> negationDecorator2 = new NegationDecorator<ModelIterator>(subModelIterator0);
      // Undeclared exception!
      try { 
        negationDecorator2.isSatisfiable(iVecInt0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1);
      NegationDecorator<ManyCore<OptToSatAdapter>> negationDecorator0 = new NegationDecorator<ManyCore<OptToSatAdapter>>((ManyCore<OptToSatAdapter>) null);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(negationDecorator0);
      NegationDecorator<MinOneDecorator> negationDecorator1 = new NegationDecorator<MinOneDecorator>(minOneDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator1.addClause(vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt(1, 1);
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt(1);
      IConstr iConstr0 = negationDecorator0.addClause(vecInt0);
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = (LexicoDecorator<DimacsStringSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      NegationDecorator<LexicoDecorator<DimacsStringSolver>> negationDecorator0 = new NegationDecorator<LexicoDecorator<DimacsStringSolver>>(lexicoDecorator0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, false);
      NegationDecorator<MaxSatDecorator> negationDecorator1 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      Collection<Integer> collection0 = negationDecorator1.getAddedVars();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = (LexicoDecorator<DimacsStringSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(unitClause0, (IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, 0, 0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      doReturn(false, false).when(lexicoDecorator0).removeConstr(any(org.sat4j.specs.IConstr.class));
      NegationDecorator<LexicoDecorator<DimacsStringSolver>> negationDecorator0 = new NegationDecorator<LexicoDecorator<DimacsStringSolver>>(lexicoDecorator0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, false);
      NegationDecorator<MaxSatDecorator> negationDecorator1 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      boolean boolean0 = negationDecorator1.isSatisfiable((IVecInt) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      NegationDecorator<DimacsStringSolver> negationDecorator0 = new NegationDecorator<DimacsStringSolver>(dimacsStringSolver0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        negationDecorator0.addAtLeast(iVecInt0, 2984);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = (LexicoDecorator<DimacsStringSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      NegationDecorator<LexicoDecorator<DimacsStringSolver>> negationDecorator0 = new NegationDecorator<LexicoDecorator<DimacsStringSolver>>(lexicoDecorator0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, false);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(maxSatDecorator0);
      NegationDecorator<SingleSolutionDetector> negationDecorator1 = new NegationDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      // Undeclared exception!
      try { 
        negationDecorator1.addAtMost((IVecInt) null, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, false);
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        negationDecorator0.addExactly(iVecInt0, (-1981));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = (LexicoDecorator<DimacsStringSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      NegationDecorator<LexicoDecorator<DimacsStringSolver>> negationDecorator0 = new NegationDecorator<LexicoDecorator<DimacsStringSolver>>(lexicoDecorator0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, true);
      NegationDecorator<MaxSatDecorator> negationDecorator1 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator1.isSatisfiable((IVecInt) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }
}
