/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:36:16 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.ExitCode;
import org.sat4j.MUSLauncher;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.cnf.BinaryClauses;
import org.sat4j.minisat.constraints.cnf.LearntHTClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalHTClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HTClause_ESTest extends HTClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(3807, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      vecInt0.toString();
      vecInt0.shrink(18);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.get(2323);
      learntHTClause0.toString();
      vecInt0.equals(learntHTClause0);
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      learntHTClause0.rescaleBy((-1093.2303440163298));
      learntHTClause0.getAssertionLevel(vecInt0, 0);
      IVecInt iVecInt0 = vecInt0.push(0);
      learntHTClause0.calcReason(2323, vecInt0);
      vecInt0.pushAll(iVecInt0);
      learntHTClause0.getAssertionLevel(vecInt0, 3781);
      learntHTClause0.simplify();
      learntHTClause0.isSatisfied();
      learntHTClause0.learnt();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(3807, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(3807, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      vecInt0.shrinkTo(512);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.setActivity(3807);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      SearchParams searchParams0 = new SearchParams();
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incRootSimplifications();
      SolverStats solverStats1 = new SolverStats();
      solverStats1.incDecisions();
      solverStats0.incConflicts();
      arminRestarts0.init(searchParams0, solverStats1);
      learntHTClause0.rescaleBy(0.0);
      learntHTClause0.getAssertionLevel(vecInt0, 0);
      IVecInt iVecInt0 = vecInt0.push(3807);
      learntHTClause0.calcReason((-854), vecInt0);
      learntHTClause0.getAssertionLevel(iVecInt0, (-1));
      learntHTClause0.simplify();
      learntHTClause0.isSatisfied();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(3807, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      vecInt0.shrink(18);
      vecInt0.shrinkTo(18);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      learntHTClause0.setActivity(3807);
      VecInt vecInt1 = null;
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      clausalDataStructureWL0.getVocabulary();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(searchParams0).getConflictBoundIncFactor();
      doReturn(0, 0, 0).when(searchParams0).getInitConflictBound();
      SolverStats solverStats0 = mock(SolverStats.class, new ViolatedAssumptionAnswer());
      arminRestarts0.init(searchParams0, solverStats0);
      arminRestarts0.onRestart();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, (SearchParams) null, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
      // Undeclared exception!
      try { 
        learntHTClause0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(3807, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      vecInt0.toString();
      vecInt0.iterator();
      vecInt0.shrink(18);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.setActivity(3807);
      learntHTClause0.get(2352);
      learntHTClause0.getVocabulary();
      LearntHTClause learntHTClause1 = null;
      try {
        learntHTClause1 = new LearntHTClause(vecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(3807, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      vecInt0.shrink(18);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      learntHTClause0.toConstraint();
      learntHTClause0.setActivity(3807);
      LearntHTClause learntHTClause1 = null;
      try {
        learntHTClause1 = new LearntHTClause(vecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(3807, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      vecInt0.shrink(18);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      learntHTClause0.setActivity(3807);
      int int0 = 0;
      vecInt0.growTo(3789, 0);
      LearntHTClause learntHTClause1 = new LearntHTClause(vecInt0, (ILits) null);
      learntHTClause0.rescaleBy((-529.542675196));
      Object object0 = new Object();
      vecInt0.equals(object0);
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      clausalDataStructureWL0.getVocabulary();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      ILits iLits0 = solver0.getVocabulary();
      OriginalHTClause originalHTClause0 = null;
      try {
        originalHTClause0 = new OriginalHTClause(vecInt0, iLits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(3807, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      vecInt0.growTo(3807, 4975);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      vecInt0.pop();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      OriginalHTClause originalHTClause0 = null;
      try {
        originalHTClause0 = new OriginalHTClause((IVecInt) null, iLits0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(3807, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      learntHTClause0.rescaleBy(619.9974);
      // Undeclared exception!
      try { 
        learntHTClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(3807, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Lits lits0 = new Lits();
      SearchParams searchParams0 = new SearchParams();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      SearchParams searchParams1 = solver0.getSearchParams();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams1, levelBasedVarOrderHeap0, miniSATRestarts0, iLogAble0);
      int int0 = 0;
      solver0.enqueue(0);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.assertConstraint(solver1);
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      learntHTClause0.rescaleBy(3807);
      LearntHTClause learntHTClause1 = null;
      try {
        learntHTClause1 = new LearntHTClause(vecInt0, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(3807, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      vecInt0.shrink(18);
      vecInt0.shrinkTo(18);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      learntHTClause0.setActivity(3807);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      SearchParams searchParams0 = new SearchParams();
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incStarts();
      solverStats0.incRootSimplifications();
      solverStats0.incDecisions();
      solverStats0.incConflicts();
      // Undeclared exception!
      try { 
        learntHTClause0.get(18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IVecInt iVecInt0 = null;
      VecInt vecInt0 = new VecInt(3774, 4850);
      vecInt0.ensure(3774);
      vecInt0.growTo(3774, (-649));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      vecInt0.toString();
      vecInt0.iterator();
      vecInt0.shrink(595);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.setActivity(595);
      int int0 = (-2838);
      // Undeclared exception!
      try { 
        learntHTClause0.get((-2838));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2839
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrink(18);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3789, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      
      learntHTClause0.setActivity(3807);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      
      int int0 = learntHTClause0.get(2323);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, int0);
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = vecInt0.equals(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(boolean0);
      
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      
      learntHTClause0.rescaleBy((-1093.2303440163298));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, 0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      IVecInt iVecInt0 = vecInt0.push(0);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      
      learntHTClause0.calcReason(1, vecInt0);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      
      int int2 = learntHTClause0.getAssertionLevel(vecInt0, 3781);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      int int0 = iVecInt0.indexOf(0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals((-1), int0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      LearntHTClause learntHTClause0 = null;
      try {
        learntHTClause0 = new LearntHTClause(iVecInt0, iLits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      vecInt0.shrink(5);
      assertEquals(3802, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.shrinkTo(5);
      assertEquals(0, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(5, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      
      learntHTClause0.setActivity(3807);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertEquals(5, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getInspects());
      
      learntHTClause0.head = 30;
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertEquals(5, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      solverStats0.incStarts();
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getInspects());
      
      solverStats0.incRootSimplifications();
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getInspects());
      
      solverStats0.incDecisions();
      assertEquals(1, solverStats0.getStarts());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(1L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getInspects());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        learntHTClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      int int0 = 18;
      vecInt0.shrink(18);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3789, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      
      learntHTClause0.setActivity(3807);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      boolean boolean0 = lits0.isImplied(0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(boolean0);
      
      int int1 = learntHTClause0.get(2352);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = vecInt0.equals(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      learntHTClause0.rescaleBy((-1122.0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      learntHTClause0.tail = 3762;
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      int int2 = learntHTClause0.getAssertionLevel(vecInt0, 3775);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int[] intArray0 = learntHTClause0.getLits();
      assertNotNull(intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, intArray0.length);
      
      // Undeclared exception!
      try { 
        learntHTClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrink(18);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3789, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      learntHTClause0.setActivity(3807);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      boolean boolean0 = lits0.isImplied(0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(boolean0);
      
      int int0 = learntHTClause0.get(2352);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0, int0);
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = vecInt0.equals(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      learntHTClause0.rescaleBy((-1122.0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, 3775);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = learntHTClause0.getLits();
      assertNotNull(intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, intArray0.length);
      
      String string2 = learntHTClause0.toString();
      assertNotNull(string2);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int2 = learntHTClause0.hashCode();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean2 = learntHTClause0.locked();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3746, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3746, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3746, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3746, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrink(18);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3728, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3728, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      
      learntHTClause0.setActivity(3746);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertEquals(3746.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3728, learntHTClause0.size());
      assertFalse(learntHTClause0.isSatisfied());
      
      int int0 = learntHTClause0.get(2323);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertEquals(3746.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3728, learntHTClause0.size());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0, int0);
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertEquals(3746.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3728, learntHTClause0.size());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = vecInt0.equals(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertEquals(3746.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3728, learntHTClause0.size());
      assertFalse(boolean0);
      
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertEquals(3746.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3728, learntHTClause0.size());
      assertFalse(learntHTClause0.isSatisfied());
      
      learntHTClause0.rescaleBy((-1093.2303440163298));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4095240.8686851715), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3728, learntHTClause0.size());
      assertFalse(learntHTClause0.isSatisfied());
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, 0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4095240.8686851715), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3728, learntHTClause0.size());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      learntHTClause0.calcReason(1, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4095240.8686851715), learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3728, learntHTClause0.size());
      assertFalse(learntHTClause0.isSatisfied());
      
      // Undeclared exception!
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      assertNotNull(originalHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(originalHTClause0.learnt());
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(3807, originalHTClause0.size());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      
      originalHTClause0.setLearnt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(originalHTClause0.learnt());
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(3807, originalHTClause0.size());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      
      originalHTClause0.forwardActivity(0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(originalHTClause0.learnt());
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(3807, originalHTClause0.size());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      
      int int0 = originalHTClause0.size();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(originalHTClause0.learnt());
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(3807, originalHTClause0.size());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807, int0);
      
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 0);
      assertNotNull(binaryClauses0);
      assertEquals(0.0, binaryClauses0.getActivity(), 0.01);
      assertEquals(0, binaryClauses0.size());
      assertFalse(binaryClauses0.learnt());
      assertFalse(binaryClauses0.locked());
      assertFalse(binaryClauses0.simplify());
      assertTrue(binaryClauses0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      vecInt0.shrink(18);
      assertEquals(0, vecInt0.last());
      assertEquals(3789, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      
      learntHTClause0.setActivity(3807);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits1 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits1);
      assertEquals(0, iLits1.realnVars());
      assertEquals(0, iLits1.nVars());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(searchParams0).getConflictBoundIncFactor();
      doReturn(3807, 0, 3807).when(searchParams0).getInitConflictBound();
      SolverStats solverStats0 = mock(SolverStats.class, new ViolatedAssumptionAnswer());
      arminRestarts0.init(searchParams0, solverStats0);
      assertEquals(3807L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(arminRestarts0.shouldRestart());
      
      arminRestarts0.onRestart();
      assertEquals(3807L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(arminRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, (SearchParams) null, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(3807L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(arminRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      // Undeclared exception!
      try { 
        learntHTClause0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      vecInt0.shrink(18);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3789, vecInt0.size());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      
      int int0 = learntHTClause0.get(2323);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(0, int0);
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = vecInt0.equals(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(boolean0);
      
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      
      learntHTClause0.rescaleBy((-1093.2303440163298));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, 0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      IVecInt iVecInt0 = vecInt0.push(0);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      
      learntHTClause0.calcReason(2323, vecInt0);
      assertSame(vecInt0, iVecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      
      int int2 = learntHTClause0.getAssertionLevel(vecInt0, 3781);
      assertSame(vecInt0, iVecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean1 = learntHTClause0.simplify();
      assertSame(vecInt0, iVecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = learntHTClause0.isSatisfied();
      assertSame(vecInt0, iVecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1496);
      intArray0[1] = (-792);
      intArray0[2] = 0;
      intArray0[3] = 2098;
      intArray0[4] = (-1);
      intArray0[5] = (-207);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertArrayEquals(new int[] {(-1496), (-792), 0, 2098, (-1), (-207)}, intArray0);
      assertEquals(6, intArray0.length);
      
      double double0 = subsetVarOrder0.varActivity(1);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertArrayEquals(new int[] {(-1496), (-792), 0, 2098, (-1), (-207)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, (SearchParams) null, subsetVarOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertArrayEquals(new int[] {(-1496), (-792), 0, 2098, (-1), (-207)}, intArray0);
      assertEquals(6, intArray0.length);
      
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      assertNotNull(iVecInt0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertArrayEquals(new int[] {(-1496), (-792), 0, 2098, (-1), (-207)}, intArray0);
      assertEquals(6, intArray0.length);
      
      LearntHTClause learntHTClause0 = null;
      try {
        learntHTClause0 = new LearntHTClause(iVecInt0, iLits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      vecInt0.shrink(18);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3789, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      int int0 = learntHTClause0.get(3758);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, int0);
      
      DotSearchTracing<LearntHTClause> dotSearchTracing0 = new DotSearchTracing<LearntHTClause>("U'U~e");
      assertNotNull(dotSearchTracing0);
      
      String string0 = dotSearchTracing0.map(3758);
      assertNotNull(string0);
      assertEquals("3758", string0);
      
      DotSearchTracing<LearntHTClause> dotSearchTracing1 = new DotSearchTracing<LearntHTClause>("VF)0J8CO,<");
      assertNotNull(dotSearchTracing1);
      assertFalse(dotSearchTracing1.equals((Object)dotSearchTracing0));
      
      String string1 = dotSearchTracing1.map(0);
      assertNotNull(string1);
      assertNotSame(dotSearchTracing1, dotSearchTracing0);
      assertEquals("0", string1);
      assertFalse(dotSearchTracing1.equals((Object)dotSearchTracing0));
      assertFalse(string1.equals((Object)string0));
      
      DotSearchTracing<LearntHTClause> dotSearchTracing2 = new DotSearchTracing<LearntHTClause>("*eUAe");
      assertNotNull(dotSearchTracing2);
      assertFalse(dotSearchTracing2.equals((Object)dotSearchTracing0));
      assertFalse(dotSearchTracing2.equals((Object)dotSearchTracing1));
      
      // Undeclared exception!
      try { 
        learntHTClause0.toString((VarMapper) dotSearchTracing2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertEquals(0, vecInt0.last());
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals(0, vecInt0.last());
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.shrink(18);
      assertEquals(0, vecInt0.last());
      assertEquals(3789, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.simplify());
      
      learntHTClause0.setActivity(3807);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = learntHTClause0.get(2350);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(0, int0);
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = vecInt0.equals(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-1738.152601123311), (-1738.152601123311), (-295.0), 11);
      assertNotNull(searchParams0);
      assertEquals((-295.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1738.152601123311), searchParams0.getVarDecay(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      assertEquals((-1738.152601123311), searchParams0.getClaDecay(), 0.01);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertNotNull(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap1);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap1, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-295.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1738.152601123311), searchParams0.getVarDecay(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      assertEquals((-1738.152601123311), searchParams0.getClaDecay(), 0.01);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertNotNull(searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(11, searchParams1.getInitConflictBound());
      assertEquals((-295.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1738.152601123311), searchParams1.getVarDecay(), 0.01);
      assertEquals((-1738.152601123311), searchParams1.getClaDecay(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-295.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1738.152601123311), searchParams0.getVarDecay(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      assertEquals((-1738.152601123311), searchParams0.getClaDecay(), 0.01);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams1, levelBasedVarOrderHeap1, miniSATRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(11, searchParams1.getInitConflictBound());
      assertEquals((-295.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1738.152601123311), searchParams1.getVarDecay(), 0.01);
      assertEquals((-1738.152601123311), searchParams1.getClaDecay(), 0.01);
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-295.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1738.152601123311), searchParams0.getVarDecay(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      assertEquals((-1738.152601123311), searchParams0.getClaDecay(), 0.01);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver1.equals((Object)solver0));
      
      boolean boolean2 = solver1.enqueue(0);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver0, solver1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(solver1, solver0);
      assertSame(searchParams0, searchParams1);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(11, searchParams1.getInitConflictBound());
      assertEquals((-295.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1738.152601123311), searchParams1.getVarDecay(), 0.01);
      assertEquals((-1738.152601123311), searchParams1.getClaDecay(), 0.01);
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-295.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1738.152601123311), searchParams0.getVarDecay(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      assertEquals((-1738.152601123311), searchParams0.getClaDecay(), 0.01);
      assertTrue(boolean2);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      learntHTClause0.assertConstraint(solver1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver0, solver1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(solver1, solver0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-295.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1738.152601123311), searchParams0.getVarDecay(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      assertEquals((-1738.152601123311), searchParams0.getClaDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(11, searchParams1.getInitConflictBound());
      assertEquals((-295.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1738.152601123311), searchParams1.getVarDecay(), 0.01);
      assertEquals((-1738.152601123311), searchParams1.getClaDecay(), 0.01);
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      
      learntHTClause0.rescaleBy((-1122.7643256367949));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4274363.787699278), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.simplify());
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, 3759);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4274363.787699278), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3807, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      
      learntHTClause0.setActivity(368.3);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals(368.3, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3807, learntHTClause0.size());
      assertFalse(learntHTClause0.isSatisfied());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      
      solverStats0.incStarts();
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getLearnedliterals());
      
      solverStats0.incRootSimplifications();
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getLearnedliterals());
      
      solverStats0.incDecisions();
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(1L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getLearnedliterals());
      
      solverStats0.incConflicts();
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(1L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(1L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getLearnedliterals());
      
      int int0 = learntHTClause0.get(0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals(368.3, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3807, learntHTClause0.size());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      learntHTClause0.calcReason(3807, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.locked());
      assertEquals(368.3, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3807, learntHTClause0.size());
      assertFalse(learntHTClause0.isSatisfied());
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, 3807);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals(368.3, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3807, learntHTClause0.size());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(3807, vecInt0.size());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(3807, vecInt0.size());
      
      vecInt0.shrink(18);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(3789, vecInt0.size());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      
      learntHTClause0.setActivity(3807);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      
      int int0 = learntHTClause0.get(2323);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0, int0);
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = vecInt0.equals(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(boolean0);
      
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      
      learntHTClause0.rescaleBy((-1093.2303440163298));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, 0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      IVecInt iVecInt0 = vecInt0.push(0);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      learntHTClause0.calcReason(2323, vecInt0);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      
      int int2 = learntHTClause0.getAssertionLevel(vecInt0, 3781);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean1 = learntHTClause0.simplify();
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = learntHTClause0.isSatisfied();
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrink(18);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3789, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      
      learntHTClause0.setActivity(3807);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      
      int int0 = learntHTClause0.get(2323);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(0, int0);
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = vecInt0.equals(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(boolean0);
      
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      
      learntHTClause0.rescaleBy((-1093.2303440163298));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, 0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      learntHTClause0.calcReason(1, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntHTClause0.learnt());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      
      int int2 = learntHTClause0.getAssertionLevel(vecInt0, 3781);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-4161927.9196701674), learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      vecInt0.shrink(18);
      assertEquals(0, vecInt0.last());
      assertEquals(3789, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.simplify());
      
      learntHTClause0.setActivity(3807);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.simplify());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = vecInt0.equals(object1);
      assertNotSame(object1, object0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(boolean0);
      assertFalse(object1.equals((Object)object0));
      
      VecInt vecInt1 = new VecInt();
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.equals((Object)vecInt0));
      
      VecInt vecInt2 = new VecInt();
      assertNotNull(vecInt2);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt0));
      
      vecInt0.clear();
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, vecInt1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.equals((Object)vecInt2));
      
      vecInt1.clear();
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.equals((Object)vecInt2));
      
      IVecInt iVecInt0 = vecInt1.pop();
      assertNotNull(iVecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt2);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertEquals((-1), vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertFalse(iVecInt0.equals((Object)vecInt2));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt1.equals((Object)vecInt0));
      
      learntHTClause0.calcReasonOnTheFly((-462), iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt2);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.simplify());
      assertEquals((-1), vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertFalse(iVecInt0.equals((Object)vecInt2));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.equals((Object)vecInt2));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt1.equals((Object)vecInt0));
      
      LearntHTClause learntHTClause1 = null;
      try {
        learntHTClause1 = new LearntHTClause(vecInt2, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      vecInt0.shrink(18);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(3789, vecInt0.size());
      
      vecInt0.shrinkTo(18);
      assertFalse(vecInt0.isEmpty());
      assertEquals(18, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(18, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      
      learntHTClause0.setActivity(3807);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(18, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getPropagations());
      
      solverStats0.incStarts();
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getPropagations());
      
      solverStats0.incRootSimplifications();
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getPropagations());
      
      solverStats0.incDecisions();
      assertEquals(1, solverStats0.getStarts());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(1L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getPropagations());
      
      solverStats0.incConflicts();
      assertEquals(1, solverStats0.getStarts());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(1L, solverStats0.getDecisions());
      assertEquals(1L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getPropagations());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits1 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits1);
      assertEquals(0, iLits1.nVars());
      assertEquals(0, iLits1.realnVars());
      
      // Undeclared exception!
      try { 
        learntHTClause0.calcReasonOnTheFly(3807, vecInt0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      vecInt0.shrinkTo(5);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(5, vecInt0.size());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(5, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      
      learntHTClause0.setActivity(3807);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(5, learntHTClause0.size());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      learntHTClause0.head = 0;
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(5, learntHTClause0.size());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      
      solverStats0.incStarts();
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      solverStats0.incRootSimplifications();
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      solverStats0.incDecisions();
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(1L, solverStats0.getDecisions());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        learntHTClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertEquals(3807, learntHTClause0.size());
      
      learntHTClause0.setActivity(368.3);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(368.3, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertEquals(3807, learntHTClause0.size());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      
      solverStats0.incStarts();
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(1, solverStats0.getStarts());
      
      solverStats0.incRootSimplifications();
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(1, solverStats0.getStarts());
      
      solverStats0.incDecisions();
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(1L, solverStats0.getDecisions());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(1, solverStats0.getStarts());
      
      solverStats0.incConflicts();
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(1L, solverStats0.getDecisions());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(1L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(1, solverStats0.getStarts());
      
      int int0 = learntHTClause0.get(0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(368.3, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertEquals(3807, learntHTClause0.size());
      assertEquals(0, int0);
      
      String string0 = learntHTClause0.toString();
      assertNotNull(string0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(368.3, learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertEquals(3807, learntHTClause0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IVecInt iVecInt0 = vecInt0.push(1);
      assertNotNull(iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertSame(vecInt0, iVecInt0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(1, iVecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, vecInt0.last());
      
      learntHTClause0.calcReason(3807, vecInt0);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(368.3, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertEquals(3807, learntHTClause0.size());
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, 3807);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(368.3, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertEquals(3807, learntHTClause0.size());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrink(18);
      assertEquals(3789, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      
      learntHTClause0.setActivity(3807);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      
      boolean boolean0 = lits0.isImplied(0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(boolean0);
      
      String string1 = Lits.toString(205);
      assertNotNull(string1);
      assertEquals("-102", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = learntHTClause0.get(2352);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0, int0);
      
      String string2 = learntHTClause0.toString();
      assertNotNull(string2);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = vecInt0.equals(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      
      learntHTClause0.rescaleBy((-1122.0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, 3775);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Constr constr0 = learntHTClause0.toConstraint();
      assertNotNull(constr0);
      assertSame(constr0, learntHTClause0);
      assertSame(learntHTClause0, constr0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(constr0.simplify());
      assertTrue(constr0.learnt());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, constr0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals((-4271454.0), constr0.getActivity(), 0.01);
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.locked());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      int int2 = learntHTClause0.getAssertionLevel(vecInt0, 2469);
      assertSame(learntHTClause0, constr0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      String string1 = vecInt0.toString();
      assertNotNull(string1);
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertTrue(string1.equals((Object)string0));
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrink(0);
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertEquals(3807, learntHTClause0.size());
      
      learntHTClause0.setActivity(0.0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertEquals(3807, learntHTClause0.size());
      
      int int0 = 2352;
      int int1 = learntHTClause0.get(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertEquals(3807, learntHTClause0.size());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      LearntHTClause learntHTClause1 = null;
      try {
        learntHTClause1 = new LearntHTClause(vecInt0, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3766, 0);
      assertEquals(3766, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      vecInt0.shrink(3759);
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(7, learntHTClause0.size());
      
      learntHTClause0.setActivity(3759);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(3759.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(7, learntHTClause0.size());
      
      int int0 = 2352;
      learntHTClause0.incActivity(0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(3759.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(7, learntHTClause0.size());
      
      boolean boolean0 = learntHTClause0.canBePropagatedMultipleTimes();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(3759.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(7, learntHTClause0.size());
      assertFalse(boolean0);
      
      LearntHTClause learntHTClause1 = null;
      try {
        learntHTClause1 = new LearntHTClause(vecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrink(18);
      assertEquals(3789, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      
      learntHTClause0.setActivity(3807);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      
      int int0 = learntHTClause0.get(2352);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0, int0);
      
      LearntHTClause learntHTClause1 = null;
      try {
        learntHTClause1 = new LearntHTClause(vecInt0, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      vecInt0.shrink(18);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3789, vecInt0.size());
      
      vecInt0.shrinkTo(18);
      assertEquals(0, vecInt0.last());
      assertEquals(18, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(18, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      
      learntHTClause0.setActivity(3807);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(18, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      solverStats0.incStarts();
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      solverStats0.incRootSimplifications();
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      solverStats0.incDecisions();
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(1L, solverStats0.getDecisions());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      solverStats0.incConflicts();
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(1L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(1L, solverStats0.getDecisions());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      arminRestarts0.init(searchParams0, solverStats0);
      assertEquals(100L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(arminRestarts0.shouldRestart());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(1L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(1L, solverStats0.getDecisions());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(1, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      arminRestarts0.onRestart();
      assertEquals(100L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(arminRestarts0.shouldRestart());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits1 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits1);
      assertEquals(0, iLits1.realnVars());
      assertEquals(0, iLits1.nVars());
      
      // Undeclared exception!
      try { 
        learntHTClause0.calcReasonOnTheFly(3807, vecInt0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = 3807;
      vecInt0.growTo(3807, 0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      vecInt0.shrink(18);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3789, vecInt0.size());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntHTClause0.learnt());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      learntHTClause0.setActivity(3807);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntHTClause0.learnt());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      
      vecInt0.growTo(3789, 0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3789, vecInt0.size());
      
      LearntHTClause learntHTClause1 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntHTClause1.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause1.size());
      assertTrue(learntHTClause1.learnt());
      assertTrue(learntHTClause1.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntHTClause1.getActivity(), 0.01);
      assertEquals(1, learntHTClause1.requiredNumberOfSatisfiedLiterals());
      
      learntHTClause1.rescaleBy(100.0);
      assertNotSame(learntHTClause1, learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntHTClause1.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause1.size());
      assertTrue(learntHTClause1.learnt());
      assertTrue(learntHTClause1.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntHTClause1.getActivity(), 0.01);
      assertEquals(1, learntHTClause1.requiredNumberOfSatisfiedLiterals());
      
      boolean boolean0 = vecInt0.equals(learntHTClause1);
      assertNotSame(learntHTClause1, learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntHTClause1.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause1.size());
      assertTrue(learntHTClause1.learnt());
      assertTrue(learntHTClause1.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntHTClause1.getActivity(), 0.01);
      assertEquals(1, learntHTClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits1 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits1);
      assertEquals(0, iLits1.realnVars());
      assertEquals(0, iLits1.nVars());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      ILits iLits2 = solver0.getVocabulary();
      assertNotNull(iLits2);
      assertSame(iLits2, iLits1);
      assertEquals(0, iLits2.realnVars());
      assertEquals(0, iLits2.nVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      OriginalHTClause originalHTClause0 = null;
      try {
        originalHTClause0 = new OriginalHTClause(vecInt0, iLits1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(3807, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      
      // Undeclared exception!
      try { 
        learntHTClause0.get((-3010));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3011
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrink(18);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3789, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      int int0 = learntHTClause0.get(2323);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, int0);
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = vecInt0.equals(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
      
      boolean boolean1 = lits0.belongsToPool(3793);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      learntHTClause0.rescaleBy((-1093.2303440163298));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, 0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      IVecInt iVecInt0 = vecInt0.push(0);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(0, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      
      learntHTClause0.calcReason(2323, vecInt0);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      int int2 = learntHTClause0.getAssertionLevel(vecInt0, 3781);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean2 = learntHTClause0.simplify();
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = learntHTClause0.isSatisfied();
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(iLits0, lits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertFalse(iLits0.equals((Object)lits0));
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits1 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits1);
      assertNotSame(iLits1, lits0);
      assertNotSame(iLits1, iLits0);
      assertEquals(0, iLits1.realnVars());
      assertEquals(0, iLits1.nVars());
      assertFalse(iLits1.equals((Object)lits0));
      assertFalse(iLits1.equals((Object)iLits0));
      
      naturalStaticOrder0.setLits(iLits1);
      assertNotSame(iLits1, lits0);
      assertNotSame(iLits1, iLits0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, iLits1.realnVars());
      assertEquals(0, iLits1.nVars());
      assertFalse(iLits1.equals((Object)lits0));
      assertFalse(iLits1.equals((Object)iLits0));
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      fixedPeriodRestarts0.onRestart();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, naturalStaticOrder0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      learntHTClause0.assertConstraint(solver0);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(lits0, iLits1);
      assertNotSame(lits0, iLits0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(3789, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(lits0.equals((Object)iLits1));
      assertFalse(lits0.equals((Object)iLits0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertEquals(0, vecInt0.last());
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals(0, vecInt0.last());
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.shrink(18);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3789, vecInt0.size());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      
      learntHTClause0.setActivity(3807);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      
      boolean boolean0 = lits0.isImplied(0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(boolean0);
      
      int int0 = learntHTClause0.get(2352);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertEquals(0, int0);
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = vecInt0.equals(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      
      learntHTClause0.rescaleBy((-1122.0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, 3775);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = learntHTClause0.getLits();
      assertNotNull(intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(3789, intArray0.length);
      
      String string2 = learntHTClause0.toString();
      assertNotNull(string2);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean2 = learntHTClause0.equals(levelBasedVarOrderHeap0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int2 = learntHTClause0.get(18);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.locked());
      assertEquals((-4271454.0), learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3766, 0);
      assertEquals(3766, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      assertNotNull(originalHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalHTClause0.learnt());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3766, originalHTClause0.size());
      
      int int0 = originalHTClause0.size();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalHTClause0.learnt());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3766, originalHTClause0.size());
      assertEquals(3766, int0);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-1738.152601123311), (-1738.152601123311), (-295.0), 11);
      assertNotNull(searchParams0);
      assertEquals((-1738.152601123311), searchParams0.getVarDecay(), 0.01);
      assertEquals((-295.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      assertEquals((-1738.152601123311), searchParams0.getClaDecay(), 0.01);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertNotNull(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap1);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap1, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-1738.152601123311), searchParams0.getVarDecay(), 0.01);
      assertEquals((-295.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      assertEquals((-1738.152601123311), searchParams0.getClaDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-1738.152601123311), searchParams0.getVarDecay(), 0.01);
      assertEquals((-295.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      assertEquals((-1738.152601123311), searchParams0.getClaDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals((-1738.152601123311), searchParams1.getClaDecay(), 0.01);
      assertEquals(11, searchParams1.getInitConflictBound());
      assertEquals((-295.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1738.152601123311), searchParams1.getVarDecay(), 0.01);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams1, levelBasedVarOrderHeap1, miniSATRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-1738.152601123311), searchParams0.getVarDecay(), 0.01);
      assertEquals((-295.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      assertEquals((-1738.152601123311), searchParams0.getClaDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals((-1738.152601123311), searchParams1.getClaDecay(), 0.01);
      assertEquals(11, searchParams1.getInitConflictBound());
      assertEquals((-295.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1738.152601123311), searchParams1.getVarDecay(), 0.01);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      
      boolean boolean0 = solver1.enqueue(0);
      assertNotSame(solver1, solver0);
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver0, solver1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, solver1.nVars());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-1738.152601123311), searchParams0.getVarDecay(), 0.01);
      assertEquals((-295.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      assertEquals((-1738.152601123311), searchParams0.getClaDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals((-1738.152601123311), searchParams1.getClaDecay(), 0.01);
      assertEquals(11, searchParams1.getInitConflictBound());
      assertEquals((-295.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1738.152601123311), searchParams1.getVarDecay(), 0.01);
      assertTrue(boolean0);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver0.equals((Object)solver1));
      
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraint(solver1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertEquals(0, vecInt0.last());
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3807, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.simplify());
      
      boolean boolean0 = vecInt0.equals((Object) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(boolean0);
      
      learntHTClause0.calcReasonOnTheFly((-1605), vecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3807, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.simplify());
      
      LearntHTClause learntHTClause1 = null;
      try {
        learntHTClause1 = new LearntHTClause(vecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      DotSearchTracing<LearntHTClause> dotSearchTracing0 = new DotSearchTracing<LearntHTClause>("*eUAe");
      assertNotNull(dotSearchTracing0);
      
      String string0 = dotSearchTracing0.map(1);
      assertNotNull(string0);
      assertEquals("1", string0);
      
      DotSearchTracing<LearntHTClause> dotSearchTracing1 = new DotSearchTracing<LearntHTClause>("");
      assertNotNull(dotSearchTracing1);
      assertFalse(dotSearchTracing1.equals((Object)dotSearchTracing0));
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.learnt());
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.learnt());
      assertFalse(string1.equals((Object)string0));
      
      int[] intArray0 = learntHTClause0.getLits();
      assertNotNull(intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.learnt());
      assertEquals(3807, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      vecInt0.shrink(18);
      assertEquals(0, vecInt0.last());
      assertEquals(3789, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.simplify());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      
      int int0 = learntHTClause0.get(2323);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.simplify());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0, int0);
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.simplify());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = vecInt0.equals(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(boolean0);
      
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.simplify());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      
      learntHTClause0.rescaleBy((-1093.2303440163298));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.simplify());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, 0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.simplify());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IVecInt iVecInt0 = vecInt0.push(2219);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(2219, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2219, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      learntHTClause0.calcReason(0, vecInt0);
      assertSame(vecInt0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(2219, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.simplify());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      
      int int2 = learntHTClause0.getAssertionLevel(iVecInt0, Integer.MIN_VALUE);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(2219, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(-0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(2219, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3787, 0);
      assertEquals(0, vecInt0.last());
      assertEquals(3787, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals(0, vecInt0.last());
      assertEquals(3787, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(3787, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.shrink(18);
      assertEquals(0, vecInt0.last());
      assertEquals(3769, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals(3769, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      
      learntHTClause0.setActivity(3787);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3787.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals(3769, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      
      int int0 = learntHTClause0.get(2352);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3787.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals(3769, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, int0);
      
      LearntHTClause learntHTClause1 = null;
      try {
        learntHTClause1 = new LearntHTClause(vecInt0, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(3807, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrink(18);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(3789, vecInt0.size());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      boolean boolean0 = lits0.isImplied(0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(boolean0);
      
      int int0 = learntHTClause0.get(18);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, int0);
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = vecInt0.equals(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      learntHTClause0.calcReasonOnTheFly((-125), vecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      learntHTClause0.simplify();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      vecInt0.shrink(18);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(3789, vecInt0.size());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      learntHTClause0.setActivity(3807);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      LearntHTClause learntHTClause1 = null;
      try {
        learntHTClause1 = new LearntHTClause(vecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3807, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      
      // Undeclared exception!
      try { 
        learntHTClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      vecInt0.shrink(0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3807, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      
      int int0 = learntHTClause0.get(3776);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3807, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, int0);
      
      DotSearchTracing<LearntHTClause> dotSearchTracing0 = new DotSearchTracing<LearntHTClause>("*eUAe");
      assertNotNull(dotSearchTracing0);
      
      String string0 = dotSearchTracing0.map(1);
      assertNotNull(string0);
      assertEquals("1", string0);
      
      DotSearchTracing<LearntHTClause> dotSearchTracing1 = new DotSearchTracing<LearntHTClause>("");
      assertNotNull(dotSearchTracing1);
      assertFalse(dotSearchTracing1.equals((Object)dotSearchTracing0));
      
      String string1 = learntHTClause0.toString((VarMapper) dotSearchTracing1);
      assertNotNull(string1);
      assertNotSame(dotSearchTracing1, dotSearchTracing0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(3807, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(dotSearchTracing1.equals((Object)dotSearchTracing0));
      assertFalse(string1.equals((Object)string0));
      
      LearntHTClause learntHTClause1 = null;
      try {
        learntHTClause1 = new LearntHTClause(vecInt0, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrinkTo(512);
      assertFalse(vecInt0.isEmpty());
      assertEquals(512, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertEquals(512, learntHTClause0.size());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      
      learntHTClause0.setActivity(3807);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertEquals(512, learntHTClause0.size());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getDecisions());
      
      solverStats0.incRootSimplifications();
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getDecisions());
      
      SolverStats solverStats1 = new SolverStats();
      assertNotNull(solverStats1);
      assertEquals(0L, solverStats1.getLearnedbinaryclauses());
      assertEquals(0L, solverStats1.getChangedreason());
      assertEquals(0L, solverStats1.getLearnedliterals());
      assertEquals(0L, solverStats1.getLearnedclauses());
      assertEquals(0, solverStats1.getReduceddb());
      assertEquals(0L, solverStats1.getRootSimplifications());
      assertEquals(0L, solverStats1.getReducedliterals());
      assertEquals(0L, solverStats1.getConflicts());
      assertEquals(0L, solverStats1.getLearnedternaryclauses());
      assertEquals(0L, solverStats1.getDecisions());
      assertEquals(0L, solverStats1.getPropagations());
      assertEquals(0, solverStats1.getImportedUnits());
      assertEquals(0L, solverStats1.getUpdateLBD());
      assertEquals(0, solverStats1.getStarts());
      assertEquals(0L, solverStats1.getInspects());
      assertEquals(0, solverStats1.getShortcuts());
      assertEquals(0L, solverStats1.getIgnoredclauses());
      assertFalse(solverStats1.equals((Object)solverStats0));
      
      solverStats1.incDecisions();
      assertNotSame(solverStats1, solverStats0);
      assertEquals(0L, solverStats1.getLearnedbinaryclauses());
      assertEquals(0L, solverStats1.getChangedreason());
      assertEquals(0L, solverStats1.getLearnedliterals());
      assertEquals(0L, solverStats1.getLearnedclauses());
      assertEquals(0, solverStats1.getReduceddb());
      assertEquals(0L, solverStats1.getRootSimplifications());
      assertEquals(0L, solverStats1.getReducedliterals());
      assertEquals(0L, solverStats1.getConflicts());
      assertEquals(1L, solverStats1.getDecisions());
      assertEquals(0L, solverStats1.getLearnedternaryclauses());
      assertEquals(0L, solverStats1.getPropagations());
      assertEquals(0, solverStats1.getImportedUnits());
      assertEquals(0L, solverStats1.getUpdateLBD());
      assertEquals(0, solverStats1.getStarts());
      assertEquals(0L, solverStats1.getInspects());
      assertEquals(0, solverStats1.getShortcuts());
      assertEquals(0L, solverStats1.getIgnoredclauses());
      assertFalse(solverStats1.equals((Object)solverStats0));
      
      solverStats0.incConflicts();
      assertNotSame(solverStats0, solverStats1);
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(1L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertFalse(solverStats0.equals((Object)solverStats1));
      
      arminRestarts0.init(searchParams0, solverStats1);
      assertNotSame(solverStats1, solverStats0);
      assertFalse(arminRestarts0.shouldRestart());
      assertEquals(100L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, solverStats1.getLearnedbinaryclauses());
      assertEquals(0L, solverStats1.getChangedreason());
      assertEquals(0L, solverStats1.getLearnedliterals());
      assertEquals(0L, solverStats1.getLearnedclauses());
      assertEquals(0, solverStats1.getReduceddb());
      assertEquals(0L, solverStats1.getRootSimplifications());
      assertEquals(0L, solverStats1.getReducedliterals());
      assertEquals(0L, solverStats1.getConflicts());
      assertEquals(1L, solverStats1.getDecisions());
      assertEquals(0L, solverStats1.getLearnedternaryclauses());
      assertEquals(0L, solverStats1.getPropagations());
      assertEquals(0, solverStats1.getImportedUnits());
      assertEquals(0L, solverStats1.getUpdateLBD());
      assertEquals(0, solverStats1.getStarts());
      assertEquals(0L, solverStats1.getInspects());
      assertEquals(0, solverStats1.getShortcuts());
      assertEquals(0L, solverStats1.getIgnoredclauses());
      assertFalse(solverStats1.equals((Object)solverStats0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      arminRestarts0.onRestart();
      assertFalse(arminRestarts0.shouldRestart());
      assertEquals(100L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(iLits0, lits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertFalse(iLits0.equals((Object)lits0));
      
      learntHTClause0.calcReasonOnTheFly(2971, vecInt0, vecInt0);
      assertNotSame(lits0, iLits0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertEquals(512, learntHTClause0.size());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertFalse(lits0.equals((Object)iLits0));
      
      boolean boolean1 = learntHTClause0.simplify();
      assertNotSame(lits0, iLits0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertEquals(512, learntHTClause0.size());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertFalse(boolean1);
      assertFalse(lits0.equals((Object)iLits0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        learntHTClause0.toString((VarMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.simplify());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.simplify());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VecInt vecInt0 = new VecInt(6);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3807, 6);
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.last());
      assertEquals(3807, vecInt0.size());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      vecInt0.shrink(6);
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.last());
      assertEquals(3801, vecInt0.size());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3801, learntHTClause0.size());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      DotSearchTracing<LearntHTClause> dotSearchTracing0 = new DotSearchTracing<LearntHTClause>("*eUAe");
      assertNotNull(dotSearchTracing0);
      
      String string0 = dotSearchTracing0.map(3807);
      assertNotNull(string0);
      assertEquals("3807", string0);
      
      String string1 = dotSearchTracing0.map(1);
      assertNotNull(string1);
      assertEquals("1", string1);
      assertFalse(string1.equals((Object)string0));
      
      DotSearchTracing<LearntHTClause> dotSearchTracing1 = new DotSearchTracing<LearntHTClause>("");
      assertNotNull(dotSearchTracing1);
      assertFalse(dotSearchTracing1.equals((Object)dotSearchTracing0));
      
      int int0 = learntHTClause0.getAssertionLevel(vecInt0, (-2767));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3801, learntHTClause0.size());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals((-1), int0);
      
      int[] intArray0 = learntHTClause0.getLits();
      assertNotNull(intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3801, learntHTClause0.size());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(3801, intArray0.length);
      
      String string2 = learntHTClause0.toString();
      assertNotNull(string2);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3801, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = learntHTClause0.hashCode();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3801, learntHTClause0.size());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(int1 == int0);
      
      boolean boolean0 = learntHTClause0.locked();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3801, learntHTClause0.size());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(boolean0);
      
      int int2 = learntHTClause0.hashCode();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(3801, learntHTClause0.size());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      vecInt0.shrink(18);
      assertEquals(0, vecInt0.last());
      assertEquals(3789, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.shrinkTo(18);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(18, vecInt0.size());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(18, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      boolean boolean0 = learntHTClause0.learnt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(18, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(boolean0);
      
      learntHTClause0.setActivity(3807);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(18, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getDecisions());
      
      solverStats0.incRootSimplifications();
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(1L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getDecisions());
      
      // Undeclared exception!
      try { 
        learntHTClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3807, 0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3807, vecInt0.size());
      
      vecInt0.shrink(18);
      assertEquals(0, vecInt0.last());
      assertEquals(3789, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      
      learntHTClause0.setActivity(3807);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      
      boolean boolean0 = lits0.isImplied(0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(boolean0);
      
      int int0 = learntHTClause0.get(18);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(0, int0);
      
      String string0 = learntHTClause0.toString();
      assertNotNull(string0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      
      boolean boolean1 = vecInt0.equals(iteratorInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      learntHTClause0.calcReasonOnTheFly((-277), vecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.locked());
      assertEquals(3807.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      
      learntHTClause0.rescaleBy(574.849209078856);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(2188450.9389632046, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      
      int int1 = learntHTClause0.getAssertionLevel(vecInt0, (-277));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(2188450.9389632046, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = learntHTClause0.getLits();
      assertNotNull(intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(2188450.9389632046, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(3789, intArray0.length);
      
      String string1 = learntHTClause0.toString();
      assertNotNull(string1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(2188450.9389632046, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertTrue(string1.equals((Object)string0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = learntHTClause0.equals(object0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(2188450.9389632046, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int2 = learntHTClause0.hashCode();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(2188450.9389632046, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(3789, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(3807, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      vecInt0.toString();
      vecInt0.iterator();
      vecInt0.shrink(18);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.setActivity(3807);
      lits0.isImplied(0);
      learntHTClause0.get(2352);
      learntHTClause0.toString();
      vecInt0.equals(learntHTClause0);
      learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      learntHTClause0.rescaleBy((-1122.0));
      boolean boolean0 = learntHTClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(vecInt0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(3807, 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      vecInt0.toString();
      vecInt0.iterator();
      Lits.toStringX(309);
      vecInt0.shrink(18);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.get(2352);
      DotSearchTracing<LearntHTClause> dotSearchTracing0 = new DotSearchTracing<LearntHTClause>("*eUAe");
      dotSearchTracing0.map((-2532));
      dotSearchTracing0.map((-2532));
      learntHTClause0.toString((VarMapper) dotSearchTracing0);
      LearntHTClause learntHTClause1 = null;
      try {
        learntHTClause1 = new LearntHTClause(vecInt0, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
