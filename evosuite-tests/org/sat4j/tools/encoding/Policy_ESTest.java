/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:26:52 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.encoding.Binary;
import org.sat4j.tools.encoding.Binomial;
import org.sat4j.tools.encoding.EncodingStrategy;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;
import org.sat4j.tools.encoding.Ladder;
import org.sat4j.tools.encoding.Policy;
import org.sat4j.tools.encoding.Product;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Policy_ESTest extends Policy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      policy0.setAtMostOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostKEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtLeastOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Policy policy0 = new Policy();
      String[] stringArray0 = new String[1];
      Minimal4CardinalityModel[] minimal4CardinalityModelArray0 = new Minimal4CardinalityModel[1];
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(minimal4CardinalityModel0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      minimal4CardinalityModelArray0[0] = minimal4CardinalityModel0;
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(true, stringArray0, minimal4CardinalityModelArray0);
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = policy0.addAtMost(manyCore0, vecInt0, Integer.MIN_VALUE);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IConstr iConstr0 = policy0.addAtLeast(iSolver0, vecInt0, 0);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setExactlyOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setExactlyKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtMostOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtMostKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtLeastOneEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtLeastOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Policy policy0 = new Policy();
      try { 
        policy0.addExactly(iSolver0, iVecInt0, (-55));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setExactlyKEncoding(encodingStrategy0);
      iVecInt0.growTo(227, 1);
      // Undeclared exception!
      policy0.addExactly(dimacsOutputSolver0, iVecInt0, 5);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      policy0.setExactlyOneEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addExactly(dimacsOutputSolver0, iVecInt0, 1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addExactly(dimacsOutputSolver0, (IVecInt) null, (-2819));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      iVecInt0.shrinkTo(7);
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addExactly(dimacsOutputSolver0, iVecInt0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addAtMost(dimacsOutputSolver0, iVecInt0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, (IVecInt) null, (-215));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      iVecInt0.shrinkTo(7);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addAtMost(dimacsOutputSolver0, iVecInt0, (-1626));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(2);
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      try { 
        policy0.addAtLeast(iSolver0, vecInt0, 100);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, (IVecInt) null, 483);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      iVecInt0.shrink(1);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(dimacsOutputSolver0, iVecInt0, 1969);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      iVecInt0.shrinkTo(7);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(dimacsOutputSolver0, iVecInt0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      // Undeclared exception!
      try { 
        policy0.addAtMost(iSolver0, iVecInt0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(policy0);
      assertEquals(EncodingStrategy.NATIVE, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      EncodingStrategy encodingStrategy1 = Policy.getEncodingTypeFromAdapter(encodingStrategyAdapter0);
      assertEquals(EncodingStrategy.BINOMIAL, encodingStrategy1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      policy0.setAtLeastOneEncoding(encodingStrategy0);
      IConstr iConstr0 = policy0.addAtLeast(dimacsOutputSolver0, iVecInt0, 1);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addAtLeast(dimacsOutputSolver0, iVecInt0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setExactlyKEncoding(encodingStrategy0);
      IConstr iConstr0 = policy0.addExactly(dimacsOutputSolver0, iVecInt0, 5);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setExactlyKEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addExactly(dimacsOutputSolver0, iVecInt0, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      IConstr iConstr0 = policy0.addExactly(dimacsOutputSolver0, iVecInt0, 1);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addExactly(dimacsOutputSolver0, iVecInt0, 5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 5
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      iVecInt0.shrinkTo(7);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addAtMost(dimacsOutputSolver0, iVecInt0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      iVecInt0.shrinkTo(7);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addAtMostOne(dimacsOutputSolver0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setAtMostOneEncoding(encodingStrategy0);
      iVecInt0.shrinkTo(5);
      // Undeclared exception!
      try { 
        policy0.addAtMostOne(dimacsOutputSolver0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Policy policy0 = new Policy();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt(1777, 1777);
      vecInt0.growTo(1777, 43);
      // Undeclared exception!
      policy0.addAtLeast(iSolver0, vecInt0, 1777);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      // Undeclared exception!
      try { 
        policy0.addAtLeast(iSolver0, vecInt0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      IConstr iConstr0 = policy0.addAtMost(dimacsOutputSolver0, iVecInt0, 0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      EncodingStrategy encodingStrategy1 = Policy.getEncodingTypeFromAdapter(encodingStrategyAdapter0);
      assertEquals(EncodingStrategy.SEQUENTIAL, encodingStrategy1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Product product0 = new Product();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(product0);
      assertEquals(EncodingStrategy.PRODUCT, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(ladder0);
      assertEquals(EncodingStrategy.LADDER, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      policy0.setAtLeastKEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastKEncoding();
      EncodingStrategy encodingStrategy1 = Policy.getEncodingTypeFromAdapter(encodingStrategyAdapter0);
      assertEquals(EncodingStrategy.COMMANDER, encodingStrategy1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Binary binary0 = new Binary();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(binary0);
      assertEquals(EncodingStrategy.BINARY, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtLeastKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setAtLeastKEncoding(encodingStrategy0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(minimal4CardinalityModel0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, true);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2617);
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(fullClauseSelectorSolver0, vecInt0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setAtLeastOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      policy0.setExactlyKEncoding(encodingStrategyAdapter0);
      EncodingStrategyAdapter encodingStrategyAdapter1 = policy0.getExactlyKEncoding();
      assertSame(encodingStrategyAdapter1, encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      policy0.setExactlyOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyOneEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      Policy policy0 = new Policy();
      policy0.setExactlyOneEncoding(encodingStrategyAdapter0);
      String string0 = policy0.toString();
      assertEquals("Policy = [At most K: Native, at most 1: Native, exactly K: Native, exactly 1: Binomial]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Policy policy0 = new Policy();
      Ladder ladder0 = new Ladder();
      policy0.setAtLeastOneEncoding((EncodingStrategyAdapter) ladder0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Policy policy0 = new Policy();
      policy0.setAtLeastKEncoding((EncodingStrategyAdapter) null);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Policy policy0 = new Policy();
      Binomial binomial0 = new Binomial();
      policy0.setAtMostKEncoding((EncodingStrategyAdapter) binomial0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Policy policy0 = new Policy();
      policy0.setAtMostOneEncoding((EncodingStrategyAdapter) null);
  }
}
