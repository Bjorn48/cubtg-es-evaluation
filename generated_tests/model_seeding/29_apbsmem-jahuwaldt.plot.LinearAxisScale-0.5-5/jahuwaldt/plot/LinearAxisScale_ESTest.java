/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 13:04:30 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.AxisLimitData;
import jahuwaldt.plot.LinearAxisScale;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.TickMarkData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinearAxisScale_ESTest extends LinearAxisScale_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      // Undeclared exception!
      linearAxisScale0.calcTickMarks(10.0, (-1.7401111400000005E298), (-1.7401111400000005E298), 10.0, (-1.7401111400000005E298));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks(0.0, (-4259.3483274), 10.0, 0.0, 0.0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(tickMarkData0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(5.0, 5.0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(0.0, 0.0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      double double0 = linearAxisScale0.func(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      double double0 = linearAxisScale0.func(1.0);
      assertEquals(1.0, double0, 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      // Undeclared exception!
      linearAxisScale0.findGoodLimits(1253.5181030233255, (-2.2535181030233254E306));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      double double0 = linearAxisScale0.func((-5474.27765));
      assertEquals((-5474.27765), double0, 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks((-332.48860613094007), 3461.9524014295325, (-332.48860613094007), (-1.254518103023326E288), 3461.9524014295325);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(tickMarkData0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      // Undeclared exception!
      try { 
        linearAxisScale0.calcTickMarks((-1341.1769120000001), (-2121.55), (-1.0), (-2121.55), 384.2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.LinearAxisScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-2121.55), (-843.3246703686));
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-1911.0), (-1013.7857));
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(1220.825094091, 3754.2399104);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-674.2475717), (-674.2475717));
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(axisLimitData0);
      
      // Undeclared exception!
      try { 
        linearAxisScale0.adjustForErrorBars((PlotDatum) null, (-674.2475717), (-1221.373322), axisLimitData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.LinearAxisScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(linearAxisScale0);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(1253.5181030233255, 1253.5181030233255);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertNotNull(axisLimitData0);
      
      PlotDatum plotDatum0 = new PlotDatum(1253.5181030233255, 1253.5181030233255, true);
      assertTrue(plotDatum0.connected());
      assertEquals(1253.5181030233255, plotDatum0.getY(), 0.01);
      assertEquals(1253.5181030233255, plotDatum0.getX(), 0.01);
      assertEquals(0.0, plotDatum0.getYError(), 0.01);
      assertFalse(plotDatum0.hasErrorBar());
      assertEquals(1253.5181030233255, plotDatum0.x, 0.01);
      assertEquals(1253.5181030233255, plotDatum0.y, 0.01);
      assertNotNull(plotDatum0);
      
      linearAxisScale0.adjustForErrorBars(plotDatum0, 1253.5181030233255, (-2132.860628), axisLimitData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertTrue(plotDatum0.connected());
      assertEquals(1253.5181030233255, plotDatum0.getY(), 0.01);
      assertEquals(1253.5181030233255, plotDatum0.getX(), 0.01);
      assertEquals(0.0, plotDatum0.getYError(), 0.01);
      assertFalse(plotDatum0.hasErrorBar());
      assertEquals(1253.5181030233255, plotDatum0.x, 0.01);
      assertEquals(1253.5181030233255, plotDatum0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.findGoodLimits(1.0E-6, 0.0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      double double0 = linearAxisScale0.lowerBounds();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      double double0 = linearAxisScale0.upperBounds();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(0.4035, 1.04);
      assertNotNull(axisLimitData0);
  }
}
