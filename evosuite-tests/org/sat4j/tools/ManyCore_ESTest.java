/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:11:54 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.lang.reflect.Array;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.Solver;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.SearchListener;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ManyCore_ESTest extends ManyCore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      List<DimacsStringSolver> list0 = manyCore0.getSolvers();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(abstractMinimalModelArray0);
      assertNotNull(manyCore0);
      assertEquals(0, abstractMinimalModelArray0.length);
      
      try { 
        manyCore0.findModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[5];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      statisticsSolverArray0[0] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(statisticsSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LexicoDecorator<Minimal4CardinalityModel>[] lexicoDecoratorArray0 = (LexicoDecorator<Minimal4CardinalityModel>[]) Array.newInstance(LexicoDecorator.class, 1);
      ManyCore<LexicoDecorator<Minimal4CardinalityModel>> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<LexicoDecorator<Minimal4CardinalityModel>>(lexicoDecoratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[2];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      statisticsSolverArray0[0] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(stringArray0, statisticsSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[1];
      ManyCore<OptToSatAdapter> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<OptToSatAdapter>(stringArray0, optToSatAdapterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[3];
      ManyCore<SubModelIterator> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<SubModelIterator>(true, subModelIteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[3];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertNotNull(dimacsStringSolver0);
      
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(true, stringArray0, dimacsStringSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ManyCore<AbstractMinimalModel> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<AbstractMinimalModel>(false, stringArray0, (AbstractMinimalModel[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[0];
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(true, stringArray0, dimacsStringSolverArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsSolver0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wpwap0u%HX!";
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(aSolverFactory0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<MaxSatDecorator> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<MaxSatDecorator>(aSolverFactory0, false, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[0];
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(true, statisticsSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, statisticsSolverArray0.length);
      
      manyCore0.registerLiteral((-697));
      assertEquals(0, statisticsSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(false, subModelIteratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, subModelIteratorArray0.length);
      
      manyCore0.setVerbose(false);
      assertEquals(0, subModelIteratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ModelIterator[] modelIteratorArray0 = new ModelIterator[0];
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(false, modelIteratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, modelIteratorArray0.length);
      
      SearchListener<Solver<CardinalityDataStructureYanMin>> searchListener0 = (SearchListener<Solver<CardinalityDataStructureYanMin>>) mock(SearchListener.class, new ViolatedAssumptionAnswer());
      manyCore0.setSearchListener(searchListener0);
      assertEquals(0, modelIteratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ModelIterator[] modelIteratorArray0 = new ModelIterator[0];
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(false, modelIteratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, modelIteratorArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.onFinishWithAnswer(false, false, (-3369));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[0];
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(true, statisticsSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, statisticsSolverArray0.length);
      
      ModelIterator modelIterator0 = new ModelIterator(manyCore0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertNotNull(modelIterator0);
      assertEquals(0, statisticsSolverArray0.length);
      
      modelIterator0.setTimeout((-2959));
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertEquals(0, statisticsSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(abstractMinimalModelArray0);
      assertNotNull(manyCore0);
      assertEquals(0, abstractMinimalModelArray0.length);
      
      int int0 = manyCore0.nextFreeVarId(false);
      assertEquals((-1), int0);
      assertEquals(0, abstractMinimalModelArray0.length);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertNotNull(dimacsStringSolver0);
      
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0, (ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "P5LWOeG7";
      stringArray0[2] = "Not supported yet in ManyCore";
      stringArray0[3] = "";
      ManyCore<DimacsStringSolver> manyCore1 = null;
      try {
        manyCore1 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[0];
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(true, statisticsSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, statisticsSolverArray0.length);
      
      int int0 = manyCore0.newVar(0);
      assertEquals(0, int0);
      assertEquals(0, statisticsSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[0];
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(true, statisticsSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, statisticsSolverArray0.length);
      
      ModelIterator modelIterator0 = new ModelIterator(manyCore0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertNotNull(modelIterator0);
      assertEquals(0, statisticsSolverArray0.length);
      
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      IConstr iConstr0 = modelIterator0.addClause(vecInt0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertNotNull(iConstr0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, statisticsSolverArray0.length);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[0];
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(true, statisticsSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, statisticsSolverArray0.length);
      
      IConstr iConstr0 = manyCore0.addAtLeast((IVecInt) null, 1);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertNotNull(iConstr0);
      assertEquals(0, statisticsSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1285);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertNotNull(dimacsStringSolver0);
      
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(true, dimacsStringSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, false, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.isDBSimplificationAllowed();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[0];
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(true, statisticsSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, statisticsSolverArray0.length);
      
      ModelIterator modelIterator0 = new ModelIterator(manyCore0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertNotNull(modelIterator0);
      assertEquals(0, statisticsSolverArray0.length);
      
      // Undeclared exception!
      try { 
        modelIterator0.isSatisfiable();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ModelIterator[] modelIteratorArray0 = new ModelIterator[0];
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(false, modelIteratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, modelIteratorArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.primeImplicant(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(abstractMinimalModelArray0);
      assertNotNull(manyCore0);
      assertEquals(0, abstractMinimalModelArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.modelWithInternalVariables();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[3];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(46);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertNotNull(dimacsOutputSolver0);
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[1] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[2] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(dimacsOutputSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(3, dimacsOutputSolverArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LexicoDecorator<Minimal4CardinalityModel>[] lexicoDecoratorArray0 = (LexicoDecorator<Minimal4CardinalityModel>[]) Array.newInstance(LexicoDecorator.class, 0);
      ManyCore<LexicoDecorator<Minimal4CardinalityModel>> manyCore0 = new ManyCore<LexicoDecorator<Minimal4CardinalityModel>>(lexicoDecoratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, lexicoDecoratorArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.primeImplicant();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[0];
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(false, dimacsOutputSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, dimacsOutputSolverArray0.length);
      
      ModelIterator modelIterator0 = new ModelIterator(manyCore0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertNotNull(modelIterator0);
      assertEquals(0, dimacsOutputSolverArray0.length);
      
      // Undeclared exception!
      try { 
        modelIterator0.getSolvingEngine();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported yet in ManyCore
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(false, subModelIteratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, subModelIteratorArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.newVar();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[9];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertNotNull(dimacsStringSolver0);
      
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      dimacsStringSolverArray0[2] = dimacsStringSolverArray0[1];
      dimacsStringSolverArray0[3] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[4] = dimacsStringSolverArray0[1];
      dimacsStringSolverArray0[5] = dimacsStringSolverArray0[3];
      dimacsStringSolverArray0[6] = dimacsStringSolverArray0[2];
      dimacsStringSolverArray0[7] = dimacsStringSolverArray0[3];
      dimacsStringSolverArray0[8] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(stringArray0, dimacsStringSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(7, stringArray0.length);
      assertEquals(9, dimacsStringSolverArray0.length);
      
      long long0 = manyCore0.getTimeoutMs();
      assertEquals(0L, long0);
      assertEquals(7, stringArray0.length);
      assertEquals(9, dimacsStringSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<OptToSatAdapter>(stringArray0, optToSatAdapterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ModelIterator[] modelIteratorArray0 = new ModelIterator[0];
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(false, modelIteratorArray0);
      try { 
        manyCore0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(abstractMinimalModelArray0);
      boolean boolean0 = false;
      manyCore0.nextFreeVarId(false);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0, (ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "P5LWOeG7";
      stringArray0[2] = "Not supported yet in ManyCore";
      stringArray0[3] = "";
      ManyCore<DimacsStringSolver> manyCore1 = null;
      try {
        manyCore1 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(false, subModelIteratorArray0);
      // Undeclared exception!
      try { 
        manyCore0.discardCurrentModel();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[0];
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(true, statisticsSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.findModel((IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }
}
