/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:31:21 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.core.ILits;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minimal4InclusionModel_ESTest extends Minimal4InclusionModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[1];
      ManyCore<OptToSatAdapter> manyCore0 = (ManyCore<OptToSatAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(manyCore0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(manyCore0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((int[]) null).when(manyCore0).model();
      doReturn(intArray0).when(manyCore0).modelWithInternalVariables();
      doReturn(0, 0).when(manyCore0).nVars();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(manyCore0);
      int[] intArray1 = minimal4InclusionModel0.model();
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      ManyCore<OptToSatAdapter> manyCore0 = (ManyCore<OptToSatAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(manyCore0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null, (IConstr) null).when(manyCore0).discardCurrentModel();
      doReturn(true, true, false).when(manyCore0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(manyCore0).modelWithInternalVariables();
      doReturn(48, 48, 0).when(manyCore0).nVars();
      FullClauseSelectorSolver<ManyCore<OptToSatAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<OptToSatAdapter>>(manyCore0, false);
      VecInt vecInt0 = new VecInt(48, 214);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      SolutionCounter solutionCounter0 = new SolutionCounter(subModelIterator0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(solutionCounter0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(singleSolutionDetector0);
      int[] intArray1 = minimal4InclusionModel0.model();
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[0];
      ManyCore<OptToSatAdapter> manyCore0 = (ManyCore<OptToSatAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(manyCore0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null, (IConstr) null).when(manyCore0).discardCurrentModel();
      doReturn(true, true, false, false).when(manyCore0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(manyCore0).modelWithInternalVariables();
      doReturn(48, 0).when(manyCore0).nVars();
      FullClauseSelectorSolver<ManyCore<OptToSatAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<OptToSatAdapter>>(manyCore0, false);
      VecInt vecInt0 = new VecInt(0, 214);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      SolutionCounter solutionCounter0 = new SolutionCounter(subModelIterator0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(solutionCounter0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(singleSolutionDetector0);
      minimal4InclusionModel0.modelWithInternalVariables();
      boolean boolean0 = minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt(0, 0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, vecInt0, checkMUSSolutionListener0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      ManyCore<OptToSatAdapter> manyCore0 = (ManyCore<OptToSatAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(manyCore0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(manyCore0).discardCurrentModel();
      doReturn(true, false, true, false).when(manyCore0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(manyCore0).modelWithInternalVariables();
      FullClauseSelectorSolver<ManyCore<OptToSatAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<OptToSatAdapter>>(manyCore0, false);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.clone();
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, iVecInt0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(subModelIterator0, vecInt0);
      minimal4InclusionModel0.model();
      int[] intArray1 = minimal4InclusionModel0.model();
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      IVecInt iVecInt0 = VecInt.EMPTY;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, iVecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt(0, 0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, vecInt0, checkMUSSolutionListener0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((-895)).when(iSolver0).nVars();
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      minimal4InclusionModel0.isSatisfiable(iVecInt0);
      int[] intArray0 = minimal4InclusionModel0.modelWithInternalVariables();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[0];
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iLits0).nVars();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 4).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 0);
      ManyCore<OptToSatAdapter> manyCore0 = (ManyCore<OptToSatAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, minWatchCard0).when(manyCore0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, minWatchCard0, minWatchCard0, minWatchCard0).when(manyCore0).discardCurrentModel();
      doReturn(true, true, true, false).when(manyCore0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(manyCore0).modelWithInternalVariables();
      doReturn(48, 0).when(manyCore0).nVars();
      doReturn(false).when(manyCore0).removeSubsumedConstr(any(org.sat4j.specs.IConstr.class));
      FullClauseSelectorSolver<ManyCore<OptToSatAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<OptToSatAdapter>>(manyCore0, false);
      VecInt vecInt0 = new VecInt(0, 214);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      SolutionCounter solutionCounter0 = new SolutionCounter(subModelIterator0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(solutionCounter0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(singleSolutionDetector0);
      int[] intArray1 = minimal4InclusionModel0.modelWithInternalVariables();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[9];
      intArray1[0] = 3612;
      intArray1[1] = 0;
      intArray1[6] = 48;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = (-5559);
      intArray1[8] = 0;
      int[] intArray2 = new int[1];
      intArray2[0] = (-5559);
      ManyCore<OptToSatAdapter> manyCore0 = (ManyCore<OptToSatAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(manyCore0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, true, true, true, true).when(manyCore0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray1, (Object) intArray2).when(manyCore0).modelWithInternalVariables();
      doReturn(48, 0, 3612, 0).when(manyCore0).nVars();
      FullClauseSelectorSolver<ManyCore<OptToSatAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<OptToSatAdapter>>(manyCore0, false);
      VecInt vecInt0 = new VecInt(0, 214);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      SolutionCounter solutionCounter0 = new SolutionCounter(subModelIterator0);
      solutionCounter0.nVars();
      solutionCounter0.modelWithInternalVariables();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(singleSolutionDetector0);
      // Undeclared exception!
      minimal4InclusionModel0.modelWithInternalVariables();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      ManyCore<OptToSatAdapter> manyCore0 = (ManyCore<OptToSatAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(manyCore0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null).when(manyCore0).discardCurrentModel();
      doReturn(true, false).when(manyCore0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(manyCore0).modelWithInternalVariables();
      FullClauseSelectorSolver<ManyCore<OptToSatAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<OptToSatAdapter>>(manyCore0, false);
      VecInt vecInt0 = new VecInt();
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(subModelIterator0, vecInt0);
      int[] intArray1 = minimal4InclusionModel0.modelWithInternalVariables();
      assertSame(intArray0, intArray1);
  }
}
