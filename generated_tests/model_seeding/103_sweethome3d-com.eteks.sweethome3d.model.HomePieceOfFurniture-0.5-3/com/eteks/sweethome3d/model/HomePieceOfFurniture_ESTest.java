/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 11:31:21 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DoorOrWindow;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.URL;
import java.util.Comparator;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      
      Integer integer0 = new Integer(605525547);
      assertEquals(605525547, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        homeLight0.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow0.setY(0.3926991F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      boolean boolean0 = homeDoorOrWindow1.isBottomLeftPointAt((-577.6907F), (-577.6907F), (-1181.642F));
      assertFalse(boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setHeight((-3680.3F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNotNull(homeLight0);
      
      homeLight0.setAngle((-958.41376F));
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2.9135947F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      
      float float0 = homeLight0.getAngle();
      assertEquals(2.9135947F, float0, 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2.9135947F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      
      boolean boolean0 = homeLight0.isTopLeftPointAt((-958.41376F), 0.0F, 0.0F);
      assertFalse(boolean0);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2.9135947F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      
      // Undeclared exception!
      try { 
        homeLight0.setDepth(2.9135947F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.HomeTexture", (Content) null, (Content) null, 1.5410658F, 0.0F, 1.5410658F, 0.0F, false, (Integer) null, (float[][]) null, false, 1204.9766F, true);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.7705329F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture1.setModelMirrored(false);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.7705329F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture1.setElevation(1204.9766F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.7705329F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(1204.9766F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(1204.9766F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setWidth(2.0F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      float float1 = homeLight0.getAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      homeLight0.setAngle(1.5410658F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.5410658F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-255.36096F), (-460.47623F), (-1447.733F), 1.0F, (-1.0F));
      assertEquals((-460.47623F), sash0.getYAxis(), 0.01F);
      assertEquals((-1447.733F), sash0.getWidth(), 0.01F);
      assertEquals((-255.36096F), sash0.getXAxis(), 0.01F);
      assertEquals(1.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash(562.2F, (-460.47623F), 0.5F, 1786.9994F, (-1447.733F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-460.47623F), sash1.getYAxis(), 0.01F);
      assertEquals(1786.9994F, sash1.getStartAngle(), 0.01F);
      assertEquals(0.5F, sash1.getWidth(), 0.01F);
      assertEquals((-1447.733F), sash1.getEndAngle(), 0.01F);
      assertEquals(562.2F, sash1.getXAxis(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(382.666F, 470.0973F, (-1.0F), (-1.0F), (-1.0F));
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals((-1.0F), sash2.getWidth(), 0.01F);
      assertEquals(470.0973F, sash2.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash2.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash2.getEndAngle(), 0.01F);
      assertEquals(382.666F, sash2.getXAxis(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "~%C~~QGb.ZW", "T`j}Y<xx8:", (Content) null, (Content) null, (Content) null, (-1349L), 1786.9994F, (-1560.567F), (-1349L), false, 1786.9994F, 562.2F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      float float0 = homeDoorOrWindow0.getGroundElevation();
      assertEquals((-1349.0F), float0, 0.01F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~QGb.ZW");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.WIDTH;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.move(0.3926991F, 0.3926991F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      
      int int0 = Integer.min(720, 9);
      assertEquals(9, int0);
      
      homeLight0.setNameYOffset((-1640.5F));
      assertEquals((-1640.5F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      
      TextStyle textStyle0 = new TextStyle(923.07733F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals(923.07733F, textStyle0.getFontSize(), 0.01F);
      assertNotNull(textStyle0);
      
      boolean boolean0 = homeLight0.isPointAt(0.0F, 720, 225.90147F);
      assertFalse(boolean0);
      assertEquals((-1640.5F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1640.5F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(918L);
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8d", "T`j}Y<xx8d", "T`j}Y<xx8d", (Content) null, (Content) null, (Content) null, 918L, 918L, 918L, 918L, false, 918L, 918L, sashArray0, (float[][]) null, "T`j}Y<xx8d", false, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((byte) (-28), bigDecimal1.byteValue());
      assertEquals((short) (-9244), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("T`j}Y<xx8d");
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setNameAngle(2841.0F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1.0002412F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      boolean boolean0 = homeLight0.isNameCenterPointAt(2841.0F, 2841.0F, 2841.0F);
      assertTrue(boolean0);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1.0002412F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.move(0.3926991F, 0.3926991F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      int int0 = Integer.min(2892, 2892);
      assertEquals(2892, int0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.3926991F, homeLight1.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight0.isPointAt((-621.0F), (-1026.2743F), 0.0F);
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.3926991F, homeLight1.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.3926991F, homeLight2.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getDescription());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      HomeLight homeLight3 = homeLight2.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.3926991F, homeLight1.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.3926991F, homeLight2.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getDescription());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight3.isModelMirrored());
      assertNull(homeLight3.getColor());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isNameVisible());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getCatalogId());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getName());
      assertNull(homeLight3.getDescription());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getX(), 0.01F);
      assertNotNull(homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      
      boolean boolean1 = homeLight0.containsPoint(2903.7988F, 0.0F, (-1.0F));
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertTrue(boolean1 == boolean0);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      
      // Undeclared exception!
      try { 
        homeLight3.setDepth((-3008.9F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1340L));
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short) (-1340), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash sash0 = new Sash(562.2F, (-458.25803F), (-1560.567F), (-1340L), (-1447.733F));
      assertEquals(562.2F, sash0.getXAxis(), 0.01F);
      assertEquals((-1447.733F), sash0.getEndAngle(), 0.01F);
      assertEquals((-1560.567F), sash0.getWidth(), 0.01F);
      assertEquals((-1340.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-458.25803F), sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash((-458.25803F), 470.0973F, (-1560.567F), (-1560.567F), (-458.25803F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-458.25803F), sash1.getEndAngle(), 0.01F);
      assertEquals((-1560.567F), sash1.getStartAngle(), 0.01F);
      assertEquals((-1560.567F), sash1.getWidth(), 0.01F);
      assertEquals((-458.25803F), sash1.getXAxis(), 0.01F);
      assertEquals(470.0973F, sash1.getYAxis(), 0.01F);
      assertNotNull(sash1);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      System.setCurrentTimeMillis(604800000L);
      Integer integer1 = new Integer(33);
      assertEquals(33, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = integer1.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      assertFalse(integer1.equals((Object)integer0));
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("T`j}Y<xx8:", (Content) null, (Content) null, (-1340L), 5178.24F, (-1447.733F), (-1101.3732F), false, integer1, (float[][]) null, false, 1.0F, false);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setWidth((-1447.733F));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      homePieceOfFurniture1.setNameVisible(true);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setHeight((-1737.772F));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1737.772F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      BigDecimal bigDecimal1 = homePieceOfFurniture1.getPrice();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1737.772F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(bigDecimal1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      int int0 = Float.floatToIntBits(2574.8342F);
      assertEquals(1159785817, int0);
      
      homePieceOfFurniture1.setShininess((Float) 2574.8342F);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1737.772F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(2574.8342F, homePieceOfFurniture1.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      TextStyle textStyle0 = new TextStyle(734.8F);
      assertFalse(textStyle0.isItalic());
      assertEquals(734.8F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(false);
      assertFalse(textStyle0.isItalic());
      assertEquals(734.8F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertEquals(734.8F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertFalse(textStyle1.isBold());
      assertNotNull(textStyle1);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      
      TextStyle textStyle2 = textStyle1.deriveItalicStyle(true);
      assertFalse(textStyle2.equals((Object)textStyle0));
      assertFalse(textStyle2.equals((Object)textStyle1));
      assertFalse(textStyle0.isItalic());
      assertEquals(734.8F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertEquals(734.8F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertFalse(textStyle1.isBold());
      assertFalse(textStyle2.isBold());
      assertTrue(textStyle2.isItalic());
      assertEquals(734.8F, textStyle2.getFontSize(), 0.01F);
      assertNotNull(textStyle2);
      assertSame(textStyle0, textStyle1);
      assertNotSame(textStyle0, textStyle2);
      assertNotSame(textStyle1, textStyle2);
      assertSame(textStyle1, textStyle0);
      assertNotSame(textStyle2, textStyle0);
      assertNotSame(textStyle2, textStyle1);
      
      TextStyle textStyle3 = textStyle2.deriveItalicStyle(true);
      assertFalse(textStyle0.equals((Object)textStyle2));
      assertFalse(textStyle1.equals((Object)textStyle2));
      assertFalse(textStyle2.equals((Object)textStyle0));
      assertFalse(textStyle2.equals((Object)textStyle1));
      assertFalse(textStyle3.equals((Object)textStyle1));
      assertFalse(textStyle3.equals((Object)textStyle0));
      assertFalse(textStyle0.isItalic());
      assertEquals(734.8F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertEquals(734.8F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertFalse(textStyle1.isBold());
      assertFalse(textStyle2.isBold());
      assertTrue(textStyle2.isItalic());
      assertEquals(734.8F, textStyle2.getFontSize(), 0.01F);
      assertFalse(textStyle3.isBold());
      assertEquals(734.8F, textStyle3.getFontSize(), 0.01F);
      assertTrue(textStyle3.isItalic());
      assertNotNull(textStyle3);
      assertNotSame(textStyle0, textStyle3);
      assertSame(textStyle0, textStyle1);
      assertNotSame(textStyle0, textStyle2);
      assertNotSame(textStyle1, textStyle3);
      assertSame(textStyle1, textStyle0);
      assertNotSame(textStyle1, textStyle2);
      assertSame(textStyle2, textStyle3);
      assertNotSame(textStyle2, textStyle0);
      assertNotSame(textStyle2, textStyle1);
      assertSame(textStyle3, textStyle2);
      assertNotSame(textStyle3, textStyle1);
      assertNotSame(textStyle3, textStyle0);
      
      float float0 = homeLight0.getNameXOffset();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = homeLight0.isPointAt(1.0F, 1.0F, 1909.4213F);
      assertTrue(boolean0);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean1 = homeLight0.isModelMirrored();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setName((String) null);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.HomeTexture", (Content) null, (Content) null, 1.5410658F, 0.0F, 1.5410658F, 0.0F, false, (Integer) null, (float[][]) null, false, 1204.9766F, true);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNotNull(homePieceOfFurniture0);
      
      homeLight0.setElevation(1204.9766F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(1204.9766F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1204.9766F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      homePieceOfFurniture0.setWidth(2.0F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      
      boolean boolean0 = homeLight0.isTopRightPointAt(1204.9766F, 1.5410658F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(1204.9766F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1204.9766F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow0.setY(0.3926991F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      boolean boolean0 = homeDoorOrWindow0.isTopLeftPointAt((-51.114F), (-1181.642F), 3034.4575F);
      assertFalse(boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("20!)w7<SHeJ8 4_ q", propertyChangeListener0);
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeDoorOrWindow0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      boolean boolean1 = homeDoorOrWindow1.isBottomLeftPointAt((-577.6907F), (-577.6907F), (-1181.642F));
      assertFalse(boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      boolean boolean2 = homeDoorOrWindow0.isBottomRightPointAt(0.3926991F, 489.0F, (-1160.833F));
      assertFalse(boolean2);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setHeight((-3680.3F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1010.4F);
      floatArray1[2] = 2162.3F;
      floatArray1[3] = (-1556.952F);
      floatArray1[4] = 2162.3F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 2815.0F;
      floatArray2[1] = 2309.6797F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = (-2483.4019F);
      floatArray2[4] = 2162.3F;
      floatArray2[5] = 0.0F;
      floatArray2[6] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (-1010.4F);
      floatArray3[1] = (-1010.4F);
      floatArray3[2] = 2815.0F;
      floatArray3[3] = (-2483.4019F);
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("jar", "com.eteks.sweethome3d.model.HomeDoorOrWindow", "", (Content) null, (Content) null, (Content) null, 2309.6797F, 2309.6797F, 3.4028235E38F, (-1010.4F), false, 0.0F, 3.4028235E38F, sashArray0, floatArray0, "D_73Hj-", false, true, false, bigDecimal0, bigDecimal0, "");
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      Content content0 = catalogDoorOrWindow0.getIcon();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNull(content0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      LightSource[] lightSourceArray0 = new LightSource[9];
      LightSource lightSource0 = new LightSource((-2483.4019F), 0.0F, (-2483.4019F), 0);
      assertEquals(0, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals((-2483.4019F), lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals((-2483.4019F), lightSource0.getZ(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1397.0278F), (-866.0F), 2162.3F, 0);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(2162.3F, lightSource1.getZ(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-1397.0278F), lightSource1.getX(), 0.01F);
      assertEquals((-866.0F), lightSource1.getY(), 0.01F);
      assertEquals(0, lightSource1.getColor());
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(2259.0F, 0.0F, 2162.3F, 0);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertNull(lightSource2.getDiameter());
      assertEquals(2162.3F, lightSource2.getZ(), 0.01F);
      assertEquals(0.0F, lightSource2.getY(), 0.01F);
      assertEquals(0, lightSource2.getColor());
      assertEquals(2259.0F, lightSource2.getX(), 0.01F);
      assertNotNull(lightSource2);
      
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource((-1010.4F), 0, 687.0F, (-238));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertEquals((-1010.4F), lightSource3.getX(), 0.01F);
      assertEquals(0.0F, lightSource3.getY(), 0.01F);
      assertEquals((-238), lightSource3.getColor());
      assertEquals(687.0F, lightSource3.getZ(), 0.01F);
      assertNull(lightSource3.getDiameter());
      assertNotNull(lightSource3);
      
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(3474.6926F, 0, (-1025.8F), 0);
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertEquals((-1025.8F), lightSource4.getZ(), 0.01F);
      assertEquals(0, lightSource4.getColor());
      assertEquals(3474.6926F, lightSource4.getX(), 0.01F);
      assertNull(lightSource4.getDiameter());
      assertEquals(0.0F, lightSource4.getY(), 0.01F);
      assertNotNull(lightSource4);
      
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(1.0F, 0.0F, 1.0F, 2);
      assertFalse(lightSource5.equals((Object)lightSource2));
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertEquals(1.0F, lightSource5.getZ(), 0.01F);
      assertEquals(2, lightSource5.getColor());
      assertNull(lightSource5.getDiameter());
      assertEquals(1.0F, lightSource5.getX(), 0.01F);
      assertEquals(0.0F, lightSource5.getY(), 0.01F);
      assertNotNull(lightSource5);
      
      lightSourceArray0[5] = lightSource5;
      Float float0 = new Float(2193.917F);
      assertEquals(2193.917F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource lightSource6 = new LightSource((-756.0F), (-2483.4019F), (-1010.4F), 2, float0);
      assertFalse(lightSource6.equals((Object)lightSource1));
      assertFalse(lightSource6.equals((Object)lightSource4));
      assertFalse(lightSource6.equals((Object)lightSource2));
      assertFalse(lightSource6.equals((Object)lightSource5));
      assertFalse(lightSource6.equals((Object)lightSource0));
      assertFalse(lightSource6.equals((Object)lightSource3));
      assertEquals((-756.0F), lightSource6.getX(), 0.01F);
      assertEquals(2, lightSource6.getColor());
      assertEquals((-2483.4019F), lightSource6.getY(), 0.01F);
      assertEquals((-1010.4F), lightSource6.getZ(), 0.01F);
      assertEquals(2193.917F, lightSource6.getDiameter(), 0.01F);
      assertNotNull(lightSource6);
      
      lightSourceArray0[6] = lightSource6;
      Float float1 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      LightSource lightSource7 = new LightSource(2309.6797F, (-238), 2162.3F, (-238), float1);
      assertFalse(lightSource7.equals((Object)lightSource4));
      assertFalse(lightSource7.equals((Object)lightSource6));
      assertFalse(lightSource7.equals((Object)lightSource1));
      assertFalse(lightSource7.equals((Object)lightSource5));
      assertFalse(lightSource7.equals((Object)lightSource2));
      assertFalse(lightSource7.equals((Object)lightSource3));
      assertFalse(lightSource7.equals((Object)lightSource0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, lightSource7.getDiameter(), 0.01F);
      assertEquals(2309.6797F, lightSource7.getX(), 0.01F);
      assertEquals((-238), lightSource7.getColor());
      assertEquals(2162.3F, lightSource7.getZ(), 0.01F);
      assertEquals((-238.0F), lightSource7.getY(), 0.01F);
      assertNotNull(lightSource7);
      
      lightSourceArray0[7] = lightSource7;
      Float float2 = new Float((-1010.4F));
      assertEquals((-1010.4F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      LightSource lightSource8 = new LightSource((-6673.7344F), 2309.6797F, 2259.0F, (-238), float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertFalse(lightSource8.equals((Object)lightSource7));
      assertFalse(lightSource8.equals((Object)lightSource4));
      assertFalse(lightSource8.equals((Object)lightSource0));
      assertFalse(lightSource8.equals((Object)lightSource6));
      assertFalse(lightSource8.equals((Object)lightSource2));
      assertFalse(lightSource8.equals((Object)lightSource5));
      assertFalse(lightSource8.equals((Object)lightSource3));
      assertFalse(lightSource8.equals((Object)lightSource1));
      assertEquals((-6673.7344F), lightSource8.getX(), 0.01F);
      assertEquals(2259.0F, lightSource8.getZ(), 0.01F);
      assertEquals(2309.6797F, lightSource8.getY(), 0.01F);
      assertEquals((-238), lightSource8.getColor());
      assertEquals((-1010.4F), lightSource8.getDiameter(), 0.01F);
      assertNotNull(lightSource8);
      
      lightSourceArray0[8] = lightSource8;
      CatalogLight catalogLight0 = new CatalogLight("", "A40", "com.eteks.sweethome3d.model.HomeDoorOrWindow", (Content) null, (Content) null, (Content) null, (-756.0F), 687.0F, 0.0F, 1813.947F, false, lightSourceArray0, floatArray0, "xFsVIl6]nM^", true, false, true, bigDecimal0, bigDecimal0);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertEquals("A40", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(catalogLight0);
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      Content content1 = catalogLight0.getPlanIcon();
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertEquals("A40", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(content1);
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      Content content2 = catalogDoorOrWindow0.getModel();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNull(content2);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float float3 = catalogLight0.getWidth();
      assertEquals((-756.0F), float3, 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertEquals("A40", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      Integer integer0 = new Integer(1727);
      assertEquals(1727, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("jar", (Content) null, (Content) null, (-5977.9277F), (-1010.4F), 3474.6926F, 2815.0F, false, 0.0F, 1511.298F, sashArray0, integer0, floatArray0, true, 2162.3F, true);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertEquals(1727, (int)catalogDoorOrWindow1.getColor());
      assertEquals(1511.298F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow1.getName());
      assertEquals(2162.3F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getDescription());
      assertEquals((-1010.4F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertEquals((-5977.9277F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(2815.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNull(catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(3474.6926F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isBackFaceShown());
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float float4 = catalogDoorOrWindow1.getDepth();
      assertEquals((-1010.4F), float4, 0.01F);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNotEquals(float4, float3, 0.01F);
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertEquals(1727, (int)catalogDoorOrWindow1.getColor());
      assertEquals(1511.298F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow1.getName());
      assertEquals(2162.3F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getDescription());
      assertEquals((-1010.4F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertEquals((-5977.9277F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(2815.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNull(catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(3474.6926F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isBackFaceShown());
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float float5 = catalogDoorOrWindow0.getHeight();
      assertEquals(3.4028235E38F, float5, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float float6 = catalogLight0.getElevation();
      assertEquals(1813.947F, float6, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertEquals("A40", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      boolean boolean0 = catalogLight0.isMovable();
      assertFalse(boolean0);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertEquals("A40", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      boolean boolean1 = catalogLight0.isDoorOrWindow();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertEquals("A40", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      Integer integer1 = catalogDoorOrWindow0.getColor();
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNull(integer1);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float[][] floatArray4 = catalogDoorOrWindow0.getModelRotation();
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNotNull(floatArray4);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      String string0 = catalogDoorOrWindow1.getStaircaseCutOutShape();
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertEquals(1727, (int)catalogDoorOrWindow1.getColor());
      assertEquals(1511.298F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow1.getName());
      assertEquals(2162.3F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getDescription());
      assertEquals((-1010.4F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertEquals((-5977.9277F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(2815.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNull(catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(3474.6926F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isBackFaceShown());
      assertNull(string0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, "'p_LVX{I(vN)", "A40", (Content) null, (Content) null, 2462.374F, 687.0F, (-1145.16F), 0.0F, true, true, floatArray4, "", false, bigDecimal0, bigDecimal0);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1145.16F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(687.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("A40", catalogPieceOfFurniture0.getDescription());
      assertEquals(2462.374F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("'p_LVX{I(vN)", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean2 = catalogPieceOfFurniture0.isBackFaceShown();
      assertFalse(boolean2);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1145.16F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(687.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("A40", catalogPieceOfFurniture0.getDescription());
      assertEquals(2462.374F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("'p_LVX{I(vN)", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean3 = catalogPieceOfFurniture0.isResizable();
      assertFalse(boolean3);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1145.16F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(687.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("A40", catalogPieceOfFurniture0.getDescription());
      assertEquals(2462.374F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("'p_LVX{I(vN)", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean4 = catalogDoorOrWindow0.isDeformable();
      assertTrue(boolean4);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean5 = catalogLight0.isTexturable();
      assertTrue(boolean5);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertEquals("A40", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotSame(floatArray0, floatArray4);
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      BigDecimal bigDecimal1 = catalogDoorOrWindow0.getPrice();
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNotNull(bigDecimal1);
      assertNotSame(floatArray0, floatArray4);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("8yleW<<fG3>chK0", "jar", (String) null, (Content) null, (Content) null, (Content) null, 1511.298F, 0.0F, 2.0F, 0.0F, false, floatArray4, "com.eteks.sweethome3d.model.CatalogTexture", false, false, false, bigDecimal1, bigDecimal2);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNotNull(catalogPieceOfFurniture1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      BigDecimal bigDecimal3 = catalogPieceOfFurniture1.getValueAddedTaxPercentage();
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNotNull(bigDecimal3);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal3);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal3);
      assertNotSame(catalogPieceOfFurniture1, catalogPieceOfFurniture0);
      assertSame(bigDecimal3, bigDecimal2);
      assertSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal3, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      String string1 = catalogPieceOfFurniture1.getCurrency();
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNull(string1);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal3);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal3);
      assertNotSame(catalogPieceOfFurniture1, catalogPieceOfFurniture0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture1);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1511.298F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("jar", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(755.649F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals("8yleW<<fG3>chK0", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNotNull(homePieceOfFurniture0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      float float7 = homePieceOfFurniture0.getHeight();
      assertEquals(2.0F, float7, 0.01F);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1511.298F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("jar", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(755.649F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals("8yleW<<fG3>chK0", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal3);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal3);
      assertNotSame(catalogPieceOfFurniture1, catalogPieceOfFurniture0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "com.eteks.sweethome3d.model.CatalogPieceOfFurniture");
      assertFalse(boolean0);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      homeLight0.setMovable(true);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeLight homeLight1 = (HomeLight)homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      assertEquals(RoundingMode.HALF_UP, roundingMode0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal1.byteValue());
      assertEquals((short) (-1349), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "F", "F", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 2.0F, 2.0F, false, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", false, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNotNull(sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNotNull(homeDoorOrWindow1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow1.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow1.containsPoint(2.0F, (-52.83F), (-52.83F));
      assertFalse(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = homeDoorOrWindow1.getColor();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(integer0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow1.setColor((Integer) null);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal3 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertTrue(bigDecimal3.equals((Object)bigDecimal2));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((short) (-15207), bigDecimal3.shortValue());
      assertEquals((byte) (-103), bigDecimal3.byteValue());
      assertNotNull(bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertEquals(3, sashArray0.length);
      
      boolean boolean1 = homeDoorOrWindow1.isMovable();
      assertFalse(boolean1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean1 == boolean0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow2.getCatalogId());
      assertEquals("F", homeDoorOrWindow2.getName());
      assertEquals("F", homeDoorOrWindow2.getDescription());
      assertEquals(791.6026F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isMovable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-1349.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getColor());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow2.isResizable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.HomeTexture", (Content) null, (Content) null, 1.5410658F, 0.0F, 1.5410658F, 0.0F, false, (Integer) null, (float[][]) null, false, 1204.9766F, true);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(1.5410658F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.7705329F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture1.setModelMirrored(false);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(1.5410658F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.7705329F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homeLight0.setNameVisible(false);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      Level level0 = homePieceOfFurniture1.getLevel();
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(1.5410658F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.7705329F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(level0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      boolean boolean1 = homePieceOfFurniture1.isTopRightPointAt(1096.0F, 1096.0F, 0.94361264F);
      assertFalse(boolean1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(boolean1 == boolean0);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(1.5410658F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.7705329F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture1.setModelMirrored(true);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(1.5410658F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.7705329F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      homeLight1.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Y", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = homeLight0.getHeight();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      
      float float1 = homeLight0.getAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(float1, float0, 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      float float2 = homeLight0.getNameYOffset();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(bigDecimal0);
      
      boolean boolean0 = homeLight0.isNameVisible();
      assertFalse(boolean0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.HEIGHT;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getNameAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      Integer integer0 = new Integer(605525547);
      assertEquals(605525547, (int)integer0);
      assertNotNull(integer0);
      
      homeLight0.setDescription("Y");
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean0 = homeLight0.isPointAt(0.3926991F, 0.07982141F, (-2383.374F));
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Y", homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = homeLight0.containsPoint((-1147.66F), 605525547, 0.0F);
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      
      Content content0 = homeLight0.getPlanIcon();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean2 = homeLight1.intersectsRectangle(3767.2036F, (-2383.374F), (-2383.374F), 0.3926991F);
      assertTrue(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Y", homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":u#a'zJA";
      stringArray0[1] = "5j5";
      stringArray0[2] = "";
      stringArray0[3] = "{.>i(a7Ss%T";
      stringArray0[4] = "5j5";
      stringArray0[5] = "";
      stringArray0[6] = "=EUsSi|JtT^";
      stringArray0[7] = "5j5";
      Long long0 = new Long(1660L);
      assertEquals(1660L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) 1660L);
      assertEquals(1660.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      sashArray0[5] = sash0;
      sashArray0[6] = sash0;
      sashArray0[7] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-3087.34F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 1660L;
      floatArray1[7] = (-3087.34F);
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (-3087.34F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 1660L;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-3087.34F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = (float) 1660L;
      floatArray4[6] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 1660L;
      floatArray6[3] = 0.0F;
      floatArray6[4] = 0.0F;
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "5j5", "", "5j5", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 1660L, 0.0F, (-3087.34F), 1660L, false, 0.0F, 0.0F, sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "3a>sKSS8RV8^+B3bh]S");
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow(":u#a'zJA", "(xWiKoGrB@v3:.*bBI0", "Ue.1<5vqjo;\",", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-2040.341F), sashArray0, floatArray0, "", false, (BigDecimal) null, (BigDecimal) null);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow1.getSashes();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNotNull(sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(sashArray1, sashArray0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(8, sashArray1.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      float float2 = homeDoorOrWindow0.getY();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals(float2, float1, 0.01F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = (-2397.0F);
      boolean boolean2 = homeLight1.isBottomLeftPointAt(33, 33, (-2397.0F));
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = homeLight1.isNameVisible();
      assertFalse(boolean3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean4 = homeLight1.isBottomLeftPointAt(1.0F, 1.0F, 1.0F);
      assertFalse(boolean4);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt(33, 0.0F, 0.5F);
      assertFalse(boolean0);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float1 = homeLight1.getAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(float1, float0, 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("?/3G7R,w", propertyChangeListener0);
      assertEquals("?/3G7R,w", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Level level0 = new Level((String) null, 0.0F, (-7852.5F), 0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-7852.5F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      float float2 = level0.getElevation();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-7852.5F), level0.getFloorThickness(), 0.01F);
      
      float float3 = level0.getHeight();
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-7852.5F), level0.getFloorThickness(), 0.01F);
      
      homeLight1.setLevel(level0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-7852.5F), level0.getFloorThickness(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals("?/3G7R,w", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?/3G7R,w");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      homeLight0.setAngle(0.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      
      BigDecimal bigDecimal1 = homeLight1.getPrice();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNull(bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean2 = homeLight0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(918L);
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8d", "~%C~~Q7Gb.ZW", "T`j}Y<xx8d", (Content) null, (Content) null, (Content) null, 918L, 918L, 918L, 918L, false, 918L, 918L, sashArray0, (float[][]) null, "~%C~~Q7Gb.ZW", false, bigDecimal0, bigDecimal0);
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((short) (-9244), bigDecimal1.shortValue());
      assertEquals((byte) (-28), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~Q7Gb.ZW");
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isBottomRightPointAt(1.0F, 918L, 918L);
      assertFalse(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(918.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(459.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(918.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(918.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(918.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(459.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(918.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(918.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertEquals(918.0F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(918.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow2.getDescription());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(918.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(918.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow2.getCatalogId());
      assertEquals(459.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow2.getName());
      assertEquals(918.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getShininess());
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow2.getPriceValueAddedTaxIncluded();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(918.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(459.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(918.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(918.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertEquals(918.0F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(918.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow2.getDescription());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(918.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(918.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow2.getCatalogId());
      assertEquals(459.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow2.getName());
      assertEquals(918.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals((byte)122, bigDecimal2.byteValue());
      assertEquals((short) (-8326), bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      // Undeclared exception!
      try { 
        homeLight0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt(0.0F, 0.0F, (-1147.658F));
      assertFalse(boolean0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      
      float float1 = homeLight0.getGroundElevation();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      
      boolean boolean1 = homeLight0.isBottomRightPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isTexturable());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean2 = homeLight0.isMovable();
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      BigDecimal bigDecimal0 = homeLight1.getPriceValueAddedTaxIncluded();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isTexturable());
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = homeLight1.isBottomLeftPointAt(189.0F, (-2397.0F), 189.0F);
      assertFalse(boolean3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setElevation((-2397.0F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2397.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2397.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      BigDecimal bigDecimal1 = new BigDecimal(33);
      assertEquals((short)33, bigDecimal1.shortValue());
      assertEquals((byte)33, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      float float0 = homeLight1.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2397.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2397.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setAngle((-3964.61F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2397.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2397.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.07982141F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.move((-1.0F), (-3964.61F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2397.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2397.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.07982141F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-3964.61F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1.0F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-255.36096F), (-458.25803F), (-1447.733F), 1.0F, (-1.0F));
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertEquals(1.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1447.733F), sash0.getWidth(), 0.01F);
      assertEquals((-458.25803F), sash0.getYAxis(), 0.01F);
      assertEquals((-255.36096F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash(562.2F, (-458.25803F), 0.5F, 1786.9994F, (-1447.733F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-458.25803F), sash1.getYAxis(), 0.01F);
      assertEquals(0.5F, sash1.getWidth(), 0.01F);
      assertEquals(562.2F, sash1.getXAxis(), 0.01F);
      assertEquals((-1447.733F), sash1.getEndAngle(), 0.01F);
      assertEquals(1786.9994F, sash1.getStartAngle(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(382.666F, 470.0973F, (-1.0F), (-1.0F), (-1.0F));
      assertFalse(sash2.equals((Object)sash1));
      assertFalse(sash2.equals((Object)sash0));
      assertEquals((-1.0F), sash2.getWidth(), 0.01F);
      assertEquals(382.666F, sash2.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash2.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash2.getEndAngle(), 0.01F);
      assertEquals(470.0973F, sash2.getYAxis(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "~%C~~QGb.ZW", "T`j}Y<xx8:", (Content) null, (Content) null, (Content) null, (-1349L), 1786.9994F, (-1560.567F), (-1349L), false, 1786.9994F, 562.2F, sashArray0, (float[][]) null, "~%C~~QGb.ZW", false, bigDecimal0, bigDecimal0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(893.4997F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(1786.9994F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1560.567F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1786.9994F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      float float0 = homeDoorOrWindow1.getGroundElevation();
      assertEquals((-1349.0F), float0, 0.01F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(893.4997F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(1786.9994F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1560.567F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1786.9994F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~QGb.ZW");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.Y;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      float[][] floatArray0 = homeDoorOrWindow1.getPoints();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(893.4997F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(1786.9994F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1560.567F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1786.9994F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNotNull(floatArray0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      homeDoorOrWindow1.setColor(integer0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(893.4997F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(1786.9994F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(8192, (int)homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1560.567F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1786.9994F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      float float1 = homeDoorOrWindow1.getWidth();
      assertEquals((-1349.0F), float1, 0.01F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals(float1, float0, 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(893.4997F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(1786.9994F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(8192, (int)homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1560.567F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1786.9994F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1010.4F);
      floatArray1[2] = 2162.3F;
      floatArray1[3] = (-1556.952F);
      floatArray1[4] = 2162.3F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 2815.0F;
      floatArray2[1] = 2309.6797F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = (-2483.4019F);
      floatArray2[4] = 2162.3F;
      floatArray2[5] = 0.0F;
      floatArray2[6] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (-1010.4F);
      floatArray3[1] = (-1010.4F);
      floatArray3[2] = 2815.0F;
      floatArray3[3] = (-2483.4019F);
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("jar", "com.eteks.sweethome3d.model.HomeDoorOrWindow", "", (Content) null, (Content) null, (Content) null, 2309.6797F, 2309.6797F, 3.4028235E38F, (-1010.4F), false, 0.0F, 3.4028235E38F, sashArray0, floatArray0, "D_73Hj-", false, true, false, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      Content content0 = catalogDoorOrWindow0.getIcon();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(content0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      LightSource[] lightSourceArray0 = new LightSource[9];
      LightSource lightSource0 = new LightSource((-2483.4019F), 0.0F, (-2483.4019F), 0);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals((-2483.4019F), lightSource0.getZ(), 0.01F);
      assertEquals((-2483.4019F), lightSource0.getX(), 0.01F);
      assertEquals(0, lightSource0.getColor());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1397.0278F), (-866.0F), 2162.3F, 0);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(2162.3F, lightSource1.getZ(), 0.01F);
      assertEquals((-1397.0278F), lightSource1.getX(), 0.01F);
      assertEquals((-866.0F), lightSource1.getY(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals(0, lightSource1.getColor());
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(2259.0F, 0.0F, 2162.3F, 0);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertNull(lightSource2.getDiameter());
      assertEquals(0, lightSource2.getColor());
      assertEquals(2259.0F, lightSource2.getX(), 0.01F);
      assertEquals(2162.3F, lightSource2.getZ(), 0.01F);
      assertEquals(0.0F, lightSource2.getY(), 0.01F);
      assertNotNull(lightSource2);
      
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource((-1010.4F), 0, 687.0F, (-238));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertEquals((-238), lightSource3.getColor());
      assertEquals(687.0F, lightSource3.getZ(), 0.01F);
      assertEquals((-1010.4F), lightSource3.getX(), 0.01F);
      assertEquals(0.0F, lightSource3.getY(), 0.01F);
      assertNull(lightSource3.getDiameter());
      assertNotNull(lightSource3);
      
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(3474.6926F, 0, (-1025.8F), 0);
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertEquals(3474.6926F, lightSource4.getX(), 0.01F);
      assertNull(lightSource4.getDiameter());
      assertEquals(0, lightSource4.getColor());
      assertEquals((-1025.8F), lightSource4.getZ(), 0.01F);
      assertEquals(0.0F, lightSource4.getY(), 0.01F);
      assertNotNull(lightSource4);
      
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(1.0F, 0.0F, 1.0F, 2);
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertFalse(lightSource5.equals((Object)lightSource2));
      assertEquals(2, lightSource5.getColor());
      assertEquals(1.0F, lightSource5.getZ(), 0.01F);
      assertEquals(0.0F, lightSource5.getY(), 0.01F);
      assertEquals(1.0F, lightSource5.getX(), 0.01F);
      assertNull(lightSource5.getDiameter());
      assertNotNull(lightSource5);
      
      lightSourceArray0[5] = lightSource5;
      Float float0 = new Float(2193.917F);
      assertEquals(2193.917F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource lightSource6 = new LightSource((-756.0F), (-2483.4019F), (-1010.4F), 2, float0);
      assertFalse(lightSource6.equals((Object)lightSource5));
      assertFalse(lightSource6.equals((Object)lightSource4));
      assertFalse(lightSource6.equals((Object)lightSource0));
      assertFalse(lightSource6.equals((Object)lightSource1));
      assertFalse(lightSource6.equals((Object)lightSource3));
      assertFalse(lightSource6.equals((Object)lightSource2));
      assertEquals((-756.0F), lightSource6.getX(), 0.01F);
      assertEquals((-1010.4F), lightSource6.getZ(), 0.01F);
      assertEquals(2, lightSource6.getColor());
      assertEquals((-2483.4019F), lightSource6.getY(), 0.01F);
      assertEquals(2193.917F, lightSource6.getDiameter(), 0.01F);
      assertNotNull(lightSource6);
      
      lightSourceArray0[6] = lightSource6;
      Float float1 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      LightSource lightSource7 = new LightSource(2309.6797F, (-238), 2162.3F, (-238), float1);
      assertFalse(lightSource7.equals((Object)lightSource5));
      assertFalse(lightSource7.equals((Object)lightSource6));
      assertFalse(lightSource7.equals((Object)lightSource0));
      assertFalse(lightSource7.equals((Object)lightSource3));
      assertFalse(lightSource7.equals((Object)lightSource1));
      assertFalse(lightSource7.equals((Object)lightSource2));
      assertFalse(lightSource7.equals((Object)lightSource4));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-238.0F), lightSource7.getY(), 0.01F);
      assertEquals(0.0F, lightSource7.getDiameter(), 0.01F);
      assertEquals(2309.6797F, lightSource7.getX(), 0.01F);
      assertEquals((-238), lightSource7.getColor());
      assertEquals(2162.3F, lightSource7.getZ(), 0.01F);
      assertNotNull(lightSource7);
      
      lightSourceArray0[7] = lightSource7;
      Float float2 = new Float((-1010.4F));
      assertEquals((-1010.4F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      LightSource lightSource8 = new LightSource((-6673.7344F), 2309.6797F, 2259.0F, (-238), float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertFalse(lightSource8.equals((Object)lightSource6));
      assertFalse(lightSource8.equals((Object)lightSource1));
      assertFalse(lightSource8.equals((Object)lightSource0));
      assertFalse(lightSource8.equals((Object)lightSource5));
      assertFalse(lightSource8.equals((Object)lightSource4));
      assertFalse(lightSource8.equals((Object)lightSource7));
      assertFalse(lightSource8.equals((Object)lightSource3));
      assertFalse(lightSource8.equals((Object)lightSource2));
      assertEquals(2309.6797F, lightSource8.getY(), 0.01F);
      assertEquals(2259.0F, lightSource8.getZ(), 0.01F);
      assertEquals((-238), lightSource8.getColor());
      assertEquals((-1010.4F), lightSource8.getDiameter(), 0.01F);
      assertEquals((-6673.7344F), lightSource8.getX(), 0.01F);
      assertNotNull(lightSource8);
      
      lightSourceArray0[8] = lightSource8;
      CatalogLight catalogLight0 = new CatalogLight("", "A40", "com.eteks.sweethome3d.model.HomeDoorOrWindow", (Content) null, (Content) null, (Content) null, (-756.0F), 687.0F, 0.0F, 1813.947F, false, lightSourceArray0, floatArray0, "xFsVIl6]nM^", true, false, true, bigDecimal0, bigDecimal0);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("A40", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(catalogLight0);
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      Content content1 = catalogLight0.getPlanIcon();
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("A40", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(content1);
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      Content content2 = catalogDoorOrWindow0.getModel();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(content2);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float float3 = catalogLight0.getWidth();
      assertEquals((-756.0F), float3, 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("A40", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      Integer integer0 = new Integer(1727);
      assertEquals(1727, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("jar", (Content) null, (Content) null, (-5977.9277F), (-1010.4F), 3474.6926F, 2815.0F, false, 0.0F, 1511.298F, sashArray0, integer0, floatArray0, true, 2162.3F, true);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals(1511.298F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1727, (int)catalogDoorOrWindow1.getColor());
      assertEquals(2162.3F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertEquals((-5977.9277F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals((-1010.4F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertEquals(3474.6926F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getDescription());
      assertEquals(2815.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow1.getName());
      assertNull(catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float float4 = catalogDoorOrWindow1.getDepth();
      assertEquals((-1010.4F), float4, 0.01F);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(1511.298F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1727, (int)catalogDoorOrWindow1.getColor());
      assertEquals(2162.3F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertEquals((-5977.9277F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals((-1010.4F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertEquals(3474.6926F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getDescription());
      assertEquals(2815.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow1.getName());
      assertNull(catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float float5 = catalogDoorOrWindow0.getHeight();
      assertEquals(3.4028235E38F, float5, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float float6 = catalogLight0.getElevation();
      assertEquals(1813.947F, float6, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("A40", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      boolean boolean0 = catalogLight0.isMovable();
      assertFalse(boolean0);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("A40", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      boolean boolean1 = catalogLight0.isDoorOrWindow();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("A40", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      Integer integer1 = catalogDoorOrWindow0.getColor();
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(integer1);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float[][] floatArray4 = catalogDoorOrWindow0.getModelRotation();
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(floatArray4);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      String string0 = catalogDoorOrWindow1.getStaircaseCutOutShape();
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals(1511.298F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1727, (int)catalogDoorOrWindow1.getColor());
      assertEquals(2162.3F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertEquals((-5977.9277F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals((-1010.4F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertEquals(3474.6926F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getDescription());
      assertEquals(2815.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow1.getName());
      assertNull(catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(string0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, "'p_LVX{I(vN)", "A40", (Content) null, (Content) null, 2462.374F, 687.0F, (-1145.16F), 0.0F, true, true, floatArray4, "", false, bigDecimal0, bigDecimal0);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals("'p_LVX{I(vN)", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(2462.374F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("A40", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1145.16F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(687.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean2 = catalogPieceOfFurniture0.isBackFaceShown();
      assertFalse(boolean2);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals("'p_LVX{I(vN)", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(2462.374F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("A40", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1145.16F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(687.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean3 = catalogPieceOfFurniture0.isResizable();
      assertFalse(boolean3);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals("'p_LVX{I(vN)", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(2462.374F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("A40", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1145.16F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(687.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean4 = catalogDoorOrWindow0.isDeformable();
      assertTrue(boolean4);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean5 = catalogLight0.isTexturable();
      assertTrue(boolean5);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("A40", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotSame(floatArray0, floatArray4);
      assertEquals(3, floatArray0.length);
      assertEquals(9, lightSourceArray0.length);
      
      BigDecimal bigDecimal1 = catalogDoorOrWindow0.getPrice();
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(bigDecimal1);
      assertNotSame(floatArray0, floatArray4);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("8yleW<<fG3>chK0", "jar", (String) null, (Content) null, (Content) null, (Content) null, 1511.298F, 0.0F, 2.0F, 0.0F, false, floatArray4, "com.eteks.sweethome3d.model.CatalogTexture", false, false, false, bigDecimal1, bigDecimal2);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(catalogPieceOfFurniture1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      BigDecimal bigDecimal3 = catalogPieceOfFurniture1.getValueAddedTaxPercentage();
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(bigDecimal3);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertSame(bigDecimal1, bigDecimal3);
      assertSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal3);
      assertNotSame(catalogPieceOfFurniture1, catalogPieceOfFurniture0);
      assertSame(bigDecimal3, bigDecimal1);
      assertSame(bigDecimal3, bigDecimal2);
      assertSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      String string1 = catalogPieceOfFurniture1.getCurrency();
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(string1);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertSame(bigDecimal1, bigDecimal3);
      assertSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal3);
      assertNotSame(catalogPieceOfFurniture1, catalogPieceOfFurniture0);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture1);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals("jar", homePieceOfFurniture0.getName());
      assertEquals(755.649F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals("8yleW<<fG3>chK0", homePieceOfFurniture0.getCatalogId());
      assertEquals(1511.298F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      float float7 = homePieceOfFurniture0.getWidth();
      assertEquals(1511.298F, float7, 0.01F);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals("jar", homePieceOfFurniture0.getName());
      assertEquals(755.649F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals("8yleW<<fG3>chK0", homePieceOfFurniture0.getCatalogId());
      assertEquals(1511.298F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertSame(bigDecimal1, bigDecimal3);
      assertSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal3);
      assertNotSame(catalogPieceOfFurniture1, catalogPieceOfFurniture0);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.move(0.3926991F, 0.3926991F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      int int0 = Integer.min(1073741824, 720);
      assertEquals(720, int0);
      
      homeLight0.setNameYOffset(720);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(720.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      TextStyle textStyle0 = new TextStyle(1073741824);
      assertFalse(textStyle0.isItalic());
      assertEquals(1.07374182E9F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertNotNull(textStyle0);
      
      boolean boolean0 = homeLight0.isPointAt(1073741824, 923.07733F, 0.0F);
      assertFalse(boolean0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(720.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setName("Ynm");
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("Ynm", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(720.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      HomeLight homeLight1 = (HomeLight)homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("Ynm", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(720.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("Ynm", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.3926991F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.3926991F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(720.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.containsPoint(1908.0F, 1908.0F, 2.78534624E8F);
      assertTrue(boolean0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setAngle(0.0F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      float float1 = homeLight0.getHeight();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean2 = homeLight1.isPointAt(1301.23F, (-1.0F), 1417.1F);
      assertTrue(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1349L), 1979.3031F, 1979.3031F, 3662.1428F, (-1349L));
      assertEquals(1979.3031F, sash0.getWidth(), 0.01F);
      assertEquals(3662.1428F, sash0.getStartAngle(), 0.01F);
      assertEquals(1979.3031F, sash0.getYAxis(), 0.01F);
      assertEquals((-1349.0F), sash0.getXAxis(), 0.01F);
      assertEquals((-1349.0F), sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal1.byteValue());
      assertEquals((short) (-1349), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "F", "VALUE_ADDED_TAX", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 2.0F, 2.0F, false, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", false, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNotNull(homeDoorOrWindow1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = homeDoorOrWindow1.getColor();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(integer0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow1.setColor((Integer) null);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      Float float0 = new Float((-194.7276F));
      assertEquals((-194.7276F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      homeDoorOrWindow1.setShininess(float0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-194.7276F), homeDoorOrWindow1.getShininess(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow1.isMovable();
      assertFalse(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-194.7276F), homeDoorOrWindow1.getShininess(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Level level0 = homeDoorOrWindow1.getLevel();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-194.7276F), homeDoorOrWindow1.getShininess(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(level0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      boolean boolean1 = homeDoorOrWindow1.isDoorOrWindow();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-194.7276F), homeDoorOrWindow1.getShininess(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      homeLight0.setNameXOffset(1.0F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(1.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(1.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      
      homeDoorOrWindow0.setNameAngle(0.0F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      Level level0 = homeDoorOrWindow1.getLevel();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(level0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow0.setLevel((Level) null);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      homeDoorOrWindow0.setY(0.3926991F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setHeight((-3680.3F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean2 = homeLight1.isBottomLeftPointAt(33, 33, (-2397.0F));
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("Y", homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = homeLight1.isNameVisible();
      assertFalse(boolean3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("Y", homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean4 = homeLight0.isMovable();
      assertFalse(boolean4);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      TextStyle textStyle0 = new TextStyle(33);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals(33.0F, textStyle0.getFontSize(), 0.01F);
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveStyle(33);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals(33.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertFalse(textStyle1.isBold());
      assertEquals(33.0F, textStyle1.getFontSize(), 0.01F);
      assertNotNull(textStyle1);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      
      TextStyle textStyle2 = textStyle1.deriveItalicStyle(false);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals(33.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertFalse(textStyle1.isBold());
      assertEquals(33.0F, textStyle1.getFontSize(), 0.01F);
      assertEquals(33.0F, textStyle2.getFontSize(), 0.01F);
      assertFalse(textStyle2.isBold());
      assertFalse(textStyle2.isItalic());
      assertNotNull(textStyle2);
      assertSame(textStyle0, textStyle2);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      assertSame(textStyle1, textStyle2);
      assertSame(textStyle2, textStyle1);
      assertSame(textStyle2, textStyle0);
      
      homeLight1.setNameStyle(textStyle2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("Y", homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals(33.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertFalse(textStyle1.isBold());
      assertEquals(33.0F, textStyle1.getFontSize(), 0.01F);
      assertEquals(33.0F, textStyle2.getFontSize(), 0.01F);
      assertFalse(textStyle2.isBold());
      assertFalse(textStyle2.isItalic());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertSame(textStyle0, textStyle2);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      assertSame(textStyle1, textStyle2);
      assertSame(textStyle2, textStyle1);
      assertSame(textStyle2, textStyle0);
      
      boolean boolean5 = homeLight1.isResizable();
      assertFalse(boolean5);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("Y", homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean6 = homeLight0.isBottomRightPointAt((-2397.0F), (-4108.0F), (-2397.0F));
      assertFalse(boolean6);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      
      homeLight0.setDescription("Y");
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean2 = homeLight1.intersectsRectangle(3767.2036F, 0.3926991F, 0.3926991F, 0.3926991F);
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = homeLight0.isBottomRightPointAt(0.5F, 0.3926991F, 3767.2036F);
      assertFalse(boolean3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNotSame(homeLight0, homeLight1);
      
      TextStyle textStyle0 = homeLight1.getNameStyle();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertNull(textStyle0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean4 = homeLight1.isDeformable();
      assertFalse(boolean4);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      homeLight1.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = homeLight0.isMovable();
      assertFalse(boolean4);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      
      TextStyle textStyle0 = new TextStyle(33);
      assertFalse(textStyle0.isBold());
      assertEquals(33.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveStyle(33);
      assertFalse(textStyle0.isBold());
      assertEquals(33.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle1.isBold());
      assertEquals(33.0F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertNotNull(textStyle1);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      
      TextStyle textStyle2 = textStyle1.deriveItalicStyle(false);
      assertFalse(textStyle0.isBold());
      assertEquals(33.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle1.isBold());
      assertEquals(33.0F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertEquals(33.0F, textStyle2.getFontSize(), 0.01F);
      assertFalse(textStyle2.isItalic());
      assertFalse(textStyle2.isBold());
      assertNotNull(textStyle2);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle0, textStyle2);
      assertSame(textStyle1, textStyle2);
      assertSame(textStyle1, textStyle0);
      assertSame(textStyle2, textStyle0);
      assertSame(textStyle2, textStyle1);
      
      TextStyle textStyle3 = textStyle2.deriveBoldStyle(false);
      assertFalse(textStyle0.isBold());
      assertEquals(33.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle1.isBold());
      assertEquals(33.0F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertEquals(33.0F, textStyle2.getFontSize(), 0.01F);
      assertFalse(textStyle2.isItalic());
      assertFalse(textStyle2.isBold());
      assertEquals(33.0F, textStyle3.getFontSize(), 0.01F);
      assertFalse(textStyle3.isBold());
      assertFalse(textStyle3.isItalic());
      assertNotNull(textStyle3);
      assertSame(textStyle0, textStyle3);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle0, textStyle2);
      assertSame(textStyle1, textStyle2);
      assertSame(textStyle1, textStyle3);
      assertSame(textStyle1, textStyle0);
      assertSame(textStyle2, textStyle0);
      assertSame(textStyle2, textStyle3);
      assertSame(textStyle2, textStyle1);
      assertSame(textStyle3, textStyle1);
      assertSame(textStyle3, textStyle2);
      assertSame(textStyle3, textStyle0);
      
      homeLight1.setNameStyle(textStyle2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(textStyle0.isBold());
      assertEquals(33.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle1.isBold());
      assertEquals(33.0F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertEquals(33.0F, textStyle2.getFontSize(), 0.01F);
      assertFalse(textStyle2.isItalic());
      assertFalse(textStyle2.isBold());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertSame(textStyle0, textStyle3);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle0, textStyle2);
      assertSame(textStyle1, textStyle2);
      assertSame(textStyle1, textStyle3);
      assertSame(textStyle1, textStyle0);
      assertSame(textStyle2, textStyle0);
      assertSame(textStyle2, textStyle3);
      assertSame(textStyle2, textStyle1);
      
      boolean boolean5 = homeLight1.isResizable();
      assertFalse(boolean5);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = homeLight0.getNameAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      
      String string0 = homeLight1.getName();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((byte) (-69), bigDecimal1.byteValue());
      assertEquals((short) (-1349), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "T`j}Y<xx8:", "T`j}Y<xx8:", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 791.6026F, 2.0F, true, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", true, bigDecimal0, bigDecimal0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNotNull(sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = homeDoorOrWindow0.getColor();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(integer0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      long long0 = bigDecimal2.longValue();
      assertEquals(1819801L, long0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal3 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((byte) (-103), bigDecimal3.byteValue());
      assertEquals((short) (-15207), bigDecimal3.shortValue());
      assertNotNull(bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isMovable();
      assertTrue(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setDepth(0.0F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1340L));
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short) (-1340), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash sash0 = new Sash(562.2F, (-458.25803F), (-1560.567F), (-1340L), (-1447.733F));
      assertEquals((-1560.567F), sash0.getWidth(), 0.01F);
      assertEquals(562.2F, sash0.getXAxis(), 0.01F);
      assertEquals((-458.25803F), sash0.getYAxis(), 0.01F);
      assertEquals((-1340.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1447.733F), sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash((-458.25803F), 470.0973F, (-1560.567F), (-1560.567F), (-458.25803F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(470.0973F, sash1.getYAxis(), 0.01F);
      assertEquals((-458.25803F), sash1.getEndAngle(), 0.01F);
      assertEquals((-1560.567F), sash1.getStartAngle(), 0.01F);
      assertEquals((-1560.567F), sash1.getWidth(), 0.01F);
      assertEquals((-458.25803F), sash1.getXAxis(), 0.01F);
      assertNotNull(sash1);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      System.setCurrentTimeMillis(604800000L);
      Integer integer1 = new Integer(33);
      assertEquals(33, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = integer1.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      assertFalse(integer1.equals((Object)integer0));
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("T`j}Y<xx8:", (Content) null, (Content) null, (-1340L), 5178.24F, (-1447.733F), 604800000L, false, integer1, (float[][]) null, false, 470.0973F, false);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(470.0973F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(470.0973F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(6.048E8F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(470.0973F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(6.048E8F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture1.setNameVisible(true);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(470.0973F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(6.048E8F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.MOVABLE;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setAngle(0.0F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      homeLight0.move(0.3926991F, 0.3926991F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      
      int int0 = Integer.min(2892, 2892);
      assertEquals(2892, int0);
      
      homeLight0.setNameYOffset(2892);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(2892.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(2892.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isTexturable());
      assertEquals(2892.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      String string0 = "Y";
      homeLight1.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(2892.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isTexturable());
      assertEquals(2892.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      Level level0 = homeLight0.getLevel();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = homeLight0.getHeight();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      String string0 = homeLight0.getCatalogId();
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1340L));
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short) (-1340), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Sash sash0 = new Sash(562.2F, (-458.25803F), (-1560.567F), (-1340L), (-1447.733F));
      assertEquals((-1340.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-458.25803F), sash0.getYAxis(), 0.01F);
      assertEquals(562.2F, sash0.getXAxis(), 0.01F);
      assertEquals((-1447.733F), sash0.getEndAngle(), 0.01F);
      assertEquals((-1560.567F), sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Sash sash1 = new Sash((-458.25803F), 470.0973F, (-1560.567F), (-1560.567F), (-458.25803F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(470.0973F, sash1.getYAxis(), 0.01F);
      assertEquals((-1560.567F), sash1.getWidth(), 0.01F);
      assertEquals((-1560.567F), sash1.getStartAngle(), 0.01F);
      assertEquals((-458.25803F), sash1.getXAxis(), 0.01F);
      assertEquals((-458.25803F), sash1.getEndAngle(), 0.01F);
      assertNotNull(sash1);
      
      BigDecimal bigDecimal1 = bigDecimal0.stripTrailingZeros();
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short) (-1340), bigDecimal0.shortValue());
      assertEquals((byte) (-60), bigDecimal1.byteValue());
      assertEquals((short) (-1340), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      System.setCurrentTimeMillis(604800000L);
      Integer integer1 = new Integer(33);
      assertEquals(33, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = integer1.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      assertFalse(integer1.equals((Object)integer0));
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, 604800000L, (-1560.567F), 604800000L, (-1560.567F), false, (float[][]) null, "T`j}Y<xx8:", false, bigDecimal0, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short) (-1340), bigDecimal0.shortValue());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogPieceOfFurniture0.getId());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1560.567F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogPieceOfFurniture0.getName());
      assertEquals((-1560.567F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short) (-1340), bigDecimal0.shortValue());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogPieceOfFurniture0.getId());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1560.567F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogPieceOfFurniture0.getName());
      assertEquals((-1560.567F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1560.567F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homePieceOfFurniture0.getCatalogId());
      assertEquals((-1560.567F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-780.2835F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1560.567F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(6.048E8F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(3.024E8F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(6.048E8F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short) (-1340), bigDecimal0.shortValue());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogPieceOfFurniture0.getId());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1560.567F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogPieceOfFurniture0.getName());
      assertEquals((-1560.567F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1560.567F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homePieceOfFurniture0.getCatalogId());
      assertEquals((-1560.567F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-780.2835F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1560.567F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(6.048E8F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(3.024E8F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(6.048E8F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals((-780.2835F), homePieceOfFurniture1.getY(), 0.01F);
      assertEquals((-1560.567F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(3.024E8F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(6.048E8F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals((-1560.567F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals((-1560.567F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homePieceOfFurniture1.getCatalogId());
      assertEquals(6.048E8F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homePieceOfFurniture1.getName());
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setWidth((-1447.733F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      homeLight0.move(0.3926991F, 0.3926991F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setMovable(true);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      float float1 = (-1147.658F);
      Float float2 = new Float((-3.0023508F));
      assertEquals((-3.0023508F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        homeLight0.setShininess(float2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNotNull(homeLight0);
      
      String string0 = homeLight0.getCurrency();
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal1.shortValue());
      assertEquals((byte) (-69), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "F", "F", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 791.6026F, 2.0F, true, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", true, bigDecimal0, bigDecimal0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotNull(sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = homeDoorOrWindow0.getColor();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(integer0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      Integer integer1 = Integer.valueOf((-2711));
      assertEquals((-2711), (int)integer1);
      assertNotNull(integer1);
      
      homeDoorOrWindow0.setColor(integer1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2711), (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      long long0 = bigDecimal2.longValue();
      assertEquals(1819801L, long0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2711), (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal3 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2711), (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((byte) (-103), bigDecimal3.byteValue());
      assertEquals((short) (-15207), bigDecimal3.shortValue());
      assertNotNull(bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      boolean boolean1 = homeDoorOrWindow1.isMovable();
      assertTrue(boolean1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(boolean1 == boolean0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setDepth((-1349L));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2711), (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      // Undeclared exception!
      try { 
        homeLight0.getModelRotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "T`j}Y<xx8:", "T`j}Y<xx8:", (Content) null, (Content) null, (Content) null, (-1349L), (-1349L), (-1349L), 2.0F, true, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1349.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      homeDoorOrWindow1.setModelMirrored(true);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1349.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1349.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((short)2, bigDecimal1.shortValue());
      assertEquals((byte)2, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = new Integer((-1275));
      assertEquals((-1275), (int)integer0);
      assertNotNull(integer0);
      
      homeDoorOrWindow0.setColor(integer0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1275), (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      homeLight0.setVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean1 = homeLight1.isBottomLeftPointAt(3156.0F, 2.0F, (-4385.217F));
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight3 = null;
      try {
        homeLight3 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNotNull(homeLight0);
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(bigDecimal0);
      
      boolean boolean0 = homeLight0.isNameCenterPointAt(139.16F, (-1.0F), 0.07982141F);
      assertFalse(boolean0);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      TextStyle textStyle0 = homeLight0.getNameStyle();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(textStyle0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.intersectsRectangle(0.3926991F, 0.3926991F, 0.3926991F, 0.3926991F);
      assertFalse(boolean0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      homeLight0.setMovable(true);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      homeLight1.setDescription("");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      float float0 = homeLight1.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setNameAngle(0.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isTopRightPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      TextStyle textStyle0 = new TextStyle(3063.5F);
      assertFalse(textStyle0.isItalic());
      assertEquals(3063.5F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = new TextStyle(0.3926991F);
      assertFalse(textStyle1.equals((Object)textStyle0));
      assertFalse(textStyle1.isBold());
      assertEquals(0.3926991F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertNotNull(textStyle1);
      
      TextStyle textStyle2 = textStyle1.deriveItalicStyle(false);
      assertFalse(textStyle1.equals((Object)textStyle0));
      assertFalse(textStyle2.equals((Object)textStyle0));
      assertFalse(textStyle1.isBold());
      assertEquals(0.3926991F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertEquals(0.3926991F, textStyle2.getFontSize(), 0.01F);
      assertFalse(textStyle2.isItalic());
      assertFalse(textStyle2.isBold());
      assertNotNull(textStyle2);
      assertNotSame(textStyle1, textStyle0);
      assertSame(textStyle1, textStyle2);
      assertSame(textStyle2, textStyle1);
      assertNotSame(textStyle2, textStyle0);
      
      homeLight0.setNameStyle((TextStyle) null);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = homeLight1.getNameXOffset();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      // Undeclared exception!
      try { 
        homeLight1.setDepth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "F", "F", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 791.6026F, 2.0F, true, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", true, bigDecimal0, bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      homeDoorOrWindow1.setModelMirrored(true);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      boolean boolean1 = homeDoorOrWindow0.isResizable();
      assertTrue(boolean1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash(3640.2683F, 1954.6F, (-458.25803F), (-1447.733F), (-1.0F));
      assertEquals((-1447.733F), sash0.getStartAngle(), 0.01F);
      assertEquals((-458.25803F), sash0.getWidth(), 0.01F);
      assertEquals(1954.6F, sash0.getYAxis(), 0.01F);
      assertEquals(3640.2683F, sash0.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash((-1349L), 1954.6F, 1954.6F, 3640.2683F, (-1560.567F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(1954.6F, sash1.getWidth(), 0.01F);
      assertEquals((-1560.567F), sash1.getEndAngle(), 0.01F);
      assertEquals(3640.2683F, sash1.getStartAngle(), 0.01F);
      assertEquals(1954.6F, sash1.getYAxis(), 0.01F);
      assertEquals((-1349.0F), sash1.getXAxis(), 0.01F);
      assertNotNull(sash1);
      
      Sash sash2 = new Sash(1350.5406F, 1954.6F, 1350.5406F, (-1447.733F), (-1.0F));
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals(1350.5406F, sash2.getWidth(), 0.01F);
      assertEquals(1954.6F, sash2.getYAxis(), 0.01F);
      assertEquals(1350.5406F, sash2.getXAxis(), 0.01F);
      assertEquals((-1447.733F), sash2.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash2.getEndAngle(), 0.01F);
      assertNotNull(sash2);
      
      MathContext mathContext0 = MathContext.DECIMAL128;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal1.shortValue());
      assertEquals((byte) (-69), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("~%C~~QGb.ZW", "", "VALUE_ADDED_TAX", (Content) null, (Content) null, (Content) null, 791.6026F, (-1560.567F), 2.0F, 2.0F, false, (-458.25803F), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", false, bigDecimal0, bigDecimal0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-780.2835F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1560.567F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNotNull(homeDoorOrWindow1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~QGb.ZW");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = homeDoorOrWindow0.getColor();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(integer1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow1.setColor((Integer) null);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-780.2835F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1560.567F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow1.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-780.2835F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1560.567F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      float float0 = homeDoorOrWindow0.getDepth();
      assertEquals((-1560.567F), float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      boolean boolean1 = homeDoorOrWindow0.isPointAt(791.6026F, 3640.2683F, 0.5F);
      assertFalse(boolean1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertNotNull(homeLight0);
      
      homeLight0.setMovable(true);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      
      homeLight0.setMovable(false);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isPointAt(0.0F, 2.0F, 0.0F);
      assertFalse(boolean0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotNull(homeLight0);
      
      // Undeclared exception!
      try { 
        homeLight0.setShininess((Float) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setMovable(true);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = homeLight0.isBackFaceShown();
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      boolean boolean0 = homeDoorOrWindow0.isTopLeftPointAt((-51.114F), (-1181.642F), 3034.4575F);
      assertFalse(boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("vu\"Qqv4uLr]uN~/B3F<", propertyChangeListener0);
      assertEquals("vu\"Qqv4uLr]uN~/B3F<", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeDoorOrWindow1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("vu\"Qqv4uLr]uN~/B3F<", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      float float0 = 2.0F;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      homeDoorOrWindow0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("vu\"Qqv4uLr]uN~/B3F<", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      boolean boolean1 = homeDoorOrWindow1.isTopLeftPointAt(0.5F, 1.9745969F, 2.0F);
      assertFalse(boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean1 == boolean0);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      boolean boolean2 = homeDoorOrWindow1.isBottomLeftPointAt((-577.6907F), (-577.6907F), (-1181.642F));
      assertFalse(boolean2);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(bigDecimal0);
      
      homeLight0.setX(0.07982141F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.07982141F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      boolean boolean0 = homeLight0.isTexturable();
      assertFalse(boolean0);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.07982141F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = false;
      BigDecimal bigDecimal0 = new BigDecimal((-1337L));
      assertEquals((short) (-1337), bigDecimal0.shortValue());
      assertEquals((byte) (-57), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1337L), (-462.18646F), (-1337L), (-1337L), (-1447.733F));
      assertEquals((-462.18646F), sash0.getYAxis(), 0.01F);
      assertEquals((-1337.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1337.0F), sash0.getXAxis(), 0.01F);
      assertEquals((-1337.0F), sash0.getWidth(), 0.01F);
      assertEquals((-1447.733F), sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T}Y<x8:", "~%C~~QGb.ZW", "T}Y<x8:", (Content) null, (Content) null, (Content) null, (-1337L), (-1337L), (-1337L), (-1337L), false, (-1337L), (-1337L), sashArray0, (float[][]) null, "~%C~~QGb.ZW", false, bigDecimal0, bigDecimal0);
      assertEquals((short) (-1337), bigDecimal0.shortValue());
      assertEquals((byte) (-57), bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T}Y<x8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T}Y<x8:", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1337), bigDecimal0.shortValue());
      assertEquals((byte) (-57), bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T}Y<x8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T}Y<x8:", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1337), bigDecimal0.shortValue());
      assertEquals((byte) (-57), bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T}Y<x8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T}Y<x8:", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1337.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T}Y<x8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1337.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T}Y<x8:", homeDoorOrWindow0.getDescription());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1337.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1337.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-668.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-668.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1337.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1337.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1337.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short) (-1337), bigDecimal0.shortValue());
      assertEquals((byte) (-57), bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T}Y<x8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T}Y<x8:", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1337.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T}Y<x8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1337.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T}Y<x8:", homeDoorOrWindow0.getDescription());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1337.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1337.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-668.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-668.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1337.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1337.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1337.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((short)18097, bigDecimal1.shortValue());
      assertEquals((byte) (-79), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~QGb.ZW");
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1337), bigDecimal0.shortValue());
      assertEquals((byte) (-57), bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T}Y<x8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1337.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1337.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T}Y<x8:", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1337.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T}Y<x8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1337.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T}Y<x8:", homeDoorOrWindow0.getDescription());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1337.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1337.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-668.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-668.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1337.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1337.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1337.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ",";
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup((List<HomePieceOfFurniture>) null, ",");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      Integer integer0 = new Integer(278534617);
      assertEquals(278534617, (int)integer0);
      assertNotNull(integer0);
      
      homeLight0.setDescription("Y");
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      boolean boolean0 = homeLight0.isPointAt(2285.0F, 278534617, (-1407.4F));
      assertFalse(boolean0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isTexturable());
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = homeLight0.containsPoint(0.0F, (-1.0F), 278534617);
      assertTrue(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1 == boolean0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNotSame(homeLight0, homeLight1);
      
      Content content0 = homeLight1.getPlanIcon();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isTexturable());
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      homeLight1.setDescription("");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      HomeLight homeLight3 = homeLight2.clone();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertFalse(homeLight3.isMovable());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertEquals("", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getName());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getCurrency());
      assertTrue(homeLight3.isVisible());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNotNull(homeLight3);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      
      String string0 = homeLight3.getCatalogId();
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertFalse(homeLight3.isMovable());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertEquals("", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getName());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getCurrency());
      assertTrue(homeLight3.isVisible());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(string0);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNotNull(homeLight0);
      
      homeLight0.move(0.0F, 0.3926991F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      
      homeLight0.setMovable(true);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      homeLight0.setY((-366.87128F));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-366.87128F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-366.87128F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-366.87128F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals((-366.87128F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float1 = homeLight0.getAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(float1, float0, 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-366.87128F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      float float1 = homeLight0.getAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?/3G7R,w");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      homeLight0.setAngle(0.0F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      BigDecimal bigDecimal2 = homeLight0.getPrice();
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(bigDecimal2);
      
      Content content0 = homeLight0.getModel();
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(content0);
      
      homeLight0.setVisible(false);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      homeLight0.setX(0.0F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "T`j}Y<xx8:", "T`j}Y<xx8:", (Content) null, (Content) null, (Content) null, (-1349L), (-1349L), (-1349L), 2.0F, true, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setMovable(true);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow1.setHeight((-1349L));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      homeDoorOrWindow1.setModelMirrored(true);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((byte)2, bigDecimal1.byteValue());
      assertEquals((short)2, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(918L);
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8d", "~%C~~Q7Gb.ZW", "T`j}Y<xx8d", (Content) null, (Content) null, (Content) null, 918L, 918L, 918L, 918L, false, 918L, 918L, sashArray0, (float[][]) null, "~%C~~Q7Gb.ZW", false, bigDecimal0, bigDecimal0);
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((short) (-9244), bigDecimal1.shortValue());
      assertEquals((byte) (-28), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~Q7Gb.ZW");
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "&Bgp^-Fp{G5");
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, "~%C~~Q7Gb.ZW", "T`j}Y<xx8d", uRLContent0, (Content) null, (Content) null, (-2776.5508F), (-2776.5508F), 918L, (-1.0F), false, (float[][]) null, "VALUE_ADDED_TAX", true, bigDecimal0, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2776.5508F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-2776.5508F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogPieceOfFurniture0.getCreator());
      assertEquals(918.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8d", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNotNull(catalogPieceOfFurniture0);
      
      int int0 = catalogDoorOrWindow0.compareTo(catalogPieceOfFurniture0);
      assertEquals(0, int0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2776.5508F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-2776.5508F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogPieceOfFurniture0.getCreator());
      assertEquals(918.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8d", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isBottomRightPointAt(918L, 918L, 1.0F);
      assertTrue(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((byte)122, bigDecimal2.byteValue());
      assertEquals((short) (-8326), bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setShininess((Float) null);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertEquals(3, sashArray0.length);
      
      System.setCurrentTimeMillis(0L);
      float float0 = homeDoorOrWindow0.getX();
      assertEquals(459.0F, float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(bigDecimal0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt((-2092.0F), (-2092.0F), (-2092.0F));
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = homeLight1.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow0.setY(0.3926991F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("20!)w7<SHeJ8 4_ q", propertyChangeListener0);
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeDoorOrWindow0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      boolean boolean0 = homeDoorOrWindow1.isBottomLeftPointAt((-577.6907F), (-577.6907F), (-1181.642F));
      assertFalse(boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      boolean boolean1 = homeDoorOrWindow0.isTopLeftPointAt((-577.6907F), 0.3926991F, 489.0F);
      assertFalse(boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      boolean boolean2 = homeDoorOrWindow0.isBottomRightPointAt(0.3926991F, 489.0F, (-1160.833F));
      assertFalse(boolean2);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setHeight((-3680.3F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      Level level0 = new Level("cX  \"UTe", 0.0F, 0.0F, 0.0F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("cX  \"UTe", level0.getName());
      assertNotNull(level0);
      
      boolean boolean0 = homeLight0.isAtLevel(level0);
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("cX  \"UTe", level0.getName());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = new LightSource(3613.7F, 791.6026F, 514.278F, 791);
      assertEquals(514.278F, lightSource0.getZ(), 0.01F);
      assertEquals(3613.7F, lightSource0.getX(), 0.01F);
      assertEquals(791.6026F, lightSource0.getY(), 0.01F);
      assertEquals(791, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(791.6026F, 2863.6748F, 791, 1251);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(2863.6748F, lightSource1.getY(), 0.01F);
      assertEquals(791.6026F, lightSource1.getX(), 0.01F);
      assertEquals(791.0F, lightSource1.getZ(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals(1251, lightSource1.getColor());
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      Float float0 = new Float((double) 1.4567091F);
      assertEquals(1.4567091F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource lightSource2 = new LightSource(1.4567091F, 0.4332556F, (-2912.258F), 1251, float0);
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertEquals(1.4567091F, lightSource2.getX(), 0.01F);
      assertEquals((-2912.258F), lightSource2.getZ(), 0.01F);
      assertEquals(1.4567091F, lightSource2.getDiameter(), 0.01F);
      assertEquals(1251, lightSource2.getColor());
      assertEquals(0.4332556F, lightSource2.getY(), 0.01F);
      assertNotNull(lightSource2);
      
      lightSourceArray0[2] = lightSource2;
      Float float1 = new Float(774.43F);
      assertEquals(774.43F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertEquals(774.43F, float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float3 = new Float(774.43F);
      assertEquals(774.43F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      float float4 = float3.floatValue();
      assertEquals(774.43F, float4, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(float4, float2, 0.01F);
      
      Float float5 = new Float((-1521.7874782922142));
      assertEquals((-1521.7875F), (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      
      float float6 = float5.floatValue();
      assertEquals((-1521.7875F), float6, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      
      LightSource lightSource3 = new LightSource(0.3926991F, 1169.74F, (-2107.452F), 2147483546, (Float) (-1521.7875F));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertEquals((-1521.7875F), lightSource3.getDiameter(), 0.01F);
      assertEquals((-2107.452F), lightSource3.getZ(), 0.01F);
      assertEquals(0.3926991F, lightSource3.getX(), 0.01F);
      assertEquals(1169.74F, lightSource3.getY(), 0.01F);
      assertEquals(2147483546, lightSource3.getColor());
      assertNotNull(lightSource3);
      
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource((-1.0F), (-2107.452F), 774.43F, 1251, float1);
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float5, 0.01F);
      assertNotEquals((float)float1, (float)float6, 0.01F);
      assertEquals((float)float1, (float)float4, 0.01F);
      assertEquals((float)float1, (float)float3, 0.01F);
      assertEquals((-1.0F), lightSource4.getX(), 0.01F);
      assertEquals((-2107.452F), lightSource4.getY(), 0.01F);
      assertEquals(774.43F, lightSource4.getZ(), 0.01F);
      assertEquals(1251, lightSource4.getColor());
      assertEquals(774.43F, lightSource4.getDiameter(), 0.01F);
      assertNotNull(lightSource4);
      
      lightSourceArray0[4] = lightSource4;
      float[][] floatArray0 = new float[3][4];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 791.6026F;
      floatArray1[1] = 1.4567091F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-2107.452F);
      floatArray1[4] = 3613.7F;
      floatArray1[5] = 514.278F;
      floatArray1[6] = 0.3926991F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-1521.7875F);
      floatArray2[1] = 0.3926991F;
      floatArray2[2] = 0.4332556F;
      floatArray2[3] = (float) 791;
      floatArray2[4] = 0.3926991F;
      floatArray2[5] = (-1521.7875F);
      floatArray2[6] = (-2912.258F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) 2147483546;
      floatArray3[1] = 2863.6748F;
      floatArray3[2] = 774.43F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("cvuv", "", (String) null, (Content) null, (Content) null, (Content) null, 0.3926991F, 791.6026F, 791.6026F, 514.278F, false, lightSourceArray0, floatArray0, "cvuv", false, false, false, bigDecimal0, bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(791.6026F, catalogLight0.getDepth(), 0.01F);
      assertEquals("cvuv", catalogLight0.getId());
      assertEquals(514.278F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals("cvuv", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(791.6026F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNotNull(catalogLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(791.6026F, catalogLight0.getDepth(), 0.01F);
      assertEquals("cvuv", catalogLight0.getId());
      assertEquals(514.278F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals("cvuv", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(791.6026F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("cvuv", homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(514.278F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(791.6026F, homeLight0.getHeight(), 0.01F);
      assertEquals(514.278F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(395.8013F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeLight0.getDepth(), 0.01F);
      assertNotNull(homeLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(791.6026F, catalogLight0.getDepth(), 0.01F);
      assertEquals("cvuv", catalogLight0.getId());
      assertEquals(514.278F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals("cvuv", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(791.6026F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("cvuv", homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(514.278F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(791.6026F, homeLight0.getHeight(), 0.01F);
      assertEquals(514.278F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(395.8013F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals(395.8013F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(791.6026F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(514.278F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("cvuv", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(514.278F, homeLight1.getElevation(), 0.01F);
      assertEquals(791.6026F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      
      float float7 = homeLight1.getElevation();
      assertEquals(514.278F, float7, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(791.6026F, catalogLight0.getDepth(), 0.01F);
      assertEquals("cvuv", catalogLight0.getId());
      assertEquals(514.278F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals("cvuv", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(791.6026F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("cvuv", homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(514.278F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(791.6026F, homeLight0.getHeight(), 0.01F);
      assertEquals(514.278F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(395.8013F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals(395.8013F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(791.6026F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(514.278F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("cvuv", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(514.278F, homeLight1.getElevation(), 0.01F);
      assertEquals(791.6026F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "F", "F", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 791.6026F, 2.0F, true, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", true, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = homeDoorOrWindow0.getColor();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(integer0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setColor((Integer) null);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((short) (-15207), bigDecimal1.shortValue());
      assertEquals((byte) (-103), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      
      homeLight0.setDescription("Y");
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      
      boolean boolean0 = homeLight0.isMovable();
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(bigDecimal0);
      
      homeLight0.setPower(0.0F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      
      homeLight0.setElevation(0.0F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      
      Integer integer0 = homeLight0.getColor();
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        homeLight0.setDepth((-4560.7944F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "F", "F", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 791.6026F, 2.0F, true, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", true, bigDecimal0, bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNotNull(sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNotNull(homeDoorOrWindow1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      
      boolean boolean0 = homeDoorOrWindow1.isTopRightPointAt(0.0F, (-761.0F), 0.0F);
      assertFalse(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setModelMirrored(true);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal3 = homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("F", homeDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((short)2, bigDecimal3.shortValue());
      assertEquals((byte)2, bigDecimal3.byteValue());
      assertNotNull(bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      String string0 = homeLight0.getCurrency();
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      homeLight0.addPropertyChangeListener((PropertyChangeListener) null);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      Integer integer0 = new Integer(605525547);
      assertEquals(605525547, (int)integer0);
      assertNotNull(integer0);
      
      homeLight0.setDescription("Y");
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setY((-1.0F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      float float0 = (-1.0F);
      boolean boolean0 = homeLight0.isTopLeftPointAt(0.07982141F, 605525547, 605525547);
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(918L);
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8d", "~%C~~Q7Gb.ZW", "T`j}Y<xx8d", (Content) null, (Content) null, (Content) null, 918L, 918L, 918L, 918L, false, 918L, 918L, sashArray0, (float[][]) null, "~%C~~Q7Gb.ZW", false, bigDecimal0, bigDecimal0);
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((short) (-9244), bigDecimal1.shortValue());
      assertEquals((byte) (-28), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~Q7Gb.ZW");
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "&Bgp^-Fp{G5");
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, "~%C~~Q7Gb.ZW", "T`j}Y<xx8d", uRLContent0, (Content) null, (Content) null, (-2776.5508F), (-2776.5508F), 0.0F, (-1.0F), false, (float[][]) null, "VALUE_ADDED_TAX", true, bigDecimal0, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("T`j}Y<xx8d", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("VALUE_ADDED_TAX", catalogPieceOfFurniture0.getCreator());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2776.5508F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2776.5508F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNotNull(catalogPieceOfFurniture0);
      
      int int0 = catalogDoorOrWindow0.compareTo(catalogPieceOfFurniture0);
      assertEquals(0, int0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("T`j}Y<xx8d", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("VALUE_ADDED_TAX", catalogPieceOfFurniture0.getCreator());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2776.5508F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2776.5508F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isBottomRightPointAt(918L, 918L, 1.0F);
      assertTrue(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((short) (-8326), bigDecimal2.shortValue());
      assertEquals((byte)122, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setShininess((Float) null);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight0.isTopRightPointAt(0.5F, 2.0F, 553.4746F);
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      // Undeclared exception!
      try { 
        homeLight0.setWidth(171.71F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":u#a'zJA";
      stringArray0[1] = "5j5";
      stringArray0[2] = "";
      stringArray0[3] = "{.>i(a7Ss%T";
      stringArray0[4] = "5j5";
      stringArray0[5] = "";
      stringArray0[6] = "=EUsSi|JtT^";
      stringArray0[7] = "5j5";
      Long long0 = new Long(1660L);
      assertEquals(1660L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) 1660L);
      assertEquals(1660.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      sashArray0[5] = sash0;
      sashArray0[6] = sash0;
      sashArray0[7] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-3087.34F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 1660L;
      floatArray1[7] = (-3087.34F);
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (-3087.34F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 1660L;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-3087.34F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = (float) 1660L;
      floatArray4[6] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 1660L;
      floatArray6[3] = 0.0F;
      floatArray6[4] = 0.0F;
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "5j5", "", "5j5", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 1660L, 0.0F, (-3087.34F), 1660L, false, 0.0F, 0.0F, sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "3a>sKSS8RV8^+B3bh]S");
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow(":u#a'zJA", "(xWiKoGrB@v3:.*bBI0", "Ue.1<5vqjo;\",", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-2040.341F), sashArray0, floatArray0, "", false, (BigDecimal) null, (BigDecimal) null);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow1.getSashes();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertNotNull(sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(sashArray1, sashArray0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(8, sashArray1.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeDoorOrWindow1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ANGLE;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "AE7;N^{DwQAOSY.6";
      stringArray0[1] = "h.hCd<-rOA.Su<ck^";
      stringArray0[2] = "AE7;N^{DwQAOSY.6";
      stringArray0[3] = "AE7;N^{DwQAOSY.6";
      long long0 = 1122L;
      Long long1 = new Long(1122L);
      assertEquals(1122L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      String string0 = "!/";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader0, "NAME_VISIBLE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource NAME_VISIBLE
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      String string0 = null;
      homeLight0.move(0.3926991F, 0.3926991F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      
      // Undeclared exception!
      try { 
        homeLight0.setDepth((-638.7989F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow0.setY(0.3926991F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("20!)w7<SHeJ8 4_ q", propertyChangeListener0);
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeDoorOrWindow0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      boolean boolean0 = homeDoorOrWindow1.isBottomLeftPointAt((-577.6907F), (-577.6907F), (-1181.642F));
      assertFalse(boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      boolean boolean1 = homeDoorOrWindow0.isBottomRightPointAt(0.3926991F, 489.0F, (-1160.833F));
      assertFalse(boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setHeight((-3680.3F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle((-2183.0F));
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3.548487F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      Float float0 = homeLight0.getShininess();
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3.548487F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1340L));
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short) (-1340), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash sash0 = new Sash(562.2F, (-458.25803F), (-1560.567F), (-1340L), (-1447.733F));
      assertEquals((-1447.733F), sash0.getEndAngle(), 0.01F);
      assertEquals((-1560.567F), sash0.getWidth(), 0.01F);
      assertEquals(562.2F, sash0.getXAxis(), 0.01F);
      assertEquals((-1340.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-458.25803F), sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash((-458.25803F), 470.0973F, (-1560.567F), (-1560.567F), (-458.25803F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-458.25803F), sash1.getXAxis(), 0.01F);
      assertEquals((-1560.567F), sash1.getWidth(), 0.01F);
      assertEquals((-458.25803F), sash1.getEndAngle(), 0.01F);
      assertEquals((-1560.567F), sash1.getStartAngle(), 0.01F);
      assertEquals(470.0973F, sash1.getYAxis(), 0.01F);
      assertNotNull(sash1);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      System.setCurrentTimeMillis(604800000L);
      Integer integer1 = new Integer(33);
      assertEquals(33, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = integer1.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      assertFalse(integer1.equals((Object)integer0));
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("T`j}Y<xx8:", (Content) null, (Content) null, (-1340L), 5178.24F, (-1447.733F), (-1101.3732F), false, integer1, (float[][]) null, false, 1.0F, false);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture1.setWidth(3027.8245F);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(3027.8245F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setNameVisible(true);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      homePieceOfFurniture1.setHeight(5178.24F);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(3027.8245F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(5178.24F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      BigDecimal bigDecimal1 = homePieceOfFurniture1.getPrice();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(3027.8245F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(5178.24F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertNull(bigDecimal1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      Level level0 = new Level("com.eteks.sweethome3d.model.HomeTexture", 1.5410658F, 0.0F, (-1867.914F));
      assertEquals(1.5410658F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1867.914F), level0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", level0.getName());
      assertNotNull(level0);
      
      float float1 = level0.getElevation();
      assertEquals(1.5410658F, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.5410658F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1867.914F), level0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", level0.getName());
      
      float float2 = level0.getHeight();
      assertEquals((-1867.914F), float2, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1.5410658F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1867.914F), level0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", level0.getName());
      
      homeLight0.setLevel(level0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.5410658F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.5410658F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1867.914F), level0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", level0.getName());
      
      Level level1 = new Level("r[65F3X&EG_8Ag]P6", (-1160.5F), 339.0F, (-1160.5F));
      assertFalse(level1.equals((Object)level0));
      assertEquals("r[65F3X&EG_8Ag]P6", level1.getName());
      assertEquals((-1160.5F), level1.getElevation(), 0.01F);
      assertEquals((-1160.5F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(339.0F, level1.getFloorThickness(), 0.01F);
      assertNotNull(level1);
      
      Level level2 = level1.clone();
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertEquals("r[65F3X&EG_8Ag]P6", level1.getName());
      assertEquals((-1160.5F), level1.getElevation(), 0.01F);
      assertEquals((-1160.5F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(339.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("r[65F3X&EG_8Ag]P6", level2.getName());
      assertEquals((-1160.5F), level2.getHeight(), 0.01F);
      assertEquals(339.0F, level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-1160.5F), level2.getElevation(), 0.01F);
      assertNotNull(level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      boolean boolean0 = homeLight0.isAtLevel((Level) null);
      assertFalse(boolean0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.5410658F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNotNull(homeLight0);
      
      // Undeclared exception!
      try { 
        homeLight0.setDepth((-1695.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotNull(homeLight0);
      
      TextStyle textStyle0 = new TextStyle((-1251.2749F));
      assertEquals((-1251.2749F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveStyle((-1.0F));
      assertFalse(textStyle1.equals((Object)textStyle0));
      assertEquals((-1251.2749F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals((-1.0F), textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isBold());
      assertFalse(textStyle1.isItalic());
      assertNotNull(textStyle1);
      assertNotSame(textStyle0, textStyle1);
      assertNotSame(textStyle1, textStyle0);
      
      TextStyle textStyle2 = textStyle0.deriveBoldStyle(true);
      assertFalse(textStyle0.equals((Object)textStyle1));
      assertFalse(textStyle2.equals((Object)textStyle1));
      assertFalse(textStyle2.equals((Object)textStyle0));
      assertEquals((-1251.2749F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle2.isItalic());
      assertTrue(textStyle2.isBold());
      assertEquals((-1251.2749F), textStyle2.getFontSize(), 0.01F);
      assertNotNull(textStyle2);
      assertNotSame(textStyle0, textStyle1);
      assertNotSame(textStyle0, textStyle2);
      assertNotSame(textStyle2, textStyle1);
      assertNotSame(textStyle2, textStyle0);
      
      TextStyle textStyle3 = textStyle0.deriveItalicStyle(true);
      assertFalse(textStyle0.equals((Object)textStyle1));
      assertFalse(textStyle0.equals((Object)textStyle2));
      assertFalse(textStyle3.equals((Object)textStyle0));
      assertFalse(textStyle3.equals((Object)textStyle1));
      assertFalse(textStyle3.equals((Object)textStyle2));
      assertEquals((-1251.2749F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals((-1251.2749F), textStyle3.getFontSize(), 0.01F);
      assertTrue(textStyle3.isItalic());
      assertFalse(textStyle3.isBold());
      assertNotNull(textStyle3);
      assertNotSame(textStyle0, textStyle3);
      assertNotSame(textStyle0, textStyle1);
      assertNotSame(textStyle0, textStyle2);
      assertNotSame(textStyle3, textStyle0);
      assertNotSame(textStyle3, textStyle1);
      assertNotSame(textStyle3, textStyle2);
      
      float float0 = homeLight0.getNameXOffset();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      boolean boolean0 = homeLight0.isPointAt(0.0F, (-1251.2749F), (-1.0F));
      assertFalse(boolean0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = homeLight0.isModelMirrored();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      homeLight0.setName("");
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      String string0 = homeLight0.getName();
      assertEquals("", string0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(918L);
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8d", "~%C~~Q7Gb.ZW", "T`j}Y<xx8d", (Content) null, (Content) null, (Content) null, 918L, 918L, 918L, 918L, false, 918L, 918L, sashArray0, (float[][]) null, "~%C~~Q7Gb.ZW", false, bigDecimal0, bigDecimal0);
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((short) (-9244), bigDecimal1.shortValue());
      assertEquals((byte) (-28), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~Q7Gb.ZW");
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isBottomRightPointAt(918L, 918L, 1.0F);
      assertTrue(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((short) (-8326), bigDecimal2.shortValue());
      assertEquals((byte)122, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":u#a'zJA";
      stringArray0[1] = "5j5";
      stringArray0[2] = "";
      stringArray0[3] = "{.>i(a7Ss%T";
      stringArray0[4] = "5j5";
      stringArray0[5] = "";
      stringArray0[6] = "=EUsSi|JtT^";
      stringArray0[7] = "5j5";
      Long long0 = new Long(1660L);
      assertEquals(1660L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) 1660L);
      assertEquals(1660.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      sashArray0[5] = sash0;
      sashArray0[6] = sash0;
      sashArray0[7] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-3087.34F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 1660L;
      floatArray1[7] = (-3087.34F);
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (-3087.34F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 1660L;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-3087.34F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = (float) 1660L;
      floatArray4[6] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray5));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 1660L;
      floatArray6[3] = 0.0F;
      floatArray6[4] = 0.0F;
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "5j5", "", "5j5", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 1660L, 0.0F, (-3087.34F), 1660L, false, 0.0F, 0.0F, sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "3a>sKSS8RV8^+B3bh]S");
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow(":u#a'zJA", "(xWiKoGrB@v3:.*bBI0", "Ue.1<5vqjo;\",", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-2040.341F), sashArray0, floatArray0, "", false, (BigDecimal) null, (BigDecimal) null);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow1.getSashes();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNotNull(sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(sashArray1, sashArray0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(8, sashArray1.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      float float2 = homeDoorOrWindow0.getNameAngle();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals(float2, float1, 0.01F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-255.36096F), (-460.47623F), (-1447.733F), 1.0F, (-1.0F));
      assertEquals((-255.36096F), sash0.getXAxis(), 0.01F);
      assertEquals((-1447.733F), sash0.getWidth(), 0.01F);
      assertEquals((-460.47623F), sash0.getYAxis(), 0.01F);
      assertEquals(1.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(562.2F, (-460.47623F), 0.5F, 1786.9994F, (-1447.733F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-1447.733F), sash1.getEndAngle(), 0.01F);
      assertEquals(562.2F, sash1.getXAxis(), 0.01F);
      assertEquals(0.5F, sash1.getWidth(), 0.01F);
      assertEquals(1786.9994F, sash1.getStartAngle(), 0.01F);
      assertEquals((-460.47623F), sash1.getYAxis(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(382.666F, 470.0973F, (-1.0F), (-1.0F), (-1.0F));
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals((-1.0F), sash2.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash2.getEndAngle(), 0.01F);
      assertEquals(470.0973F, sash2.getYAxis(), 0.01F);
      assertEquals(382.666F, sash2.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash2.getWidth(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Ue.1<5vqjo;\",", "~%C~~QGb.ZW", "Ue.1<5vqjo;\",", (Content) null, (Content) null, (Content) null, (-2196.4375F), 1786.9994F, (-1560.567F), 0.0F, false, 1786.9994F, 562.2F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-2196.4375F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getId());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-2196.4375F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getId());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-2196.4375F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1098.2188F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2196.4375F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      float float0 = homeDoorOrWindow0.getGroundElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-2196.4375F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1098.2188F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2196.4375F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      float float1 = homeDoorOrWindow0.getX();
      assertEquals((-1098.2188F), float1, 0.01F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-2196.4375F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1098.2188F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2196.4375F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash(3640.2683F, 1954.6F, (-458.25803F), (-1447.733F), (-1.0F));
      assertEquals(3640.2683F, sash0.getXAxis(), 0.01F);
      assertEquals((-1447.733F), sash0.getStartAngle(), 0.01F);
      assertEquals((-458.25803F), sash0.getWidth(), 0.01F);
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertEquals(1954.6F, sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash((-1349L), 1954.6F, 1954.6F, 3640.2683F, 562.2F);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(3640.2683F, sash1.getStartAngle(), 0.01F);
      assertEquals((-1349.0F), sash1.getXAxis(), 0.01F);
      assertEquals(562.2F, sash1.getEndAngle(), 0.01F);
      assertEquals(1954.6F, sash1.getYAxis(), 0.01F);
      assertEquals(1954.6F, sash1.getWidth(), 0.01F);
      assertNotNull(sash1);
      
      Sash sash2 = new Sash(1350.5406F, 1954.6F, 1350.5406F, (-1447.733F), 470.0973F);
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals(1350.5406F, sash2.getXAxis(), 0.01F);
      assertEquals(1954.6F, sash2.getYAxis(), 0.01F);
      assertEquals(470.0973F, sash2.getEndAngle(), 0.01F);
      assertEquals((-1447.733F), sash2.getStartAngle(), 0.01F);
      assertEquals(1350.5406F, sash2.getWidth(), 0.01F);
      assertNotNull(sash2);
      
      MathContext mathContext0 = MathContext.DECIMAL128;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal1.shortValue());
      assertEquals((byte) (-69), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("~%C~~QGb.ZW", "", "VALUE_ADDED_TAX", (Content) null, (Content) null, (Content) null, 791.6026F, (-1560.567F), 2.0F, 2.0F, false, (-458.25803F), 2.0F, sashArray0, (float[][]) null, "T`j}Y<xx8:", false, bigDecimal0, bigDecimal0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertNotNull(sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-780.2835F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNotNull(homeDoorOrWindow1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~QGb.ZW");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = homeDoorOrWindow1.getColor();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-780.2835F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(integer1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow1.setColor((Integer) null);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-780.2835F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow1.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-780.2835F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      float float0 = homeDoorOrWindow1.getDepth();
      assertEquals((-1560.567F), float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-780.2835F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-458.25803F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertEquals((-1560.567F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-780.2835F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      homeLight0.setMovable(false);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      int int0 = Integer.min(1073741824, 720);
      assertEquals(720, int0);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(bigDecimal0);
      
      homeLight0.setDescription("com.eteks.sweethome3d.tools.OperatingSystem$1");
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$1", homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setVisible(false);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$1", homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      Float float0 = homeLight0.getShininess();
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$1", homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      Sash[] sashArray0 = new Sash[9];
      Sash sash0 = new Sash((-1290.2871F), (-1290.2871F), 1.0F, 0.0F, 0.0F);
      assertEquals(1.0F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1290.2871F), sash0.getYAxis(), 0.01F);
      assertEquals((-1290.2871F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-2383.374F), 1.0F, 3542.97F, (-1049.0F), 2879.46F);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(1.0F, sash1.getYAxis(), 0.01F);
      assertEquals((-2383.374F), sash1.getXAxis(), 0.01F);
      assertEquals(3542.97F, sash1.getWidth(), 0.01F);
      assertEquals(2879.46F, sash1.getEndAngle(), 0.01F);
      assertEquals((-1049.0F), sash1.getStartAngle(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(0.0F, 3542.97F, 2879.46F, 2.0F, (-1.0F));
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals(0.0F, sash2.getXAxis(), 0.01F);
      assertEquals(2879.46F, sash2.getWidth(), 0.01F);
      assertEquals(2.0F, sash2.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash2.getEndAngle(), 0.01F);
      assertEquals(3542.97F, sash2.getYAxis(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":u#a'zJA";
      stringArray0[1] = "5j5";
      stringArray0[2] = "";
      stringArray0[3] = "{.>i(a7Ss%T";
      stringArray0[4] = "5j5";
      stringArray0[5] = "";
      stringArray0[6] = "=EUsSi|JtT^";
      stringArray0[7] = "5j5";
      Long long0 = new Long(1660L);
      assertEquals(1660L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) 1660L);
      assertEquals(1660.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Sash[] sashArray1 = new Sash[8];
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      Sash sash3 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray1[0] = sash3;
      sashArray1[1] = sash3;
      sashArray1[2] = sash3;
      sashArray1[3] = sash3;
      sashArray1[4] = sash3;
      sashArray1[5] = sash3;
      sashArray1[6] = sash3;
      sashArray1[7] = sash3;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-3087.34F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 1660L;
      floatArray1[7] = (-3087.34F);
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (-3087.34F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) 1660L;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-3087.34F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = (float) 1660L;
      floatArray4[6] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 1660L;
      floatArray6[3] = 0.0F;
      floatArray6[4] = 0.0F;
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "5j5", "", "5j5", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 1660L, 0.0F, (-3087.34F), 1660L, false, 0.0F, 0.0F, sashArray1, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "3a>sKSS8RV8^+B3bh]S");
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(8, sashArray1.length);
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNotSame(sashArray1, sashArray0);
      assertEquals(8, sashArray1.length);
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow(":u#a'zJA", "(xWiKoGrB@v3:.*bBI0", "Ue.1<5vqjo;\",", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-2040.341F), sashArray1, floatArray0, "", false, (BigDecimal) null, (BigDecimal) null);
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(8, sashArray1.length);
      assertEquals(6, floatArray0.length);
      
      Sash[] sashArray2 = catalogDoorOrWindow1.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray2.equals((Object)sashArray1));
      assertFalse(sashArray2.equals((Object)sashArray0));
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNotNull(sashArray2);
      assertNotSame(sashArray1, sashArray0);
      assertNotSame(sashArray1, sashArray2);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(sashArray2, sashArray1);
      assertNotSame(sashArray2, sashArray0);
      assertEquals(8, sashArray1.length);
      assertEquals(8, sashArray2.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertFalse(sashArray1.equals((Object)sashArray2));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(8, sashArray1.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertFalse(sashArray1.equals((Object)sashArray2));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-2040.341F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow1.getCatalogId());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(sashArray1, sashArray0);
      assertNotSame(sashArray1, sashArray2);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(8, sashArray1.length);
      assertEquals(6, floatArray0.length);
      
      Content content0 = homeDoorOrWindow1.getIcon();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertFalse(sashArray1.equals((Object)sashArray2));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-2040.341F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow1.getCatalogId());
      assertNull(content0);
      assertNotSame(sashArray1, sashArray0);
      assertNotSame(sashArray1, sashArray2);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(8, sashArray1.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      float float1 = homeLight0.getAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      homeLight0.setAngle((-3964.61F));
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.07982141F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Y", propertyChangeListener0);
      assertEquals("Y", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("Y", propertyChangeListenerProxy0.getPropertyName());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(bigDecimal0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setElevation(0.0F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      // Undeclared exception!
      try { 
        homeLight0.setWidth(0.3926991F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-102);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)2, (byte) (-102)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Long long0 = Long.valueOf(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.valueOf(0L);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = Long.valueOf(0L);
      assertEquals(0L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      Float float0 = new Float((double) (byte) (-62));
      assertEquals((-62.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[6];
      Sash sash0 = new Sash((-749.51F), (byte)2, (-444.2851F), (-749.51F), (byte)2);
      assertEquals(2.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-444.2851F), sash0.getWidth(), 0.01F);
      assertEquals((-749.51F), sash0.getXAxis(), 0.01F);
      assertEquals((-749.51F), sash0.getStartAngle(), 0.01F);
      assertEquals(2.0F, sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((byte) (-62), (-3399.9778F), (-2417.0F), 1.0F, (byte) (-102));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-3399.9778F), sash1.getYAxis(), 0.01F);
      assertEquals(1.0F, sash1.getStartAngle(), 0.01F);
      assertEquals((-2417.0F), sash1.getWidth(), 0.01F);
      assertEquals((-102.0F), sash1.getEndAngle(), 0.01F);
      assertEquals((-62.0F), sash1.getXAxis(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-975.68F), 211.867F, 0L, (byte) (-102), (byte) (-102));
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals((-102.0F), sash2.getEndAngle(), 0.01F);
      assertEquals(211.867F, sash2.getYAxis(), 0.01F);
      assertEquals((-975.68F), sash2.getXAxis(), 0.01F);
      assertEquals(0.0F, sash2.getWidth(), 0.01F);
      assertEquals((-102.0F), sash2.getStartAngle(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(0.0F, 2.0F, (byte)2, (byte) (-62), 1L);
      assertFalse(sash3.equals((Object)sash1));
      assertFalse(sash3.equals((Object)sash0));
      assertFalse(sash3.equals((Object)sash2));
      assertEquals(2.0F, sash3.getYAxis(), 0.01F);
      assertEquals(1.0F, sash3.getEndAngle(), 0.01F);
      assertEquals(2.0F, sash3.getWidth(), 0.01F);
      assertEquals(0.0F, sash3.getXAxis(), 0.01F);
      assertEquals((-62.0F), sash3.getStartAngle(), 0.01F);
      assertNotNull(sash3);
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(2466.223F, (byte) (-62), (-2196.37F), 1036.0F, 3.4028235E38F);
      assertFalse(sash4.equals((Object)sash2));
      assertFalse(sash4.equals((Object)sash1));
      assertFalse(sash4.equals((Object)sash3));
      assertFalse(sash4.equals((Object)sash0));
      assertEquals((-2196.37F), sash4.getWidth(), 0.01F);
      assertEquals(3.4028235E38F, sash4.getEndAngle(), 0.01F);
      assertEquals((-62.0F), sash4.getYAxis(), 0.01F);
      assertEquals(2466.223F, sash4.getXAxis(), 0.01F);
      assertEquals(1036.0F, sash4.getStartAngle(), 0.01F);
      assertNotNull(sash4);
      
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(3078.7952F, (byte) (-62), 291.1F, (-2166.5127F), 211.867F);
      assertFalse(sash5.equals((Object)sash0));
      assertFalse(sash5.equals((Object)sash1));
      assertFalse(sash5.equals((Object)sash3));
      assertFalse(sash5.equals((Object)sash2));
      assertFalse(sash5.equals((Object)sash4));
      assertEquals((-2166.5127F), sash5.getStartAngle(), 0.01F);
      assertEquals((-62.0F), sash5.getYAxis(), 0.01F);
      assertEquals(211.867F, sash5.getEndAngle(), 0.01F);
      assertEquals(291.1F, sash5.getWidth(), 0.01F);
      assertEquals(3078.7952F, sash5.getXAxis(), 0.01F);
      assertNotNull(sash5);
      
      sashArray0[5] = sash5;
      float[][] floatArray0 = new float[6][4];
      float[] floatArray1 = new float[6];
      floatArray1[0] = (-2417.0F);
      floatArray1[1] = 2466.223F;
      floatArray1[2] = (float) 0L;
      floatArray1[3] = (-444.2851F);
      floatArray1[4] = (float) (byte)2;
      floatArray1[5] = 1.0706909F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = (-2196.37F);
      floatArray2[2] = (float) 1L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 2466.223F;
      floatArray3[1] = (-2236.9F);
      floatArray3[2] = (float) (byte)2;
      floatArray3[3] = 2466.223F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = (-444.2851F);
      floatArray4[1] = (-975.68F);
      floatArray4[2] = (float) (byte) (-62);
      floatArray4[3] = (float) (byte)2;
      floatArray4[4] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      
      floatArray5[0] = (-749.51F);
      floatArray5[1] = (-2417.0F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[0];
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      
      floatArray0[5] = floatArray6;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("t91UV.C&HtqC60~", "5K,9VIl>xKG<", "", (String) null, (String[]) null, long2, float0, resourceURLContent0, resourceURLContent0, resourceURLContent0, (byte) (-62), 1.0F, 0.5F, 349.59863F, true, 1L, (byte)2, sashArray0, floatArray0, "t91UV.C&HtqC60~", false, false, true, bigDecimal0, bigDecimal0, (String) null);
      assertFalse(long2.equals((Object)long0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("5K,9VIl>xKG<", catalogDoorOrWindow0.getName());
      assertEquals((-62.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("t91UV.C&HtqC60~", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(349.59863F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.5F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-62.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("t91UV.C&HtqC60~", catalogDoorOrWindow0.getId());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(long2.equals((Object)long0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("5K,9VIl>xKG<", catalogDoorOrWindow0.getName());
      assertEquals((-62.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("t91UV.C&HtqC60~", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(349.59863F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.5F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-62.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("t91UV.C&HtqC60~", catalogDoorOrWindow0.getId());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("t91UV.C&HtqC60~", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("5K,9VIl>xKG<", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(349.59863F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-62.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-31.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(349.59863F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(long2.equals((Object)long0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("5K,9VIl>xKG<", catalogDoorOrWindow0.getName());
      assertEquals((-62.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("t91UV.C&HtqC60~", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(349.59863F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.5F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-62.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("t91UV.C&HtqC60~", catalogDoorOrWindow0.getId());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("t91UV.C&HtqC60~", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("5K,9VIl>xKG<", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(349.59863F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-62.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-31.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(349.59863F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(349.59863F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(349.59863F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("t91UV.C&HtqC60~", homeDoorOrWindow1.getCatalogId());
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("5K,9VIl>xKG<", homeDoorOrWindow1.getName());
      assertEquals(0.5F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-62.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-31.0F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow1.getPrice();
      assertFalse(long2.equals((Object)long0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("5K,9VIl>xKG<", catalogDoorOrWindow0.getName());
      assertEquals((-62.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("t91UV.C&HtqC60~", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(349.59863F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.5F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-62.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("t91UV.C&HtqC60~", catalogDoorOrWindow0.getId());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("t91UV.C&HtqC60~", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("5K,9VIl>xKG<", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(349.59863F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-62.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-31.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(349.59863F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(349.59863F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(349.59863F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("t91UV.C&HtqC60~", homeDoorOrWindow1.getCatalogId());
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("5K,9VIl>xKG<", homeDoorOrWindow1.getName());
      assertEquals(0.5F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-62.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-31.0F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8d", "~%C~~Q7Gb.ZW", "T`j}Y<xx8d", (Content) null, (Content) null, (Content) null, 918L, 918L, 918L, 918L, true, 918L, 918L, sashArray0, (float[][]) null, "~%C~~Q7Gb.ZW", true, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~Q7Gb.ZW");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isPointAt((-1.0F), (-1.0F), (-1.0F));
      assertFalse(boolean0);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(918L, (-2814.0F), 100.49819F, (-2814.0F), 25.0468F);
      assertEquals(100.49819F, sash0.getWidth(), 0.01F);
      assertEquals((-2814.0F), sash0.getYAxis(), 0.01F);
      assertEquals(918.0F, sash0.getXAxis(), 0.01F);
      assertEquals((-2814.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(25.0468F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "T`j}Y<xx8d", "", resourceURLContent0, resourceURLContent0, (Content) null, 918L, 100.49819F, 100.49819F, 100.49819F, false, (-2814.0F), 25.0468F, sashArray0, (float[][]) null, (String) null, false, bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(25.0468F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(100.49819F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(100.49819F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(100.49819F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-2814.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(25.0468F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(100.49819F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(100.49819F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(100.49819F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-2814.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNotNull(sashArray1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(25.0468F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(100.49819F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(100.49819F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(100.49819F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-2814.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(100.49819F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(50.249096F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(100.49819F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-2814.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(100.49819F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(100.49819F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(25.0468F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(25.0468F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(100.49819F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(100.49819F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(100.49819F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-2814.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(100.49819F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(50.249096F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(100.49819F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-2814.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(100.49819F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(100.49819F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(25.0468F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((short)10, bigDecimal2.shortValue());
      assertEquals((byte)10, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertEquals(1, sashArray0.length);
      
      homeDoorOrWindow0.setName("");
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(25.0468F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(100.49819F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(100.49819F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(100.49819F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-2814.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(100.49819F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(50.249096F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(100.49819F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-2814.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(100.49819F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(100.49819F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(25.0468F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertEquals(1, sashArray0.length);
      
      boolean boolean1 = homeDoorOrWindow0.isBottomRightPointAt(1L, 2.0F, 1.0F);
      assertFalse(boolean1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(boolean1 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(25.0468F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(100.49819F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(100.49819F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(100.49819F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-2814.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(100.49819F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(50.249096F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(100.49819F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-2814.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(100.49819F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(100.49819F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(25.0468F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertEquals(1, sashArray0.length);
      
      Level level0 = homeDoorOrWindow0.getLevel();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(25.0468F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(100.49819F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(100.49819F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(100.49819F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-2814.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(100.49819F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(50.249096F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(100.49819F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-2814.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(100.49819F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(100.49819F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(25.0468F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(level0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertEquals(1, sashArray0.length);
      
      float[][] floatArray0 = homeDoorOrWindow0.getModelRotation();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(25.0468F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(100.49819F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(100.49819F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(100.49819F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-2814.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(100.49819F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(50.249096F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(100.49819F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-2814.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(100.49819F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(100.49819F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(25.0468F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNotNull(floatArray0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertEquals(1, sashArray0.length);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1349L), 1979.3031F, 1979.3031F, 3662.1428F, (-1349L));
      assertEquals(1979.3031F, sash0.getWidth(), 0.01F);
      assertEquals(3662.1428F, sash0.getStartAngle(), 0.01F);
      assertEquals(1979.3031F, sash0.getYAxis(), 0.01F);
      assertEquals((-1349.0F), sash0.getEndAngle(), 0.01F);
      assertEquals((-1349.0F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal1.shortValue());
      assertEquals((byte) (-69), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "", "VALUE_ADDED_TAX", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 2.0F, 2.0F, false, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", false, bigDecimal0, bigDecimal0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNotNull(homeDoorOrWindow1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = homeDoorOrWindow1.getColor();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(integer0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow1.setColor((Integer) null);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      Float float0 = new Float((-194.7276F));
      assertEquals((-194.7276F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      homeDoorOrWindow0.setNameVisible(false);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow1.setShininess(float0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-194.7276F), homeDoorOrWindow1.getShininess(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow1.isMovable();
      assertFalse(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-194.7276F), homeDoorOrWindow1.getShininess(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Float float1 = homeDoorOrWindow1.getShininess();
      assertEquals((-194.7276F), (float)float1, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-194.7276F), homeDoorOrWindow1.getShininess(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNotNull(float1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Float float2 = homeDoorOrWindow0.getShininess();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(float2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean2 = homeLight1.isTopRightPointAt(3.4028235E38F, 2.0F, (-13));
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = homeLight0.isPointAt(2.0F, 1594.7733F, 777.51F);
      assertFalse(boolean3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      float float0 = homeLight1.getNameYOffset();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float1 = homeLight1.getNameAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(float1, float0, 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      Sash sash0 = new Sash(1.0F, (-969.8F), (-969.8F), (-969.8F), 1.0F);
      assertEquals((-969.8F), sash0.getWidth(), 0.01F);
      assertEquals(1.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-969.8F), sash0.getYAxis(), 0.01F);
      assertEquals(1.0F, sash0.getXAxis(), 0.01F);
      assertEquals((-969.8F), sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash(1.0F, 1.0F, 726.058F, (-969.8F), 1.0F);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-969.8F), sash1.getStartAngle(), 0.01F);
      assertEquals(1.0F, sash1.getXAxis(), 0.01F);
      assertEquals(1.0F, sash1.getYAxis(), 0.01F);
      assertEquals(726.058F, sash1.getWidth(), 0.01F);
      assertEquals(1.0F, sash1.getEndAngle(), 0.01F);
      assertNotNull(sash1);
      
      Sash sash2 = new Sash(726.058F, 1.0F, 1.0F, 470.0973F, (-1.0F));
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals(1.0F, sash2.getWidth(), 0.01F);
      assertEquals(1.0F, sash2.getYAxis(), 0.01F);
      assertEquals(726.058F, sash2.getXAxis(), 0.01F);
      assertEquals(470.0973F, sash2.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash2.getEndAngle(), 0.01F);
      assertNotNull(sash2);
      
      Content content0 = homeLight0.getIcon();
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(content0);
      
      Sash[] sashArray0 = new Sash[1];
      sashArray0[0] = sash1;
      BigDecimal bigDecimal0 = new BigDecimal(764L);
      assertEquals((byte) (-4), bigDecimal0.byteValue());
      assertEquals((short)764, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("|", "|", "|", (Content) null, (Content) null, (Content) null, (-1.0F), (-2923.0F), 5602.0F, 1413.6372F, false, 1.0F, 1.53413978E9F, sashArray0, (float[][]) null, "NAME_STYLE", false, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-4), bigDecimal0.byteValue());
      assertEquals((short)764, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.53413978E9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(5602.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("|", catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-2923.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1413.6372F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("|", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("|", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("NAME_STYLE", catalogDoorOrWindow0.getCreator());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-4), bigDecimal0.byteValue());
      assertEquals((short)764, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.53413978E9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(5602.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("|", catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-2923.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1413.6372F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("|", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("|", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("NAME_STYLE", catalogDoorOrWindow0.getCreator());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-4), bigDecimal0.byteValue());
      assertEquals((short)764, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.53413978E9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(5602.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("|", catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-2923.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1413.6372F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("|", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("|", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("NAME_STYLE", catalogDoorOrWindow0.getCreator());
      assertEquals("|", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(5602.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.53413978E9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("|", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1413.6372F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("|", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1413.6372F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-2923.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1461.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-4), bigDecimal0.byteValue());
      assertEquals((short)764, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.53413978E9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(5602.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("|", catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-2923.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1413.6372F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("|", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("|", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("NAME_STYLE", catalogDoorOrWindow0.getCreator());
      assertEquals("|", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(5602.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.53413978E9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("|", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1413.6372F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("|", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1413.6372F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-2923.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1461.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("|", homeDoorOrWindow1.getDescription());
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1413.6372F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("|", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(1.53413978E9F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1461.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(1413.6372F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(5602.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-2923.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("|", homeDoorOrWindow1.getName());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      homeDoorOrWindow0.setName((String) null);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((byte) (-4), bigDecimal0.byteValue());
      assertEquals((short)764, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.53413978E9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(5602.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("|", catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-2923.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1413.6372F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("|", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("|", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("NAME_STYLE", catalogDoorOrWindow0.getCreator());
      assertEquals("|", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(5602.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.53413978E9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1413.6372F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("|", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1413.6372F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-2923.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1461.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(1, sashArray0.length);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertEquals((byte) (-4), bigDecimal0.byteValue());
      assertEquals((short)764, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.53413978E9F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(5602.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("|", catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-2923.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1413.6372F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("|", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("|", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("NAME_STYLE", catalogDoorOrWindow0.getCreator());
      assertEquals("|", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(5602.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.53413978E9F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1413.6372F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("|", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1413.6372F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-2923.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1461.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-0.5F), homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals("|", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertEquals(1.53413978E9F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals((-1461.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(5602.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals((-2923.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(1413.6372F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getName());
      assertEquals((-1.0F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(1413.6372F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("|", homeDoorOrWindow2.getDescription());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow2);
      assertEquals(1, sashArray0.length);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow2.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 33;
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = (-2397.0F);
      homeLight1.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean2 = homeLight1.isNameVisible();
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = homeLight0.isMovable();
      assertFalse(boolean3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      
      TextStyle textStyle0 = new TextStyle(33);
      assertEquals(33.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveStyle(33);
      assertEquals(33.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle1.isBold());
      assertFalse(textStyle1.isItalic());
      assertEquals(33.0F, textStyle1.getFontSize(), 0.01F);
      assertNotNull(textStyle1);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      
      TextStyle textStyle2 = textStyle1.deriveBoldStyle(true);
      assertFalse(textStyle2.equals((Object)textStyle0));
      assertFalse(textStyle2.equals((Object)textStyle1));
      assertEquals(33.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle1.isBold());
      assertFalse(textStyle1.isItalic());
      assertEquals(33.0F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle2.isItalic());
      assertTrue(textStyle2.isBold());
      assertEquals(33.0F, textStyle2.getFontSize(), 0.01F);
      assertNotNull(textStyle2);
      assertNotSame(textStyle0, textStyle2);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      assertNotSame(textStyle1, textStyle2);
      assertNotSame(textStyle2, textStyle0);
      assertNotSame(textStyle2, textStyle1);
      
      TextStyle textStyle3 = textStyle1.deriveItalicStyle(false);
      assertFalse(textStyle0.equals((Object)textStyle2));
      assertFalse(textStyle1.equals((Object)textStyle2));
      assertFalse(textStyle3.equals((Object)textStyle2));
      assertEquals(33.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle1.isBold());
      assertFalse(textStyle1.isItalic());
      assertEquals(33.0F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle3.isItalic());
      assertEquals(33.0F, textStyle3.getFontSize(), 0.01F);
      assertFalse(textStyle3.isBold());
      assertNotNull(textStyle3);
      assertNotSame(textStyle0, textStyle2);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle0, textStyle3);
      assertSame(textStyle1, textStyle0);
      assertNotSame(textStyle1, textStyle2);
      assertSame(textStyle1, textStyle3);
      assertSame(textStyle3, textStyle1);
      assertNotSame(textStyle3, textStyle2);
      assertSame(textStyle3, textStyle0);
      
      boolean boolean4 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      // Undeclared exception!
      try { 
        homeLight0.getModelRotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1349L), 1979.3031F, 1979.3031F, 3640.2683F, (-1349L));
      assertEquals(1979.3031F, sash0.getYAxis(), 0.01F);
      assertEquals(1979.3031F, sash0.getWidth(), 0.01F);
      assertEquals(3640.2683F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1349.0F), sash0.getXAxis(), 0.01F);
      assertEquals((-1349.0F), sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T`j}Y<xx8:");
      assertFalse(boolean0);
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((byte) (-69), bigDecimal1.byteValue());
      assertEquals((short) (-1349), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "", "VALUE_ADDED_TAX", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 2.0F, 2.0F, true, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", true, bigDecimal0, bigDecimal0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNotNull(sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      boolean boolean1 = homeDoorOrWindow1.containsPoint((-3298.9F), 1.4567091F, 3640.2683F);
      assertFalse(boolean1);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean1 == boolean0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("T`j}Y<xx8:");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = homeDoorOrWindow1.getColor();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(integer0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow1.setColor((Integer) null);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow1.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      boolean boolean2 = homeDoorOrWindow1.isDeformable();
      assertTrue(boolean2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(bigDecimal0);
      
      homeLight0.setX((-1.0F));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      BigDecimal bigDecimal0 = homeLight1.getPriceValueAddedTaxIncluded();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight1.isNameCenterPointAt(139.16F, 1237.5F, 1237.5F);
      assertTrue(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = homeLight0.getY();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      
      homeLight1.setVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(bigDecimal0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Y", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt((-1.0F), (-1.0F), 0.07982141F);
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNotSame(homeLight0, homeLight1);
      
      float float0 = homeLight1.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Y", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setElevation(0.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      int int0 = Integer.min(3, 3);
      assertEquals(3, int0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight0.isTopRightPointAt(3, 3, (-2090.6897F));
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNotSame(homeLight0, homeLight1);
      
      // Undeclared exception!
      try { 
        homeLight0.setWidth((-323.83453F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      Level level0 = new Level("g)z\"BDv2X[M(f", (-1831.7F), (-1831.7F), 0.3926991F);
      assertEquals(0.3926991F, level0.getHeight(), 0.01F);
      assertEquals("g)z\"BDv2X[M(f", level0.getName());
      assertEquals((-1831.7F), level0.getElevation(), 0.01F);
      assertEquals((-1831.7F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      homeLight0.setLevel(level0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1831.7F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.3926991F, level0.getHeight(), 0.01F);
      assertEquals("g)z\"BDv2X[M(f", level0.getName());
      assertEquals((-1831.7F), level0.getElevation(), 0.01F);
      assertEquals((-1831.7F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      int int0 = Integer.min(626, 3);
      assertEquals(3, int0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight1.isTopRightPointAt(626, 2.0F, 626);
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = homeLight0.isPointAt((-1.0F), 626, 626);
      assertTrue(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1 == boolean0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNotSame(homeLight0, homeLight1);
      
      float float0 = homeLight1.getNameYOffset();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float1 = homeLight1.getNameAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(float1, float0, 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      Level level0 = new Level((String) null, 0.0F, (-7852.5F), 0.0F);
      assertEquals((-7852.5F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertNotNull(level0);
      
      float float1 = level0.getElevation();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals((-7852.5F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      
      float float2 = level0.getHeight();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals((-7852.5F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      
      homeLight0.setLevel(level0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-7852.5F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      
      Level level1 = new Level("cX  \"UTe", 0.0F, 0.0F, 0.0F);
      assertFalse(level1.equals((Object)level0));
      assertEquals("cX  \"UTe", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertNotNull(level1);
      
      Level level2 = level1.clone();
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertEquals("cX  \"UTe", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("cX  \"UTe", level2.getName());
      assertEquals(0.0F, level2.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level2.getElevation(), 0.01F);
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertTrue(level2.isVisible());
      assertNotNull(level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      boolean boolean0 = homeLight0.isAtLevel(level1);
      assertFalse(boolean0);
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("cX  \"UTe", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1349L), 1979.3031F, 1979.3031F, 3662.1428F, (-1349L));
      assertEquals((-1349.0F), sash0.getXAxis(), 0.01F);
      assertEquals(3662.1428F, sash0.getStartAngle(), 0.01F);
      assertEquals(1979.3031F, sash0.getWidth(), 0.01F);
      assertEquals(1979.3031F, sash0.getYAxis(), 0.01F);
      assertEquals((-1349.0F), sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((byte) (-69), bigDecimal1.byteValue());
      assertEquals((short) (-1349), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "", "VALUE_ADDED_TAX", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 2.0F, 2.0F, true, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", true, bigDecimal0, bigDecimal0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNotNull(homeDoorOrWindow1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("T`j}Y<xx8:");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = homeDoorOrWindow1.getColor();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(integer0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow1.setColor((Integer) null);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      Float float0 = new Float((-194.7276F));
      assertEquals((-194.7276F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      homeDoorOrWindow1.setShininess(float0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-194.7276F), homeDoorOrWindow1.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow1.isMovable();
      assertTrue(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-194.7276F), homeDoorOrWindow1.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNotNull(homePieceOfFurniture0);
      
      String string0 = homePieceOfFurniture0.getStaircaseCutOutShape();
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      Level level0 = new Level((String) null, 0.0F, (-4336.6826F), 1.0F);
      assertEquals((-4336.6826F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(1.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      boolean boolean0 = homeLight0.isAtLevel(level0);
      assertFalse(boolean0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals((-4336.6826F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(1.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      
      float float1 = homeLight0.getNameAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      boolean boolean1 = homeLight0.isBottomRightPointAt((-1.0F), 0.0F, 3330.093F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNotNull(homeLight0);
      
      TextStyle textStyle0 = new TextStyle(2841.0F);
      assertFalse(textStyle0.isItalic());
      assertEquals(2841.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertNotNull(textStyle0);
      
      homeLight0.setNameStyle(textStyle0);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertEquals(2841.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      
      boolean boolean0 = homeLight0.isNameCenterPointAt(2841.0F, 2841.0F, 2841.0F);
      assertTrue(boolean0);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(918L);
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8d", "~%C~~Q7Gb.ZW", "T`j}Y<xx8d", (Content) null, (Content) null, (Content) null, 918L, 918L, 918L, 918L, false, 918L, 918L, sashArray0, (float[][]) null, "~%C~~Q7Gb.ZW", false, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((short) (-9244), bigDecimal1.shortValue());
      assertEquals((byte) (-28), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~Q7Gb.ZW");
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URL uRL1 = MockURL.URL(uRL0, "&Bgp^-Fp{G5");
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, "~%C~~Q7Gb.ZW", "T`j}Y<xx8d", uRLContent0, (Content) null, (Content) null, (-2776.5508F), (-2776.5508F), 0.0F, (-1.0F), false, (float[][]) null, "VALUE_ADDED_TAX", true, bigDecimal0, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("~%C~~Q7Gb.ZW", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("VALUE_ADDED_TAX", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-2776.5508F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2776.5508F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNotNull(catalogPieceOfFurniture0);
      
      boolean boolean1 = homeDoorOrWindow0.isBottomRightPointAt(918L, 918L, 1.0F);
      assertTrue(boolean1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((byte)122, bigDecimal2.byteValue());
      assertEquals((short) (-8326), bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setShininess((Float) null);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      boolean boolean2 = homeDoorOrWindow0.isNameCenterPointAt((-425.0F), 3188.827F, 2339.59F);
      assertFalse(boolean2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((short) (-1349), bigDecimal1.shortValue());
      assertEquals((byte) (-69), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "F", "F", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 791.6026F, 2.0F, true, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", true, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotNull(sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNotNull(homeDoorOrWindow1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow1.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = homeDoorOrWindow1.getColor();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(integer0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow1.setColor((Integer) null);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal3 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((short) (-15207), bigDecimal3.shortValue());
      assertEquals((byte) (-103), bigDecimal3.byteValue());
      assertNotNull(bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow1.isMovable();
      assertTrue(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getName());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setDepth(2.0F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNotNull(homeLight0);
      
      homeLight0.setNameXOffset(1.0F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      
      homeLight0.setNameXOffset(2.5012722F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(2.5012722F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      
      homeLight0.setDescription("com.eteks.sweethoe3d.moel.HomePieceOfFuniture$15");
      assertEquals("com.eteks.sweethoe3d.moel.HomePieceOfFuniture$15", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(2.5012722F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      
      Content content0 = homeLight0.getPlanIcon();
      assertEquals("com.eteks.sweethoe3d.moel.HomePieceOfFuniture$15", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(2.5012722F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(content0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals("com.eteks.sweethoe3d.moel.HomePieceOfFuniture$15", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(2.5012722F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethoe3d.moel.HomePieceOfFuniture$15", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(2.5012722F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight1.isBottomRightPointAt(2177.6829F, 0.0F, 0.3926991F);
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals("com.eteks.sweethoe3d.moel.HomePieceOfFuniture$15", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(2.5012722F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethoe3d.moel.HomePieceOfFuniture$15", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(2.5012722F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = homeLight1.isDoorOrWindow();
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean1 == boolean0);
      assertEquals("com.eteks.sweethoe3d.moel.HomePieceOfFuniture$15", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(2.5012722F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethoe3d.moel.HomePieceOfFuniture$15", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(2.5012722F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = (-2397.0F);
      boolean boolean2 = homeLight1.isBottomLeftPointAt(33, 33, (-2397.0F));
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "T`j}Y<xx8:", "T`j}Y<xx8:", (Content) null, (Content) null, (Content) null, (-1349L), (-1349L), (-1349L), 2.0F, true, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", true, bigDecimal0, bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = homeDoorOrWindow0.getColor();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(integer0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setColor((Integer) null);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getValueAddedTaxPercentage();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(63.53171F, 442.7207F, 442.7207F);
      assertFalse(boolean0);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      homeLight0.setMovable(true);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      String string0 = homeLight0.getCurrency();
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      homeLight0.setMovable(true);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTaxPercentage();
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = new Integer((-2147483274));
      assertEquals((-2147483274), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(605525547);
      assertEquals(605525547, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1010.4F);
      floatArray1[2] = 2162.3F;
      floatArray1[3] = (-1556.952F);
      floatArray1[4] = 2162.3F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 2815.0F;
      floatArray2[1] = 2309.6797F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = (-2483.4019F);
      floatArray2[4] = 2162.3F;
      floatArray2[5] = 0.0F;
      floatArray2[6] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (-1010.4F);
      floatArray3[1] = (-1010.4F);
      floatArray3[2] = 2815.0F;
      floatArray3[3] = (-2483.4019F);
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("jar", "com.eteks.sweethome3d.model.HomeDoorOrWindow", "", (Content) null, (Content) null, (Content) null, 2309.6797F, 2309.6797F, 3.4028235E38F, (-1010.4F), false, 0.0F, 3.4028235E38F, sashArray0, floatArray0, "D_73Hj-", false, true, false, bigDecimal0, bigDecimal0, "");
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      Content content0 = catalogDoorOrWindow0.getIcon();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(content0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      LightSource[] lightSourceArray0 = new LightSource[9];
      LightSource lightSource0 = new LightSource((-2483.4019F), 0.0F, (-2483.4019F), 0);
      assertEquals((-2483.4019F), lightSource0.getX(), 0.01F);
      assertEquals((-2483.4019F), lightSource0.getZ(), 0.01F);
      assertEquals(0, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1397.0278F), (-866.0F), 2162.3F, 0);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-866.0F), lightSource1.getY(), 0.01F);
      assertEquals(0, lightSource1.getColor());
      assertEquals((-1397.0278F), lightSource1.getX(), 0.01F);
      assertEquals(2162.3F, lightSource1.getZ(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(2259.0F, 0.0F, 2162.3F, 0);
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertEquals(0.0F, lightSource2.getY(), 0.01F);
      assertNull(lightSource2.getDiameter());
      assertEquals(2162.3F, lightSource2.getZ(), 0.01F);
      assertEquals(2259.0F, lightSource2.getX(), 0.01F);
      assertEquals(0, lightSource2.getColor());
      assertNotNull(lightSource2);
      
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource((-1010.4F), 0, 687.0F, (-238));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertNull(lightSource3.getDiameter());
      assertEquals((-1010.4F), lightSource3.getX(), 0.01F);
      assertEquals((-238), lightSource3.getColor());
      assertEquals(0.0F, lightSource3.getY(), 0.01F);
      assertEquals(687.0F, lightSource3.getZ(), 0.01F);
      assertNotNull(lightSource3);
      
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(3474.6926F, 0, (-1025.8F), 0);
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertEquals(0, lightSource4.getColor());
      assertEquals(3474.6926F, lightSource4.getX(), 0.01F);
      assertEquals(0.0F, lightSource4.getY(), 0.01F);
      assertEquals((-1025.8F), lightSource4.getZ(), 0.01F);
      assertNull(lightSource4.getDiameter());
      assertNotNull(lightSource4);
      
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(1.0F, 0.0F, 1.0F, 2);
      assertFalse(lightSource5.equals((Object)lightSource2));
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertNull(lightSource5.getDiameter());
      assertEquals(1.0F, lightSource5.getX(), 0.01F);
      assertEquals(0.0F, lightSource5.getY(), 0.01F);
      assertEquals(1.0F, lightSource5.getZ(), 0.01F);
      assertEquals(2, lightSource5.getColor());
      assertNotNull(lightSource5);
      
      lightSourceArray0[5] = lightSource5;
      Float float0 = new Float(2193.917F);
      assertEquals(2193.917F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource lightSource6 = new LightSource((-756.0F), (-2483.4019F), (-1010.4F), 2, float0);
      assertFalse(lightSource6.equals((Object)lightSource1));
      assertFalse(lightSource6.equals((Object)lightSource2));
      assertFalse(lightSource6.equals((Object)lightSource0));
      assertFalse(lightSource6.equals((Object)lightSource5));
      assertFalse(lightSource6.equals((Object)lightSource4));
      assertFalse(lightSource6.equals((Object)lightSource3));
      assertEquals((-2483.4019F), lightSource6.getY(), 0.01F);
      assertEquals((-1010.4F), lightSource6.getZ(), 0.01F);
      assertEquals(2, lightSource6.getColor());
      assertEquals(2193.917F, lightSource6.getDiameter(), 0.01F);
      assertEquals((-756.0F), lightSource6.getX(), 0.01F);
      assertNotNull(lightSource6);
      
      lightSourceArray0[6] = lightSource6;
      Float float1 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      LightSource lightSource7 = new LightSource(2309.6797F, (-238), 2162.3F, (-238), float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource7.equals((Object)lightSource4));
      assertFalse(lightSource7.equals((Object)lightSource3));
      assertFalse(lightSource7.equals((Object)lightSource2));
      assertFalse(lightSource7.equals((Object)lightSource6));
      assertFalse(lightSource7.equals((Object)lightSource0));
      assertFalse(lightSource7.equals((Object)lightSource5));
      assertFalse(lightSource7.equals((Object)lightSource1));
      assertEquals(2162.3F, lightSource7.getZ(), 0.01F);
      assertEquals(0.0F, lightSource7.getDiameter(), 0.01F);
      assertEquals((-238.0F), lightSource7.getY(), 0.01F);
      assertEquals(2309.6797F, lightSource7.getX(), 0.01F);
      assertEquals((-238), lightSource7.getColor());
      assertNotNull(lightSource7);
      
      lightSourceArray0[7] = lightSource7;
      Float float2 = new Float((-1010.4F));
      assertEquals((-1010.4F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      LightSource lightSource8 = new LightSource((-6673.7344F), 2309.6797F, 2259.0F, (-238), float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertFalse(lightSource8.equals((Object)lightSource4));
      assertFalse(lightSource8.equals((Object)lightSource7));
      assertFalse(lightSource8.equals((Object)lightSource3));
      assertFalse(lightSource8.equals((Object)lightSource6));
      assertFalse(lightSource8.equals((Object)lightSource1));
      assertFalse(lightSource8.equals((Object)lightSource5));
      assertFalse(lightSource8.equals((Object)lightSource2));
      assertFalse(lightSource8.equals((Object)lightSource0));
      assertEquals(2309.6797F, lightSource8.getY(), 0.01F);
      assertEquals((-238), lightSource8.getColor());
      assertEquals((-1010.4F), lightSource8.getDiameter(), 0.01F);
      assertEquals((-6673.7344F), lightSource8.getX(), 0.01F);
      assertEquals(2259.0F, lightSource8.getZ(), 0.01F);
      assertNotNull(lightSource8);
      
      lightSourceArray0[8] = lightSource8;
      CatalogLight catalogLight0 = new CatalogLight("", "A40", "com.eteks.sweethome3d.model.HomeDoorOrWindow", (Content) null, (Content) null, (Content) null, (-756.0F), 687.0F, 0.0F, 1813.947F, false, lightSourceArray0, floatArray0, "xFsVIl6]nM^", true, false, true, bigDecimal0, bigDecimal0);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getId());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("A40", catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(catalogLight0);
      assertEquals(9, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      
      Content content1 = catalogLight0.getPlanIcon();
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getId());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("A40", catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(content1);
      assertEquals(9, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      
      Content content2 = catalogDoorOrWindow0.getModel();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(content2);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float float3 = catalogLight0.getWidth();
      assertEquals((-756.0F), float3, 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getId());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("A40", catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(9, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      
      Integer integer2 = new Integer(1727);
      assertEquals(1727, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("jar", (Content) null, (Content) null, (-5977.9277F), (-1010.4F), 3474.6926F, 2815.0F, false, 0.0F, 1511.298F, sashArray0, integer2, floatArray0, true, 2162.3F, true);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNull(catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1010.4F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals((-5977.9277F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(2815.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow1.getName());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(3474.6926F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(1727, (int)catalogDoorOrWindow1.getColor());
      assertEquals(1511.298F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getDescription());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(2162.3F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float float4 = catalogDoorOrWindow1.getDepth();
      assertEquals((-1010.4F), float4, 0.01F);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNotEquals(float4, float3, 0.01F);
      assertNull(catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1010.4F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals((-5977.9277F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(2815.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow1.getName());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(3474.6926F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(1727, (int)catalogDoorOrWindow1.getColor());
      assertEquals(1511.298F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getDescription());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(2162.3F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float float5 = catalogDoorOrWindow0.getHeight();
      assertEquals(3.4028235E38F, float5, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float float6 = catalogLight0.getElevation();
      assertEquals(1813.947F, float6, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getId());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("A40", catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(9, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = catalogLight0.isMovable();
      assertFalse(boolean0);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getId());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("A40", catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(9, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean1 = catalogLight0.isDoorOrWindow();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getId());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("A40", catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(9, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      
      Integer integer3 = catalogDoorOrWindow0.getColor();
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(integer3);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      float[][] floatArray4 = catalogDoorOrWindow0.getModelRotation();
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(floatArray4);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      String string0 = catalogDoorOrWindow1.getStaircaseCutOutShape();
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNull(catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1010.4F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals((-5977.9277F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(2815.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("jar", catalogDoorOrWindow1.getName());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(3474.6926F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(1727, (int)catalogDoorOrWindow1.getColor());
      assertEquals(1511.298F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getDescription());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(2162.3F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(string0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, "'p_LVX{I(vN)", "A40", (Content) null, (Content) null, 2462.374F, 687.0F, (-1145.16F), 0.0F, true, true, floatArray4, "", false, bigDecimal0, bigDecimal0);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("'p_LVX{I(vN)", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals("A40", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1145.16F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(687.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2462.374F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean2 = catalogPieceOfFurniture0.isBackFaceShown();
      assertFalse(boolean2);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("'p_LVX{I(vN)", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals("A40", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1145.16F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(687.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2462.374F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean3 = catalogPieceOfFurniture0.isResizable();
      assertFalse(boolean3);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("'p_LVX{I(vN)", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals("A40", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1145.16F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(687.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2462.374F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean4 = catalogDoorOrWindow0.isDeformable();
      assertTrue(boolean4);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean5 = catalogLight0.isTexturable();
      assertTrue(boolean5);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getId());
      assertEquals("xFsVIl6]nM^", catalogLight0.getCreator());
      assertEquals(687.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1813.947F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-756.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("A40", catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotSame(floatArray0, floatArray4);
      assertEquals(9, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      
      BigDecimal bigDecimal1 = catalogDoorOrWindow0.getPrice();
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(bigDecimal1);
      assertNotSame(floatArray0, floatArray4);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("8yleW<<fG3>chK0", "jar", (String) null, (Content) null, (Content) null, (Content) null, 1511.298F, 0.0F, 2.0F, 0.0F, false, floatArray4, "com.eteks.sweethome3d.model.CatalogTexture", false, false, false, bigDecimal1, bigDecimal2);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(catalogPieceOfFurniture1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      BigDecimal bigDecimal3 = catalogPieceOfFurniture1.getValueAddedTaxPercentage();
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(bigDecimal3);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertSame(bigDecimal1, bigDecimal3);
      assertSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal3);
      assertNotSame(catalogPieceOfFurniture1, catalogPieceOfFurniture0);
      assertSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal3, bigDecimal2);
      assertSame(bigDecimal3, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      String string1 = catalogPieceOfFurniture1.getCurrency();
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(string1);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertSame(bigDecimal1, bigDecimal3);
      assertSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal3);
      assertNotSame(catalogPieceOfFurniture1, catalogPieceOfFurniture0);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture1);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals("8yleW<<fG3>chK0", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(755.649F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("jar", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1511.298F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(homePieceOfFurniture0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean6 = homePieceOfFurniture0.isModelMirrored();
      assertFalse(boolean6);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals("8yleW<<fG3>chK0", catalogPieceOfFurniture1.getId());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture1.isTexturable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertEquals("jar", catalogPieceOfFurniture1.getName());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertFalse(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", catalogPieceOfFurniture1.getCreator());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertEquals(1511.298F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals("8yleW<<fG3>chK0", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(755.649F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("jar", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1511.298F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("jar", catalogDoorOrWindow0.getId());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomeDoorOrWindow", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1010.4F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(2309.6797F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("D_73Hj-", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertSame(bigDecimal1, bigDecimal3);
      assertSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal3);
      assertNotSame(catalogPieceOfFurniture1, catalogPieceOfFurniture0);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNotNull(homeLight0);
      
      // Undeclared exception!
      try { 
        homeLight0.setWidth(1.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      homeLight0.setNameYOffset(0.0F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setDescription("~ Lcg-/");
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("~ Lcg-/", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("~ Lcg-/", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setNameYOffset((-1760.2117F));
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1760.2117F), homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = homeLight0.isNameCenterPointAt(926.0F, 926.0F, 926.0F);
      assertFalse(boolean0);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1760.2117F), homeLight0.getNameYOffset(), 0.01F);
      
      String string0 = homeLight0.getDescription();
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1760.2117F), homeLight0.getNameYOffset(), 0.01F);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.removePropertyChangeListener((PropertyChangeListener) null);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      homeLight0.setAngle(0.0F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      boolean boolean0 = homeLight0.isVisible();
      assertTrue(boolean0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(bigDecimal0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setElevation(0.0F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.move((-1.1054106F), (-1.1054106F));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-1.1054106F), homeLight0.getX(), 0.01F);
      assertEquals((-1.1054106F), homeLight0.getY(), 0.01F);
      
      homeLight0.setNameXOffset(1.0F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-1.1054106F), homeLight0.getX(), 0.01F);
      assertEquals((-1.1054106F), homeLight0.getY(), 0.01F);
      
      String string0 = "com.eteks.sweethome3d.model.HomePieceOfFurniture$15";
      homeLight0.setDescription("com.eteks.sweethome3d.model.HomePieceOfFurniture$15");
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$15", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-1.1054106F), homeLight0.getX(), 0.01F);
      assertEquals((-1.1054106F), homeLight0.getY(), 0.01F);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(bigDecimal0);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(1103.0973F, 1103.0973F, 1103.0973F);
      assertFalse(boolean0);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTaxPercentage();
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(bigDecimal1);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      float float0 = homeLight0.getHeight();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("");
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      
      homeLight0.setDescription("");
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      float float1 = homeLight0.getAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setAngle((-3964.61F));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07982141F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      float float2 = homeLight0.getX();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.07982141F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      int int0 = 605525547;
      Integer integer0 = new Integer(605525547);
      assertEquals(605525547, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      homeLight0.setDescription("Y");
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      boolean boolean0 = homeLight0.isPointAt(605525547, 0.07982141F, 605525547);
      assertTrue(boolean0);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      float float0 = (-1147.658F);
      float float1 = 0.0F;
      Float float2 = new Float((-308.7692F));
      assertEquals((-308.7692F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      // Undeclared exception!
      try { 
        homeLight0.setShininess(float2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1349L), 1954.6F, 1954.6F, 3640.2683F, (-1349L));
      assertEquals((-1349.0F), sash0.getEndAngle(), 0.01F);
      assertEquals(1954.6F, sash0.getYAxis(), 0.01F);
      assertEquals(1954.6F, sash0.getWidth(), 0.01F);
      assertEquals((-1349.0F), sash0.getXAxis(), 0.01F);
      assertEquals(3640.2683F, sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal1.shortValue());
      assertEquals((byte) (-69), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "", "VALUE_ADDED_TAX", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 2.0F, 2.0F, false, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", false, bigDecimal0, bigDecimal0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNotNull(sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isBottomLeftPointAt(2.0F, 2.0F, (-3227.7354F));
      assertFalse(boolean0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNotNull(homeDoorOrWindow1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("T`j}Y<xx8:");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = homeDoorOrWindow1.getColor();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(integer0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow1.setColor((Integer) null);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow1.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      float float0 = homeDoorOrWindow0.getDepth();
      assertEquals((-1349.0F), float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      Level level0 = homeDoorOrWindow1.getLevel();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(level0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal3 = homeDoorOrWindow1.getValueAddedTaxPercentage();
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal3.byteValue());
      assertEquals((short) (-1349), bigDecimal3.shortValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("VALUE_ADDED_TAX", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(2.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNotNull(bigDecimal3);
      assertSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertSame(bigDecimal3, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle((-1.0F));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      HomeTexture homeTexture0 = homeLight0.getTexture();
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeTexture0);
      
      Integer integer0 = homeLight0.getColor();
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.containsPoint(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      
      homeLight0.setMovable(true);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      
      float float0 = homeLight0.getNameYOffset();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      TextStyle textStyle0 = new TextStyle(0.3926991F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals(0.3926991F, textStyle0.getFontSize(), 0.01F);
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveItalicStyle(true);
      assertFalse(textStyle1.equals((Object)textStyle0));
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals(0.3926991F, textStyle0.getFontSize(), 0.01F);
      assertEquals(0.3926991F, textStyle1.getFontSize(), 0.01F);
      assertTrue(textStyle1.isItalic());
      assertFalse(textStyle1.isBold());
      assertNotNull(textStyle1);
      assertNotSame(textStyle0, textStyle1);
      assertNotSame(textStyle1, textStyle0);
      
      homeLight0.setNameStyle(textStyle1);
      assertFalse(textStyle0.equals((Object)textStyle1));
      assertFalse(textStyle1.equals((Object)textStyle0));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals(0.3926991F, textStyle0.getFontSize(), 0.01F);
      assertEquals(0.3926991F, textStyle1.getFontSize(), 0.01F);
      assertTrue(textStyle1.isItalic());
      assertFalse(textStyle1.isBold());
      assertNotSame(textStyle0, textStyle1);
      assertNotSame(textStyle1, textStyle0);
      
      homeLight0.move(0.3926991F, 0.3926991F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      int int0 = Integer.min(2892, 2892);
      assertEquals(2892, int0);
      
      homeLight0.setNameYOffset(2892);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2892.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2892.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(2892.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = homeLight0.getDepth();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2892.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      String string0 = "Y";
      homeLight1.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2892.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(2892.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Y", homeLight1.getDescription());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      homeLight0.setVisible(true);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      // Undeclared exception!
      try { 
        homeLight0.setWidth((-5698.8657F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      TextStyle textStyle0 = homeLight0.getNameStyle();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(textStyle0);
      
      homeLight0.setNameStyle((TextStyle) null);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      int int0 = Integer.min(3, 3);
      assertEquals(3, int0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight0.isTopRightPointAt(3, 3, (-2090.6897F));
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      String string0 = homeLight0.getDescription();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(string0);
      assertNotSame(homeLight0, homeLight1);
      
      // Undeclared exception!
      try { 
        homeLight0.setWidth((-323.8345F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":u#a'zJA";
      stringArray0[1] = "5j5";
      stringArray0[2] = "";
      stringArray0[3] = "{.>i(a7Ss%T";
      stringArray0[4] = "5j5";
      stringArray0[5] = "";
      stringArray0[6] = "=EUsSi|JtT^";
      stringArray0[7] = "5j5";
      Long long0 = new Long(1660L);
      assertEquals(1660L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) 1660L);
      assertEquals(1660.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      sashArray0[5] = sash0;
      sashArray0[6] = sash0;
      sashArray0[7] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-3087.34F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 1660L;
      floatArray1[7] = (-3087.34F);
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (-3087.34F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 1660L;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-3087.34F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = (float) 1660L;
      floatArray4[6] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray2));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 1660L;
      floatArray6[3] = 0.0F;
      floatArray6[4] = 0.0F;
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "5j5", "", "5j5", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 1660L, 0.0F, (-3087.34F), 1660L, false, 0.0F, 0.0F, sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "3a>sKSS8RV8^+B3bh]S");
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow(":u#a'zJA", "(xWiKoGrB@v3:.*bBI0", "Ue.1<5vqjo;\",", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-2040.341F), sashArray0, floatArray0, "", false, (BigDecimal) null, (BigDecimal) null);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow1.getSashes();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNotNull(sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(sashArray1, sashArray0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(8, sashArray1.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(":u#a'zJA", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setWidth((-1031.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      Integer integer0 = new Integer(1627);
      assertEquals(1627, (int)integer0);
      assertNotNull(integer0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "LVx@bPcfo?C");
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("C", uRL1.getQuery());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL1, true);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("C", uRL1.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      float[][] floatArray0 = new float[9][5];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 171.71F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 171.71F;
      floatArray2[1] = 171.71F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = (float) 1627;
      floatArray2[5] = 0.0F;
      floatArray2[6] = 171.71F;
      floatArray2[7] = (float) 1627;
      floatArray2[8] = (float) 1627;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = 171.71F;
      floatArray3[2] = 171.71F;
      floatArray3[3] = 171.71F;
      floatArray3[4] = 0.0F;
      floatArray3[5] = 171.71F;
      floatArray3[6] = 171.71F;
      floatArray3[7] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = 171.71F;
      floatArray4[1] = (float) 1627;
      floatArray4[2] = (float) 1627;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 171.71F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = (float) 1627;
      floatArray5[1] = 171.71F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[6];
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray4));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 1627;
      floatArray6[3] = 0.5F;
      floatArray6[4] = 171.71F;
      floatArray6[5] = 171.71F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[6];
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray1));
      
      floatArray7[0] = 0.5F;
      floatArray7[1] = 0.0F;
      floatArray7[2] = 171.71F;
      floatArray7[3] = 171.71F;
      floatArray7[4] = 0.0F;
      floatArray7[5] = 171.71F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[4];
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray7));
      
      floatArray8[0] = 0.0F;
      floatArray8[1] = 0.5F;
      floatArray8[2] = (float) 1627;
      floatArray8[3] = 0.5F;
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[4];
      assertFalse(floatArray9.equals((Object)floatArray2));
      assertFalse(floatArray9.equals((Object)floatArray6));
      assertFalse(floatArray9.equals((Object)floatArray8));
      assertFalse(floatArray9.equals((Object)floatArray4));
      assertFalse(floatArray9.equals((Object)floatArray5));
      assertFalse(floatArray9.equals((Object)floatArray1));
      assertFalse(floatArray9.equals((Object)floatArray7));
      assertFalse(floatArray9.equals((Object)floatArray3));
      
      floatArray9[0] = 171.71F;
      floatArray9[1] = 0.5F;
      floatArray9[2] = 0.5F;
      floatArray9[3] = 171.71F;
      floatArray0[8] = floatArray9;
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn(sashArray0).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(171.71F).when(doorOrWindow0).getWallThickness();
      doReturn(integer0).when(doorOrWindow0).getColor();
      doReturn("Rwt ? #cZ7 ").when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn("Rwt ? #cZ7 ").when(doorOrWindow0).getDescription();
      doReturn((float)1627).when(doorOrWindow0).getElevation();
      doReturn(171.71F).when(doorOrWindow0).getHeight();
      doReturn(resourceURLContent0).when(doorOrWindow0).getIcon();
      doReturn(resourceURLContent0).when(doorOrWindow0).getModel();
      doReturn(floatArray0).when(doorOrWindow0).getModelRotation();
      doReturn("LVx@bPcfo?C").when(doorOrWindow0).getName();
      doReturn(resourceURLContent0).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn("").when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn((-2383.374F)).when(doorOrWindow0).getWidth();
      doReturn(true).when(doorOrWindow0).isBackFaceShown();
      doReturn(true).when(doorOrWindow0).isDeformable();
      doReturn(true).when(doorOrWindow0).isDoorOrWindow();
      doReturn(true).when(doorOrWindow0).isMovable();
      doReturn(true).when(doorOrWindow0).isResizable();
      doReturn(true).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("C", uRL1.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((-1191.687F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(171.71F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1627.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-2383.374F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(171.71F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1627, (int)homeDoorOrWindow0.getColor());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      homeDoorOrWindow0.setNameAngle(0.0F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("C", uRL1.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((-1191.687F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(171.71F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1627.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-2383.374F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(171.71F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1627, (int)homeDoorOrWindow0.getColor());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals(3, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1627, (int)homeDoorOrWindow1.getColor());
      assertEquals(1627.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(171.71F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-2383.374F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1191.687F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(171.71F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("C", uRL1.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((-1191.687F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(171.71F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1627.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-2383.374F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(171.71F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1627, (int)homeDoorOrWindow0.getColor());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      Level level0 = homeDoorOrWindow1.getLevel();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1627, (int)homeDoorOrWindow1.getColor());
      assertEquals(1627.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(171.71F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-2383.374F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1191.687F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(171.71F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("C", uRL1.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((-1191.687F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(171.71F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1627.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-2383.374F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(171.71F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1627, (int)homeDoorOrWindow0.getColor());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(level0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      homeDoorOrWindow0.setLevel((Level) null);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("C", uRL1.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((-1191.687F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(171.71F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1627.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-2383.374F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(171.71F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1627, (int)homeDoorOrWindow0.getColor());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      homeDoorOrWindow0.setY(0.3926991F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("C", uRL1.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((-1191.687F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(171.71F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1627.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-2383.374F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(171.71F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1627, (int)homeDoorOrWindow0.getColor());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      homeDoorOrWindow0.setHeight(2.78534624E8F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("C", uRL1.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((-1191.687F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(2.78534624E8F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-2383.374F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(171.71F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1627, (int)homeDoorOrWindow0.getColor());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      homeDoorOrWindow1.setNameAngle((-3680.3F));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1627, (int)homeDoorOrWindow1.getColor());
      assertEquals(1627.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(171.71F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-2383.374F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1191.687F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1.6465412F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(171.71F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("", homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("C", uRL1.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((-1191.687F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(2.78534624E8F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-2383.374F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(171.71F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1627, (int)homeDoorOrWindow0.getColor());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      boolean boolean0 = homeDoorOrWindow1.isVisible();
      assertTrue(boolean0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1627, (int)homeDoorOrWindow1.getColor());
      assertEquals(1627.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(171.71F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-2383.374F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1191.687F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1.6465412F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(171.71F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("", homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("C", uRL1.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((-1191.687F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(2.78534624E8F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-2383.374F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(171.71F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1627, (int)homeDoorOrWindow0.getColor());
      assertEquals("Rwt ? #cZ7 ", homeDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1627.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getName());
      assertNotNull(homeDoorOrWindow0);
      
      homeDoorOrWindow0.setNameYOffset((-744.8752F));
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-744.8752F), homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getName());
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-744.8752F), homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-744.8752F), homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow0.setY((-744.8752F));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-744.8752F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-744.8752F), homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getName());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      float float0 = (-1181.642F);
      boolean boolean0 = homeDoorOrWindow0.isTopLeftPointAt((-51.114F), (-1181.642F), 3034.4575F);
      assertFalse(boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-744.8752F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-744.8752F), homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getName());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("20!)w7<SHeJ8 4_ q", propertyChangeListener0);
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Integer integer1 = new Integer(3);
      assertEquals(3, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(integer0, "20!)w7<SHeJ8 4_ q", "20!)w7<SHeJ8 4_ q", integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeEvent0.getPropertyName());
      
      homeDoorOrWindow1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-744.8752F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-744.8752F), homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-744.8752F), homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = homeDoorOrWindow0.isBottomRightPointAt((-51.114F), (-1160.833F), 1.9745969F);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-744.8752F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-744.8752F), homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getName());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setHeight((-51.114F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-255.36096F), (-460.47623F), (-1447.733F), 1.0F, (-1.0F));
      assertEquals((-255.36096F), sash0.getXAxis(), 0.01F);
      assertEquals((-1447.733F), sash0.getWidth(), 0.01F);
      assertEquals((-460.47623F), sash0.getYAxis(), 0.01F);
      assertEquals(1.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash(562.2F, (-460.47623F), 0.5F, 1786.9994F, (-1447.733F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(562.2F, sash1.getXAxis(), 0.01F);
      assertEquals((-1447.733F), sash1.getEndAngle(), 0.01F);
      assertEquals(1786.9994F, sash1.getStartAngle(), 0.01F);
      assertEquals((-460.47623F), sash1.getYAxis(), 0.01F);
      assertEquals(0.5F, sash1.getWidth(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(382.666F, 470.0973F, (-1.0F), (-1.0F), (-1.0F));
      assertFalse(sash2.equals((Object)sash1));
      assertFalse(sash2.equals((Object)sash0));
      assertEquals((-1.0F), sash2.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash2.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash2.getWidth(), 0.01F);
      assertEquals(382.666F, sash2.getXAxis(), 0.01F);
      assertEquals(470.0973F, sash2.getYAxis(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Ue.1<5vqjo;\",", "~%C~~QGb.ZW", "Ue.1<5vqjo;\",", (Content) null, (Content) null, (Content) null, (-2196.4375F), 1786.9994F, (-1560.567F), 0.0F, false, 1786.9994F, 562.2F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-2196.4375F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-2196.4375F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-2196.4375F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-2196.4375F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1098.2188F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      float float0 = homeDoorOrWindow0.getGroundElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-2196.4375F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-2196.4375F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1098.2188F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~QGb.ZW");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-2196.4375F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-2196.4375F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1098.2188F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.WIDTH;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      float float1 = homeDoorOrWindow0.getY();
      assertEquals(893.4997F, float1, 0.01F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-2196.4375F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-2196.4375F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1098.2188F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      String string0 = homeDoorOrWindow0.getDescription();
      assertEquals("Ue.1<5vqjo;\",", string0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1786.9994F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1786.9994F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-2196.4375F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-2196.4375F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1098.2188F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1786.9994F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(893.4997F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1786.9994F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNotNull(string0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.HomeTexture", (Content) null, (Content) null, 1.5410658F, 0.0F, 1.5410658F, 0.0F, false, (Integer) null, (float[][]) null, false, 1204.9766F, true);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.7705329F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture1.setModelMirrored(false);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.7705329F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture1.setElevation(5.2831855F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(5.2831855F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(5.2831855F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.7705329F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture1.setWidth(0.0F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1204.9766F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.5410658F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(1.5410658F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.7705329F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(5.2831855F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(1.5410658F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(5.2831855F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.7705329F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      float float1 = homeLight0.getAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      
      homeLight0.setAngle((-2617.15F));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(2.9383707F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      
      float float2 = homeLight0.getNameYOffset();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(2.9383707F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      
      HomeLight homeLight1 = (HomeLight)homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(2.9383707F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(2.9383707F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow1.setNameAngle(3);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(3.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I");
      assertFalse(boolean0);
      
      homeDoorOrWindow0.setY((-744.8752F));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-744.8752F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      boolean boolean1 = homeDoorOrWindow0.isTopLeftPointAt((-51.436172F), (-1181.642F), 3034.4575F);
      assertFalse(boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-744.8752F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("20!)w7<SHeJ8 4_ q", propertyChangeListener0);
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeDoorOrWindow0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-744.8752F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = homeDoorOrWindow1.isBottomLeftPointAt((-577.6907F), (-577.6907F), (-1181.642F));
      assertFalse(boolean3);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-744.8752F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(3.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-744.8752F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(3.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow1.setNameAngle((-1160.833F));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-744.8752F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1.556274F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      boolean boolean4 = homeDoorOrWindow1.isVisible();
      assertTrue(boolean4);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-744.8752F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1.556274F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      boolean boolean5 = homeDoorOrWindow0.isVisible();
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-744.8752F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal1.byteValue());
      assertEquals((short) (-1349), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "T`j}Y<xx8:", "T`j}Y<xx8:", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 791.6026F, 760.53F, true, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", true, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(760.53F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(760.53F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(760.53F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(760.53F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(760.53F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(760.53F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(760.53F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(760.53F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(760.53F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(760.53F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertNotNull(homeDoorOrWindow1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = homeDoorOrWindow1.getColor();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(760.53F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(760.53F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(760.53F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(760.53F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(760.53F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertNull(integer0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow1.setColor((Integer) null);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(760.53F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(760.53F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(760.53F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(760.53F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(760.53F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow1.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(760.53F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(760.53F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(760.53F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(760.53F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(760.53F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals((short) (-15207), bigDecimal2.shortValue());
      assertEquals((byte) (-103), bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow1.setDepth((-1349L));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(760.53F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(760.53F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(760.53F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(760.53F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(760.53F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      
      Level level0 = new Level((String) null, 0.0F, 0.0F, 3392.204F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3392.204F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      float float1 = level0.getElevation();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3392.204F, level0.getHeight(), 0.01F);
      
      float float2 = level0.getHeight();
      assertEquals(3392.204F, float2, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3392.204F, level0.getHeight(), 0.01F);
      
      homeLight0.setLevel(level0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3392.204F, level0.getHeight(), 0.01F);
      
      Level level1 = new Level("", (-7852.5F), 0.0F, 3392.204F);
      assertFalse(level1.equals((Object)level0));
      assertEquals("", level1.getName());
      assertEquals(3392.204F, level1.getHeight(), 0.01F);
      assertEquals((-7852.5F), level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotNull(level1);
      
      Level level2 = level1.clone();
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertEquals("", level1.getName());
      assertEquals(3392.204F, level1.getHeight(), 0.01F);
      assertEquals((-7852.5F), level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("", level2.getName());
      assertEquals(3392.204F, level2.getHeight(), 0.01F);
      assertEquals(0.0F, level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-7852.5F), level2.getElevation(), 0.01F);
      assertNotNull(level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      boolean boolean0 = homeLight0.isAtLevel(level1);
      assertFalse(boolean0);
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals("", level1.getName());
      assertEquals(3392.204F, level1.getHeight(), 0.01F);
      assertEquals((-7852.5F), level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean2 = homeLight1.isBottomLeftPointAt(33, 33, (-2397.0F));
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      
      float float0 = homeLight1.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setAngle((-2397.0F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(3.1767874F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(918L);
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8d", "~%C~~Q7Gb.ZW", "T`j}Y<xx8d", (Content) null, (Content) null, (Content) null, 918L, 918L, 918L, 918L, false, 918L, 918L, sashArray0, (float[][]) null, "~%C~~Q7Gb.ZW", false, bigDecimal0, bigDecimal0);
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((byte) (-28), bigDecimal1.byteValue());
      assertEquals((short) (-9244), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~Q7Gb.ZW");
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "&Bgp^-Fp{G5");
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, "~%C~~Q7Gb.ZW", "T`j}Y<xx8d", uRLContent0, (Content) null, (Content) null, (-2776.5508F), (-2776.5508F), 0.0F, (-1.0F), false, (float[][]) null, "VALUE_ADDED_TAX", true, bigDecimal0, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/&Bgp^-Fp{G5", uRL1.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("~%C~~Q7Gb.ZW", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("VALUE_ADDED_TAX", catalogPieceOfFurniture0.getCreator());
      assertEquals("T`j}Y<xx8d", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-2776.5508F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-2776.5508F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNotNull(catalogPieceOfFurniture0);
      
      boolean boolean0 = homeDoorOrWindow0.isBottomRightPointAt(918L, 918L, 1.0F);
      assertTrue(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setShininess((Float) null);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short)918, bigDecimal0.shortValue());
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight1 = (HomeLight)homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNotNull(homeLight0);
      
      TextStyle textStyle0 = homeLight0.getNameStyle();
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(textStyle0);
      
      homeLight0.setNameStyle((TextStyle) null);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTaxPercentage();
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      Level level0 = homeLight0.getLevel();
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertNull(level0);
      
      homeLight0.setLevel((Level) null);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      
      homeLight0.setNameVisible(true);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash sash0 = new Sash(562.2F, (-458.25803F), (-1560.567F), (-1340L), (-1447.733F));
      assertEquals((-1447.733F), sash0.getEndAngle(), 0.01F);
      assertEquals((-458.25803F), sash0.getYAxis(), 0.01F);
      assertEquals((-1340.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1560.567F), sash0.getWidth(), 0.01F);
      assertEquals(562.2F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash((-458.25803F), 470.0973F, (-1560.567F), (-1560.567F), (-458.25803F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-1560.567F), sash1.getStartAngle(), 0.01F);
      assertEquals((-458.25803F), sash1.getEndAngle(), 0.01F);
      assertEquals((-458.25803F), sash1.getXAxis(), 0.01F);
      assertEquals((-1560.567F), sash1.getWidth(), 0.01F);
      assertEquals(470.0973F, sash1.getYAxis(), 0.01F);
      assertNotNull(sash1);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      System.setCurrentTimeMillis(604800000L);
      Integer integer1 = new Integer(8192);
      assertEquals(8192, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = integer1.equals("");
      assertFalse(boolean0);
      assertTrue(integer1.equals((Object)integer0));
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("T`j}Y<xx8:", (Content) null, (Content) null, (-1340L), 5178.24F, (-1447.733F), (-1101.3732F), false, integer1, (float[][]) null, false, 0.5F, false);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.5F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.5F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.5F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(8192, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setWidth((-1447.733F));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.5F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      homePieceOfFurniture1.setNameVisible(true);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.5F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(8192, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture1.setHeight((-1447.733F));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.5F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(8192, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      BigDecimal bigDecimal1 = homePieceOfFurniture1.getPrice();
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.5F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(8192, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(bigDecimal1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      int int0 = Float.floatToIntBits((-2555.19F));
      assertEquals((-987778294), int0);
      
      int int1 = Float.floatToIntBits(2574.8342F);
      assertEquals(1159785817, int1);
      assertFalse(int1 == int0);
      
      homePieceOfFurniture1.setShininess((Float) 2574.8342F);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.5F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(8192, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(2574.8342F, homePieceOfFurniture1.getShininess(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNotNull(homeLight0);
      
      Level level0 = new Level("", 3621.713F, 3621.713F, 1097.6603F);
      assertTrue(level0.isVisible());
      assertEquals(3621.713F, level0.getElevation(), 0.01F);
      assertEquals(3621.713F, level0.getFloorThickness(), 0.01F);
      assertEquals(1097.6603F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertTrue(level0.isVisible());
      assertEquals(3621.713F, level0.getElevation(), 0.01F);
      assertEquals(3621.713F, level0.getFloorThickness(), 0.01F);
      assertEquals(1097.6603F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", level1.getName());
      assertEquals(3621.713F, level1.getFloorThickness(), 0.01F);
      assertEquals(3621.713F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1097.6603F, level1.getHeight(), 0.01F);
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      homeLight0.setLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNull(homeLight0.getCatalogId());
      assertEquals(3621.713F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(level0.isVisible());
      assertEquals(3621.713F, level0.getElevation(), 0.01F);
      assertEquals(3621.713F, level0.getFloorThickness(), 0.01F);
      assertEquals(1097.6603F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", level1.getName());
      assertEquals(3621.713F, level1.getFloorThickness(), 0.01F);
      assertEquals(3621.713F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1097.6603F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals(3621.713F, float0, 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(3621.713F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      
      homeLight0.setAngle(3621.713F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(3621.713F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(2.5981536F, homeLight0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal0 = new BigDecimal((-1365L));
      assertEquals((byte) (-85), bigDecimal0.byteValue());
      assertEquals((short) (-1365), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash sash0 = new Sash(3093.1829F, 6.111244F, 3093.1829F, 197.1744F, 3093.1829F);
      assertEquals(6.111244F, sash0.getYAxis(), 0.01F);
      assertEquals(3093.1829F, sash0.getWidth(), 0.01F);
      assertEquals(3093.1829F, sash0.getXAxis(), 0.01F);
      assertEquals(3093.1829F, sash0.getEndAngle(), 0.01F);
      assertEquals(197.1744F, sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "xok~", "xok~", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-1365L), 6.111244F, (-1349L), 249.1F, false, (-1365L), 1.0F, sashArray0, (float[][]) null, "~%C~~QGb.ZW", true, bigDecimal0, (BigDecimal) null);
      assertEquals((byte) (-85), bigDecimal0.byteValue());
      assertEquals((short) (-1365), bigDecimal0.shortValue());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("xok~", catalogDoorOrWindow0.getName());
      assertEquals("xok~", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(249.1F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1365.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(6.111244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1365.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-85), bigDecimal0.byteValue());
      assertEquals((short) (-1365), bigDecimal0.shortValue());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("xok~", catalogDoorOrWindow0.getName());
      assertEquals("xok~", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(249.1F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1365.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(6.111244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1365.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-85), bigDecimal0.byteValue());
      assertEquals((short) (-1365), bigDecimal0.shortValue());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("xok~", catalogDoorOrWindow0.getName());
      assertEquals("xok~", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(249.1F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1365.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(6.111244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1365.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("xok~", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("xok~", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1365.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1365.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-682.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(249.1F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(6.111244F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(249.1F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3.055622F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-85), bigDecimal0.byteValue());
      assertEquals((short) (-1365), bigDecimal0.shortValue());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("xok~", catalogDoorOrWindow0.getName());
      assertEquals("xok~", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(249.1F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1365.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(6.111244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1365.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("xok~", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("xok~", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1365.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1365.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-682.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(249.1F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(6.111244F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(249.1F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3.055622F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(4, sashArray0.length);
      
      homeDoorOrWindow0.setName("Rbgz(8iH$9{dOF>");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-85), bigDecimal0.byteValue());
      assertEquals((short) (-1365), bigDecimal0.shortValue());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("xok~", catalogDoorOrWindow0.getName());
      assertEquals("xok~", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(249.1F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1365.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(6.111244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1365.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("xok~", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1365.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1365.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-682.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(249.1F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(6.111244F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(249.1F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3.055622F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Rbgz(8iH$9{dOF>", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(4, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-255.36096F), (-458.25803F), (-1447.733F), 1.0F, (-1.0F));
      assertEquals((-1447.733F), sash0.getWidth(), 0.01F);
      assertEquals((-458.25803F), sash0.getYAxis(), 0.01F);
      assertEquals(1.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertEquals((-255.36096F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash(562.2F, (-458.25803F), (-1560.567F), (-1349L), (-1447.733F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(562.2F, sash1.getXAxis(), 0.01F);
      assertEquals((-1447.733F), sash1.getEndAngle(), 0.01F);
      assertEquals((-1349.0F), sash1.getStartAngle(), 0.01F);
      assertEquals((-458.25803F), sash1.getYAxis(), 0.01F);
      assertEquals((-1560.567F), sash1.getWidth(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(382.666F, 470.0973F, (-1.0F), (-1.0F), (-1.0F));
      assertFalse(sash2.equals((Object)sash1));
      assertFalse(sash2.equals((Object)sash0));
      assertEquals((-1.0F), sash2.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash2.getEndAngle(), 0.01F);
      assertEquals(470.0973F, sash2.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash2.getWidth(), 0.01F);
      assertEquals(382.666F, sash2.getXAxis(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "~%C~~QGb.ZW", "T`j}Y<xx8:", (Content) null, (Content) null, (Content) null, (-1349L), (-1349L), (-1560.567F), (-1349L), false, (-1349L), 562.2F, sashArray0, (float[][]) null, "~%C~~QGb.ZW", false, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getName());
      assertEquals((-1560.567F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(562.2F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      float float0 = homeDoorOrWindow1.getGroundElevation();
      assertEquals((-1349.0F), float0, 0.01F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getName());
      assertEquals((-1560.567F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(562.2F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~QGb.ZW");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      float[][] floatArray0 = homeDoorOrWindow1.getPoints();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getName());
      assertEquals((-1560.567F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(562.2F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNotNull(floatArray0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      homeDoorOrWindow1.setColor(integer0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getName());
      assertEquals((-1560.567F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(8192, (int)homeDoorOrWindow1.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      float float1 = homeDoorOrWindow0.getY();
      assertEquals((-674.5F), float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setAngle(2.5012722F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.5012722F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setWidth(382.666F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setVisible(false);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(bigDecimal0);
      
      homeLight0.setVisible(true);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1340L));
      assertEquals((short) (-1340), bigDecimal0.shortValue());
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash sash0 = new Sash(562.2F, (-458.25803F), (-1560.567F), (-1340L), (-1447.733F));
      assertEquals((-1560.567F), sash0.getWidth(), 0.01F);
      assertEquals((-1447.733F), sash0.getEndAngle(), 0.01F);
      assertEquals(562.2F, sash0.getXAxis(), 0.01F);
      assertEquals((-458.25803F), sash0.getYAxis(), 0.01F);
      assertEquals((-1340.0F), sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash((-458.25803F), 470.0973F, (-1560.567F), (-1560.567F), (-458.25803F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-1560.567F), sash1.getStartAngle(), 0.01F);
      assertEquals((-1560.567F), sash1.getWidth(), 0.01F);
      assertEquals((-458.25803F), sash1.getXAxis(), 0.01F);
      assertEquals(470.0973F, sash1.getYAxis(), 0.01F);
      assertEquals((-458.25803F), sash1.getEndAngle(), 0.01F);
      assertNotNull(sash1);
      
      Integer integer0 = new Integer(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      System.setCurrentTimeMillis(604800000L);
      Integer integer1 = new Integer(33);
      assertEquals(33, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = integer1.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      assertFalse(integer1.equals((Object)integer0));
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("T`j}Y<xx8:", (Content) null, (Content) null, (-1340L), 5178.24F, (-1447.733F), (-1101.3732F), false, integer1, (float[][]) null, false, 1.0F, false);
      assertFalse(integer1.equals((Object)integer0));
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(integer1.equals((Object)integer0));
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setWidth((-1447.733F));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      homePieceOfFurniture1.setNameVisible(true);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setHeight((-1737.772F));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1737.772F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      BigDecimal bigDecimal1 = homePieceOfFurniture1.getPrice();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1737.772F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(bigDecimal1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      float float0 = homePieceOfFurniture1.getDepth();
      assertEquals(5178.24F, float0, 0.01F);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1101.3732F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1101.3732F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1737.772F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals((-1101.3732F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals((-1101.3732F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow0.setY(0.3926991F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setHeight((-3680.3F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      int int0 = Integer.min(626, 626);
      assertEquals(626, int0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      String string0 = "Y";
      homeLight1.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("Y", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow0.setY(0.3926991F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      homeDoorOrWindow0.setNameAngle(0.3926991F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.3926991F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("20!)w7<SHeJ8 4_ q", propertyChangeListener0);
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeDoorOrWindow0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.3926991F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("20!)w7<SHeJ8 4_ q", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      boolean boolean0 = homeDoorOrWindow1.isBottomLeftPointAt((-577.6907F), (-577.6907F), (-1181.642F));
      assertFalse(boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.3926991F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      boolean boolean1 = homeDoorOrWindow0.isBottomRightPointAt(0.3926991F, 489.0F, (-1160.833F));
      assertFalse(boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.3926991F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setHeight((-3680.3F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      
      float float1 = homeLight0.getAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "3k4RuS";
      // Undeclared exception!
      try { 
        homeLight0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":u#a'zJA";
      stringArray0[1] = "5j5";
      stringArray0[2] = "";
      stringArray0[3] = "{.>i(a7Ss%T";
      stringArray0[4] = "5j5";
      stringArray0[5] = "";
      stringArray0[6] = "=EUsSi|JtT^";
      stringArray0[7] = "5j5";
      Long long0 = new Long(1660L);
      assertEquals(1660L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) 1660L);
      assertEquals(1660.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      sashArray0[5] = sash0;
      sashArray0[6] = sash0;
      sashArray0[7] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-3087.34F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 1660L;
      floatArray1[7] = (-3087.34F);
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (-3087.34F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 1660L;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-3087.34F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = (float) 1660L;
      floatArray4[6] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 1660L;
      floatArray6[3] = 0.0F;
      floatArray6[4] = 0.0F;
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "5j5", "", "5j5", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 1660L, 0.0F, (-3087.34F), 1660L, false, 0.0F, 0.0F, sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "3a>sKSS8RV8^+B3bh]S");
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow(":u#a'zJA", "(xWiKoGrB@v3:.*bBI0", "Ue.1<5vqjo;\",", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-2040.341F), sashArray0, floatArray0, "", false, (BigDecimal) null, (BigDecimal) null);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow1.getSashes();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNotNull(sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(sashArray1, sashArray0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(8, sashArray1.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(":u#a'zJA", homeDoorOrWindow1.getCatalogId());
      assertEquals((-2040.341F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      String string0 = homeDoorOrWindow1.getName();
      assertEquals("(xWiKoGrB@v3:.*bBI0", string0);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(":u#a'zJA", homeDoorOrWindow1.getCatalogId());
      assertEquals((-2040.341F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNotNull(string0);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      
      boolean boolean0 = homeLight0.isPointAt(0.07982141F, 605525547, 2.0F);
      assertFalse(boolean0);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = homeLight0.containsPoint(0.0F, 290.13907F, 0.07982141F);
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNotSame(homeLight0, homeLight1);
      
      // Undeclared exception!
      try { 
        homeLight0.setDepth(290.13907F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isVisible();
      assertTrue(boolean0);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setVisible(false);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isVisible());
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isVisible());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNotNull(homeLight0);
      
      Sash sash0 = new Sash((-992.8F), 1.306094F, 1741.55F, 1934.0273F, (-992.8F));
      assertEquals((-992.8F), sash0.getXAxis(), 0.01F);
      assertEquals(1741.55F, sash0.getWidth(), 0.01F);
      assertEquals(1.306094F, sash0.getYAxis(), 0.01F);
      assertEquals((-992.8F), sash0.getEndAngle(), 0.01F);
      assertEquals(1934.0273F, sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      Content content0 = homeLight0.getModel();
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(content0);
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(765.884578396);
      assertEquals((byte) (-3), bigDecimal0.byteValue());
      assertEquals((short)765, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("~%C~~QGb.ZW", "", "~%C~~QGb.ZW", (Content) null, (Content) null, (Content) null, 2581.7F, 1934.0273F, 1934.0273F, (-1.0F), false, (-458.25803F), 1741.55F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-3), bigDecimal0.byteValue());
      assertEquals((short)765, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1934.0273F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2581.7F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getDescription());
      assertEquals(1934.0273F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1741.55F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-3), bigDecimal0.byteValue());
      assertEquals((short)765, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1934.0273F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2581.7F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getDescription());
      assertEquals(1934.0273F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1741.55F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-3), bigDecimal0.byteValue());
      assertEquals((short)765, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1934.0273F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2581.7F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getDescription());
      assertEquals(1934.0273F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1741.55F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(967.0137F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1934.0273F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(2581.7F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1934.0273F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1741.55F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getDescription());
      assertEquals(1290.85F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte) (-3), bigDecimal0.byteValue());
      assertEquals((short)765, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1934.0273F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2581.7F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getDescription());
      assertEquals(1934.0273F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1741.55F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(967.0137F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1934.0273F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(2581.7F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1934.0273F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1741.55F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getDescription());
      assertEquals(1290.85F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((short) (-3245), bigDecimal1.shortValue());
      assertEquals((byte)83, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, sashArray0.length);
      
      homeDoorOrWindow0.setName("");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte) (-3), bigDecimal0.byteValue());
      assertEquals((short)765, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1934.0273F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2581.7F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getDescription());
      assertEquals(1934.0273F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-458.25803F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1741.55F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-458.25803F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(967.0137F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1934.0273F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(2581.7F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1934.0273F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1741.55F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getDescription());
      assertEquals(1290.85F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(4, sashArray0.length);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
      
      homeLight1.setElevation(626);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(626.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(626.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean2 = homeLight0.intersectsRectangle(3, 626, 0.3926991F, (-4664.2F));
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNotSame(homeLight0, homeLight1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(626.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(626.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(626.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(626.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      boolean boolean3 = homeLight2.isBottomRightPointAt(0.3926991F, 0.5F, 0.6073009F);
      assertFalse(boolean3);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(626.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(626.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(626.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(626.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      homeLight0.setX((-4664.2F));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-4664.2F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      homeLight0.setNameXOffset(0.0F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      
      boolean boolean0 = false;
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean2 = homeLight1.isNameVisible();
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      Integer integer0 = new Integer(605525547);
      assertEquals(605525547, (int)integer0);
      assertNotNull(integer0);
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      boolean boolean0 = homeLight0.isPointAt(0.3926991F, 0.07982141F, (-2383.235F));
      assertFalse(boolean0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(bigDecimal0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = homeLight1.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt(1908.0F, 1908.0F, 1908.0F);
      assertFalse(boolean0);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1340L));
      assertEquals((short) (-1340), bigDecimal0.shortValue());
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash sash0 = new Sash(562.2F, (-458.25803F), (-1560.567F), (-1340L), (-1447.733F));
      assertEquals((-1560.567F), sash0.getWidth(), 0.01F);
      assertEquals(562.2F, sash0.getXAxis(), 0.01F);
      assertEquals((-458.25803F), sash0.getYAxis(), 0.01F);
      assertEquals((-1447.733F), sash0.getEndAngle(), 0.01F);
      assertEquals((-1340.0F), sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash((-458.25803F), 470.0973F, (-1560.567F), (-1560.567F), (-458.25803F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(470.0973F, sash1.getYAxis(), 0.01F);
      assertEquals((-1560.567F), sash1.getWidth(), 0.01F);
      assertEquals((-1560.567F), sash1.getStartAngle(), 0.01F);
      assertEquals((-458.25803F), sash1.getEndAngle(), 0.01F);
      assertEquals((-458.25803F), sash1.getXAxis(), 0.01F);
      assertNotNull(sash1);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      System.setCurrentTimeMillis(604800000L);
      Integer integer1 = new Integer(33);
      assertEquals(33, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = integer1.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      assertFalse(integer1.equals((Object)integer0));
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("T`j}Y<xx8:", (Content) null, (Content) null, (-1340L), 5178.24F, (-1447.733F), (-1082.149F), false, integer1, (float[][]) null, false, 1.0F, false);
      assertFalse(integer1.equals((Object)integer0));
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1082.149F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(integer1.equals((Object)integer0));
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1082.149F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-1082.149F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-1082.149F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1082.149F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-1082.149F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-1082.149F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1340.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals((-1082.149F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals((-1082.149F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setWidth((-1447.733F));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1082.149F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-1082.149F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-1082.149F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      homePieceOfFurniture1.setNameVisible(true);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1082.149F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-1082.149F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-1082.149F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture1.getName());
      assertEquals((-1447.733F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(5178.24F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals((-1082.149F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals((-670.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals((-1340.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(33, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals((-1082.149F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(2589.12F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      float float0 = homePieceOfFurniture0.getElevation();
      assertEquals((-1082.149F), float0, 0.01F);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1082.149F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("T`j}Y<xx8:", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1447.733F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-1340.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(5178.24F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(33, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(604800000L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(5178.24F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-1082.149F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-1082.149F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(33, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2589.12F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-670.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1447.733F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isTexturable());
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.intersectsRectangle(1392.3064F, 0.0F, 0.0F, 0.0F);
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      HomeLight homeLight3 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertNull(homeLight3.getColor());
      assertFalse(homeLight3.isTexturable());
      assertNull(homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertFalse(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertNull(homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertNotNull(homeLight3);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      
      homeLight0.setNameYOffset(0.0F);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      boolean boolean2 = homeLight0.isBottomRightPointAt(3.4028235E38F, 1392.3064F, (-2399.92F));
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      float float0 = homeLight0.getNameYOffset();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash(560.6258F, (-458.25803F), (-1349L), (-1349L), (-1447.733F));
      assertEquals((-1349.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1447.733F), sash0.getEndAngle(), 0.01F);
      assertEquals((-1349.0F), sash0.getWidth(), 0.01F);
      assertEquals(560.6258F, sash0.getXAxis(), 0.01F);
      assertEquals((-458.25803F), sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash((-458.25803F), 470.0973F, (-1349L), (-1349L), (-458.25803F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-458.25803F), sash1.getEndAngle(), 0.01F);
      assertEquals(470.0973F, sash1.getYAxis(), 0.01F);
      assertEquals((-1349.0F), sash1.getStartAngle(), 0.01F);
      assertEquals((-458.25803F), sash1.getXAxis(), 0.01F);
      assertEquals((-1349.0F), sash1.getWidth(), 0.01F);
      assertNotNull(sash1);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "~%C~~QGb.ZW", "T`j}Y<xx8:", (Content) null, (Content) null, (Content) null, (-1349L), (-1349L), (-1349L), (-1349L), false, (-1349L), 560.6258F, sashArray0, (float[][]) null, "~%C~~QGb.ZW", false, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(560.6258F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(560.6258F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(560.6258F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(560.6258F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~QGb.ZW");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(560.6258F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(560.6258F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      homeDoorOrWindow0.setColor(integer0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(560.6258F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(8192, (int)homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(560.6258F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      String string0 = homeDoorOrWindow0.getCurrency();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(560.6258F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(8192, (int)homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(560.6258F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(string0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      Integer integer1 = homeDoorOrWindow0.getColor();
      assertEquals(8192, (int)integer1);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(560.6258F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(8192, (int)homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(560.6258F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNotNull(integer1);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setNameYOffset(2892);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2892.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      
      TextStyle textStyle0 = new TextStyle((-1.0F));
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals((-1.0F), textStyle0.getFontSize(), 0.01F);
      assertNotNull(textStyle0);
      
      float float0 = new Float((float) 2892);
      assertEquals(2892.0F, float0, 0.01F);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2892.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotNull(homeLight0);
      
      Content content0 = homeLight0.getModel();
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(content0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(bigDecimal0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setElevation(0.0F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      // Undeclared exception!
      try { 
        homeLight0.setDepth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(bigDecimal0);
      
      boolean boolean0 = homeLight0.isPointAt(1585.461F, 1585.461F, 1.0F);
      assertFalse(boolean0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals("Y", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = homeLight1.containsPoint(0.0F, 0.0F, (-993.4099F));
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean1 == boolean0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals("Y", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotNull(homeDoorOrWindow0);
      
      homeDoorOrWindow0.setNameAngle(0.0F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      Level level0 = homeDoorOrWindow1.getLevel();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(level0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow0.setLevel((Level) null);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      homeDoorOrWindow0.setY(0.3926991F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      homeDoorOrWindow0.setName("work");
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("work", homeDoorOrWindow0.getName());
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setHeight((-3680.3F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isNameCenterPointAt((-2129.1873F), 2.0F, 2.0F);
      assertFalse(boolean0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotNull(homeLight0);
      
      // Undeclared exception!
      try { 
        homeLight0.setHeight((-1138.8043F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      System.setCurrentTimeMillis(2524L);
      Integer integer0 = new Integer(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = integer0.equals(object0);
      assertFalse(boolean0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(")xq-F", (Content) null, (Content) null, 1.223428F, 33, 604800000L, 5.1000595F, false, integer0, (float[][]) null, true, 33, true);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(2524L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(33.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(")xq-F", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(5.1000595F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.223428F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(33.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(2524L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(33.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(")xq-F", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(5.1000595F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.223428F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(33.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(33.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.611714F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(16.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1.223428F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(5.1000595F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(5.1000595F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(2524L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(33.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(")xq-F", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(5.1000595F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.223428F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(33.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(33.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.611714F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(16.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1.223428F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(5.1000595F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(5.1000595F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.223428F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.611714F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(16.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(33.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(8192, (int)homePieceOfFurniture1.getColor());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertTrue(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(5.1000595F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture1.getName());
      assertEquals(5.1000595F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture1.clone();
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(homePieceOfFurniture2.equals((Object)homePieceOfFurniture0));
      assertFalse(homePieceOfFurniture2.equals((Object)homePieceOfFurniture1));
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(2524L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(33.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(")xq-F", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(5.1000595F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.223428F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(33.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(33.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.611714F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(16.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1.223428F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(5.1000595F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(5.1000595F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.223428F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.611714F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(16.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(33.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(8192, (int)homePieceOfFurniture1.getColor());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertTrue(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(5.1000595F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture1.getName());
      assertEquals(5.1000595F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture2.isVisible());
      assertTrue(homePieceOfFurniture2.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture2.getNameYOffset(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture2.getHeight(), 0.01F);
      assertEquals(1.223428F, homePieceOfFurniture2.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture2.isBackFaceShown());
      assertEquals(16.5F, homePieceOfFurniture2.getY(), 0.01F);
      assertEquals(8192, (int)homePieceOfFurniture2.getColor());
      assertTrue(homePieceOfFurniture2.isResizable());
      assertNull(homePieceOfFurniture2.getShininess());
      assertNull(homePieceOfFurniture2.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture2.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture2.getCurrency());
      assertEquals(0.611714F, homePieceOfFurniture2.getX(), 0.01F);
      assertFalse(homePieceOfFurniture2.isMovable());
      assertNull(homePieceOfFurniture2.getDescription());
      assertEquals(33.0F, homePieceOfFurniture2.getDepth(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture2.getName());
      assertEquals(0.0F, homePieceOfFurniture2.getNameXOffset(), 0.01F);
      assertEquals(5.1000595F, homePieceOfFurniture2.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture2.getCatalogId());
      assertFalse(homePieceOfFurniture2.isModelMirrored());
      assertTrue(homePieceOfFurniture2.isTexturable());
      assertFalse(homePieceOfFurniture2.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture2.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture2.isNameVisible());
      assertEquals(5.1000595F, homePieceOfFurniture2.getGroundElevation(), 0.01F);
      assertNotNull(homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture2, homePieceOfFurniture0);
      assertNotSame(homePieceOfFurniture2, homePieceOfFurniture1);
      
      homePieceOfFurniture1.setHeight(1169.74F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture2));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture2));
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(2524L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(33.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(")xq-F", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(5.1000595F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.223428F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(33.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(33.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.611714F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(16.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1.223428F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(5.1000595F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(5.1000595F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(6.048E8F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.223428F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.611714F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(16.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(33.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(1169.74F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(8192, (int)homePieceOfFurniture1.getColor());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertTrue(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(5.1000595F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture1.getName());
      assertEquals(5.1000595F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture2);
      
      BigDecimal bigDecimal0 = homeLight0.getPrice();
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      Integer integer0 = new Integer(1143);
      assertEquals(1143, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        homeLight0.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-255.36096F), (-458.25803F), (-1447.733F), 1.0F, (-1.0F));
      assertEquals(1.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-458.25803F), sash0.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertEquals((-1447.733F), sash0.getWidth(), 0.01F);
      assertEquals((-255.36096F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash(562.2F, (-458.25803F), (-1560.567F), (-1349L), (-1447.733F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-458.25803F), sash1.getYAxis(), 0.01F);
      assertEquals((-1560.567F), sash1.getWidth(), 0.01F);
      assertEquals(562.2F, sash1.getXAxis(), 0.01F);
      assertEquals((-1447.733F), sash1.getEndAngle(), 0.01F);
      assertEquals((-1349.0F), sash1.getStartAngle(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-458.25803F), 470.0973F, (-1.0F), (-1.0F), (-1.0F));
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals((-458.25803F), sash2.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash2.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash2.getStartAngle(), 0.01F);
      assertEquals(470.0973F, sash2.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash2.getWidth(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "~%C~~QGb.ZW", "T`j}Y<xx8:", (Content) null, (Content) null, (Content) null, (-1349L), (-1349L), (-1560.567F), (-1349L), false, (-1349L), 562.2F, sashArray0, (float[][]) null, "~%C~~QGb.ZW", false, bigDecimal0, bigDecimal0);
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getName());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(562.2F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      homeDoorOrWindow0.setName("~%C~~QGb.ZW");
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      
      Integer integer0 = Integer.valueOf(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      homeDoorOrWindow1.setColor(integer0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getName());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(8192, (int)homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(562.2F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow1.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getName());
      assertEquals("~%C~~QGb.ZW", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals(562.2F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1560.567F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow0.getName());
      assertEquals((-1560.567F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertEquals(562.2F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals((-674.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("~%C~~QGb.ZW", homeDoorOrWindow1.getName());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1560.567F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(8192, (int)homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(562.2F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((short) (-15207), bigDecimal1.shortValue());
      assertEquals((byte) (-103), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertNull(homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow0.setY((-1147.658F));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1147.658F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setHeight((-638.7989F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      homeLight0.setX(0.5F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isTopRightPointAt(0.5F, 0.5F, 0.5F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setMovable(false);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt((-1710.9F), 0.0F, (-1710.9F));
      assertFalse(boolean0);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = homeLight0.isBottomRightPointAt((-2476.1948F), 268.74F, 268.74F);
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean2 = homeLight0.isNameCenterPointAt((-1182.5796F), (-265.34F), (-3086.83F));
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean3 = homeLight0.isNameCenterPointAt((-1.0F), 494.166F, 2.5012722F);
      assertFalse(boolean3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setName("");
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      homeLight0.setDescription("Y");
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      boolean boolean0 = homeLight0.isPointAt(0.3926991F, 0.07982141F, 0.07982141F);
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals("Y", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = homeLight0.containsPoint((-1147.66F), 605525547, 0.0F);
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNotSame(homeLight0, homeLight1);
      
      Content content0 = homeLight0.getPlanIcon();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean2 = homeLight1.intersectsRectangle(3767.2036F, 0.07982141F, 0.07982141F, 0.3926991F);
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals("Y", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals("Y", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      
      homeLight0.setDescription("Y");
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      
      boolean boolean0 = homeLight0.isPointAt(0.3926991F, 0.07982141F, 0.07982141F);
      assertFalse(boolean0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = homeLight0.containsPoint((-1147.66F), 605525547, 0.0F);
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNotSame(homeLight0, homeLight1);
      
      Content content0 = homeLight0.getPlanIcon();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
      
      float[][] floatArray0 = homeLight1.getPoints();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertNotNull(floatArray0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean2 = homeLight1.intersectsRectangle(3767.2036F, 0.07982141F, 0.07982141F, 0.3926991F);
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = homeLight0.intersectsRectangle(605525547, (-1.0F), 1845.2715F, (-1.0F));
      assertFalse(boolean3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("Y", homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isTopRightPointAt((-545.0F), 2.78534624E8F, 2.78534624E8F);
      assertFalse(boolean0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      boolean boolean1 = homeLight0.isDeformable();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = homeLight0.getPrice();
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setElevation(4.851979F);
      assertNull(homeLight0.getShininess());
      assertEquals(4.851979F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(4.851979F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":u#a'zJA";
      stringArray0[1] = "5j5";
      stringArray0[2] = "";
      stringArray0[3] = "{.>i(a7Ss%T";
      stringArray0[4] = "5j5";
      stringArray0[5] = "";
      stringArray0[6] = "=EUsSi|JtT^";
      stringArray0[7] = "5j5";
      Long long0 = new Long(1660L);
      assertEquals(1660L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) 1660L);
      assertEquals(1660.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      sashArray0[5] = sash0;
      sashArray0[6] = sash0;
      sashArray0[7] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-3087.34F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 1660L;
      floatArray1[7] = (-3087.34F);
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (-3087.34F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 1660L;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-3087.34F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = (float) 1660L;
      floatArray4[6] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray4));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 1660L;
      floatArray6[3] = 0.0F;
      floatArray6[4] = 0.0F;
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "5j5", "", "5j5", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 1660L, 0.0F, (-3087.34F), 1660L, false, 0.0F, 0.0F, sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "3a>sKSS8RV8^+B3bh]S");
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow(":u#a'zJA", "(xWiKoGrB@v3:.*bBI0", "Ue.1<5vqjo;\",", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-2040.341F), sashArray0, floatArray0, "", false, (BigDecimal) null, (BigDecimal) null);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow1.getSashes();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNotNull(sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(sashArray1, sashArray0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(8, sashArray1.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      float float2 = homeDoorOrWindow0.getGroundElevation();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals(float2, float1, 0.01F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(bigDecimal1);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt((-1710.9F), 0.0F, (-1710.9F));
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = homeLight0.isBottomRightPointAt((-2476.1948F), 268.74F, 268.74F);
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      
      homeLight0.setY((-2476.1948F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2476.1948F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean2 = homeLight0.isNameCenterPointAt((-1182.5796F), (-265.34F), (-3086.83F));
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2476.1948F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean3 = homeLight0.isNameCenterPointAt((-1.0F), 494.166F, 2.5012722F);
      assertFalse(boolean3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2476.1948F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(2008.88F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(4.543892F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      
      homeLight0.setName((String) null);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(4.543892F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(4.543892F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(4.543892F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(false);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      homeLight0.setDescription("Linux");
      assertEquals("Linux", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertEquals("Linux", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":u#a'zJA";
      stringArray0[1] = "5j5";
      stringArray0[2] = "";
      stringArray0[3] = "{.>i(a7Ss%T";
      stringArray0[4] = "5j5";
      stringArray0[5] = "";
      stringArray0[6] = "=EUsSi|JtT^";
      stringArray0[7] = "5j5";
      Long long0 = new Long(1660L);
      assertEquals(1660L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) 1660L);
      assertEquals(1660.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      sashArray0[5] = sash0;
      sashArray0[6] = sash0;
      sashArray0[7] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-3087.34F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 1660L;
      floatArray1[7] = (-3087.34F);
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (-3087.34F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 1660L;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-3087.34F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = (float) 1660L;
      floatArray4[6] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray5));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 1660L;
      floatArray6[3] = 0.0F;
      floatArray6[4] = 0.0F;
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "5j5", "", "5j5", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 1660L, 0.0F, (-3087.34F), 1660L, false, 0.0F, 0.0F, sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "3a>sKSS8RV8^+B3bh]S");
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow(":u#a'zJA", "(xWiKoGrB@v3:.*bBI0", "Ue.1<5vqjo;\",", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-2040.341F), sashArray0, floatArray0, "", false, (BigDecimal) null, (BigDecimal) null);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow1.getSashes();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNotNull(sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(sashArray1, sashArray0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(8, sashArray1.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      String string0 = homeDoorOrWindow1.getCatalogId();
      assertEquals(":u#a'zJA", string0);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getColor());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(":u#a'zJA", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNotNull(string0);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      
      homeDoorOrWindow0.setNameAngle(0.0F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      
      homeDoorOrWindow0.setY(0.0F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      Level level0 = homeDoorOrWindow1.getLevel();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(level0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      homeDoorOrWindow0.setLevel((Level) null);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      homeDoorOrWindow0.setY(0.3926991F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.3926991F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      
      float float0 = (-3680.3F);
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setHeight((-3680.3F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      homeLight0.move(0.3926991F, 0.3926991F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      
      float float1 = homeLight0.getAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      homeLight0.setNameXOffset((-784.0F));
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-784.0F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      
      boolean boolean0 = homeLight0.isBottomRightPointAt((-1334.6375F), 2945.0303F, 3.4028235E38F);
      assertFalse(boolean0);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-784.0F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      
      HomeLight homeLight1 = (HomeLight)homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-784.0F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals((-784.0F), homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean2 = homeLight1.isBottomLeftPointAt(33, 33, (-2397.0F));
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setDescription("Y");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = homeLight1.isNameVisible();
      assertFalse(boolean3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean4 = homeLight1.isBottomLeftPointAt(1.0F, 1.0F, 1.0F);
      assertFalse(boolean4);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getName());
      assertEquals("Y", homeLight2.getDescription());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      boolean boolean5 = homeLight1.containsPoint((-2397.0F), 253.43431F, 0.0F);
      assertFalse(boolean5);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      
      Content content0 = homeLight1.getPlanIcon();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("Y", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription((String) null);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(2183.0F, 2183.0F, (-1710.9F));
      assertFalse(boolean0);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = homeLight0.isBottomRightPointAt(3.4028235E38F, 3.4028235E38F, 268.74F);
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean2 = homeLight1.isNameCenterPointAt(2183.0F, (-1182.5796F), 3.4028235E38F);
      assertTrue(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      System.setCurrentTimeMillis(2524L);
      Integer integer0 = new Integer(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = integer0.equals(object0);
      assertFalse(boolean0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(")xq-F", (Content) null, (Content) null, 1.223428F, 33, 604800000L, 5.1000595F, true, integer0, (float[][]) null, true, 33, true);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(33.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(2524L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(")xq-F", catalogPieceOfFurniture0.getName());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.223428F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(5.1000595F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(33.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(33.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(2524L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(")xq-F", catalogPieceOfFurniture0.getName());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.223428F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(5.1000595F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(33.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1.223428F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(16.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(5.1000595F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(5.1000595F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(6.048E8F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(33.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.611714F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(33.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(2524L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(")xq-F", catalogPieceOfFurniture0.getName());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.223428F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(5.1000595F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(33.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1.223428F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(16.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(5.1000595F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(5.1000595F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(6.048E8F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(33.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.611714F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(6.048E8F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(1.223428F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isBackFaceShown());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(8192, (int)homePieceOfFurniture1.getColor());
      assertEquals(0.611714F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(33.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(5.1000595F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(16.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(5.1000595F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture1.clone();
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(homePieceOfFurniture2.equals((Object)homePieceOfFurniture0));
      assertFalse(homePieceOfFurniture2.equals((Object)homePieceOfFurniture1));
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(33.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(2524L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(")xq-F", catalogPieceOfFurniture0.getName());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.223428F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(5.1000595F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(33.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1.223428F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(16.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(5.1000595F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(5.1000595F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(6.048E8F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(33.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.611714F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(6.048E8F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(1.223428F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isBackFaceShown());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(8192, (int)homePieceOfFurniture1.getColor());
      assertEquals(0.611714F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(33.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(5.1000595F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(16.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(5.1000595F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(6.048E8F, homePieceOfFurniture2.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture2.isMovable());
      assertNull(homePieceOfFurniture2.getCurrency());
      assertFalse(homePieceOfFurniture2.isNameVisible());
      assertEquals(5.1000595F, homePieceOfFurniture2.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture2.isModelMirrored());
      assertNull(homePieceOfFurniture2.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture2.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture2.isBackFaceShown());
      assertEquals(")xq-F", homePieceOfFurniture2.getName());
      assertTrue(homePieceOfFurniture2.isTexturable());
      assertEquals(5.1000595F, homePieceOfFurniture2.getElevation(), 0.01F);
      assertEquals(8192, (int)homePieceOfFurniture2.getColor());
      assertFalse(homePieceOfFurniture2.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture2.getAngle(), 0.01F);
      assertEquals(0.611714F, homePieceOfFurniture2.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture2.getNameXOffset(), 0.01F);
      assertEquals(1.223428F, homePieceOfFurniture2.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture2.getDescription());
      assertEquals(0.0F, homePieceOfFurniture2.getNameAngle(), 0.01F);
      assertEquals(33.0F, homePieceOfFurniture2.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture2.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture2.isVisible());
      assertNull(homePieceOfFurniture2.getShininess());
      assertTrue(homePieceOfFurniture2.isResizable());
      assertEquals(16.5F, homePieceOfFurniture2.getY(), 0.01F);
      assertTrue(homePieceOfFurniture2.isDeformable());
      assertNotNull(homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(homePieceOfFurniture2, homePieceOfFurniture0);
      assertNotSame(homePieceOfFurniture2, homePieceOfFurniture1);
      
      homePieceOfFurniture1.setHeight(1169.74F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture2));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture2));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(33.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(2524L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(")xq-F", catalogPieceOfFurniture0.getName());
      assertEquals(6.048E8F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(8192, (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.223428F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(5.1000595F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(33.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1.223428F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(16.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(8192, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(5.1000595F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(5.1000595F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(6.048E8F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(33.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.611714F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(1.223428F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isBackFaceShown());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(8192, (int)homePieceOfFurniture1.getColor());
      assertEquals(0.611714F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(33.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(1169.74F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(")xq-F", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(5.1000595F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(16.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(5.1000595F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getX();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      
      boolean boolean0 = homeLight0.isTexturable();
      assertFalse(boolean0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(bigDecimal0);
      
      boolean boolean0 = homeLight0.isModelMirrored();
      assertFalse(boolean0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      homeLight0.setNameXOffset(0.0F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      homeLight0.setY(0.0F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt(0.0F, 0.0F, (-745.7335F));
      assertFalse(boolean0);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotNull(homeLight0);
      
      homeLight0.setNameXOffset((-461.0F));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals((-461.0F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      homeLight0.setDescription("");
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals((-461.0F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float float0 = (-2397.0F);
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#Q|ihD)%%5}NczK");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = homeLight1.isBackFaceShown();
      assertFalse(boolean3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean4 = homeLight1.isBottomLeftPointAt(33, 33, (-2397.0F));
      assertFalse(boolean4);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setMovable(false);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.move(0.3926991F, 0.3926991F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      
      int int0 = Integer.min(1073741824, 720);
      assertEquals(720, int0);
      
      homeLight0.setNameYOffset(720);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(720.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      
      homeLight0.setElevation(720);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(720.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(720.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(720.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      
      // Undeclared exception!
      try { 
        homeLight0.setDepth((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNotNull(homeLight0);
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(bigDecimal0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setX(1.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertEquals(1.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeTexture homeTexture0 = homeLight0.getTexture();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeTexture0);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8:", "F", "F", (Content) null, (Content) null, (Content) null, 791.6026F, (-1349L), 791.6026F, 2.0F, true, (-1349L), (-1349L), sashArray0, (float[][]) null, "T`j}Y<xx8:", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(791.6026F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(791.6026F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("F", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(395.8013F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1349.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-674.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      homeDoorOrWindow0.setModelMirrored(false);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(791.6026F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("F", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("F", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(791.6026F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getId());
      assertEquals((-1349.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1349.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("T`j}Y<xx8:", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-674.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(791.6026F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8:", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1349.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(791.6026F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1349.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(395.8013F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("F", homeDoorOrWindow0.getDescription());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(918L);
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8d", "~%C~~Q7Gb.ZW", "T`j}Y<xx8d", (Content) null, (Content) null, (Content) null, 918L, 918L, 918L, 918L, false, 918L, 918L, sashArray0, (float[][]) null, "~%C~~Q7Gb.ZW", false, bigDecimal0, bigDecimal0);
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((short) (-9244), bigDecimal1.shortValue());
      assertEquals((byte) (-28), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getValueAddedTax();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((byte) (-28), bigDecimal2.byteValue());
      assertEquals((short) (-9244), bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertEquals(3, sashArray0.length);
      
      Float float0 = new Float((-194.7276F));
      assertEquals((-194.7276F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      homeDoorOrWindow0.setShininess(float0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-194.7276F), homeDoorOrWindow0.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isMovable();
      assertFalse(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals((byte) (-106), bigDecimal0.byteValue());
      assertEquals((short)918, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(918.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getId());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(918.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(918.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(918.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("T`j}Y<xx8d", catalogDoorOrWindow0.getDescription());
      assertEquals("~%C~~Q7Gb.ZW", catalogDoorOrWindow0.getCreator());
      assertEquals(918.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-194.7276F), homeDoorOrWindow0.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(918.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(918.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(459.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(459.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("~%C~~Q7Gb.ZW", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(918.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(918.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("T`j}Y<xx8d", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(3, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource(3802.0F, 0.3926991F, 0.3926991F, 605525547, (Float) null);
      assertEquals(0.3926991F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(3802.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.3926991F, lightSource0.getZ(), 0.01F);
      assertEquals(605525547, lightSource0.getColor());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits((-1775.65F));
      assertEquals((-992086835), int1);
      assertFalse(int1 == int0);
      
      int int2 = Float.floatToIntBits((-992086835));
      assertEquals((-831748051), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = Float.floatToIntBits(0.0F);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      LightSource lightSource1 = new LightSource(3802.0F, 2083.8F, 2083.8F, 605525547, (Float) (-1775.65F));
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(3802.0F, lightSource1.getX(), 0.01F);
      assertEquals(2083.8F, lightSource1.getY(), 0.01F);
      assertEquals((-1775.65F), lightSource1.getDiameter(), 0.01F);
      assertEquals(605525547, lightSource1.getColor());
      assertEquals(2083.8F, lightSource1.getZ(), 0.01F);
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0, 0, 2.0F, (-109));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertEquals(2.0F, lightSource2.getZ(), 0.01F);
      assertNull(lightSource2.getDiameter());
      assertEquals(0.0F, lightSource2.getY(), 0.01F);
      assertEquals(0.0F, lightSource2.getX(), 0.01F);
      assertEquals((-109), lightSource2.getColor());
      assertNotNull(lightSource2);
      
      lightSourceArray0[2] = lightSource2;
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = float0.equals(object0);
      assertFalse(boolean0);
      
      LightSource lightSource3 = new LightSource(0.3926991F, 0.3926991F, 3802.0F, 284, float0);
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertEquals(3802.0F, lightSource3.getZ(), 0.01F);
      assertEquals(284, lightSource3.getColor());
      assertEquals(0.3926991F, lightSource3.getY(), 0.01F);
      assertEquals(0.0F, lightSource3.getDiameter(), 0.01F);
      assertEquals(0.3926991F, lightSource3.getX(), 0.01F);
      assertNotNull(lightSource3);
      
      LightSource lightSource4 = new LightSource((-2323.0F), 0.3926991F, 0.0F, (-831748051));
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertEquals(0.3926991F, lightSource4.getY(), 0.01F);
      assertEquals(0.0F, lightSource4.getZ(), 0.01F);
      assertNull(lightSource4.getDiameter());
      assertEquals((-2323.0F), lightSource4.getX(), 0.01F);
      assertEquals((-831748051), lightSource4.getColor());
      assertNotNull(lightSource4);
      
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(284, 1.0F, 0.3926991F, 8192, (Float) (-241.1119F));
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertFalse(lightSource5.equals((Object)lightSource2));
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertEquals((-241.1119F), lightSource5.getDiameter(), 0.01F);
      assertEquals(1.0F, lightSource5.getY(), 0.01F);
      assertEquals(0.3926991F, lightSource5.getZ(), 0.01F);
      assertEquals(284.0F, lightSource5.getX(), 0.01F);
      assertEquals(8192, lightSource5.getColor());
      assertNotNull(lightSource5);
      
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(0.0F, (-3170.2F), (-1775.65F), 17);
      assertFalse(lightSource6.equals((Object)lightSource4));
      assertFalse(lightSource6.equals((Object)lightSource0));
      assertFalse(lightSource6.equals((Object)lightSource5));
      assertFalse(lightSource6.equals((Object)lightSource2));
      assertFalse(lightSource6.equals((Object)lightSource3));
      assertFalse(lightSource6.equals((Object)lightSource1));
      assertEquals((-1775.65F), lightSource6.getZ(), 0.01F);
      assertEquals(17, lightSource6.getColor());
      assertEquals((-3170.2F), lightSource6.getY(), 0.01F);
      assertEquals(0.0F, lightSource6.getX(), 0.01F);
      assertNull(lightSource6.getDiameter());
      assertNotNull(lightSource6);
      
      lightSourceArray0[6] = lightSource6;
      LightSource lightSource7 = new LightSource(2597.459F, (-1.0F), 2.0F, 0);
      assertFalse(lightSource7.equals((Object)lightSource2));
      assertFalse(lightSource7.equals((Object)lightSource5));
      assertFalse(lightSource7.equals((Object)lightSource4));
      assertFalse(lightSource7.equals((Object)lightSource0));
      assertFalse(lightSource7.equals((Object)lightSource6));
      assertFalse(lightSource7.equals((Object)lightSource3));
      assertFalse(lightSource7.equals((Object)lightSource1));
      assertEquals(2597.459F, lightSource7.getX(), 0.01F);
      assertEquals((-1.0F), lightSource7.getY(), 0.01F);
      assertEquals(0, lightSource7.getColor());
      assertNull(lightSource7.getDiameter());
      assertEquals(2.0F, lightSource7.getZ(), 0.01F);
      assertNotNull(lightSource7);
      
      lightSourceArray0[7] = lightSource7;
      Integer integer0 = new Integer((-1736));
      assertEquals((-1736), (int)integer0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1736));
      assertEquals((-1736), (int)integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int3));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      boolean boolean1 = integer0.equals(integer1);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int3));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean2 = homeLight1.isBottomLeftPointAt((-2202.52F), (-821.1F), (-2202.52F));
      assertFalse(boolean2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setDescription("*#v");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("*#v", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = homeLight0.isNameVisible();
      assertFalse(boolean3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean4 = homeLight0.isMovable();
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      
      TextStyle textStyle0 = new TextStyle((-2202.52F));
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals((-2202.52F), textStyle0.getFontSize(), 0.01F);
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveStyle((-2202.52F));
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals((-2202.52F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle1.isBold());
      assertEquals((-2202.52F), textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertNotNull(textStyle1);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      
      TextStyle textStyle2 = textStyle1.deriveItalicStyle(false);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals((-2202.52F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle1.isBold());
      assertEquals((-2202.52F), textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertEquals((-2202.52F), textStyle2.getFontSize(), 0.01F);
      assertFalse(textStyle2.isItalic());
      assertFalse(textStyle2.isBold());
      assertNotNull(textStyle2);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle0, textStyle2);
      assertSame(textStyle1, textStyle0);
      assertSame(textStyle1, textStyle2);
      assertSame(textStyle2, textStyle1);
      assertSame(textStyle2, textStyle0);
      
      homeLight0.setNameStyle(textStyle2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals((-2202.52F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle1.isBold());
      assertEquals((-2202.52F), textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertEquals((-2202.52F), textStyle2.getFontSize(), 0.01F);
      assertFalse(textStyle2.isItalic());
      assertFalse(textStyle2.isBold());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle0, textStyle2);
      assertSame(textStyle1, textStyle0);
      assertSame(textStyle1, textStyle2);
      assertSame(textStyle2, textStyle1);
      assertSame(textStyle2, textStyle0);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean5 = homeLight1.isResizable();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("*#v", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription((String) null);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      
      homeLight0.setDescription("-m{;S0XN=?J");
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("-m{;S0XN=?J", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("-m{;S0XN=?J", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isTopRightPointAt((-1.0F), (-1.0F), (-1.0F));
      assertFalse(boolean0);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      boolean boolean0 = homeLight0.isNameCenterPointAt(0.0F, 783.058F, 0.0F);
      assertFalse(boolean0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":u#a'zJA";
      stringArray0[1] = "5j5";
      stringArray0[2] = "";
      stringArray0[3] = "{.>i(a7Ss%T";
      stringArray0[4] = "5j5";
      stringArray0[5] = "";
      stringArray0[6] = "=EUsSi|JtT^";
      stringArray0[7] = "5j5";
      Long long0 = new Long(1660L);
      assertEquals(1660L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) 1660L);
      assertEquals(1660.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      sashArray0[5] = sash0;
      sashArray0[6] = sash0;
      sashArray0[7] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-3087.34F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 1660L;
      floatArray1[7] = (-3087.34F);
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (-3087.34F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 1660L;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-3087.34F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = (float) 1660L;
      floatArray4[6] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray1));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 1660L;
      floatArray6[3] = 0.0F;
      floatArray6[4] = 0.0F;
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "5j5", "", "5j5", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 1660L, 0.0F, (-3087.34F), 1660L, false, 0.0F, 0.0F, sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "3a>sKSS8RV8^+B3bh]S");
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((byte) (-69), bigDecimal0.byteValue());
      assertEquals((short) (-1349), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-3087.34F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1660.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1660.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("3a>sKSS8RV8^+B3bh]S", catalogDoorOrWindow0.getCurrency());
      assertEquals(1660L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(1660.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("5j5", catalogDoorOrWindow0.getInformation());
      assertEquals("5j5", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(8, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow(":u#a'zJA", "(xWiKoGrB@v3:.*bBI0", "Ue.1<5vqjo;\",", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-2040.341F), sashArray0, floatArray0, "", false, (BigDecimal) null, (BigDecimal) null);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow1.getSashes();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNotNull(sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(sashArray1, sashArray0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(8, sashArray1.length);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(":u#a'zJA", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow1.isTexturable();
      assertTrue(boolean0);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertEquals("Ue.1<5vqjo;\",", catalogDoorOrWindow1.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(":u#a'zJA", catalogDoorOrWindow1.getId());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((-2040.341F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(":u#a'zJA", homeDoorOrWindow0.getCatalogId());
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("Ue.1<5vqjo;\",", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-2040.341F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("(xWiKoGrB@v3:.*bBI0", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(":u#a'zJA", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty.values();
      Integer integer0 = new Integer(3);
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setY((-744.8752F));
      homeDoorOrWindow0.isTopLeftPointAt((-51.436172F), (-1181.642F), 3034.4575F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("20!)w7<SHeJ8 4_ q", propertyChangeListener0);
      homeDoorOrWindow0.removePropertyChangeListener(propertyChangeListenerProxy0);
      homeDoorOrWindow1.isTopLeftPointAt(0.5F, 1.9745969F, 2.0F);
      boolean boolean0 = homeDoorOrWindow1.isBottomLeftPointAt((-577.6907F), (-577.6907F), (-1181.642F));
      homeDoorOrWindow1.removePropertyChangeListener(propertyChangeListenerProxy0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.isBottomRightPointAt(3034.4575F, 1.0F, (-577.6907F));
      homeDoorOrWindow1.setNameAngle((-1160.833F));
      boolean boolean1 = homeDoorOrWindow1.isVisible();
      assertEquals((-744.8752F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(429.31915F);
      homeLight0.setNameVisible(true);
      assertEquals(429.31915F, homeLight0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Integer integer0 = new Integer(33);
      integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBottomLeftPointAt(33, 33, (-2397.0F));
      homeLight1.setDescription("Y");
      homeLight1.isNameVisible();
      homeLight0.isMovable();
      TextStyle textStyle0 = new TextStyle(33);
      TextStyle textStyle1 = textStyle0.deriveStyle(33);
      TextStyle textStyle2 = textStyle1.deriveItalicStyle(false);
      homeLight1.setNameStyle(textStyle2);
      homeLight1.isResizable();
      homeLight1.getNameXOffset();
      // Undeclared exception!
      try { 
        homeLight0.setWidth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomeLight homeLight0 = new HomeLight(light0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight0.getAngle();
      boolean boolean0 = homeLight0.isBottomLeftPointAt(0.0F, 0.0F, 0.0F);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean1 = homeLight0.isNameCenterPointAt(494.166F, 494.166F, 494.166F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setMovable(true);
      homeLight0.getPrice();
      float float0 = homeLight0.getWidth();
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      boolean boolean0 = homeLight0.isPointAt(483.9984F, 483.9984F, 483.9984F);
      assertTrue(boolean0);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setDescription("Y");
      homeLight0.setDescription("Y");
      boolean boolean0 = homeLight0.isPointAt(1922.5435F, 1922.5435F, 0.07982141F);
      HomeLight homeLight1 = homeLight0.clone();
      boolean boolean1 = homeLight0.isPointAt(427.4584F, 1922.5435F, 1922.5435F);
      assertFalse(boolean1 == boolean0);
      
      float float0 = homeLight0.getNameYOffset();
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = homeLight0.getAngle();
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Integer integer0 = new Integer(33);
      integer0.equals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isMovable();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setElevation(33);
      // Undeclared exception!
      try { 
        homeLight0.setDepth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      float float0 = homeLight0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
      
      Level level0 = new Level((String) null, 0.0F, (-7852.5F), 0.0F);
      level0.getElevation();
      level0.getHeight();
      homeLight0.setLevel(level0);
      Level level1 = new Level((String) null, 301.0F, 301.0F, 1521.0F);
      level1.clone();
      boolean boolean0 = homeLight0.isAtLevel(level1);
      boolean boolean1 = homeLight0.isTopLeftPointAt(150.373F, 0.0F, 843.32886F);
      assertTrue(boolean1 == boolean0);
      
      homeLight0.isNameVisible();
      homeLight0.getPrice();
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(5350L);
      Sash[] sashArray0 = new Sash[3];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("T`j}Y<xx8d", "~%C~~Q7Gb.ZW", "T`j}Y<xx8d", (Content) null, (Content) null, (Content) null, 5350L, 5350L, 5350L, 5350L, false, 5350L, 5350L, sashArray0, (float[][]) null, "~%C~~Q7Gb.ZW", false, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getSashes();
      bigDecimal0.ulp();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.setName("~%C~~Q7Gb.ZW");
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      boolean boolean0 = homeLight0.isNameCenterPointAt(2841.0F, 2841.0F, 2841.0F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription((String) null);
      homeLight1.setDescription((String) null);
      HomeLight homeLight2 = homeLight0.clone();
      HomeLight homeLight3 = homeLight2.clone();
      assertNotSame(homeLight3, homeLight2);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty.values();
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash((-4293.0F), (-4293.0F), 1.0F, (-626.879F), 1.0F);
      sashArray0[0] = sash0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":u#a'zJA";
      stringArray0[1] = "5j5";
      stringArray0[2] = "";
      stringArray0[3] = "{.>i(a7Ss%T";
      stringArray0[4] = "5j5";
      stringArray0[5] = "";
      stringArray0[6] = "=EUsSi|JtT^";
      stringArray0[7] = "5j5";
      Long long0 = new Long(1660L);
      Float float0 = new Float((float) 1660L);
      Sash[] sashArray1 = new Sash[8];
      Sash sash1 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray1[0] = sash1;
      sashArray1[1] = sash1;
      sashArray1[2] = sash1;
      sashArray1[3] = sash1;
      sashArray1[4] = sash1;
      sashArray1[5] = sash1;
      sashArray1[6] = sash1;
      sashArray1[7] = sash1;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-3087.34F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 1660L;
      floatArray1[7] = (-3087.34F);
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (-3087.34F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = (float) 1660L;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-3087.34F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = (float) 1660L;
      floatArray4[6] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 1660L;
      floatArray6[3] = 0.0F;
      floatArray6[4] = 0.0F;
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = new BigDecimal((-1349L));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "5j5", "", "5j5", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 1660L, 0.0F, (-3087.34F), 1660L, false, 0.0F, 0.0F, sashArray1, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "3a>sKSS8RV8^+B3bh]S");
      catalogDoorOrWindow0.getWallDistance();
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow(":u#a'zJA", "(xWiKoGrB@v3:.*bBI0", "Ue.1<5vqjo;\",", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-2040.341F), sashArray1, floatArray0, "", false, (BigDecimal) null, (BigDecimal) null);
      catalogDoorOrWindow1.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      Integer integer0 = new Integer((-613));
      homeDoorOrWindow0.setColor(integer0);
      assertFalse(homeDoorOrWindow0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Integer integer0 = new Integer(33);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      boolean boolean0 = homeLight1.isBottomLeftPointAt(33, 33, (-2397.0F));
      assertFalse(boolean0);
      
      homeLight1.setDescription("Y");
      homeLight1.isNameVisible();
      homeLight0.isMovable();
      TextStyle textStyle0 = new TextStyle(33);
      TextStyle textStyle1 = textStyle0.deriveStyle(33);
      TextStyle textStyle2 = textStyle1.deriveItalicStyle(false);
      homeLight1.setNameStyle(textStyle2);
      homeLight1.isResizable();
      float float0 = homeLight1.getNameXOffset();
      assertEquals(0.0F, float0, 0.01F);
      
      homeLight0.getPlanIcon();
      float float1 = homeLight0.getElevation();
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
  }
}
