/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 17:52:30 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall((-2750.7422F), 0.0F, 0.0F, 0.0F, (-2750.7422F), 0.0F);
      Wall wall1 = wall0.clone();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.setXEnd(0.0F);
      wall0.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Wall wall0 = new Wall((-1006.0991F), (-0.41676983F), (-0.41676983F), (-0.41676983F), (-1006.0991F));
      Float float0 = new Float((double) (-1006.0991F));
      wall0.setHeightAtEnd(float0);
      wall0.getPattern();
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setArcExtent(float0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Wall.Property.valueOf("LEFT_SIDE_COLOR");
      wall0.getHeightAtEnd();
      wall0.getPattern();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.1F, 0.0F, (-1349.896F), 0.0F);
      Wall wall1 = wall0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("cometeks.sweethome3d.tools.TemporaryURLContent", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("cometeks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0);
      wall1.setYStart(0.0F);
      wall1.intersectsRectangle((-1349.896F), 0.1F, 2082.5F, 0.1F);
      Wall.Property.values();
      Float float0 = new Float((-2584.754F));
      Float float1 = new Float(0.0);
      wall0.setHeightAtEnd(float1);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(boolean0);
      
      float float1 = wall0.getRightSideShininess();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall(3820.953F, 3820.953F, 3820.953F, 2051.5732F, 3820.953F, 2051.5732F);
      wall0.setXStart(3820.953F);
      wall0.getPoints();
      wall0.getRightSideColor();
      wall0.setYStart(2051.5732F);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getLength();
      Float float0 = new Float(1392.0);
      Float float1 = new Float((-365.0F));
      wall0.setArcExtent(float1);
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.1F, 0.0F, (-1349.896F), 0.0F);
      wall0.getRightSideColor();
      wall0.containsWallEndAt(1.0F, 0.1F, 1.0F);
      wall0.intersectsRectangle((-2142.026F), 48.34F, 1.0F, 1.0F);
      Float float0 = new Float((double) 48.34F);
      Wall.Property.values();
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, 0.0F, 2195.3145F, 2195.3145F, 2973.485F);
      wall0.isTrapezoidal();
      Wall wall1 = new Wall(1.0F, (-1858.0514F), 2973.485F, 2195.3145F, 2195.3145F, 1.0F);
      wall1.getRightSideTexture();
      wall1.setLeftSideTexture((HomeTexture) null);
      Wall wall2 = new Wall((-1.0F), 0.0F, 2973.485F, 0.0F, 2.0510666F);
      wall1.setWallAtEnd(wall2);
      wall0.setWallAtStart(wall2);
      wall1.getRightSideTexture();
      Wall wall3 = wall0.getWallAtStart();
      wall3.containsWallEndAt(2195.3145F, 2973.485F, (-1.0F));
      wall0.getPoints();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-0.16666667F), 1259.0988F, 1875.3013F, (-0.16666667F), 1259.0988F);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = new Wall((-0.16666667F), 1259.0988F, 0.1F, 0.1F, 1.2330115F, 1314.2177F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      Wall wall2 = wall0.getWallAtStart();
      wall2.getRightSideTexture();
      wall2.containsWallEndAt(1.2330115F, (-0.16666667F), (-34.36F));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.1F, 0.0F, (-1349.896F), 0.0F);
      Wall wall1 = wall0.clone();
      Level level0 = new Level((String) null, 0.0F, 0.0F, 0.1F);
      level0.clone();
      level0.clone();
      level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy0);
      wall0.getRightSideTexture();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.getThickness();
      wall0.getXEnd();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.35888186F, 1716.0F, 0.35888186F);
      Wall wall1 = new Wall(0.35888186F, 0.1F, 0.35888186F, 1716.0F, (-4960.0F), (-1259.5795F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      CatalogTexture catalogTexture0 = new CatalogTexture("1|[x7kiWI:.[f", "", (Content) null, (-1.0241505F), 0.01F, "");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setLeftSideTexture(homeTexture0);
      Wall wall1 = new Wall(0.1F, 0.1F, 0.01F, 0.0F, 0.0F, (-854.449F));
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall(1.0F, 2869.333F, 0.0F, (-1409.4966F), (-475.6F), (-475.6F));
      Wall wall3 = wall2.clone();
      wall3.setWallAtStart(wall0);
      wall1.getRightSideTexture();
      wall0.containsWallEndAt((-33.621F), (-1409.4966F), 3070.9019F);
      wall2.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall((-2371.8264F), (-2371.8264F), (-2371.8264F), (-1626.2268F), 5366.0F, 994.0F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      wall0.containsWallStartAt((-1858.0514F), 5366.0F, (-313.763F));
      wall0.intersectsRectangle((-2371.8264F), (-1626.2268F), (-1625.5938F), (-1626.2268F));
      Float float0 = new Float((-1625.5938F));
      wall0.setArcExtent(float0);
      wall0.setYEnd((-1625.5938F));
      wall0.intersectsRectangle(0.1F, (-29.0F), 2.0F, (-1625.5938F));
      wall0.setWallAtEnd(wall0);
      wall0.getArcExtent();
      Float float1 = new Float(0.01F);
      wall0.setArcExtent(float0);
      wall0.getXArcCircleCenter();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1.0F), 0.0F, 1490.2F, 0.0F);
      wall0.containsWallStartAt(0.0F, 1519.0F, (-1.0F));
      wall0.getRightSideTexture();
      wall0.getXStart();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("y5", (PropertyChangeListener) null);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("y5", propertyChangeListenerProxy0);
      wall0.intersectsRectangle((-1.0F), 1426.9124F, 0.0F, 0.0F);
      Float float0 = new Float(2628.5066674684012);
      Wall wall1 = new Wall((-1.0F), 0.0F, 1292.89F, (-1.0F), (-1647.2687F), 1426.9124F);
      Float float1 = new Float((-973.9F));
      wall0.setHeight(float1);
      wall1.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall(1281.0378F, 1281.0378F, 1281.0378F, 1281.0378F, 1281.0378F, 1281.0378F);
      String string0 = "be^1^y-kgi9e=";
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("be^1^y-kgi9e=", propertyChangeListener0);
      wall0.getWallAtStart();
      Object object0 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = null;
      try {
        propertyChangeEvent0 = new PropertyChangeEvent((Object) null, "be^1^y-kgi9e=", object0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setRightSideShininess(0.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      Float float0 = new Float((double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Wall wall0 = new Wall((-137.0F), (-2390.4F), (-0.40054816F), (-137.0F), (-1318.0F));
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("V>?xEYz:TJaq52", (PropertyChangeListener) null);
      wall0.setLeftSideShininess((-137.0F));
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getLeftSideShininess();
      wall0.getRightSideColor();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.1F, 0.0F, (-1349.896F), 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setThickness(50.25F);
      wall1.setXEnd((-1625.5938F));
      Integer integer0 = new Integer(3236);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("0\"", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy1);
      wall1.getLevel();
      wall0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1625.5938F), (-5565.63F), 1.8360189F, (-1625.5938F), 1230.8346F);
      Wall wall1 = new Wall(527.9324F, (-2625.7F), 1.0F, 1128.23F, (-1.0F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall1.getPoints();
      Float float0 = new Float((double) 1.8360189F);
      wall1.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = wall0.getHeight();
      wall0.setHeightAtEnd(float0);
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float((-1299.42F));
      Wall wall0 = new Wall(4.3259354F, 0.0F, 0.1F, (-2340.386F), 727.0F);
      Wall wall1 = new Wall((-1.0F), (-0.027207727F), (-1299.42F), (-1.0F), (-1.0F));
      Float float1 = new Float((-1.0F));
      wall1.setHeight(float1);
      Integer integer0 = new Integer(1736);
      wall1.setLeftSideColor(integer0);
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall1.getRightSideTexture();
      wall0.containsWallEndAt((-1299.42F), 0.1F, (-996.5229F));
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 2520.127F, 0.1F, 2520.127F, 2520.127F, 1259.0988F);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = new Wall((-4182.4F), (-4182.4F), 2520.127F, 0.1F, 2520.127F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getRightSideTexture();
      wall1.containsWallEndAt(2255.698F, 2255.698F, (-4182.4F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1414.3478F), 771.8F, 771.8F);
      wall0.getPoints();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, 0.0F, 2195.3145F, 2195.3145F, 2973.485F);
      wall0.isTrapezoidal();
      Wall wall1 = new Wall(1.0F, (-1858.0514F), 2973.485F, 2195.3145F, 2195.3145F, 728.77216F);
      wall1.getRightSideTexture();
      wall1.setLeftSideTexture((HomeTexture) null);
      Wall wall2 = new Wall((-1.0F), 0.0F, 0.67273587F, 0.0F, 2.0510666F);
      wall1.setWallAtEnd(wall2);
      wall0.setWallAtStart(wall2);
      wall1.getRightSideTexture();
      Wall wall3 = wall0.getWallAtStart();
      wall3.containsWallEndAt(0.67273587F, 2973.485F, (-1.0F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall((-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F));
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertNull(integer0);
      
      boolean boolean0 = wall0.intersectsRectangle((-2305.2F), 1.0F, 0.0F, (-2305.2F));
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertFalse(boolean0);
      
      Float float0 = new Float((double) 1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      
      wall0.getThickness();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall((-2750.7422F), 0.0F, 0.0F, 0.0F, (-2750.7422F), 0.0F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2750.7422F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1375.3711F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2750.7422F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall((-4907.8F), 3305.9958F, (-2403.75F), 575.817F, (-2142.026F), 575.817F);
      assertEquals((-2403.75F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-3655.775F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2142.026F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-4907.8F), wall2.getXStart(), 0.01F);
      assertEquals(3704.6108F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3704.6108F, wall2.getLength(), 0.01F);
      assertEquals(575.817F, wall2.getYEnd(), 0.01F);
      assertEquals(575.817F, wall2.getHeight(), 0.01F);
      assertEquals(1940.9065F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3305.9958F, wall2.getYStart(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Wall wall3 = wall2.clone();
      assertEquals((-2403.75F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-3655.775F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2142.026F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-4907.8F), wall2.getXStart(), 0.01F);
      assertEquals(3704.6108F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3704.6108F, wall2.getLength(), 0.01F);
      assertEquals(575.817F, wall2.getYEnd(), 0.01F);
      assertEquals(575.817F, wall2.getHeight(), 0.01F);
      assertEquals(1940.9065F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3305.9958F, wall2.getYStart(), 0.01F);
      assertEquals((-2403.75F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(575.817F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(3704.6108F, wall3.getLength(), 0.01F);
      assertEquals(575.817F, wall3.getHeight(), 0.01F);
      assertEquals(1940.9065F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(3305.9958F, wall3.getYStart(), 0.01F);
      assertEquals((-4907.8F), wall3.getXStart(), 0.01F);
      assertEquals(3704.6108F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-3655.775F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-2142.026F), wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotNull(wall3);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      
      Wall wall4 = wall1.clone();
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2750.7422F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1375.3711F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2750.7422F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getXEnd(), 0.01F);
      assertEquals((-2750.7422F), wall4.getXStart(), 0.01F);
      assertEquals(2750.7422F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertEquals(2750.7422F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall4.getYEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals((-2750.7422F), wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getHeight(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall4);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall4);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertNotNull(wall4);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      
      wall4.setXEnd((-1.0F));
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2750.7422F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1375.3711F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2750.7422F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals((-1.0F), wall4.getXEnd(), 0.01F);
      assertEquals((-2750.7422F), wall4.getXStart(), 0.01F);
      assertEquals(2749.7422F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertEquals(2749.7422F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.8711F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall4.getYEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals((-2750.7422F), wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getHeight(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall4);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall4);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall4));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      
      Float float0 = wall4.getHeight();
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2750.7422F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1375.3711F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2750.7422F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals((-1.0F), wall4.getXEnd(), 0.01F);
      assertEquals((-2750.7422F), wall4.getXStart(), 0.01F);
      assertEquals(2749.7422F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertEquals(2749.7422F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.8711F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall4.getYEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals((-2750.7422F), wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getHeight(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall4);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall4);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall4));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      
      Float float1 = wall1.getArcExtent();
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2750.7422F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1375.3711F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2750.7422F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall4);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall4);
      assertNull(float1);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall4));
      
      float float2 = wall1.getYStart();
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2750.7422F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1375.3711F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2750.7422F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall4);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall4);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall4));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1.0F, 339.8625F, 339.8625F, (-1.0F), (-1387.5781F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall wall1 = new Wall((-2617.7683F), 339.8625F, 1164.1414F, 1876.4591F, (-1387.5781F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      Wall wall2 = wall0.getWallAtEnd();
      wall1.setWallAtStart(wall2);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      linkedList0.add(wall0);
      Wall wall1 = new Wall(0.1F, 0.0F, 0.0F, (-1461.0F), 0.1F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall0.getRightSideTexture();
      wall1.containsWallEndAt(0.0F, 0.0F, (-1461.0F));
      wall0.getPoints();
      wall1.getRightSideTexture();
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Wall wall0 = new Wall((-2460.784F), (-0.41318375F), 3400.6216F, 21.48986F, 21.48986F);
      Float float0 = new Float(5637.0F);
      wall0.setArcExtent(float0);
      Float float1 = new Float(1156.79);
      wall0.setArcExtent(float0);
      wall0.getXArcCircleCenter();
      // Undeclared exception!
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall(529.48804F, (-2509.0F), (-32.13528F), 1.8360189F, 2936.6484F);
      wall0.getStartPointToEndPointDistance();
      wall0.getLeftSideShininess();
      Wall wall1 = new Wall(1.8360189F, (-719.8896F), (-2509.0F), (-2509.0F), (-32.13528F));
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      Float float0 = new Float(1.0F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.1F, 0.0F, (-1349.896F), 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setThickness(50.25F);
      Wall wall2 = new Wall(0.1F, (-4960.0F), 2164.556F, 2164.556F, (-1625.5938F));
      Wall wall3 = wall0.clone();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall1, "[ d^OX", wall1, wall2);
      Float float0 = new Float((-1.0F));
      Float float1 = new Float(3673.5237F);
      wall2.setArcExtent(float0);
      wall0.setYEnd((-4960.0F));
      wall2.intersectsRectangle(2164.556F, 1.0F, 2482.6763F, 0.0F);
      wall3.getArcExtent();
      Float.min(2164.556F, (-1448.03F));
      wall3.setWallAtStart(wall2);
      wall2.getLength();
      Float float2 = wall1.getHeight();
      wall0.setHeight(float2);
      wall3.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float float0 = 250.6536F;
      float float1 = 2559.7F;
      Wall wall0 = new Wall(250.6536F, (-815.80774F), (-815.80774F), 2559.7F, 250.6536F, (-815.80774F));
      wall0.setLeftSideShininess(2.0F);
      wall0.clone();
      Float float2 = null;
      wall0.clone();
      String string0 = "";
      String string1 = "n";
      Class<Object> class0 = Object.class;
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(class0, "n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource n
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      List<Wall> list0 = null;
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = 250.6536F;
      float float1 = 2559.7F;
      Wall wall0 = new Wall(250.6536F, (-815.80774F), (-815.80774F), 2559.7F, 250.6536F, (-815.80774F));
      wall0.setLeftSideShininess(2.0F);
      wall0.setRightSideShininess(664.4F);
      wall0.clone();
      Float float2 = null;
      wall0.clone();
      String string0 = "";
      String string1 = "n";
      Class<Object> class0 = Object.class;
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(class0, "n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource n
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = 870.53F;
      Wall wall0 = new Wall(1946.71F, 1946.71F, 1946.71F, 1946.71F, 870.53F);
      Wall wall1 = wall0.clone();
      String string0 = "LEVEL";
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("LEVEL", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall1.setXStart((-659.27673F));
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 1.0F, 0.0F, 0.0F, (-2868.51F));
      wall0.getLeftSideTexture();
      Float float0 = new Float(1.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 2847.9133F, (-4455.8203F), 1.0F, 1097.5245F);
      assertEquals((-4455.8203F), wall0.getXEnd(), 0.01F);
      assertEquals(1097.5245F, wall0.getThickness(), 0.01F);
      assertEquals(2847.9133F, wall0.getYStart(), 0.01F);
      assertEquals(5286.808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5286.808F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2228.4102F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1424.4567F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals((-4455.8203F), wall0.getXEnd(), 0.01F);
      assertEquals(1097.5245F, wall0.getThickness(), 0.01F);
      assertEquals(2847.9133F, wall0.getYStart(), 0.01F);
      assertEquals(5286.808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5286.808F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2228.4102F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1424.4567F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(level0);
      
      Wall wall1 = new Wall(2.0F, (-1375.9437F), 1.0F, (-1375.9437F), 1.0F, 387.7F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1375.9437F), wall1.getYStart(), 0.01F);
      assertEquals(1.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(387.7F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1375.9437F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1375.9437F), wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals((-4455.8203F), wall0.getXEnd(), 0.01F);
      assertEquals(1097.5245F, wall0.getThickness(), 0.01F);
      assertEquals(2847.9133F, wall0.getYStart(), 0.01F);
      assertEquals(5286.808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5286.808F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2228.4102F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1424.4567F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1375.9437F), wall1.getYStart(), 0.01F);
      assertEquals(1.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(387.7F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1375.9437F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1375.9437F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1375.9437F), wall1.getYStart(), 0.01F);
      assertEquals(1.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(387.7F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1375.9437F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1375.9437F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setPattern((TextureImage) null);
      assertEquals((-4455.8203F), wall0.getXEnd(), 0.01F);
      assertEquals(1097.5245F, wall0.getThickness(), 0.01F);
      assertEquals(2847.9133F, wall0.getYStart(), 0.01F);
      assertEquals(5286.808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5286.808F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2228.4102F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1424.4567F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Level level1 = wall0.getLevel();
      assertEquals((-4455.8203F), wall0.getXEnd(), 0.01F);
      assertEquals(1097.5245F, wall0.getThickness(), 0.01F);
      assertEquals(2847.9133F, wall0.getYStart(), 0.01F);
      assertEquals(5286.808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5286.808F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2228.4102F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1424.4567F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(level1);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean0 = wall1.containsWallEndAt((-1375.9437F), (-2151.88F), 0.1F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1375.9437F), wall1.getYStart(), 0.01F);
      assertEquals(1.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(387.7F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1375.9437F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1375.9437F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.1F, 0.0F, (-1349.896F), 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setThickness(50.25F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(50.25F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setXEnd((-1625.5938F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1625.5938F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1625.5938F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1625.5938F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(50.25F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-812.7969F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(3236);
      assertEquals(3236, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("YBr-@rwkh:$L");
      assertNull(integer1);
      
      String string0 = Integer.toUnsignedString(14);
      assertEquals("14", string0);
      assertNotNull(string0);
      
      wall1.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1625.5938F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1625.5938F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1625.5938F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(50.25F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-812.7969F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall1));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      
      List<Wall> list1 = Wall.clone(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertFalse(list1.contains(wall1));
      assertTrue(list1.equals((Object)list0));
      
      List<Wall> list2 = Wall.clone(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotNull(list2);
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertFalse(list1.contains(wall1));
      assertFalse(list2.contains(wall1));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      
      wall0.setLeftSideShininess((-1625.5938F));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 44.274124F, 0.0F, 0.0F, 0.0F);
      wall0.getRightSideTexture();
      Float float0 = new Float(44.274124F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 401.4203F, 1.0F, 1.0F, 401.4203F);
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.1F, 0.0F, (-1349.896F), 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setThickness(50.25F);
      Wall wall2 = new Wall(0.1F, (-4960.0F), 2164.556F, 2164.556F, (-1625.5938F));
      wall0.clone();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall1, "[ d^OX", wall1, wall2);
      Float float0 = new Float((-1.0F));
      Float float1 = new Float(3673.5237F);
      wall2.setArcExtent(float0);
      wall2.intersectsRectangle(0.0F, 768.56036F, 0.0F, (-1.0F));
      wall1.setWallAtEnd(wall0);
      wall2.getArcExtent();
      Float float2 = new Float((-1625.5938F));
      Float.min((-1625.5938F), 768.56036F);
      Float float3 = new Float(0.1F);
      wall0.setArcExtent(float2);
      Wall wall3 = new Wall(2013.3651F, (-832.34F), (-1349.896F), 1183.2F, 0.01F);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      wall1.getPoints();
      Random.setNextRandom((-2418));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall(0.0F, 0.0F, 0.1F, 0.0F, (-1349.896F), 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setThickness(50.25F);
      wall1.getLeftSideColor();
      wall0.getWallAtStart();
      String string0 = "Y";
      String string1 = null;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MockURL.URL((String) null, "Y", 0, (String) null, uRLStreamHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.1F, 0.0F, (-1349.896F), 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setThickness(50.25F);
      Wall wall2 = new Wall((-815.80774F), (-1625.5938F), (-1349.896F), 1.0F, (-815.80774F), 0.0F);
      Wall wall3 = wall2.clone();
      wall3.setLeftSideShininess(0.0F);
      wall0.getPoints();
      wall3.getRightSideColor();
      Float float0 = new Float(2103.1F);
      wall1.setArcExtent(float0);
      wall3.intersectsRectangle((-195.513F), 1.0F, 1106.0F, 2103.1F);
      Float float1 = new Float((double) (-195.513F));
      Float float2 = new Float((-1.0));
      Float.sum(2103.1F, (-1.0F));
      wall2.setHeight(float2);
      Level level0 = new Level("x$9.h#Wc{4Dd", 1.0F, 5153.7393F, (-1349.896F));
      wall1.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.getRightSideTexture();
      wall0.getWallAtEnd();
      wall0.setWallAtStart((Wall) null);
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      linkedList0.add(wall0);
      Wall wall1 = new Wall(0.0F, 0.1F, (-1461.0F), 0.1F, (-1461.0F), 0.1F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall0.getRightSideTexture();
      wall1.containsWallEndAt(0.1F, 0.0F, (-1461.0F));
      wall0.getPoints();
      wall1.getRightSideTexture();
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Wall wall0 = new Wall((-1.0F), 0.0F, 1318.1565F, 0.0F, 3814.88F, 387.7F);
      Wall wall1 = wall0.clone();
      wall1.containsWallEndAt(1.0F, (-1904.2247F), (-70.5323F));
      Wall wall2 = new Wall((-400.47964F), 0.1F, (-3196.029F), 143.284F, 143.284F, 2997.129F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall1);
      Wall.clone((List<Wall>) linkedList0);
      Float float0 = new Float((-513.4286F));
      Float float1 = new Float((-1.0));
      wall2.setArcExtent(float1);
      wall1.getXArcCircleCenter();
      wall2.getPoints();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall((-1349.896F), (-1349.896F), 0.0F, 0.1F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setThickness(0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = wall1.getLeftSideColor();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setYEnd(399.29F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall0.clone();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2209.4956F, wall2.getLength(), 0.01F);
      assertEquals((-475.30298F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals((-674.948F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Float float0 = new Float(650.350485);
      assertEquals(650.35046F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(0.1F, 0.1F);
      assertEquals(0.1F, float1, 0.01F);
      
      wall2.setHeightAtEnd(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2209.4956F, wall2.getLength(), 0.01F);
      assertEquals((-475.30298F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals((-674.948F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(650.35046F, wall2.getHeightAtEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      Float float2 = wall2.getHeightAtEnd();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2209.4956F, wall2.getLength(), 0.01F);
      assertEquals((-475.30298F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals((-674.948F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(650.35046F, wall2.getHeightAtEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(650.35046F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall2.setYEnd(399.29F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2209.4956F, wall2.getLength(), 0.01F);
      assertEquals((-475.30298F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals((-674.948F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(650.35046F, wall2.getHeightAtEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Integer integer1 = new Integer(11);
      assertEquals(11, (int)integer1);
      assertNotNull(integer1);
      
      wall0.setRightSideColor((Integer) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer2 = new Integer(11);
      assertEquals(11, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      
      float float3 = wall2.getXArcCircleCenter();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2209.4956F, wall2.getLength(), 0.01F);
      assertEquals((-475.30298F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals((-674.948F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(650.35046F, wall2.getHeightAtEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-674.948F), float3, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals(float3, float1, 0.01F);
      
      float float4 = wall1.getThickness();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 2520.127F, 0.1F, 2520.127F, 2520.127F, 1259.0988F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture1 = wall1.getRightSideTexture();
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setPattern((TextureImage) null);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Level level0 = wall1.getLevel();
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(level0);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall1.containsWallEndAt(1259.0988F, 1259.0988F, 989.6784F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall((-2371.8264F), (-2371.8264F), (-2371.8264F), (-1626.2268F), 5366.0F, 994.0F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-1625.5938F), (-1625.5938F), 994.0F, 5366.0F, (-1625.5938F));
      assertEquals((-315.79688F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(1870.2031F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5366.0F, wall1.getYEnd(), 0.01F);
      assertEquals(7466.2344F, wall1.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall1.getYStart(), 0.01F);
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1625.5938F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7466.2344F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall1.intersectsRectangle((-2371.8264F), (-1626.2268F), (-345.0F), (-1626.2268F));
      assertEquals((-315.79688F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(1870.2031F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5366.0F, wall1.getYEnd(), 0.01F);
      assertEquals(7466.2344F, wall1.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall1.getYStart(), 0.01F);
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1625.5938F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7466.2344F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float((-1625.5938F));
      assertEquals((-1625.5938F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(5366.0F, wall1.getYEnd(), 0.01F);
      assertEquals(7902328.5F, wall1.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall1.getArcExtent(), 0.01F);
      assertEquals((-1625.5938F), wall1.getYStart(), 0.01F);
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2962.668F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall1.getXStart(), 0.01F);
      assertEquals((-3231.5432F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7466.2344F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setYEnd((-1625.5938F));
      assertEquals((-1998.7101F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(746.23267F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals(746.23267F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean1 = wall0.intersectsRectangle(0.1F, (-29.0F), 2.0F, (-1625.5938F));
      assertEquals((-1998.7101F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(746.23267F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals(746.23267F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-1998.7101F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(746.23267F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals(746.23267F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(5366.0F, wall1.getYEnd(), 0.01F);
      assertEquals(7902328.5F, wall1.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall1.getArcExtent(), 0.01F);
      assertEquals((-1625.5938F), wall1.getYStart(), 0.01F);
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2962.668F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall1.getXStart(), 0.01F);
      assertEquals((-3231.5432F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7466.2344F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall0.getArcExtent();
      assertEquals((-1998.7101F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(746.23267F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals(746.23267F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(float1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float2 = Float.min((-1625.5938F), (-4498.5728F));
      assertEquals((-4498.5728F), float2, 0.01F);
      
      float float3 = wall1.getLength();
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(5366.0F, wall1.getYEnd(), 0.01F);
      assertEquals(7902328.5F, wall1.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall1.getArcExtent(), 0.01F);
      assertEquals((-1625.5938F), wall1.getYStart(), 0.01F);
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2962.668F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall1.getXStart(), 0.01F);
      assertEquals((-3231.5432F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7466.2344F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(7902328.5F, float3, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float3, float2, 0.01F);
      
      wall0.setHeight((Float) null);
      assertEquals((-1998.7101F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(746.23267F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(746.23267F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall((-2371.8264F), (-2371.8264F), (-2371.8264F), (-1626.2268F), 5366.0F, 994.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = wall0.containsWallStartAt((-1858.0514F), 5366.0F, (-313.763F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Float float0 = new Float((-1625.5938F));
      assertEquals((-1625.5938F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(0.1F, (-0.027207727F), 994.0F, (-1858.0514F), (-1183.2F));
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean3 = wall1.containsWallEndAt((-1976.8F), (-996.5229F), 1298.4F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(boolean3);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      HomeTexture homeTexture1 = wall1.getLeftSideTexture();
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture1);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("1.5.0_16", 0.0F, (-909.0F), (-522.9F));
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-522.9F), level0.getHeight(), 0.01F);
      assertEquals("1.5.0_16", level0.getName());
      assertEquals((-909.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      level0.setFloorThickness(0.0F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-522.9F), level0.getHeight(), 0.01F);
      assertEquals("1.5.0_16", level0.getName());
      assertTrue(level0.isVisible());
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-522.9F), level0.getHeight(), 0.01F);
      assertEquals("1.5.0_16", level0.getName());
      assertTrue(level0.isVisible());
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1499.06F), (-598.0F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(2.0F, 0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setYStart(2.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      
      wall0.setXEnd((-1.7060475F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7060475F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(4.2112694F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.14697623F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4.2112694F, wall0.getLength(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7060475F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(4.2112694F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.14697623F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4.2112694F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1499.06F), wall1.getThickness(), 0.01F);
      assertEquals(4.2112694F, wall1.getLength(), 0.01F);
      assertEquals(0.14697623F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-598.0F), wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4.2112694F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.7060475F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7060475F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(4.2112694F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.14697623F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4.2112694F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1499.06F), wall1.getThickness(), 0.01F);
      assertEquals(4.2112694F, wall1.getLength(), 0.01F);
      assertEquals(0.14697623F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-598.0F), wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4.2112694F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.7060475F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = new Level("fW#{V][IF", (-698.46F), (-1499.06F), (-598.0F));
      assertEquals("fW#{V][IF", level0.getName());
      assertEquals((-598.0F), level0.getHeight(), 0.01F);
      assertEquals((-1499.06F), level0.getFloorThickness(), 0.01F);
      assertEquals((-698.46F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals("fW#{V][IF", level0.getName());
      assertEquals((-598.0F), level0.getHeight(), 0.01F);
      assertEquals((-1499.06F), level0.getFloorThickness(), 0.01F);
      assertEquals((-698.46F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-698.46F), level1.getElevation(), 0.01F);
      assertEquals("fW#{V][IF", level1.getName());
      assertEquals((-598.0F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1499.06F), level1.getFloorThickness(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, (-229.8125F), 1180.0F, 0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7060475F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(4.2112694F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.14697623F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4.2112694F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float0 = new Float(2644.0);
      assertEquals(2644.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7060475F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2644.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(4.2112694F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.14697623F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4.2112694F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-4960.0F), 2164.556F, 2164.556F, (-1625.5938F));
      assertEquals((-1397.722F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(7446.084F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7446.084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-2.39428F));
      assertEquals((-2.39428F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-1397.722F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(7446.084F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7446.084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(7446.084F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1082.328F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1397.722F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(2164.556F, wall1.getYEnd(), 0.01F);
      assertEquals(2164.556F, wall1.getXEnd(), 0.01F);
      assertEquals(7446.084F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-1397.722F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(7446.084F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7446.084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setLeftSideTexture((HomeTexture) null);
      assertEquals((-1397.722F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(7446.084F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7446.084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(7446.084F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1082.328F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1397.722F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(2164.556F, wall1.getYEnd(), 0.01F);
      assertEquals(2164.556F, wall1.getXEnd(), 0.01F);
      assertEquals(7446.084F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall((-4960.0F), (-4182.4F), (-0.025641026F), (-2.39428F), 2164.556F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(6486.4316F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2480.013F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2092.397F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall2.getXStart(), 0.01F);
      assertEquals(2164.556F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-0.025641026F), wall2.getXEnd(), 0.01F);
      assertEquals((-2.39428F), wall2.getYEnd(), 0.01F);
      assertEquals(6486.4316F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-4182.4F), wall2.getYStart(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-1397.722F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(7446.084F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7446.084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(7446.084F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1082.328F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1397.722F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(2164.556F, wall1.getYEnd(), 0.01F);
      assertEquals(2164.556F, wall1.getXEnd(), 0.01F);
      assertEquals(7446.084F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall2);
      assertEquals((-1397.722F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(7446.084F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7446.084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(6486.4316F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2480.013F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2092.397F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall2.getXStart(), 0.01F);
      assertEquals(2164.556F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-0.025641026F), wall2.getXEnd(), 0.01F);
      assertEquals((-2.39428F), wall2.getYEnd(), 0.01F);
      assertEquals(6486.4316F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-4182.4F), wall2.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertEquals((-1397.722F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(7446.084F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7446.084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean0 = wall0.containsWallEndAt((-4960.0F), 0.0F, (-0.025641026F));
      assertEquals((-1397.722F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(7446.084F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7446.084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall3 = wall0.getWallAtStart();
      assertEquals((-1397.722F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(7446.084F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7446.084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-2092.397F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(6486.4316F, wall3.getLength(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeight());
      assertEquals((-2480.013F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall3.getXStart(), 0.01F);
      assertEquals(2164.556F, wall3.getThickness(), 0.01F);
      assertEquals((-4182.4F), wall3.getYStart(), 0.01F);
      assertEquals((-2.39428F), wall3.getYEnd(), 0.01F);
      assertEquals(6486.4316F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-0.025641026F), wall3.getXEnd(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      
      HomeTexture homeTexture2 = wall3.getLeftSideTexture();
      assertEquals((-1397.722F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(7446.084F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7446.084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-2092.397F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(6486.4316F, wall3.getLength(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeight());
      assertEquals((-2480.013F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall3.getXStart(), 0.01F);
      assertEquals(2164.556F, wall3.getThickness(), 0.01F);
      assertEquals((-4182.4F), wall3.getYStart(), 0.01F);
      assertEquals((-2.39428F), wall3.getYEnd(), 0.01F);
      assertEquals(6486.4316F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-0.025641026F), wall3.getXEnd(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNull(homeTexture2);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1397.722F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(7446.084F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7446.084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 1.0E-10F, 0.1F, 1374.122F, 0.1F, 1374.122F);
      assertEquals(1374.122F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1374.122F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(687.061F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1374.122F, wall0.getHeight(), 0.01F);
      assertEquals(1.0E-10F, wall0.getYStart(), 0.01F);
      assertEquals(1374.122F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallEndAt(1.0E-10F, (-2.1025858F), 0.1F);
      assertEquals(1374.122F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1374.122F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(687.061F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1374.122F, wall0.getHeight(), 0.01F);
      assertEquals(1.0E-10F, wall0.getYStart(), 0.01F);
      assertEquals(1374.122F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(boolean0);
      
      Float float0 = new Float((-0.0299285F));
      assertEquals((-0.0299285F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setRightSideShininess((-673.1381F));
      assertEquals(1374.122F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-673.1381F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1374.122F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(687.061F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1374.122F, wall0.getHeight(), 0.01F);
      assertEquals(1.0E-10F, wall0.getYStart(), 0.01F);
      assertEquals(1374.122F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(1374.122F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-673.1381F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1374.122F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(687.061F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1374.122F, wall0.getHeight(), 0.01F);
      assertEquals(1.0E-10F, wall0.getYStart(), 0.01F);
      assertEquals(1374.122F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(1374.122F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-673.1381F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1374.122F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(687.061F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1374.122F, wall0.getHeight(), 0.01F);
      assertEquals(1.0E-10F, wall0.getYStart(), 0.01F);
      assertEquals(1374.122F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1374.122F, wall1.getHeight(), 0.01F);
      assertEquals(1.0E-10F, wall1.getYStart(), 0.01F);
      assertEquals(1374.122F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1374.122F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(687.061F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1374.122F, wall1.getYEnd(), 0.01F);
      assertEquals((-673.1381F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(1374.122F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-673.1381F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1374.122F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(687.061F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1374.122F, wall0.getHeight(), 0.01F);
      assertEquals(1.0E-10F, wall0.getYStart(), 0.01F);
      assertEquals(1374.122F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      float float2 = wall1.getStartPointToEndPointDistance();
      assertEquals(1374.122F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-673.1381F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1374.122F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(687.061F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1374.122F, wall0.getHeight(), 0.01F);
      assertEquals(1.0E-10F, wall0.getYStart(), 0.01F);
      assertEquals(1374.122F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1374.122F, wall1.getHeight(), 0.01F);
      assertEquals(1.0E-10F, wall1.getYStart(), 0.01F);
      assertEquals(1374.122F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1374.122F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(687.061F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1374.122F, wall1.getYEnd(), 0.01F);
      assertEquals((-673.1381F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1374.122F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Wall wall0 = new Wall((-4272.1F), (-1904.2247F), (-1904.2247F), 528.3F, (-4272.1F), (-1904.2247F));
      assertEquals((-4272.1F), wall0.getXStart(), 0.01F);
      assertEquals((-1904.2247F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3394.7034F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4272.1F), wall0.getThickness(), 0.01F);
      assertEquals((-3088.1624F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(528.3F, wall0.getYEnd(), 0.01F);
      assertEquals(3394.7034F, wall0.getLength(), 0.01F);
      assertEquals((-1904.2247F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1904.2247F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-687.9624F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-4272.1F), wall0.getXStart(), 0.01F);
      assertEquals((-1904.2247F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3394.7034F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4272.1F), wall0.getThickness(), 0.01F);
      assertEquals((-3088.1624F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(528.3F, wall0.getYEnd(), 0.01F);
      assertEquals(3394.7034F, wall0.getLength(), 0.01F);
      assertEquals((-1904.2247F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1904.2247F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-687.9624F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4272.1F), wall1.getXStart(), 0.01F);
      assertEquals((-4272.1F), wall1.getThickness(), 0.01F);
      assertEquals((-1904.2247F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3394.7034F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1904.2247F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(528.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-3088.1624F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3394.7034F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1904.2247F), wall1.getHeight(), 0.01F);
      assertEquals((-687.9624F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean2 = wall1.containsWallEndAt((-1.0F), 0.0F, 0.01F);
      assertEquals((-4272.1F), wall0.getXStart(), 0.01F);
      assertEquals((-1904.2247F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3394.7034F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4272.1F), wall0.getThickness(), 0.01F);
      assertEquals((-3088.1624F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(528.3F, wall0.getYEnd(), 0.01F);
      assertEquals(3394.7034F, wall0.getLength(), 0.01F);
      assertEquals((-1904.2247F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1904.2247F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-687.9624F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4272.1F), wall1.getXStart(), 0.01F);
      assertEquals((-4272.1F), wall1.getThickness(), 0.01F);
      assertEquals((-1904.2247F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3394.7034F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1904.2247F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(528.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-3088.1624F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3394.7034F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1904.2247F), wall1.getHeight(), 0.01F);
      assertEquals((-687.9624F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(boolean2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Wall wall2 = new Wall(0.0F, 0.1F, 0.0F, 0.0F, 2493.1553F, (-278.99597F));
      assertEquals((-278.99597F), wall2.getHeight(), 0.01F);
      assertEquals(0.1F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2493.1553F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall1));
      
      boolean boolean3 = linkedList0.add(wall1);
      assertEquals((-4272.1F), wall0.getXStart(), 0.01F);
      assertEquals((-1904.2247F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3394.7034F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4272.1F), wall0.getThickness(), 0.01F);
      assertEquals((-3088.1624F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(528.3F, wall0.getYEnd(), 0.01F);
      assertEquals(3394.7034F, wall0.getLength(), 0.01F);
      assertEquals((-1904.2247F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1904.2247F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-687.9624F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4272.1F), wall1.getXStart(), 0.01F);
      assertEquals((-4272.1F), wall1.getThickness(), 0.01F);
      assertEquals((-1904.2247F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3394.7034F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1904.2247F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(528.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-3088.1624F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3394.7034F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1904.2247F), wall1.getHeight(), 0.01F);
      assertEquals((-687.9624F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertTrue(boolean3);
      assertFalse(linkedList0.contains(wall0));
      assertTrue(linkedList0.contains(wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertTrue(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertEquals((-4272.1F), wall0.getXStart(), 0.01F);
      assertEquals((-1904.2247F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3394.7034F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4272.1F), wall0.getThickness(), 0.01F);
      assertEquals((-3088.1624F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(528.3F, wall0.getYEnd(), 0.01F);
      assertEquals(3394.7034F, wall0.getLength(), 0.01F);
      assertEquals((-1904.2247F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1904.2247F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-687.9624F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4272.1F), wall1.getXStart(), 0.01F);
      assertEquals((-4272.1F), wall1.getThickness(), 0.01F);
      assertEquals((-1904.2247F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3394.7034F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1904.2247F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(528.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.9335171E19F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3394.7034F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1904.2247F), wall1.getHeight(), 0.01F);
      assertEquals((-1.9863071E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = wall2.getXArcCircleCenter();
      assertEquals((-278.99597F), wall2.getHeight(), 0.01F);
      assertEquals(0.1F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2493.1553F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals((-4272.1F), wall0.getXStart(), 0.01F);
      assertEquals((-1904.2247F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3394.7034F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4272.1F), wall0.getThickness(), 0.01F);
      assertEquals((-3088.1624F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(528.3F, wall0.getYEnd(), 0.01F);
      assertEquals(3394.7034F, wall0.getLength(), 0.01F);
      assertEquals((-1904.2247F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1904.2247F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-687.9624F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4272.1F), wall1.getXStart(), 0.01F);
      assertEquals((-4272.1F), wall1.getThickness(), 0.01F);
      assertEquals((-1904.2247F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3394.7034F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1904.2247F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(528.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.9335171E19F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3394.7034F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1904.2247F), wall1.getHeight(), 0.01F);
      assertEquals((-1.9863071E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 2051.5732F, 0.0F, 1.0F, 1.0F, 0.0F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 1.0F, 0.0F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(boolean0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(homeTexture0);
      
      float float0 = wall0.getXStart();
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      boolean boolean1 = wall0.intersectsRectangle(1.0F, 1258.3762F, 2051.5732F, 0.0F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Float float1 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall1 = new Wall(1258.3762F, 2.0F, (-16.906F), 0.0F, (-2584.754F), (-16.906F));
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1275.2838F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-16.906F), wall1.getHeight(), 0.01F);
      assertEquals(620.7351F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1258.3762F, wall1.getXStart(), 0.01F);
      assertEquals((-2584.754F), wall1.getThickness(), 0.01F);
      assertEquals(1275.2838F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.906F), wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight(float1);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1275.2838F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(620.7351F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1258.3762F, wall1.getXStart(), 0.01F);
      assertEquals((-2584.754F), wall1.getThickness(), 0.01F);
      assertEquals(1275.2838F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.906F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall((-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(integer0);
      
      boolean boolean0 = wall0.intersectsRectangle(1.0F, 555.6F, 17.513996F, 555.6F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertFalse(boolean0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      Float float0 = new Float((-2142.026F));
      assertEquals((-2142.026F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2142.026F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2142.026F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float float1 = wall0.getYArcCircleCenter();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2142.026F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall((-1.2407146F), (-1.2407146F), (-1.2407146F), (-1.2407146F), (-1.2407146F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.2407146F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.2407146F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.2407146F), wall0.getXStart(), 0.01F);
      assertEquals((-1.2407146F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.2407146F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.2407146F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.2407146F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.setHeight((Float) null);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.2407146F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.2407146F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.2407146F), wall0.getXStart(), 0.01F);
      assertEquals((-1.2407146F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.2407146F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.2407146F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.2407146F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 798.2F, 0.0F, 798.2F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(798.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(798.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(798.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(798.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(798.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(798.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(798.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(798.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(798.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(integer0);
      
      boolean boolean0 = wall0.containsWallEndAt((-2142.026F), 1.0F, 1.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(798.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(798.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(798.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = wall0.intersectsRectangle((-2142.026F), 17.513996F, (-180.0F), 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(798.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(798.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(798.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Float float0 = new Float(2.46987021353278);
      assertEquals(2.4698703F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(798.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(798.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(798.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall((-2.39428F), (-2.39428F), (-2.39428F), (-2.39428F), (-2.39428F));
      assertEquals((-2.39428F), wall0.getYStart(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.39428F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-2.39428F), wall0.getYStart(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.39428F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.39428F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2.39428F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals((-2.39428F), wall1.getThickness(), 0.01F);
      assertEquals((-2.39428F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall1.getYEnd(), 0.01F);
      assertEquals((-2.39428F), wall1.getYStart(), 0.01F);
      assertEquals((-2.39428F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-2.39428F), wall0.getYStart(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.39428F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.39428F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2.39428F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals((-2.39428F), wall1.getThickness(), 0.01F);
      assertEquals((-2.39428F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall1.getYEnd(), 0.01F);
      assertEquals((-2.39428F), wall1.getYStart(), 0.01F);
      assertEquals((-2.39428F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-2.39428F), wall0.getYStart(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.39428F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.39428F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2.39428F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals((-2.39428F), wall1.getThickness(), 0.01F);
      assertEquals((-2.39428F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall1.getYEnd(), 0.01F);
      assertEquals((-2.39428F), wall1.getYStart(), 0.01F);
      assertEquals((-2.39428F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-2.39428F), wall0.getYStart(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.39428F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall((-2750.7422F), 0.0F, 0.0F, 0.0F, (-2750.7422F), 0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2750.7422F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2750.7422F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setXEnd(1352.9066F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4103.649F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1352.9066F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(4103.649F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals((-698.9178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer((-2146416130));
      assertEquals((-2146416130), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals((-2146416130), (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall((-1349.896F), (-1349.896F), 0.0F, 0.1F, 0.0F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setThickness(0.0F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setYEnd(399.29F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall0.clone();
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertEquals(2209.4956F, wall2.getLength(), 0.01F);
      assertEquals((-475.30298F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1210.53939687708));
      assertEquals((-1210.5394F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(1429.5706054216);
      assertEquals(1429.5706F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float(3859.7131222797);
      assertEquals(3859.7131F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      wall2.setArcExtent(float3);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3859.7131F, wall2.getArcExtent(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertEquals(40.055027F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(5364883.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-1342.7454F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      float float4 = wall2.getXArcCircleCenter();
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3859.7131F, wall2.getArcExtent(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertEquals(40.055027F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(5364883.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-1342.7454F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-1342.7454F), float4, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      float[][] floatArray0 = wall2.getPoints();
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3859.7131F, wall2.getArcExtent(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertEquals(40.055027F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(5364883.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-1342.7454F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(floatArray0);
      assertEquals(4636, floatArray0.length);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iPUi&*m<'");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float float2 = Float.min(0.0F, 4429.9546F);
      assertEquals(0.0F, float2, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      float float3 = wall1.getLength();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float3, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Float float1 = wall0.getHeight();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(float1);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(float2, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall(2520.127F, 2520.127F, 387.7F, 2520.127F, 1.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1453.9135F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(387.7F, wall0.getXEnd(), 0.01F);
      assertEquals(2132.427F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      assertEquals(2132.427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1453.9135F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(387.7F, wall0.getXEnd(), 0.01F);
      assertEquals(2132.427F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      assertEquals(2132.427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertNull(level0);
      
      Wall wall1 = new Wall(387.7F, 387.7F, 1.0F, (-3527.1035F), 1.0F, 2520.127F);
      assertEquals((-1569.7018F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(387.7F, wall1.getXStart(), 0.01F);
      assertEquals(194.35F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3933.856F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(387.7F, wall1.getYStart(), 0.01F);
      assertEquals((-3527.1035F), wall1.getYEnd(), 0.01F);
      assertEquals(3933.856F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertEquals((-1569.7018F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(387.7F, wall1.getXStart(), 0.01F);
      assertEquals(194.35F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3933.856F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(387.7F, wall1.getYStart(), 0.01F);
      assertEquals((-3527.1035F), wall1.getYEnd(), 0.01F);
      assertEquals(3933.856F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setPattern((TextureImage) null);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1453.9135F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(387.7F, wall0.getXEnd(), 0.01F);
      assertEquals(2132.427F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      assertEquals(2132.427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Level level1 = wall1.getLevel();
      assertEquals(3933.856F, wall1.getLength(), 0.01F);
      assertEquals(2520.127F, wall1.getHeight(), 0.01F);
      assertEquals((-1569.7018F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(387.7F, wall1.getXStart(), 0.01F);
      assertEquals(194.35F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(387.7F, wall1.getYStart(), 0.01F);
      assertEquals((-3527.1035F), wall1.getYEnd(), 0.01F);
      assertEquals(3933.856F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(level1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.getArcExtent();
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(387.7F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Can't create temporary folder ", propertyChangeListener0);
      assertEquals("Can't create temporary folder ", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals("Can't create temporary folder ", propertyChangeListenerProxy0.getPropertyName());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall((-1349.896F), (-1349.896F), 0.0F, 0.1F, 0.0F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setThickness(0.0F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = wall1.getLeftSideColor();
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setYEnd(399.29F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall0.clone();
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2209.4956F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-475.30298F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-674.948F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Float float0 = new Float(650.350485);
      assertEquals(650.35046F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall2.setHeightAtEnd(float0);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2209.4956F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-475.30298F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(650.35046F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals((-674.948F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Float float1 = wall2.getHeightAtEnd();
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2209.4956F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-475.30298F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(650.35046F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals((-674.948F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(650.35046F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setYEnd(399.29F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2209.4956F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-475.30298F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(650.35046F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals((-674.948F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Integer integer1 = new Integer(11);
      assertEquals(11, (int)integer1);
      assertNotNull(integer1);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer2 = new Integer(11);
      assertEquals(11, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      
      wall1.setRightSideColor(integer2);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(11, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertTrue(integer2.equals((Object)integer1));
      
      float float2 = wall2.getXArcCircleCenter();
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(2209.4956F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(399.29F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2209.4956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-475.30298F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(399.29F, wall2.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2209.4956F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2209.4956F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-475.30298F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(650.35046F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals((-674.948F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-674.948F), float2, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall(2.5048854F, 2.5048854F, 2.5048854F, 2.5048854F, 2.5048854F, 2.5048854F);
      assertEquals(2.5048854F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.5048854F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.5048854F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.5048854F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.5048854F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.5048854F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.5048854F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.5048854F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals(2.5048854F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.5048854F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.5048854F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.5048854F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.5048854F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.5048854F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.5048854F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.5048854F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall(1.8360189F, (-4960.0F), 1.8360189F, 1.8360189F, 1.8360189F);
      assertEquals(1.8360189F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2479.082F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4961.836F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(4961.836F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-2.39428F));
      assertEquals((-2.39428F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1.8360189F, wall0.getXEnd(), 0.01F);
      assertEquals(974.54333F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2479.082F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6380.257F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(4961.836F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall0.getYEnd(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(1.8360189F, wall0.getXEnd(), 0.01F);
      assertEquals(974.54333F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2479.082F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6380.257F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(4961.836F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall0.getYEnd(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(1.8360189F, wall0.getXEnd(), 0.01F);
      assertEquals(974.54333F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2479.082F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6380.257F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(4961.836F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall0.getYEnd(), 0.01F);
      assertEquals(974.54333F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall((-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F));
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(integer0);
      
      Wall wall1 = new Wall((-2305.2F), 1.0F, 985.0F, (-2000.56F), 0.0F, (-6.534399F));
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3851.1892F, wall1.getLength(), 0.01F);
      assertEquals((-2305.2F), wall1.getXStart(), 0.01F);
      assertEquals((-2000.56F), wall1.getYEnd(), 0.01F);
      assertEquals((-660.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-999.78F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(985.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-6.534399F), wall1.getHeight(), 0.01F);
      assertEquals(3851.1892F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setPattern((TextureImage) null);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer1 = new Integer(253);
      assertEquals(253, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2147038107);
      assertEquals(2147038107, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      
      wall1.setRightSideColor(integer2);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3851.1892F, wall1.getLength(), 0.01F);
      assertEquals((-2305.2F), wall1.getXStart(), 0.01F);
      assertEquals(2147038107, (int)wall1.getRightSideColor());
      assertEquals((-2000.56F), wall1.getYEnd(), 0.01F);
      assertEquals((-660.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-999.78F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(985.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-6.534399F), wall1.getHeight(), 0.01F);
      assertEquals(3851.1892F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer2.equals((Object)integer1));
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-2305.2F), float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 528.3F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(homeTexture0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      
      Float float2 = wall0.getHeight();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(float2);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(homeTexture1);
      
      wall0.setHeight((Float) null);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLevel((Level) null);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall((-1041.8601F), (-1041.8601F), 201.6732F, 1810.289F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1810.289F, wall0.getYEnd(), 0.01F);
      assertEquals(201.6732F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.8601F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3111.4514F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3111.4514F, wall0.getLength(), 0.01F);
      assertEquals(384.21442F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-420.09344F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.8601F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1810.289F, wall0.getYEnd(), 0.01F);
      assertEquals(201.6732F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.8601F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3111.4514F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3111.4514F, wall0.getLength(), 0.01F);
      assertEquals(384.21442F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-420.09344F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.8601F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
      
      float float0 = wall0.getXStart();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1810.289F, wall0.getYEnd(), 0.01F);
      assertEquals(201.6732F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.8601F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3111.4514F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3111.4514F, wall0.getLength(), 0.01F);
      assertEquals(384.21442F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-420.09344F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.8601F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.8601F), float0, 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0);
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 5199.0303F, (-1.7060475F), 1.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1810.289F, wall0.getYEnd(), 0.01F);
      assertEquals(201.6732F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.8601F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3111.4514F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3111.4514F, wall0.getLength(), 0.01F);
      assertEquals(384.21442F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-420.09344F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.8601F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertTrue(boolean0);
      
      Float float1 = new Float((-95.2046177298));
      assertEquals((-95.20462F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall1 = new Wall(1258.3762F, 1810.289F, (-16.906F), 5199.0303F, 1.0F, 0.0F);
      assertEquals(3620.7612F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-16.906F), wall1.getXEnd(), 0.01F);
      assertEquals(1258.3762F, wall1.getXStart(), 0.01F);
      assertEquals(3504.6597F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3620.7612F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1810.289F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(620.7351F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5199.0303F, wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = new Float((double) (-2584.754F));
      assertEquals((-2584.754F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setHeight(float2);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1810.289F, wall0.getYEnd(), 0.01F);
      assertEquals(201.6732F, wall0.getXEnd(), 0.01F);
      assertEquals((-2584.754F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.8601F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3111.4514F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3111.4514F, wall0.getLength(), 0.01F);
      assertEquals(384.21442F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-420.09344F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.8601F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, (-1461.0F), 0.1F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall1.getWallAtStart();
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      HomeTexture homeTexture2 = wall2.getRightSideTexture();
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNull(homeTexture2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall3 = wall0.clone();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall((-2.39428F), (-2.39428F), (-2.39428F), (-2.39428F), (-2.39428F), (-2.39428F));
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getHeight(), 0.01F);
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertEquals((-2.39428F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2.39428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt((-2.39428F), (-2.39428F), (-2.39428F));
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getHeight(), 0.01F);
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertEquals((-2.39428F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2.39428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(homeTexture0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall((-2750.7422F), 0.0F, 0.0F, 0.0F, (-2750.7422F), 0.0F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals((-1375.3711F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2750.7422F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2750.7422F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall1.intersectsRectangle(1352.9066F, 1352.9066F, 0.0F, (-62.56181F));
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals((-1375.3711F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2750.7422F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2750.7422F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(1352.9066F);
      assertEquals(1352.9066F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall2 = new Wall(0.0F, 0.0F, 207.58F, 1229.399F, 1037.015F, 0.0F);
      assertEquals(1246.8005F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(614.6995F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1246.8005F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(103.79F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1037.015F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(207.58F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1229.399F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      boolean boolean1 = wall2.containsPoint(1037.015F, 0.0F, (-355.8454F));
      assertEquals(1246.8005F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(614.6995F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1246.8005F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(103.79F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1037.015F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(207.58F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1229.399F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(boolean1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      
      wall2.setHeight((Float) null);
      assertEquals(1246.8005F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(614.6995F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1246.8005F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(103.79F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1037.015F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(207.58F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1229.399F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Wall wall0 = new Wall((-2371.8264F), (-2371.8264F), (-2371.8264F), (-1626.2268F), 5366.0F, 994.0F);
          assertNull(wall0.getLeftSideColor());
          assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
          assertEquals(5366.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
          assertEquals(994.0F, wall0.getHeight(), 0.01F);
          assertEquals(745.5996F, wall0.getLength(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getArcExtent());
          assertNull(wall0.getRightSideColor());
          assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
          assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
          assertNotNull(wall0);
          
          boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
          assertFalse(boolean0);
          
          boolean boolean1 = wall0.containsWallStartAt((-1858.0514F), 5366.0F, (-313.763F));
          assertNull(wall0.getLeftSideColor());
          assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
          assertEquals(5366.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
          assertEquals(994.0F, wall0.getHeight(), 0.01F);
          assertEquals(745.5996F, wall0.getLength(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getArcExtent());
          assertNull(wall0.getRightSideColor());
          assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
          assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
          assertFalse(boolean1);
          assertTrue(boolean1 == boolean0);
          
          boolean boolean2 = wall0.intersectsRectangle((-2371.8264F), (-1626.2268F), (-1625.5938F), (-1626.2268F));
          assertNull(wall0.getLeftSideColor());
          assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
          assertEquals(5366.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
          assertEquals(994.0F, wall0.getHeight(), 0.01F);
          assertEquals(745.5996F, wall0.getLength(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getArcExtent());
          assertNull(wall0.getRightSideColor());
          assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
          assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
          assertFalse(boolean2);
          assertTrue(boolean2 == boolean0);
          assertTrue(boolean2 == boolean1);
          
          Float float0 = new Float((-1625.5938F));
          assertEquals((-1625.5938F), (float)float0, 0.01F);
          assertNotNull(float0);
          
          wall0.setArcExtent(float0);
          assertNull(wall0.getLeftSideColor());
          assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
          assertEquals((-2682.7683F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(5366.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
          assertEquals(994.0F, wall0.getHeight(), 0.01F);
          assertEquals((-1625.5938F), wall0.getArcExtent(), 0.01F);
          assertEquals(789149.25F, wall0.getLength(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
          assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
          
          wall0.setYEnd((-1625.5938F));
          assertNull(wall0.getLeftSideColor());
          assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals(5366.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
          assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
          assertEquals((-2683.0322F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(994.0F, wall0.getHeight(), 0.01F);
          assertEquals(746.23267F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals((-1625.5938F), wall0.getArcExtent(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
          assertEquals(789819.2F, wall0.getLength(), 0.01F);
          assertEquals((-1998.7101F), wall0.getYArcCircleCenter(), 0.01F);
          
          boolean boolean3 = wall0.intersectsRectangle(0.1F, (-29.0F), 2.0F, (-1625.5938F));
          assertNull(wall0.getLeftSideColor());
          assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals(5366.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
          assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
          assertEquals((-2683.0322F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(994.0F, wall0.getHeight(), 0.01F);
          assertEquals(746.23267F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals((-1625.5938F), wall0.getArcExtent(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
          assertEquals(789819.2F, wall0.getLength(), 0.01F);
          assertEquals((-1998.7101F), wall0.getYArcCircleCenter(), 0.01F);
          assertTrue(boolean3);
          assertFalse(boolean3 == boolean0);
          assertFalse(boolean3 == boolean1);
          assertFalse(boolean3 == boolean2);
          
          wall0.setWallAtEnd(wall0);
          assertNull(wall0.getLeftSideColor());
          assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals(5366.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
          assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
          assertEquals((-2683.0322F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(994.0F, wall0.getHeight(), 0.01F);
          assertEquals(746.23267F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals((-1625.5938F), wall0.getArcExtent(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
          assertEquals(789819.2F, wall0.getLength(), 0.01F);
          assertEquals((-1998.7101F), wall0.getYArcCircleCenter(), 0.01F);
          
          Float float1 = wall0.getArcExtent();
          assertNull(wall0.getLeftSideColor());
          assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals(5366.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
          assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
          assertEquals((-2683.0322F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(994.0F, wall0.getHeight(), 0.01F);
          assertEquals(746.23267F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals((-1625.5938F), wall0.getArcExtent(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
          assertEquals(789819.2F, wall0.getLength(), 0.01F);
          assertEquals((-1998.7101F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals((-1625.5938F), (float)float1, 0.01F);
          assertNotNull(float1);
          
          Float float2 = new Float(0.01F);
          assertEquals(0.01F, (float)float2, 0.01F);
          assertNotNull(float2);
          assertNotEquals((float)float2, (float)float0, 0.01F);
          assertNotEquals((float)float2, (float)float1, 0.01F);
          
          boolean boolean4 = wall0.containsWallEndAt(1305.0F, 2.0F, 0.1483907F);
          assertNull(wall0.getLeftSideColor());
          assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals(5366.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
          assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
          assertEquals((-2683.0322F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(994.0F, wall0.getHeight(), 0.01F);
          assertEquals(746.23267F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals((-1625.5938F), wall0.getArcExtent(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
          assertEquals(789819.2F, wall0.getLength(), 0.01F);
          assertEquals((-1998.7101F), wall0.getYArcCircleCenter(), 0.01F);
          assertFalse(boolean4);
          assertTrue(boolean4 == boolean2);
          assertFalse(boolean4 == boolean3);
          assertTrue(boolean4 == boolean0);
          assertTrue(boolean4 == boolean1);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 528.3F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(528.3F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(528.3F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = new Level(",+)RRS^", 528.3F, 1.0F, (-2106.45F));
      assertTrue(level0.isVisible());
      assertEquals(528.3F, level0.getElevation(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2106.45F), level0.getHeight(), 0.01F);
      assertEquals(",+)RRS^", level0.getName());
      assertNotNull(level0);
      
      level0.setName("vkS.`S}A");
      assertTrue(level0.isVisible());
      assertEquals(528.3F, level0.getElevation(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2106.45F), level0.getHeight(), 0.01F);
      assertEquals("vkS.`S}A", level0.getName());
      
      level0.setFloorThickness(0.0F);
      assertTrue(level0.isVisible());
      assertEquals(528.3F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2106.45F), level0.getHeight(), 0.01F);
      assertEquals("vkS.`S}A", level0.getName());
      
      level0.setHeight(1625.5137F);
      assertTrue(level0.isVisible());
      assertEquals(528.3F, level0.getElevation(), 0.01F);
      assertEquals(1625.5137F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("vkS.`S}A", level0.getName());
      
      Level level1 = new Level("Invalid URL base for JAR entry", (-2106.45F), 0.0F, 3678.5342F);
      assertEquals((-2106.45F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("Invalid URL base for JAR entry", level1.getName());
      assertEquals(3678.5342F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      
      level1.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals((-2106.45F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("Invalid URL base for JAR entry", level1.getName());
      assertEquals(3678.5342F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      
      level1.setElevation(528.3F);
      assertTrue(level1.isVisible());
      assertEquals("Invalid URL base for JAR entry", level1.getName());
      assertEquals(3678.5342F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(528.3F, level1.getElevation(), 0.01F);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      
      wall1.setLevel(level0);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(528.3F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(528.3F, level0.getElevation(), 0.01F);
      assertEquals(1625.5137F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("vkS.`S}A", level0.getName());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(level0, level1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(level0.equals((Object)level1));
      
      Float float0 = new Float(47.0);
      assertEquals(47.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(528.3F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(47.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall1.setArcExtent(float1);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(528.3F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      try { 
        Float.valueOf("KRh3+Py");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 528.3F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      
      Wall wall1 = new Wall((-719.8896F), (-719.8896F), 0.0F, 0.0F, 0.1F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, 1298.4F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      
      HomeTexture homeTexture1 = wall1.getLeftSideTexture();
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture1);
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = new Level("$.Y~&G:+ >0l1S$>UW", 0.0F, (-1.0F), (-1.0F));
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("$.Y~&G:+ >0l1S$>UW", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("$.Y~&G:+ >0l1S$>UW", level0.getName());
      assertEquals((-1.0F), level1.getHeight(), 0.01F);
      assertEquals("$.Y~&G:+ >0l1S$>UW", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals((-1.0F), level1.getFloorThickness(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      
      boolean boolean1 = wall1.isAtLevel(level1);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("$.Y~&G:+ >0l1S$>UW", level0.getName());
      assertEquals((-1.0F), level1.getHeight(), 0.01F);
      assertEquals("$.Y~&G:+ >0l1S$>UW", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals((-1.0F), level1.getFloorThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      
      Float float2 = wall1.getArcExtent();
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(float2);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setArcExtent((Float) null);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(8192);
      assertEquals(8192, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(8192, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall((-2371.8264F), (-2371.8264F), (-2371.8264F), (-1626.2268F), 5366.0F, 994.0F);
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = wall0.containsWallStartAt((-1858.0514F), 5366.0F, (-313.763F));
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = wall0.intersectsRectangle((-2371.8264F), (-1626.2268F), (-1625.5938F), (-1626.2268F));
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Float float0 = new Float((-1625.5938F));
      assertEquals((-1625.5938F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals((-2682.7683F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(789149.25F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall((-2206.79F), 0.01F, (-1626.2268F), (-2371.8264F), (-1626.2268F), 0.1F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1626.2268F), wall1.getXEnd(), 0.01F);
      assertEquals(2441.8562F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-2371.8264F), wall1.getYEnd(), 0.01F);
      assertEquals((-1626.2268F), wall1.getThickness(), 0.01F);
      assertEquals((-1185.9082F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2206.79F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1916.5084F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2441.8562F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd(0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(580.56323F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1626.2268F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(580.56323F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1626.2268F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2206.79F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1916.5084F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean3 = wall1.intersectsRectangle((-813.54694F), 740.41425F, 2675.9F, (-3730.7295F));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(580.56323F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1626.2268F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(580.56323F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1626.2268F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2206.79F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1916.5084F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(boolean3);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals((-2682.7683F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(789149.25F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(580.56323F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1626.2268F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(580.56323F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1626.2268F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2206.79F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1916.5084F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall1.getArcExtent();
      assertFalse(wall1.isTrapezoidal());
      assertEquals(580.56323F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1626.2268F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(580.56323F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1626.2268F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2206.79F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1916.5084F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(float1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = new Float(0.1F);
      assertEquals(0.1F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Wall wall2 = new Wall((-1626.2268F), (-1625.5938F), 740.41425F, (-2206.79F), (-2206.79F), (-1262.269F));
      assertEquals((-2206.79F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2206.79F), wall2.getThickness(), 0.01F);
      assertEquals((-1262.269F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1916.1919F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1626.2268F), wall2.getXStart(), 0.01F);
      assertEquals((-442.90628F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2436.961F, wall2.getLength(), 0.01F);
      assertEquals(740.41425F, wall2.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall2.getYStart(), 0.01F);
      assertEquals(2436.961F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Float float3 = new Float((double) 5366.0F);
      assertEquals(5366.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      wall2.setArcExtent(float3);
      assertEquals((-2206.79F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(8.1945784E7F, wall2.getLength(), 0.01F);
      assertEquals((-2206.79F), wall2.getThickness(), 0.01F);
      assertEquals(3187.5679F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1262.269F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1626.2268F), wall2.getXStart(), 0.01F);
      assertEquals(740.41425F, wall2.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall2.getYStart(), 0.01F);
      assertEquals(2436.961F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5366.0F, wall2.getArcExtent(), 0.01F);
      assertEquals(12867.16F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      float float4 = wall0.getXArcCircleCenter();
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals((-2682.7683F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(789149.25F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals((-2682.7683F), float4, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals((-2682.7683F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(789149.25F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4542, floatArray0.length);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 1259.0988F, 0.1F, (-1.0F), 0.1F, 0.1F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1260.0988F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.0494F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1260.0988F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.0988F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1260.0988F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.0494F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1260.0988F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.0988F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1260.0988F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.0494F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1260.0988F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.0988F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(629.0494F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1260.0988F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1260.0988F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1259.0988F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1260.0988F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.0494F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1260.0988F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.0988F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(629.0494F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1260.0988F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1260.0988F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1259.0988F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1260.0988F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.0494F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1260.0988F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.0988F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setWallAtEnd(wall1);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1260.0988F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.0494F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1260.0988F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.0988F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(629.0494F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1260.0988F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1260.0988F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1259.0988F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1260.0988F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.0494F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1260.0988F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.0988F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(629.0494F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1260.0988F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1260.0988F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1259.0988F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture1 = wall1.getRightSideTexture();
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1260.0988F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.0494F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1260.0988F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.0988F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(629.0494F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1260.0988F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1260.0988F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1259.0988F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall0.containsWallEndAt((-2586.88F), 0.0F, 0.1F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1260.0988F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.0494F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1260.0988F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.0988F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      
      HomeTexture homeTexture2 = wall0.getLeftSideTexture();
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1260.0988F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.0494F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1260.0988F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.0988F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNull(homeTexture2);
      assertFalse(wall0.equals((Object)wall1));
      
      Level level0 = new Level("", 2164.556F, (-1147.7424F), 1259.0988F);
      assertEquals(2164.556F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level0.getName());
      assertEquals(1259.0988F, level0.getHeight(), 0.01F);
      assertEquals((-1147.7424F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(2164.556F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level0.getName());
      assertEquals(1259.0988F, level0.getHeight(), 0.01F);
      assertEquals((-1147.7424F), level0.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2164.556F, level1.getElevation(), 0.01F);
      assertEquals(1259.0988F, level1.getHeight(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals((-1147.7424F), level1.getFloorThickness(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      
      boolean boolean1 = wall1.isAtLevel(level1);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1260.0988F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.0494F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1260.0988F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.0988F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(629.0494F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1260.0988F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1260.0988F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1259.0988F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2164.556F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level0.getName());
      assertEquals(1259.0988F, level0.getHeight(), 0.01F);
      assertEquals((-1147.7424F), level0.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2164.556F, level1.getElevation(), 0.01F);
      assertEquals(1259.0988F, level1.getHeight(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals((-1147.7424F), level1.getFloorThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall(1.8360189F, (-4960.0F), 1.8360189F, 1.8360189F, 1.8360189F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4961.836F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.8360189F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals(1.8360189F, wall0.getXEnd(), 0.01F);
      assertEquals(4961.836F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8360189F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals((-2479.082F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-2.39428F));
      assertEquals((-2.39428F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals((-2.39428F), wall0.getArcExtent(), 0.01F);
      assertEquals(1.8360189F, wall0.getXEnd(), 0.01F);
      assertEquals(4961.836F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8360189F, wall0.getYEnd(), 0.01F);
      assertEquals(974.54333F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(6380.257F, wall0.getLength(), 0.01F);
      assertEquals((-2479.082F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getThickness(), 0.01F);
      
      Float float1 = new Float((double) 1.8360189F);
      assertEquals(1.8360189F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals((-2.39428F), wall0.getArcExtent(), 0.01F);
      assertEquals(1.8360189F, wall0.getXEnd(), 0.01F);
      assertEquals(4961.836F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8360189F, wall0.getYEnd(), 0.01F);
      assertEquals(974.54333F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(6380.257F, wall0.getLength(), 0.01F);
      assertEquals((-2479.082F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getThickness(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals((-2.39428F), wall0.getArcExtent(), 0.01F);
      assertEquals(1.8360189F, wall0.getXEnd(), 0.01F);
      assertEquals(4961.836F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8360189F, wall0.getYEnd(), 0.01F);
      assertEquals(974.54333F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(6380.257F, wall0.getLength(), 0.01F);
      assertEquals((-2479.082F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getThickness(), 0.01F);
      assertEquals(974.54333F, float2, 0.01F);
      
      float float3 = wall0.getLength();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals((-2.39428F), wall0.getArcExtent(), 0.01F);
      assertEquals(1.8360189F, wall0.getXEnd(), 0.01F);
      assertEquals(4961.836F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8360189F, wall0.getYEnd(), 0.01F);
      assertEquals(974.54333F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(6380.257F, wall0.getLength(), 0.01F);
      assertEquals((-2479.082F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getThickness(), 0.01F);
      assertEquals(6380.257F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float((-1112.0F));
      assertEquals((-1112.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1112.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1112.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall((-961.4852F), 528.3F, (-1349.896F), 0.0F, 1.0F);
      assertEquals(528.3F, wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-961.4852F), wall0.getXStart(), 0.01F);
      assertEquals((-1155.6907F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(264.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(655.71625F, wall0.getLength(), 0.01F);
      assertEquals(655.71625F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(528.3F, wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-961.4852F), wall0.getXStart(), 0.01F);
      assertEquals((-1155.6907F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(264.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(655.71625F, wall0.getLength(), 0.01F);
      assertEquals(655.71625F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(655.71625F, wall1.getLength(), 0.01F);
      assertEquals((-1155.6907F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(655.71625F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1349.896F), wall1.getXEnd(), 0.01F);
      assertEquals((-961.4852F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(264.15F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall1.containsWallEndAt((-1.0F), (-961.4852F), (-623.25F));
      assertEquals(528.3F, wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-961.4852F), wall0.getXStart(), 0.01F);
      assertEquals((-1155.6907F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(264.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(655.71625F, wall0.getLength(), 0.01F);
      assertEquals(655.71625F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(655.71625F, wall1.getLength(), 0.01F);
      assertEquals((-1155.6907F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(655.71625F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1349.896F), wall1.getXEnd(), 0.01F);
      assertEquals((-961.4852F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(264.15F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(528.3F, wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-961.4852F), wall0.getXStart(), 0.01F);
      assertEquals((-1155.6907F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(264.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(655.71625F, wall0.getLength(), 0.01F);
      assertEquals(655.71625F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(655.71625F, wall1.getLength(), 0.01F);
      assertEquals((-1155.6907F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(655.71625F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1349.896F), wall1.getXEnd(), 0.01F);
      assertEquals((-961.4852F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(264.15F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall(1.0F, (-623.25F), (-961.4852F), (-1.0F), 1.0F, 1.0F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1146.112F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-480.2426F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-623.25F), wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals((-961.4852F), wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1146.112F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-312.125F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setXStart(1.0F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1146.112F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-480.2426F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-623.25F), wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals((-961.4852F), wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1146.112F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-312.125F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      boolean boolean1 = wall1.intersectsRectangle(1747.569F, 2.0F, (-950.60596F), 1.0F);
      assertEquals(528.3F, wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-961.4852F), wall0.getXStart(), 0.01F);
      assertEquals((-1155.6907F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(264.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(655.71625F, wall0.getLength(), 0.01F);
      assertEquals(655.71625F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(655.71625F, wall1.getLength(), 0.01F);
      assertEquals((-1155.6907F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(655.71625F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1349.896F), wall1.getXEnd(), 0.01F);
      assertEquals((-961.4852F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(264.15F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals(528.3F, wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-961.4852F), wall0.getXStart(), 0.01F);
      assertEquals((-1155.6907F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(264.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(655.71625F, wall0.getLength(), 0.01F);
      assertEquals(655.71625F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(655.71625F, wall1.getLength(), 0.01F);
      assertEquals((-1155.6907F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(655.71625F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1349.896F), wall1.getXEnd(), 0.01F);
      assertEquals((-961.4852F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(264.15F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-1155.6907F), float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      wall2.setRightSideShininess((-1904.2247F));
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1904.2247F), wall2.getRightSideShininess(), 0.01F);
      assertEquals(1146.112F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-480.2426F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-623.25F), wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals((-961.4852F), wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1146.112F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-312.125F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float2 = wall1.getThickness();
      assertEquals(528.3F, wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-961.4852F), wall0.getXStart(), 0.01F);
      assertEquals((-1155.6907F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(264.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(655.71625F, wall0.getLength(), 0.01F);
      assertEquals(655.71625F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(655.71625F, wall1.getLength(), 0.01F);
      assertEquals((-1155.6907F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(655.71625F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1349.896F), wall1.getXEnd(), 0.01F);
      assertEquals((-961.4852F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(264.15F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall((-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F));
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(integer0);
      
      wall0.setYStart((-2305.2F));
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(boolean0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1299.42F), 0.0F, (-1.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1299.42F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-649.71F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1299.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1299.4204F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallEndAt((-4272.1F), (-1.0F), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1299.42F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-649.71F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1299.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1299.4204F, wall0.getLength(), 0.01F);
      assertFalse(boolean0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = linkedList0.add(wall1);
      assertEquals(1, linkedList0.size());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(wall1));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall1));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall1));
      
      Float float0 = new Float((-3167.2168F));
      assertEquals((-3167.2168F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1299.42F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8459973.0F, wall0.getLength(), 0.01F);
      assertEquals((-3167.2168F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1299.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(2590.3845F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-647.7161F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1299.42F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8459973.0F, wall0.getLength(), 0.01F);
      assertEquals((-3167.2168F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1299.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(2590.3845F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-647.7161F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-647.7161F), float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall(1.8360189F, (-4960.0F), (-1625.5938F), (-1625.5938F), (-1625.5938F));
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals((-811.87885F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals(3710.3628F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3710.3628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3292.7969F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1625.5938F), wall0.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float((-1625.5938F));
      assertEquals((-1625.5938F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(3927081.0F, wall0.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals((-2202.4463F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3971.4937F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3710.3628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1625.5938F), wall0.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(3927081.0F, wall0.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals((-2202.4463F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3971.4937F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3710.3628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1625.5938F), wall0.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      assertEquals(3232, floatArray0.length);
      
      wall0.setHeight(float0);
      assertEquals(3927081.0F, wall0.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals((-2202.4463F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3971.4937F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3710.3628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1625.5938F), wall0.getHeight(), 0.01F);
      assertEquals((-1625.5938F), wall0.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 2051.5732F, 0.0F, 1.0F, 1.0F, 0.0F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 1.0F, 1.0F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(homeTexture0);
      
      float float0 = wall0.getXStart();
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, float0, 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 1258.9989F, 0.0F, 2295.3481F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1258.9989F, wall1.getLength(), 0.01F);
      assertEquals(1258.9989F, wall1.getXEnd(), 0.01F);
      assertEquals(629.49945F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1258.9989F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2295.3481F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall(1.0F, 0.0F, 2051.5732F, 0.0F, 2295.3481F, 1.0F);
      assertEquals(2050.5732F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2050.5732F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(2295.3481F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall1, "[ d^OX", propertyChangeListenerProxy0, wall2);
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1258.9989F, wall1.getLength(), 0.01F);
      assertEquals(1258.9989F, wall1.getXEnd(), 0.01F);
      assertEquals(629.49945F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1258.9989F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2295.3481F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2050.5732F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2050.5732F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(2295.3481F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals("[ d^OX", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall1.move(0.0F, 47.34F);
      assertEquals(1258.9989F, wall1.getLength(), 0.01F);
      assertEquals(47.34F, wall1.getYStart(), 0.01F);
      assertEquals(1258.9989F, wall1.getXEnd(), 0.01F);
      assertEquals(629.49945F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(47.34F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1258.9989F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(47.34F, wall1.getYEnd(), 0.01F);
      assertEquals(2295.3481F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      float float1 = wall2.getStartPointToEndPointDistance();
      assertEquals(2050.5732F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2050.5732F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(2295.3481F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(2050.5732F, float1, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall2.setArcExtent(float2);
      assertEquals(2050.5732F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1.6744201E19F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0000196F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertEquals(2050.5732F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(2295.3481F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Wall wall3 = wall1.clone();
      assertEquals(1258.9989F, wall1.getLength(), 0.01F);
      assertEquals(47.34F, wall1.getYStart(), 0.01F);
      assertEquals(1258.9989F, wall1.getXEnd(), 0.01F);
      assertEquals(629.49945F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(47.34F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1258.9989F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(47.34F, wall1.getYEnd(), 0.01F);
      assertEquals(2295.3481F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getHeight());
      assertEquals(1258.9989F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(47.34F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(47.34F, wall3.getYEnd(), 0.01F);
      assertEquals(47.34F, wall3.getYStart(), 0.01F);
      assertEquals(629.49945F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1258.9989F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(2295.3481F, wall3.getThickness(), 0.01F);
      assertEquals(1258.9989F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotNull(wall3);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      
      wall3.setYEnd((-1.0F));
      assertEquals(1258.9989F, wall1.getLength(), 0.01F);
      assertEquals(47.34F, wall1.getYStart(), 0.01F);
      assertEquals(1258.9989F, wall1.getXEnd(), 0.01F);
      assertEquals(629.49945F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(47.34F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1258.9989F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(47.34F, wall1.getYEnd(), 0.01F);
      assertEquals(2295.3481F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getHeight());
      assertEquals(1259.9266F, wall3.getLength(), 0.01F);
      assertEquals(1259.9266F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(23.17F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(47.34F, wall3.getYStart(), 0.01F);
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals(629.49945F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(2295.3481F, wall3.getThickness(), 0.01F);
      assertEquals(1258.9989F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      
      wall2.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(2050.5732F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1.6744201E19F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0000196F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertEquals(2050.5732F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(2295.3481F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      
      Level level0 = new Level((String) null, (-1.0F), (-1994.219F), 697.14954F);
      assertEquals(697.14954F, level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1994.219F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(697.14954F, level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1994.219F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1994.219F), level1.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertEquals(697.14954F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertNull(level1.getName());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall((-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(integer0);
      
      Float float0 = new Float((double) 1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setYEnd(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(0.1F, 0.0F, (-0.41676977F), (-1461.0F), 0.1F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-0.15838489F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461.0001F, wall1.getLength(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-730.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.41676977F), wall1.getXEnd(), 0.01F);
      assertEquals(1461.0001F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-0.15838489F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461.0001F, wall1.getLength(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-730.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.41676977F), wall1.getXEnd(), 0.01F);
      assertEquals(1461.0001F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall0.containsWallStartAt(0.0F, (-2425.1724F), 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      
      float float0 = wall0.getXArcCircleCenter();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, float0, 0.01F);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      Wall wall1 = wall0.clone();
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals((-1), (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setXEnd(0.0F);
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals((-1), (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float1, float0, 0.01F);
      
      Integer integer1 = wall1.getRightSideColor();
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals((-1), (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      long long0 = Integer.toUnsignedLong((-1));
      assertEquals(4294967295L, long0);
      
      wall1.setRightSideColor(integer1);
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals((-1), (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = wall0.getHeightAtEnd();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(float1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 2520.127F, 0.1F, 2520.127F, 2520.127F, 1259.0988F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture1 = wall1.getRightSideTexture();
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNull(homeTexture1);
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = wall1.getLevel();
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNull(level0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(5.544416626766102E7);
      assertEquals(5.5444168E7F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.115758084F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5.5444168E7F, wall1.getArcExtent(), 0.01F);
      assertEquals(2906627.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.115758084F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5.5444168E7F, wall1.getArcExtent(), 0.01F);
      assertEquals(2906627.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertEquals(0.115758084F, float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall(934.0036F, 0.1F, 5366.0F, (-2560.129F), 0.1F, (-0.011904762F));
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(5118.336F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2560.129F), wall0.getYEnd(), 0.01F);
      assertEquals(5366.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3150.0017F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(934.0036F, wall0.getXStart(), 0.01F);
      assertEquals(5118.336F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.011904762F), wall0.getHeight(), 0.01F);
      assertEquals((-1280.0144F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = wall0.containsWallStartAt((-313.763F), 21.48986F, (-1.0F));
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(5118.336F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2560.129F), wall0.getYEnd(), 0.01F);
      assertEquals(5366.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3150.0017F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(934.0036F, wall0.getXStart(), 0.01F);
      assertEquals(5118.336F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.011904762F), wall0.getHeight(), 0.01F);
      assertEquals((-1280.0144F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(5118.336F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2560.129F), wall0.getYEnd(), 0.01F);
      assertEquals(5366.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3150.0017F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(934.0036F, wall0.getXStart(), 0.01F);
      assertEquals(5118.336F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.011904762F), wall0.getHeight(), 0.01F);
      assertEquals((-1280.0144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5366.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3150.0017F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2560.129F), wall1.getYEnd(), 0.01F);
      assertEquals(5118.336F, wall1.getLength(), 0.01F);
      assertEquals(934.0036F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.011904762F), wall1.getHeight(), 0.01F);
      assertEquals((-1280.0144F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(5118.336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean2 = wall1.intersectsRectangle((-1.0F), 1.0F, 994.0F, 21.48986F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(5118.336F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2560.129F), wall0.getYEnd(), 0.01F);
      assertEquals(5366.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3150.0017F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(934.0036F, wall0.getXStart(), 0.01F);
      assertEquals(5118.336F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.011904762F), wall0.getHeight(), 0.01F);
      assertEquals((-1280.0144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5366.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3150.0017F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2560.129F), wall1.getYEnd(), 0.01F);
      assertEquals(5118.336F, wall1.getLength(), 0.01F);
      assertEquals(934.0036F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.011904762F), wall1.getHeight(), 0.01F);
      assertEquals((-1280.0144F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(5118.336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(boolean2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Float float0 = new Float(738.313F);
      assertEquals(738.313F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(5118.336F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2560.129F), wall0.getYEnd(), 0.01F);
      assertEquals(5366.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3150.0017F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(934.0036F, wall0.getXStart(), 0.01F);
      assertEquals(5118.336F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.011904762F), wall0.getHeight(), 0.01F);
      assertEquals((-1280.0144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5366.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2560.129F), wall1.getYEnd(), 0.01F);
      assertEquals(934.0036F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.011904762F), wall1.getHeight(), 0.01F);
      assertEquals(1889821.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(5118.336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3125.219F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1322.9156F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(738.313F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setYEnd(1259.0988F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4607.3496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.59937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3150.0017F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(934.0036F, wall0.getXStart(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertEquals(4607.3496F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.011904762F), wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean3 = wall1.intersectsRectangle((-1625.5938F), (-1858.0514F), (-29.0F), 1661.3359F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4607.3496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.59937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3150.0017F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(934.0036F, wall0.getXStart(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertEquals(4607.3496F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.011904762F), wall0.getHeight(), 0.01F);
      assertEquals(5366.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2560.129F), wall1.getYEnd(), 0.01F);
      assertEquals(934.0036F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.011904762F), wall1.getHeight(), 0.01F);
      assertEquals(1889821.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(5118.336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3125.219F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1322.9156F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(738.313F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(boolean3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4607.3496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.59937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3150.0017F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(934.0036F, wall0.getXStart(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertEquals(4607.3496F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.011904762F), wall0.getHeight(), 0.01F);
      assertEquals(5366.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2560.129F), wall1.getYEnd(), 0.01F);
      assertEquals(934.0036F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.011904762F), wall1.getHeight(), 0.01F);
      assertEquals(1889821.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(5118.336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3125.219F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1322.9156F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(738.313F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall1.getArcExtent();
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4607.3496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.59937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3150.0017F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(934.0036F, wall0.getXStart(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertEquals(4607.3496F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.011904762F), wall0.getHeight(), 0.01F);
      assertEquals(5366.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2560.129F), wall1.getYEnd(), 0.01F);
      assertEquals(934.0036F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.011904762F), wall1.getHeight(), 0.01F);
      assertEquals(1889821.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(5118.336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3125.219F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1322.9156F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(738.313F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(738.313F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4607.3496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.59937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3150.0017F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(934.0036F, wall0.getXStart(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertEquals(4607.3496F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.011904762F), wall0.getHeight(), 0.01F);
      assertEquals(5366.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2560.129F), wall1.getYEnd(), 0.01F);
      assertEquals(934.0036F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.011904762F), wall1.getHeight(), 0.01F);
      assertEquals(1889821.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(5118.336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3125.219F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1322.9156F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(738.313F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = new Float(994.0F);
      assertEquals(994.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float(50.25F);
      assertEquals(50.25F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      wall1.setArcExtent(float3);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4607.3496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.59937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3150.0017F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(934.0036F, wall0.getXStart(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertEquals(4607.3496F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.011904762F), wall0.getHeight(), 0.01F);
      assertEquals(50.25F, wall1.getArcExtent(), 0.01F);
      assertEquals(5366.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2560.129F), wall1.getYEnd(), 0.01F);
      assertEquals(934.0036F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.011904762F), wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(5118.336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-162209.9F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-287533.53F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.6612283E7F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      float float4 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4607.3496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.59937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3150.0017F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(934.0036F, wall0.getXStart(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertEquals(4607.3496F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.011904762F), wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(3150.0017F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5366.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4607.3496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(629.59937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3150.0017F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(934.0036F, wall0.getXStart(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertEquals(4607.3496F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.011904762F), wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 46;
      Random.setNextRandom(46);
      Wall wall0 = new Wall((-632.0F), 46, (-632.0F), 46, (-632.0F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(46.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-632.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-632.0F), wall0.getXStart(), 0.01F);
      assertEquals((-632.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(46.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-632.0F), wall0.getThickness(), 0.01F);
      assertEquals(46.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-632.0F), (-0.0299285F), 1.0F, (-0.0299285F), (-632.0F));
      assertEquals((-0.0299285F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.0299285F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-315.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(633.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(633.0F, wall1.getLength(), 0.01F);
      assertEquals((-632.0F), wall1.getThickness(), 0.01F);
      assertEquals((-632.0F), wall1.getXStart(), 0.01F);
      assertEquals((-0.0299285F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(46.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-632.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-632.0F), wall0.getXStart(), 0.01F);
      assertEquals((-632.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(46.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-632.0F), wall0.getThickness(), 0.01F);
      assertEquals(46.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.0299285F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.0299285F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-315.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(633.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(633.0F, wall1.getLength(), 0.01F);
      assertEquals((-632.0F), wall1.getThickness(), 0.01F);
      assertEquals((-632.0F), wall1.getXStart(), 0.01F);
      assertEquals((-0.0299285F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = new Level("qm@s5<s8(4'O[A", (-632.0F), 46, 480.9F);
      assertEquals(480.9F, level0.getHeight(), 0.01F);
      assertEquals(46.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("qm@s5<s8(4'O[A", level0.getName());
      assertEquals((-632.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      level0.setVisible(false);
      assertEquals(480.9F, level0.getHeight(), 0.01F);
      assertEquals(46.0F, level0.getFloorThickness(), 0.01F);
      assertFalse(level0.isVisible());
      assertEquals("qm@s5<s8(4'O[A", level0.getName());
      assertEquals((-632.0F), level0.getElevation(), 0.01F);
      
      Wall wall2 = wall0.clone();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(46.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-632.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-632.0F), wall0.getXStart(), 0.01F);
      assertEquals((-632.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(46.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-632.0F), wall0.getThickness(), 0.01F);
      assertEquals(46.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(46.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-632.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-632.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(46.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-632.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-632.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(46.0F, wall2.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Float float0 = new Float(142.4514798);
      assertEquals(142.45148F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall2.setArcExtent(float0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(46.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-632.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-632.0F), wall0.getXStart(), 0.01F);
      assertEquals((-632.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(46.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-632.0F), wall0.getThickness(), 0.01F);
      assertEquals(46.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(46.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-632.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-632.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(46.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-632.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-632.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(142.45148F, wall2.getArcExtent(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(46.0F, wall2.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall0.setLevel(level0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(46.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-632.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-632.0F), wall0.getXStart(), 0.01F);
      assertEquals((-632.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(46.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-632.0F), wall0.getThickness(), 0.01F);
      assertEquals(46.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(480.9F, level0.getHeight(), 0.01F);
      assertEquals(46.0F, level0.getFloorThickness(), 0.01F);
      assertFalse(level0.isVisible());
      assertEquals("qm@s5<s8(4'O[A", level0.getName());
      assertEquals((-632.0F), level0.getElevation(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      Level level1 = wall0.getLevel();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(46.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-632.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-632.0F), wall0.getXStart(), 0.01F);
      assertEquals((-632.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(46.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-632.0F), wall0.getThickness(), 0.01F);
      assertEquals(46.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(480.9F, level1.getHeight(), 0.01F);
      assertEquals(46.0F, level1.getFloorThickness(), 0.01F);
      assertFalse(level1.isVisible());
      assertEquals("qm@s5<s8(4'O[A", level1.getName());
      assertEquals((-632.0F), level1.getElevation(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(level1, level0);
      assertNotNull(level1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setXStart(2629.977F);
      assertEquals((-0.0299285F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.0299285F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2628.977F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2629.977F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2628.977F, wall1.getLength(), 0.01F);
      assertEquals((-632.0F), wall1.getThickness(), 0.01F);
      assertEquals(1315.4885F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.0299285F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("qm@s5<s8(4'O[A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.qm@s5<s8(4'O[A
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall((-48.494873F), (-48.494873F), (-48.494873F), (-48.494873F), 528.3F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-48.494873F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-48.494873F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-48.494873F), wall0.getYStart(), 0.01F);
      assertEquals((-48.494873F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-48.494873F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals((-48.494873F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-48.494873F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-48.494873F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-48.494873F), wall0.getYStart(), 0.01F);
      assertEquals((-48.494873F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-48.494873F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals((-48.494873F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-48.494873F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-48.494873F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-48.494873F), wall0.getYStart(), 0.01F);
      assertEquals((-48.494873F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-48.494873F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals((-48.494873F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = new Wall(0.1F, (-2718.0776F), (-313.763F), 0.1F, 0.1F, (-48.494873F));
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(2736.2383F, wall1.getLength(), 0.01F);
      assertEquals((-313.763F), wall1.getXEnd(), 0.01F);
      assertEquals((-48.494873F), wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2736.2383F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2718.0776F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-156.8315F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1358.9888F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall((-3297.99F), 2017.8892F, (-3297.99F), 2.0F, (-3297.99F));
      assertEquals((-3297.99F), wall2.getXEnd(), 0.01F);
      assertEquals(2017.8892F, wall2.getYStart(), 0.01F);
      assertEquals(2015.8892F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.8892F, wall2.getLength(), 0.01F);
      assertEquals((-3297.99F), wall2.getThickness(), 0.01F);
      assertEquals((-3297.99F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeight());
      assertEquals(2.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1009.9446F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-3297.99F), wall2.getXStart(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall2.setWallAtEnd(wall1);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(2736.2383F, wall1.getLength(), 0.01F);
      assertEquals((-313.763F), wall1.getXEnd(), 0.01F);
      assertEquals((-48.494873F), wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2736.2383F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2718.0776F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-156.8315F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1358.9888F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3297.99F), wall2.getXEnd(), 0.01F);
      assertEquals(2017.8892F, wall2.getYStart(), 0.01F);
      assertEquals(2015.8892F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.8892F, wall2.getLength(), 0.01F);
      assertEquals((-3297.99F), wall2.getThickness(), 0.01F);
      assertEquals((-3297.99F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeight());
      assertEquals(2.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1009.9446F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-3297.99F), wall2.getXStart(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Wall wall3 = new Wall(2017.8892F, 1932.6893F, (-1.0F), 0.01F, (-1.0F));
      assertEquals((-1.0F), wall3.getXEnd(), 0.01F);
      assertEquals(2794.8457F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall3.getYEnd(), 0.01F);
      assertEquals(2017.8892F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getHeight());
      assertNull(wall3.getLeftSideColor());
      assertEquals(1932.6893F, wall3.getYStart(), 0.01F);
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(2794.8457F, wall3.getLength(), 0.01F);
      assertEquals(966.3497F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(1008.4446F, wall3.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall3);
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      
      wall0.setWallAtEnd(wall3);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-48.494873F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-48.494873F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-48.494873F), wall0.getYStart(), 0.01F);
      assertEquals((-48.494873F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-48.494873F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals((-48.494873F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall3.getXEnd(), 0.01F);
      assertEquals(2794.8457F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall3.getYEnd(), 0.01F);
      assertEquals(2017.8892F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getHeight());
      assertNull(wall3.getLeftSideColor());
      assertEquals(1932.6893F, wall3.getYStart(), 0.01F);
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(2794.8457F, wall3.getLength(), 0.01F);
      assertEquals(966.3497F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(1008.4446F, wall3.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      
      wall1.setWallAtStart(wall2);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(2736.2383F, wall1.getLength(), 0.01F);
      assertEquals((-313.763F), wall1.getXEnd(), 0.01F);
      assertEquals((-48.494873F), wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2736.2383F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2718.0776F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-156.8315F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1358.9888F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3297.99F), wall2.getXEnd(), 0.01F);
      assertEquals(2017.8892F, wall2.getYStart(), 0.01F);
      assertEquals(2015.8892F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.8892F, wall2.getLength(), 0.01F);
      assertEquals((-3297.99F), wall2.getThickness(), 0.01F);
      assertEquals((-3297.99F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeight());
      assertEquals(2.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1009.9446F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-3297.99F), wall2.getXStart(), 0.01F);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-48.494873F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-48.494873F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-48.494873F), wall0.getYStart(), 0.01F);
      assertEquals((-48.494873F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-48.494873F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals((-48.494873F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      
      boolean boolean0 = wall1.containsWallEndAt((-1514.0F), 1932.6893F, (-1514.0F));
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(2736.2383F, wall1.getLength(), 0.01F);
      assertEquals((-313.763F), wall1.getXEnd(), 0.01F);
      assertEquals((-48.494873F), wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2736.2383F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2718.0776F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-156.8315F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1358.9888F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture2 = wall2.getLeftSideTexture();
      assertEquals((-3297.99F), wall2.getXEnd(), 0.01F);
      assertEquals(2017.8892F, wall2.getYStart(), 0.01F);
      assertEquals(2015.8892F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.8892F, wall2.getLength(), 0.01F);
      assertEquals((-3297.99F), wall2.getThickness(), 0.01F);
      assertEquals((-3297.99F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeight());
      assertEquals(2.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1009.9446F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-3297.99F), wall2.getXStart(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNull(homeTexture2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      
      Level level0 = wall2.getLevel();
      assertEquals((-3297.99F), wall2.getXEnd(), 0.01F);
      assertEquals(2017.8892F, wall2.getYStart(), 0.01F);
      assertEquals(2015.8892F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.8892F, wall2.getLength(), 0.01F);
      assertEquals((-3297.99F), wall2.getThickness(), 0.01F);
      assertEquals((-3297.99F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeight());
      assertEquals(2.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1009.9446F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-3297.99F), wall2.getXStart(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNull(level0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-48.494873F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-48.494873F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-48.494873F), wall0.getYStart(), 0.01F);
      assertEquals((-48.494873F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-48.494873F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals((-48.494873F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 528.3F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(2.0F, 40.76F, 2.0F, 0.1F, (-1763.368F), 40.76F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1763.368F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(40.76F, wall1.getYStart(), 0.01F);
      assertEquals(40.66F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(20.429998F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(40.76F, wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(40.66F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1763.368F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(40.76F, wall1.getYStart(), 0.01F);
      assertEquals(40.66F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(20.429998F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(40.76F, wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(40.66F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1763.368F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(40.76F, wall1.getYStart(), 0.01F);
      assertEquals(40.66F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(20.429998F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(40.76F, wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(40.66F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture1 = wall1.getRightSideTexture();
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1763.368F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(40.76F, wall1.getYStart(), 0.01F);
      assertEquals(40.66F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(20.429998F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(40.76F, wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(40.66F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNull(homeTexture1);
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float0 = new Float((double) (-1763.368F));
      assertEquals((-1763.368F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1763.368F));
      assertEquals((-1763.368F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1763.368F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1763.368F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1763.368F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall(1259.297F, 0.0F, 0.0F, 0.0F, 1259.297F, 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(629.6485F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1259.297F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1259.297F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.297F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(629.6485F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1259.297F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1259.297F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.297F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall((-1349.896F), (-1349.896F), 0.0F, 0.1F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setThickness(0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = wall1.getLeftSideColor();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.getWallAtStart();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall(2051.5732F, 2051.5732F, 3820.953F, 2051.5732F, 2051.5732F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(1769.3796F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertEquals(2936.2632F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1769.3796F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.setXStart(3820.953F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(integer0);
      
      wall0.setYStart(2051.5732F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Integer integer1 = new Integer((-2146163494));
      assertEquals((-2146163494), (int)integer1);
      assertNotNull(integer1);
      
      Wall wall1 = new Wall(951.11F, (-2146163494), (-1889.39F), (-1848.6F), (-1510.944F));
      assertEquals((-1848.6F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1889.39F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-469.14F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.14616346E9F), wall1.getYStart(), 0.01F);
      assertEquals((-1.07308262E9F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.14616166E9F, wall1.getLength(), 0.01F);
      assertEquals((-1510.944F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(951.11F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.14616166E9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.clone();
      assertEquals((-1848.6F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1889.39F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-469.14F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.14616346E9F), wall1.getYStart(), 0.01F);
      assertEquals((-1.07308262E9F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.14616166E9F, wall1.getLength(), 0.01F);
      assertEquals((-1510.944F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(951.11F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.14616166E9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1510.944F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(951.11F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.14616166E9F, wall2.getLength(), 0.01F);
      assertEquals((-2.14616346E9F), wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-469.14F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.07308262E9F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1848.6F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-1889.39F), wall2.getXEnd(), 0.01F);
      assertEquals(2.14616166E9F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float0 = wall2.getLength();
      assertEquals((-1848.6F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1889.39F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-469.14F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.14616346E9F), wall1.getYStart(), 0.01F);
      assertEquals((-1.07308262E9F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.14616166E9F, wall1.getLength(), 0.01F);
      assertEquals((-1510.944F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(951.11F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.14616166E9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1510.944F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(951.11F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.14616166E9F, wall2.getLength(), 0.01F);
      assertEquals((-2.14616346E9F), wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-469.14F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.07308262E9F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1848.6F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-1889.39F), wall2.getXEnd(), 0.01F);
      assertEquals(2.14616166E9F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(2.14616166E9F, float0, 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Float float1 = new Float((-829.3538106));
      assertEquals((-829.3538F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall2.setArcExtent(float1);
      assertEquals((-1848.6F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1889.39F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-469.14F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.14616346E9F), wall1.getYStart(), 0.01F);
      assertEquals((-1.07308262E9F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.14616166E9F, wall1.getLength(), 0.01F);
      assertEquals((-1510.944F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(951.11F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.14616166E9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1510.944F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(951.11F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2.14616346E9F), wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1.07318925E9F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1848.6F), wall2.getYEnd(), 0.01F);
      assertEquals(6.6816697E13F, wall2.getLength(), 0.01F);
      assertEquals((-829.3538F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-1889.39F), wall2.getXEnd(), 0.01F);
      assertEquals(2.14616166E9F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-8.0557621E10F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall(21.48986F, 1.0F, 2.0F, 1.8360189F, (-1.0F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(11.74493F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(19.507782F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.4180095F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(19.507782F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8360189F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.1F, 21.48986F, 0.2924071F, (-1.0F), (-1.0F), 1.0F);
      assertEquals(22.490685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(10.24493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.19620354F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.2924071F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(22.490685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(11.74493F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(19.507782F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.4180095F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(19.507782F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8360189F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.490685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(10.24493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.19620354F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.2924071F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(22.490685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(11.74493F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(19.507782F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.4180095F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(19.507782F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8360189F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.490685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(10.24493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.19620354F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.2924071F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(22.490685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.getWallAtStart();
      assertEquals(22.490685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(10.24493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.19620354F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.2924071F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(22.490685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1.4180095F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(21.48986F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(11.74493F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(19.507782F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals(19.507782F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      HomeTexture homeTexture0 = wall2.getRightSideTexture();
      assertEquals(22.490685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(10.24493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.19620354F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.2924071F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(22.490685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1.4180095F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(21.48986F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(11.74493F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(19.507782F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals(19.507782F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      
      Wall wall3 = wall2.getWallAtEnd();
      assertEquals(22.490685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(10.24493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.19620354F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.2924071F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(22.490685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1.4180095F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(21.48986F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(11.74493F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(19.507782F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals(19.507782F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(21.48986F, wall3.getYStart(), 0.01F);
      assertEquals(1.0F, wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(10.24493F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals(22.490685F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(0.2924071F, wall3.getXEnd(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals(22.490685F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.19620354F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotNull(wall3);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      
      boolean boolean0 = wall3.containsWallEndAt(1.0F, (-313.763F), (-1.0F));
      assertEquals(22.490685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(10.24493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.19620354F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.2924071F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(22.490685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1.4180095F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(21.48986F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(11.74493F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(19.507782F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals(19.507782F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(21.48986F, wall3.getYStart(), 0.01F);
      assertEquals(1.0F, wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(10.24493F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals(22.490685F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(0.2924071F, wall3.getXEnd(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals(22.490685F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.19620354F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      
      Wall wall4 = wall2.clone();
      assertEquals(22.490685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(10.24493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.19620354F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.2924071F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(22.490685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1.4180095F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(21.48986F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(11.74493F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(19.507782F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals(19.507782F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-1.0F), wall4.getThickness(), 0.01F);
      assertEquals(19.507782F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall4.getYEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(1.4180095F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall4.getXEnd(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(11.74493F, wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(21.48986F, wall4.getXStart(), 0.01F);
      assertEquals(19.507782F, wall4.getLength(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(1.0F, wall4.getYStart(), 0.01F);
      assertSame(wall1, wall3);
      assertNotSame(wall1, wall4);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertNotNull(wall4);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      
      float[][] floatArray0 = wall4.getPoints();
      assertEquals(22.490685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(10.24493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.19620354F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.2924071F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(22.490685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1.4180095F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(21.48986F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(11.74493F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(19.507782F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals(19.507782F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-1.0F), wall4.getThickness(), 0.01F);
      assertEquals(19.507782F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall4.getYEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(1.4180095F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall4.getXEnd(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(11.74493F, wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(21.48986F, wall4.getXStart(), 0.01F);
      assertEquals(19.507782F, wall4.getLength(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(1.0F, wall4.getYStart(), 0.01F);
      assertSame(wall1, wall3);
      assertNotSame(wall1, wall4);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall4));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      
      HomeTexture homeTexture1 = wall3.getRightSideTexture();
      assertEquals(22.490685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(10.24493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.19620354F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.2924071F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(22.490685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1.4180095F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(21.48986F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(11.74493F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.8360189F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(19.507782F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals(19.507782F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(21.48986F, wall3.getYStart(), 0.01F);
      assertEquals(1.0F, wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(10.24493F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals(22.490685F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(0.2924071F, wall3.getXEnd(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals(22.490685F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.19620354F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertSame(wall1, wall3);
      assertNotSame(wall1, wall4);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertNotSame(wall3, wall4);
      assertNotSame(wall3, wall2);
      assertNull(homeTexture1);
      assertFalse(wall1.equals((Object)wall4));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall4));
      assertFalse(wall3.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, (-1461.0F), 0.1F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall1.getWallAtStart();
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture1 = wall1.getRightSideTexture();
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture1);
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture2 = wall1.getLeftSideTexture();
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture2);
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = wall1.getRightSideColor();
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(integer0);
      assertFalse(wall1.equals((Object)wall0));
      
      Random.setNextRandom(1139769919);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float float0 = Float.min(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      Wall wall0 = new Wall((-2443.96F), 0.0F, 2.0F, (-527.26044F), (-76.6F));
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2502.1438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2443.96F), wall0.getXStart(), 0.01F);
      assertEquals(2502.1438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1220.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-76.6F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-527.26044F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-263.63022F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2502.1438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2443.96F), wall0.getXStart(), 0.01F);
      assertEquals(2502.1438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1220.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-76.6F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-527.26044F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-263.63022F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-263.63022F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2502.1438F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1220.98F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2443.96F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-76.6F), wall1.getThickness(), 0.01F);
      assertEquals(2502.1438F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-527.26044F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2502.1438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2443.96F), wall0.getXStart(), 0.01F);
      assertEquals(2502.1438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1220.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-76.6F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-527.26044F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-263.63022F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-263.63022F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2502.1438F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1220.98F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2443.96F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-76.6F), wall1.getThickness(), 0.01F);
      assertEquals(2502.1438F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-527.26044F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.getWallAtEnd();
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2502.1438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2443.96F), wall0.getXStart(), 0.01F);
      assertEquals(2502.1438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1220.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-76.6F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-527.26044F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-263.63022F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-263.63022F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2502.1438F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1220.98F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2443.96F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-76.6F), wall1.getThickness(), 0.01F);
      assertEquals(2502.1438F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-527.26044F), wall1.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1220.98F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2502.1438F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2502.1438F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-2443.96F), wall2.getXStart(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-527.26044F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-76.6F), wall2.getThickness(), 0.01F);
      assertEquals((-263.63022F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      float float1 = wall2.getLeftSideShininess();
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2502.1438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2443.96F), wall0.getXStart(), 0.01F);
      assertEquals(2502.1438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1220.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-76.6F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-527.26044F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-263.63022F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-263.63022F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2502.1438F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1220.98F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2443.96F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-76.6F), wall1.getThickness(), 0.01F);
      assertEquals(2502.1438F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-527.26044F), wall1.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1220.98F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2502.1438F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2502.1438F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-2443.96F), wall2.getXStart(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-527.26044F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-76.6F), wall2.getThickness(), 0.01F);
      assertEquals((-263.63022F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(float1, float0, 0.01F);
      
      Float float2 = wall2.getHeightAtEnd();
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2502.1438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2443.96F), wall0.getXStart(), 0.01F);
      assertEquals(2502.1438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1220.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-76.6F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-527.26044F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-263.63022F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-263.63022F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2502.1438F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1220.98F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2443.96F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-76.6F), wall1.getThickness(), 0.01F);
      assertEquals(2502.1438F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-527.26044F), wall1.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1220.98F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2502.1438F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2502.1438F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-2443.96F), wall2.getXStart(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-527.26044F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-76.6F), wall2.getThickness(), 0.01F);
      assertEquals((-263.63022F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      List<Wall> list0 = new LinkedList<Wall>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      float float0 = 0.0F;
      float float1 = 600.009F;
      float float2 = 0.0F;
      Wall wall0 = new Wall(0.0F, 0.0F, 600.009F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(300.0045F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(600.009F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(600.009F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(600.009F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      float float3 = wall0.getYArcCircleCenter();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(300.0045F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(600.009F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(600.009F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(600.009F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(float3, float0, 0.01F);
      
      wall0.setYEnd(0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(300.0045F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(600.009F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(600.009F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(600.009F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall((-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F));
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2305.2F), wall0.getHeight(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2305.2F), wall0.getHeight(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = wall0.intersectsRectangle((-2305.2F), 555.6F, 17.513996F, 555.6F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2305.2F), wall0.getHeight(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(boolean0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      Float float0 = new Float((-2142.026F));
      assertEquals((-2142.026F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2305.2F), wall0.getHeight(), 0.01F);
      assertEquals((-2142.026F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2305.2F), wall0.getHeight(), 0.01F);
      assertEquals((-2142.026F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float float1 = wall0.getYArcCircleCenter();
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2305.2F), wall0.getHeight(), 0.01F);
      assertEquals((-2142.026F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2305.2F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall(21.48986F, 21.48986F, 21.48986F, 0.1F, 0.1F);
      assertEquals(21.48986F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(21.38986F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(10.79493F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(21.38986F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = new Float(21.48986F);
      assertEquals(21.48986F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(24.228062F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(10.79493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(21.48986F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(21.38986F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(237.2458F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(21.48986F, 0.1F, 21.48986F, 21.48986F, 0.1F, 21.48986F);
      assertEquals(21.48986F, wall1.getXEnd(), 0.01F);
      assertEquals(21.48986F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(21.48986F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(21.38986F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(10.79493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(21.48986F, wall1.getHeight(), 0.01F);
      assertEquals(21.38986F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(21.48986F, wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall(4509.0493F, (-1.0F), (-1.0F), 1224.46F, 1224.46F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1224.46F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4509.0493F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4673.574F, wall0.getLength(), 0.01F);
      assertEquals(1224.46F, wall0.getThickness(), 0.01F);
      assertEquals(2254.0247F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(611.73F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4673.574F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(1795.959F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1224.46F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4509.0493F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4673.574F, wall0.getLength(), 0.01F);
      assertEquals(2254.0247F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(611.73F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1795.959F, wall0.getThickness(), 0.01F);
      assertEquals(4673.574F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1224.46F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4509.0493F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4673.574F, wall0.getLength(), 0.01F);
      assertEquals(2254.0247F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(611.73F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1795.959F, wall0.getThickness(), 0.01F);
      assertEquals(4673.574F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(integer0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1224.46F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4509.0493F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4673.574F, wall0.getLength(), 0.01F);
      assertEquals(2254.0247F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(611.73F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1795.959F, wall0.getThickness(), 0.01F);
      assertEquals(4673.574F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1224.46F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4509.0493F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4673.574F, wall0.getLength(), 0.01F);
      assertEquals(2254.0247F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(611.73F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1795.959F, wall0.getThickness(), 0.01F);
      assertEquals(4673.574F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(90);
      assertEquals(90, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(90, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(90, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(90, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(90, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall((-2154.4065F), (-2154.4065F), (-2154.4065F), 0.1F, (-1197.8F));
      assertEquals((-2154.4065F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2154.4065F), wall0.getXStart(), 0.01F);
      assertEquals(2154.5066F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1077.1532F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1197.8F), wall0.getThickness(), 0.01F);
      assertEquals((-2154.4065F), wall0.getYStart(), 0.01F);
      assertEquals((-2154.4065F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2154.5066F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals((-2154.4065F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2154.4065F), wall0.getXStart(), 0.01F);
      assertEquals(2154.5066F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1077.1532F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1197.8F), wall0.getThickness(), 0.01F);
      assertEquals((-2154.4065F), wall0.getYStart(), 0.01F);
      assertEquals((-2154.4065F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2154.5066F, wall0.getLength(), 0.01F);
      assertNull(textureImage0);
      
      Float float0 = wall0.getArcExtent();
      assertEquals((-2154.4065F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2154.4065F), wall0.getXStart(), 0.01F);
      assertEquals(2154.5066F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1077.1532F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1197.8F), wall0.getThickness(), 0.01F);
      assertEquals((-2154.4065F), wall0.getYStart(), 0.01F);
      assertEquals((-2154.4065F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2154.5066F, wall0.getLength(), 0.01F);
      assertNull(float0);
      
      wall0.setArcExtent((Float) null);
      assertEquals((-2154.4065F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2154.4065F), wall0.getXStart(), 0.01F);
      assertEquals(2154.5066F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1077.1532F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1197.8F), wall0.getThickness(), 0.01F);
      assertEquals((-2154.4065F), wall0.getYStart(), 0.01F);
      assertEquals((-2154.4065F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2154.5066F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 2051.5732F, 0.0F, 1.0F, 1.0F, 0.0F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 1.0F, 1.0F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(homeTexture0);
      
      float float0 = wall0.getXStart();
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, float0, 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("cometeks.sweethome3d.tools.TemporaryURLContent", propertyChangeListener0);
      assertEquals("cometeks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.setYStart(0.0F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean1 = wall0.intersectsRectangle(1.0F, (-1510.944F), 911.53424F, 2051.5732F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall((-2750.7422F), 0.0F, 0.0F, 0.0F, (-2750.7422F), 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(2750.7422F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2750.7422F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1375.3711F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall1));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      
      wall1.setXEnd(1352.9066F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(4103.649F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4103.649F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-698.9178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1352.9066F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer((-249));
      assertEquals((-249), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-249), (int)wall0.getRightSideColor());
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer1 = wall1.getLeftSideColor();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-249), (int)wall0.getRightSideColor());
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(4103.649F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4103.649F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-698.9178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1352.9066F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(integer1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float0 = wall1.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(4103.649F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4103.649F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-698.9178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1352.9066F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-698.9178F), float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall((-4455.8203F), 0.0F, 0.0F, (-4455.8203F), (-2868.51F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2227.9102F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6301.4814F, wall0.getLength(), 0.01F);
      assertEquals(6301.4814F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4455.8203F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2227.9102F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4455.8203F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2868.51F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2227.9102F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6301.4814F, wall0.getLength(), 0.01F);
      assertEquals(6301.4814F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4455.8203F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2227.9102F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4455.8203F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2868.51F), wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall(21.48986F, 21.48986F, 0.1F, 0.1F, 21.48986F, 0.1F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.79493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(30.24983F, wall0.getLength(), 0.01F);
      assertEquals(10.79493F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(30.24983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.79493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(30.24983F, wall0.getLength(), 0.01F);
      assertEquals(10.79493F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(30.24983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(30.24983F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(10.79493F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(10.79493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(30.24983F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(21.48986F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setThickness(0.1F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.79493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(30.24983F, wall0.getLength(), 0.01F);
      assertEquals(10.79493F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(30.24983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(30.24983F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(10.79493F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(10.79493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(30.24983F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(21.48986F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(21.48986F);
      assertEquals(21.48986F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.79493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(30.24983F, wall0.getLength(), 0.01F);
      assertEquals(10.79493F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(30.24983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(13.533133F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(30.24983F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall1.getArcExtent(), 0.01F);
      assertEquals(8.056728F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(335.51624F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(21.48986F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.clone();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.79493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(30.24983F, wall0.getLength(), 0.01F);
      assertEquals(10.79493F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(30.24983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(21.48986F, wall2.getThickness(), 0.01F);
      assertEquals(30.24983F, wall2.getLength(), 0.01F);
      assertEquals(10.79493F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(21.48986F, wall2.getYStart(), 0.01F);
      assertEquals(10.79493F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(30.24983F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall2);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.79493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(30.24983F, wall0.getLength(), 0.01F);
      assertEquals(10.79493F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(30.24983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(21.48986F, wall2.getThickness(), 0.01F);
      assertEquals(30.24983F, wall2.getLength(), 0.01F);
      assertEquals(10.79493F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(21.48986F, wall2.getYStart(), 0.01F);
      assertEquals(10.79493F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(30.24983F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.79493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(30.24983F, wall0.getLength(), 0.01F);
      assertEquals(10.79493F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(30.24983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(13.533133F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(30.24983F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall1.getArcExtent(), 0.01F);
      assertEquals(8.056728F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(335.51624F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(21.48986F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      wall0.setWallAtStart(wall2);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.79493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(30.24983F, wall0.getLength(), 0.01F);
      assertEquals(10.79493F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(30.24983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(21.48986F, wall2.getThickness(), 0.01F);
      assertEquals(30.24983F, wall2.getLength(), 0.01F);
      assertEquals(10.79493F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(21.48986F, wall2.getYStart(), 0.01F);
      assertEquals(10.79493F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(30.24983F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.79493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(30.24983F, wall0.getLength(), 0.01F);
      assertEquals(10.79493F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(30.24983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      
      HomeTexture homeTexture1 = wall1.getLeftSideTexture();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.79493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(30.24983F, wall0.getLength(), 0.01F);
      assertEquals(10.79493F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(30.24983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(13.533133F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(30.24983F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall1.getArcExtent(), 0.01F);
      assertEquals(8.056728F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(335.51624F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertEquals(21.48986F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 2520.127F, 0.1F, 2520.127F, 2520.127F, 1259.0988F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture1 = wall1.getRightSideTexture();
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture1);
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = wall1.getLevel();
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(level0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float((double) 1259.0988F);
      assertEquals(1259.0988F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1259.0988F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall((-2371.8264F), (-2371.8264F), (-2371.8264F), (-1626.2268F), 5366.0F, 994.0F);
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = wall0.containsWallStartAt((-1858.0514F), 5366.0F, (-313.763F));
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Float float0 = new Float((-1625.5938F));
      assertEquals((-1625.5938F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(0.1F, (-0.027207727F), 994.0F, (-1858.0514F), (-1183.2F));
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXEnd(), 0.01F);
      assertEquals(745.5996F, wall0.getLength(), 0.01F);
      assertEquals((-1999.0266F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2371.8264F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2371.8264F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5366.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2371.8264F), wall0.getYStart(), 0.01F);
      assertEquals(745.5996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1626.2268F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-0.027207727F), wall1.getYStart(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(497.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.1523F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-929.0393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1183.2F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(994.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2107.1523F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall((-2868.51F), 0.0F, (-2868.51F), 0.01F, 0.0F);
      assertEquals(0.01F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2868.51F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2868.51F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2868.51F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness((-869.0579F));
      assertEquals(0.01F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2868.51F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-869.0579F), wall0.getThickness(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2868.51F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2868.51F), wall0.getXArcCircleCenter(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-869.0579F));
      assertEquals((-869.0579F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-869.0579F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2868.51F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-2868.5068F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-869.0579F), wall0.getThickness(), 0.01F);
      assertEquals(5.1467886F, wall0.getLength(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2868.51F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall1 = new Wall(0.0F, 3573.0F, 0.0F, (-2868.51F), 0.01F, 1.0F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(352.245F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2868.51F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(6441.51F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6441.51F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3573.0F, wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-869.0579F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2868.51F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-2868.5068F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-869.0579F), wall0.getThickness(), 0.01F);
      assertEquals(5.1467886F, wall0.getLength(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2868.51F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(352.245F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2868.51F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(6441.51F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6441.51F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3573.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-869.0579F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2868.51F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-2868.5068F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-869.0579F), wall0.getThickness(), 0.01F);
      assertEquals(5.1467886F, wall0.getLength(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2868.51F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(352.245F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2868.51F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(6441.51F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6441.51F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3573.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      // Undeclared exception!
      try { 
        wall0.getPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall wall0 = new Wall(250.6536F, (-815.80774F), (-815.80774F), 2559.7F, 250.6536F, (-815.80774F));
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(2.0F);
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getLength();
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3539.9707F, float0, 0.01F);
      
      Float float1 = new Float(1078.7530517578125);
      assertEquals(1078.753F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall1 = new Wall(2.0F, (-6.073F), (-1.0F), 250.6536F, (-815.80774F));
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(256.7441F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6.073F), wall1.getYStart(), 0.01F);
      assertEquals((-815.80774F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(250.6536F, wall1.getYEnd(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(256.7441F, wall1.getLength(), 0.01F);
      assertEquals(122.2903F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = wall0.getHeight();
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertEquals((-815.80774F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((double) 2.0F);
      assertEquals(2.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      wall0.setArcExtent(float3);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals((-1366.2714F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(529.5626F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(4206.884F, wall0.getLength(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Float float0 = new Float(2727.0F);
      assertEquals(2727.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(0.1F, (-3435.0376F), (-3435.0376F), 1.0F, (-3435.0376F));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertEquals((-3435.0376F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1717.4688F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4858.655F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4858.655F, wall0.getLength(), 0.01F);
      assertEquals((-3435.0376F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1717.0188F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertEquals((-3435.0376F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1717.4688F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4858.655F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4858.655F, wall0.getLength(), 0.01F);
      assertEquals((-3435.0376F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1717.0188F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.move(515.807F, 1.0F);
      assertEquals((-2919.2305F), wall0.getXEnd(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertEquals((-3434.0376F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1201.6617F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4858.6543F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4858.6543F, wall0.getLength(), 0.01F);
      assertEquals(515.907F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1716.0188F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall((-29.0F), 2.0F, (-0.8697591F), 3401.5F, (-3845.29F));
      assertEquals((-3845.29F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(3399.6165F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1701.75F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8697591F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-29.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3399.6165F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3401.5F, wall1.getYEnd(), 0.01F);
      assertEquals((-14.934879F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-2919.2305F), wall0.getXEnd(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertEquals((-3434.0376F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1201.6617F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4858.6543F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4858.6543F, wall0.getLength(), 0.01F);
      assertEquals(515.907F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1716.0188F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3845.29F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(3399.6165F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1701.75F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8697591F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-29.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3399.6165F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3401.5F, wall1.getYEnd(), 0.01F);
      assertEquals((-14.934879F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-2919.2305F), wall0.getXEnd(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertEquals((-3434.0376F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1201.6617F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4858.6543F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4858.6543F, wall0.getLength(), 0.01F);
      assertEquals(515.907F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1716.0188F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3845.29F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(3399.6165F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1701.75F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8697591F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-29.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3399.6165F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3401.5F, wall1.getYEnd(), 0.01F);
      assertEquals((-14.934879F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.getWallAtEnd();
      assertEquals((-3845.29F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(3399.6165F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1701.75F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8697591F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-29.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3399.6165F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3401.5F, wall1.getYEnd(), 0.01F);
      assertEquals((-14.934879F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3434.0376F), wall2.getYStart(), 0.01F);
      assertEquals(2.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-3435.0376F), wall2.getThickness(), 0.01F);
      assertEquals((-1716.0188F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(4858.6543F, wall2.getLength(), 0.01F);
      assertEquals((-2919.2305F), wall2.getXEnd(), 0.01F);
      assertEquals(515.907F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1201.6617F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(4858.6543F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall2.setWallAtStart(wall1);
      assertEquals((-3845.29F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(3399.6165F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1701.75F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8697591F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-29.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3399.6165F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3401.5F, wall1.getYEnd(), 0.01F);
      assertEquals((-14.934879F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3434.0376F), wall2.getYStart(), 0.01F);
      assertEquals(2.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-3435.0376F), wall2.getThickness(), 0.01F);
      assertEquals((-1716.0188F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(4858.6543F, wall2.getLength(), 0.01F);
      assertEquals((-2919.2305F), wall2.getXEnd(), 0.01F);
      assertEquals(515.907F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1201.6617F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(4858.6543F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertEquals((-3845.29F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(3399.6165F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1701.75F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8697591F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-29.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3399.6165F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3401.5F, wall1.getYEnd(), 0.01F);
      assertEquals((-14.934879F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      Wall wall3 = new Wall((-85.08F), 1.0F, (-1976.8F), (-996.5229F), 2400.9F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals(2138.6108F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1976.8F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2138.6108F, wall3.getLength(), 0.01F);
      assertEquals((-497.76144F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-85.08F), wall3.getXStart(), 0.01F);
      assertEquals(2400.9F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals((-996.5229F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1030.9401F), wall3.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall3);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      
      boolean boolean1 = wall3.containsWallEndAt(51.85308F, 2727.0F, 0.1F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals(2138.6108F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1976.8F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2138.6108F, wall3.getLength(), 0.01F);
      assertEquals((-497.76144F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-85.08F), wall3.getXStart(), 0.01F);
      assertEquals(2400.9F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals((-996.5229F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1030.9401F), wall3.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertFalse(boolean1);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      
      HomeTexture homeTexture1 = wall3.getLeftSideTexture();
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals(2138.6108F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1976.8F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2138.6108F, wall3.getLength(), 0.01F);
      assertEquals((-497.76144F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-85.08F), wall3.getXStart(), 0.01F);
      assertEquals(2400.9F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals((-996.5229F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1030.9401F), wall3.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNull(homeTexture1);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 528.3F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setHeightAtEnd((Float) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setYEnd((-1.0F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(528.3F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall(0.0F, (-1.0F), 0.0F, (-1248.1359F), 0.0F, 247.4F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1247.1359F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1247.1359F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-624.56793F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1248.1359F), wall2.getYEnd(), 0.01F);
      assertEquals(247.4F, wall2.getHeight(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Integer integer0 = Integer.valueOf(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      wall2.setRightSideColor(integer0);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1247.1359F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getLeftSideColor());
      assertEquals(4, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1247.1359F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-624.56793F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1248.1359F), wall2.getYEnd(), 0.01F);
      assertEquals(247.4F, wall2.getHeight(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Wall wall3 = wall0.clone();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(1.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      
      float float1 = wall1.getXArcCircleCenter();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(528.3F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(float1, float0, 0.01F);
      
      float float2 = wall3.getYEnd();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(1.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertEquals((-1.0F), float2, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall((-2.39428F), 0.1F, (-2.39428F), (-2.39428F), (-2.39428F));
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.14714F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.4942799F, wall0.getLength(), 0.01F);
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.4942799F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.14714F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.4942799F, wall0.getLength(), 0.01F);
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.4942799F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.4942799F, float0, 0.01F);
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.14714F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.4942799F, wall0.getLength(), 0.01F);
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.4942799F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      
      Wall wall1 = new Wall((-196.9685F), 0.1F, (-1874.47F), (-832.79767F), 1.0F);
      assertEquals((-832.79767F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-1035.7192F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1874.47F), wall1.getXEnd(), 0.01F);
      assertEquals((-416.34885F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1872.8934F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-196.9685F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1872.8934F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.14714F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.4942799F, wall0.getLength(), 0.01F);
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.4942799F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-832.79767F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-1035.7192F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1874.47F), wall1.getXEnd(), 0.01F);
      assertEquals((-416.34885F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1872.8934F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-196.9685F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1872.8934F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.14714F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.4942799F, wall0.getLength(), 0.01F);
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.4942799F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-832.79767F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-1035.7192F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1874.47F), wall1.getXEnd(), 0.01F);
      assertEquals((-416.34885F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1872.8934F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-196.9685F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1872.8934F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall1.containsWallEndAt(2.0F, (-2240.369F), 1753.364F);
      assertEquals((-832.79767F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-1035.7192F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1874.47F), wall1.getXEnd(), 0.01F);
      assertEquals((-416.34885F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1872.8934F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-196.9685F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1872.8934F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.14714F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.4942799F, wall0.getLength(), 0.01F);
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.4942799F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall1.clone();
      assertEquals((-832.79767F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-1035.7192F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1874.47F), wall1.getXEnd(), 0.01F);
      assertEquals((-416.34885F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1872.8934F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-196.9685F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1872.8934F, wall1.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-196.9685F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals((-1035.7192F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-832.79767F), wall2.getYEnd(), 0.01F);
      assertEquals(1872.8934F, wall2.getLength(), 0.01F);
      assertEquals((-1874.47F), wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(1872.8934F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-416.34885F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals((-2.39428F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.14714F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.4942799F, wall0.getLength(), 0.01F);
      assertEquals((-2.39428F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.39428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.39428F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.4942799F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals((-2.39428F), float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall(1.8360189F, (-4960.0F), (-1625.5938F), (-1625.5938F), (-1625.5938F));
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals((-811.87885F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3710.3628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1625.5938F), wall0.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals(3710.3628F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3292.7969F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals((-811.87885F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3710.3628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1625.5938F), wall0.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals(3710.3628F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3292.7969F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1625.5938F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall1.getYEnd(), 0.01F);
      assertEquals(3710.3628F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-4960.0F), wall1.getYStart(), 0.01F);
      assertEquals(1.8360189F, wall1.getXStart(), 0.01F);
      assertEquals((-811.87885F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3710.3628F, wall1.getLength(), 0.01F);
      assertEquals((-3292.7969F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals((-811.87885F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3710.3628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1625.5938F), wall0.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals(3710.3628F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3292.7969F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1625.5938F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall1.getYEnd(), 0.01F);
      assertEquals(3710.3628F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-4960.0F), wall1.getYStart(), 0.01F);
      assertEquals(1.8360189F, wall1.getXStart(), 0.01F);
      assertEquals((-811.87885F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3710.3628F, wall1.getLength(), 0.01F);
      assertEquals((-3292.7969F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals((-811.87885F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3710.3628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1625.5938F), wall0.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals(3710.3628F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3292.7969F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1625.5938F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall1.getYEnd(), 0.01F);
      assertEquals(3710.3628F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-4960.0F), wall1.getYStart(), 0.01F);
      assertEquals(1.8360189F, wall1.getXStart(), 0.01F);
      assertEquals((-811.87885F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3710.3628F, wall1.getLength(), 0.01F);
      assertEquals((-3292.7969F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(1.8360189F);
      assertEquals(1.8360189F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals((-811.87885F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3710.3628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1625.5938F), wall0.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals(3710.3628F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3292.7969F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3914.9724F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall1.getYEnd(), 0.01F);
      assertEquals((-2086.6409F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3710.3628F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-4960.0F), wall1.getYStart(), 0.01F);
      assertEquals(4287.7305F, wall1.getLength(), 0.01F);
      assertEquals(1.8360189F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.8360189F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals((-811.87885F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3710.3628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1625.5938F), wall0.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals(3710.3628F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3292.7969F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3914.9724F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall1.getYEnd(), 0.01F);
      assertEquals((-2086.6409F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3710.3628F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-4960.0F), wall1.getYStart(), 0.01F);
      assertEquals(4287.7305F, wall1.getLength(), 0.01F);
      assertEquals(1.8360189F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.8360189F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd((Wall) null);
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals((-811.87885F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3710.3628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1625.5938F), wall0.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals(3710.3628F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3292.7969F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3914.9724F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall1.getYEnd(), 0.01F);
      assertEquals((-2086.6409F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3710.3628F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-4960.0F), wall1.getYStart(), 0.01F);
      assertEquals(4287.7305F, wall1.getLength(), 0.01F);
      assertEquals(1.8360189F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.8360189F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals((-4960.0F), wall0.getYStart(), 0.01F);
      assertEquals((-811.87885F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.8360189F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3710.3628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1625.5938F), wall0.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall0.getYEnd(), 0.01F);
      assertEquals(3710.3628F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3292.7969F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3914.9724F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall1.getYEnd(), 0.01F);
      assertEquals((-2086.6409F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3710.3628F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-4960.0F), wall1.getYStart(), 0.01F);
      assertEquals(4287.7305F, wall1.getLength(), 0.01F);
      assertEquals(1.8360189F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.8360189F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(108, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Float float1 = wall0.getHeight();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(float1);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(float2, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall((-1349.896F), (-1349.896F), 0.0F, 0.1F, 0.0F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setLeftSideTexture((HomeTexture) null);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setThickness(0.0F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = wall1.getLeftSideColor();
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.getWallAtStart();
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1909.1119F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1909.1119F, wall0.getLength(), 0.01F);
      assertEquals((-674.898F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.898F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(1909.1119F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(1909.1119F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.1F, 0.0F, (-1349.896F), 0.0F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setLeftSideShininess(0.1F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = Integer.getInteger("10.4");
      assertNull(integer0);
      
      String string0 = Integer.toUnsignedString((-1445));
      assertEquals("4294965851", string0);
      assertNotNull(string0);
      
      Integer integer1 = new Integer(348);
      assertEquals(348, (int)integer1);
      assertNotNull(integer1);
      
      wall0.setLeftSideColor(integer1);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(348, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall1));
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(wall1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean0 = wall1.containsPoint(0.0F, 0.0F, 0.0F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(348, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList2 = new LinkedList<Wall>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(wall1));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      
      // Undeclared exception!
      try { 
        linkedList2.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 17.513996F, 17.513996F, (-1499.06F), (-598.0F));
      assertEquals(8.756998F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(17.513996F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(17.513996F, wall0.getYEnd(), 0.01F);
      assertEquals(24.768532F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(8.756998F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(24.768532F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(2.0F, 17.513996F);
      assertEquals(10.756998F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(26.270994F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(35.027992F, wall0.getYEnd(), 0.01F);
      assertEquals(24.768532F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.513996F, wall0.getYStart(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(19.513996F, wall0.getXEnd(), 0.01F);
      assertEquals(24.768532F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(10.756998F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(26.270994F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(35.027992F, wall0.getYEnd(), 0.01F);
      assertEquals(24.768532F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.513996F, wall0.getYStart(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(19.513996F, wall0.getXEnd(), 0.01F);
      assertEquals(24.768532F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setYStart(2.0F);
      assertEquals(10.756998F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(37.384335F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.513996F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(35.027992F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(37.384335F, wall0.getLength(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(19.513996F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      
      wall0.setXEnd((-1.0F));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.513996F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(35.027992F, wall0.getYEnd(), 0.01F);
      assertEquals(33.16396F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(33.16396F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.513996F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(35.027992F, wall0.getYEnd(), 0.01F);
      assertEquals(33.16396F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(33.16396F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.513996F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(35.027992F, wall0.getYEnd(), 0.01F);
      assertEquals(33.16396F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(33.16396F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
      assertNull(homeTexture1);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.513996F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(35.027992F, wall0.getYEnd(), 0.01F);
      assertEquals(33.16396F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(33.16396F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1499.06F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-598.0F), wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Level level0 = new Level("eWNH!OH[ph:Tkd6^B", 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("eWNH!OH[ph:Tkd6^B", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("eWNH!OH[ph:Tkd6^B", level0.getName());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals("eWNH!OH[ph:Tkd6^B", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      
      Level level2 = level0.clone();
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("eWNH!OH[ph:Tkd6^B", level0.getName());
      assertEquals(0.0F, level2.getElevation(), 0.01F);
      assertEquals("eWNH!OH[ph:Tkd6^B", level2.getName());
      assertTrue(level2.isVisible());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertEquals(0.0F, level2.getFloorThickness(), 0.01F);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertNotNull(level2);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setLeftSideShininess(6.551008F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(6.551008F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall1.isAtLevel(level0);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("eWNH!OH[ph:Tkd6^B", level0.getName());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(6.551008F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 528.3F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      
      Wall wall1 = new Wall((-719.8896F), (-719.8896F), 0.0F, 0.0F, 0.1F);
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      wall1.setArcExtent(float2);
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals((-5.8783449E18F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5.8783449E18F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall(2051.5732F, 2051.5732F, 3820.953F, 2051.5732F, 2051.5732F);
      assertEquals(1769.3796F, wall0.getLength(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertEquals(2936.2632F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertEquals(1769.3796F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXStart(3820.953F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertNull(integer0);
      
      wall0.setYStart(2051.5732F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(3820.953F, 1168.81F, 555.6F, 2051.5732F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertTrue(boolean0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall((-1.2407146F), (-1.2407146F), (-1.2407146F), (-1.2407146F), (-1.2407146F));
      assertEquals((-1.2407146F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.2407146F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.2407146F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.2407146F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.2407146F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.2407146F), wall0.getThickness(), 0.01F);
      assertEquals((-1.2407146F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertEquals((-1.2407146F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.2407146F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.2407146F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.2407146F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.2407146F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.2407146F), wall0.getThickness(), 0.01F);
      assertEquals((-1.2407146F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall(2520.127F, 2520.127F, 2520.127F, 2520.127F, 2520.127F, 1259.0988F);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(2520.127F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2520.127F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(2520.127F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2520.127F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(2520.127F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2520.127F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      
      wall0.setLeftSideShininess((-1.0F));
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(2520.127F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2520.127F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(2520.127F, (-0.048267417F), 2520.127F, 0.0F, (-0.048267417F), 0.0F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.048267417F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2520.127F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2520.127F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.048267417F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.024133708F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.048267417F), wall1.getThickness(), 0.01F);
      assertEquals((-0.048267417F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2520.127F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(2520.127F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2520.127F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.048267417F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2520.127F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2520.127F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.048267417F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.024133708F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.048267417F), wall1.getThickness(), 0.01F);
      assertEquals((-0.048267417F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2520.127F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(2520.127F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2520.127F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.048267417F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2520.127F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2520.127F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.048267417F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.024133708F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.048267417F), wall1.getThickness(), 0.01F);
      assertEquals((-0.048267417F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2520.127F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(532.137411);
      assertEquals(532.1374F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(2520.127F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(532.1374F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2520.127F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.048267417F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2520.127F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2520.127F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.048267417F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.024133708F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.048267417F), wall1.getThickness(), 0.01F);
      assertEquals((-0.048267417F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2520.127F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = new Level(",,@{m\"A)z]fd64H=", (-1.0F), (-612.141F), (-612.141F));
      assertEquals((-612.141F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-612.141F), level0.getHeight(), 0.01F);
      assertEquals(",,@{m\"A)z]fd64H=", level0.getName());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(2520.127F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(532.1374F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2520.127F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      assertEquals((-612.141F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-612.141F), level0.getHeight(), 0.01F);
      assertEquals(",,@{m\"A)z]fd64H=", level0.getName());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall1.getWallAtEnd();
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.048267417F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2520.127F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2520.127F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.048267417F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.024133708F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.048267417F), wall1.getThickness(), 0.01F);
      assertEquals((-0.048267417F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2520.127F, wall1.getXEnd(), 0.01F);
      assertEquals(2520.127F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2520.127F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2520.127F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall2.getXStart(), 0.01F);
      assertEquals((-1.0F), wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(1259.0988F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2520.127F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(532.1374F, wall2.getArcExtent(), 0.01F);
      assertEquals(2520.127F, wall2.getYStart(), 0.01F);
      assertEquals(2520.127F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]N,GyB!U9 r2HBJX<-");
      assertFalse(boolean0);
      
      Wall wall0 = new Wall(0.1F, (-3093.9084F), 0.1F, 1259.0988F, 21.48986F, 2481.96F);
      assertEquals(4353.0073F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-917.40485F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(4353.0073F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2481.96F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3093.9084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(4353.0073F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-917.40485F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(4353.0073F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2481.96F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3093.9084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(4353.0073F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-917.40485F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(4353.0073F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2481.96F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3093.9084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall(0.1F, 0.0F, 1259.0988F, (-3093.9084F), (-3093.9084F), (-3093.9084F));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1546.9542F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3093.9084F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3093.9084F), wall1.getYEnd(), 0.01F);
      assertEquals(1259.0988F, wall1.getXEnd(), 0.01F);
      assertEquals(629.59937F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3093.9084F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3340.2615F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3340.2615F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(4353.0073F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-917.40485F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(4353.0073F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2481.96F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3093.9084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1546.9542F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3093.9084F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3093.9084F), wall1.getYEnd(), 0.01F);
      assertEquals(1259.0988F, wall1.getXEnd(), 0.01F);
      assertEquals(629.59937F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3093.9084F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3340.2615F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3340.2615F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(4353.0073F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-917.40485F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(4353.0073F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2481.96F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3093.9084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1546.9542F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3093.9084F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3093.9084F), wall1.getYEnd(), 0.01F);
      assertEquals(1259.0988F, wall1.getXEnd(), 0.01F);
      assertEquals(629.59937F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3093.9084F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3340.2615F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3340.2615F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(4353.0073F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-917.40485F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(4353.0073F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2481.96F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3093.9084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1546.9542F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3093.9084F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3093.9084F), wall1.getYEnd(), 0.01F);
      assertEquals(1259.0988F, wall1.getXEnd(), 0.01F);
      assertEquals(629.59937F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3093.9084F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3340.2615F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3340.2615F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertEquals(4353.0073F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-917.40485F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(4353.0073F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2481.96F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3093.9084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean1 = wall0.containsWallEndAt(1.0F, (-3093.9084F), (-1.723902F));
      assertEquals(4353.0073F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-917.40485F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(4353.0073F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2481.96F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3093.9084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      
      HomeTexture homeTexture2 = wall0.getLeftSideTexture();
      assertEquals(4353.0073F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-917.40485F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(4353.0073F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1259.0988F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2481.96F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3093.9084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNull(homeTexture2);
      assertFalse(wall0.equals((Object)wall1));
      
      try { 
        Integer.valueOf("Super class isn't cloneable", 54);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 54 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(level0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      Wall wall1 = new Wall(0.0F, 0.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("`R|O`>@-4/r;L", temporaryURLContent0, 1.0F, (-3677.0698F));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1.0F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-3677.0698F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("`R|O`>@-4/r;L", catalogTexture0.getName());
      assertNotNull(catalogTexture0);
      
      wall1.setPattern(catalogTexture0);
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(1.0F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-3677.0698F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("`R|O`>@-4/r;L", catalogTexture0.getName());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Level level1 = wall0.getLevel();
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNull(level1);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean0 = wall1.containsWallEndAt(0.1F, (-0.011904762F), (-0.011904762F));
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 529.48804F, 529.48804F, 0.0F, 529.48804F, 0.0F);
      assertEquals(529.48804F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(264.74402F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(748.80914F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(529.48804F, wall0.getYStart(), 0.01F);
      assertEquals(264.74402F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(748.80914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = new Float(529.48804F);
      assertEquals(529.48804F, float0, 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(529.48804F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(264.74402F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(748.80914F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(529.48804F, wall0.getYStart(), 0.01F);
      assertEquals(264.74402F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(748.80914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float1 = new Float(529.48804F);
      assertEquals(529.48804F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(529.48804F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(264.74402F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(748.80914F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(529.48804F, wall0.getYStart(), 0.01F);
      assertEquals(264.74402F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(748.80914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(529.48804F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(264.74402F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(748.80914F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(529.48804F, wall0.getYStart(), 0.01F);
      assertEquals(264.74402F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(748.80914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(integer0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(529.48804F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(264.74402F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(748.80914F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(529.48804F, wall0.getYStart(), 0.01F);
      assertEquals(264.74402F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(748.80914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = wall0.getHeight();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Integer integer0 = new Integer(101);
      assertEquals(101, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(101, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(101, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(101, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(101, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float2 = wall1.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(101, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(101, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(101, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(101, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer1 = wall0.getRightSideColor();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(101, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertEquals(101, (int)integer1);
      assertNotNull(integer1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall1.clone();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(101, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(101, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(101, (int)wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall((-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Wall wall1 = new Wall(0.1F, 1.0F, (-2091.3704F), 5714.7134F, (-1349.896F));
      assertEquals((-1045.6351F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2091.3704F), wall1.getXEnd(), 0.01F);
      assertEquals(6084.469F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5714.7134F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1349.896F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2857.8567F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6084.469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.clone();
      assertEquals((-1045.6351F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2091.3704F), wall1.getXEnd(), 0.01F);
      assertEquals(6084.469F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5714.7134F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1349.896F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2857.8567F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6084.469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(6084.469F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-2091.3704F), wall2.getXEnd(), 0.01F);
      assertEquals((-1349.896F), wall2.getThickness(), 0.01F);
      assertEquals((-1045.6351F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2857.8567F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(5714.7134F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(6084.469F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertEquals((-1045.6351F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2091.3704F), wall1.getXEnd(), 0.01F);
      assertEquals(6084.469F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5714.7134F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1349.896F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2857.8567F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6084.469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setLeftSideTexture((HomeTexture) null);
      assertEquals((-1045.6351F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2091.3704F), wall1.getXEnd(), 0.01F);
      assertEquals(6084.469F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5714.7134F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1349.896F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2857.8567F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6084.469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setThickness((-2091.3704F));
      assertEquals((-1045.6351F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2091.3704F), wall1.getXEnd(), 0.01F);
      assertEquals(6084.469F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5714.7134F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2091.3704F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2857.8567F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6084.469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      
      Wall wall3 = wall1.getWallAtStart();
      assertEquals((-1045.6351F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2091.3704F), wall1.getXEnd(), 0.01F);
      assertEquals(6084.469F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5714.7134F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2091.3704F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2857.8567F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6084.469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall3);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1045.6351F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2091.3704F), wall1.getXEnd(), 0.01F);
      assertEquals(6084.469F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5714.7134F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2091.3704F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2857.8567F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6084.469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, (-1461.0F), 0.1F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall((-2750.7422F), 0.0F, 0.0F, 0.0F, (-2750.7422F), 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2750.7422F, wall1.getLength(), 0.01F);
      assertEquals((-1375.3711F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2750.7422F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      wall1.setXEnd(1352.9066F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4103.649F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4103.649F, wall1.getLength(), 0.01F);
      assertEquals(1352.9066F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2750.7422F), wall1.getXStart(), 0.01F);
      assertEquals((-2750.7422F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-698.9178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setLevel((Level) null);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1375.3711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2750.7422F), wall0.getXStart(), 0.01F);
      assertEquals(2750.7422F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2750.7422F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2750.7422F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall(2051.5732F, 2051.5732F, 3820.953F, 2051.5732F, 2051.5732F);
      assertEquals(1769.3796F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(1769.3796F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2936.2632F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setXStart(3820.953F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(integer0);
      
      wall0.setYStart(2051.5732F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float0 = wall0.getLength();
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, float0, 0.01F);
      
      Float float1 = new Float(1392.0);
      assertEquals(1392.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall1 = new Wall(3820.953F, 673.28394F, 0.0F, 0.0F, (-6.073F));
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3879.8186F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-6.073F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3879.8186F, wall1.getLength(), 0.01F);
      assertEquals(336.64197F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.953F, wall1.getXStart(), 0.01F);
      assertEquals(673.28394F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1910.4764F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = wall0.getHeight();
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNull(float2);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setArcExtent((Float) null);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3879.8186F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-6.073F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3879.8186F, wall1.getLength(), 0.01F);
      assertEquals(336.64197F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.953F, wall1.getXStart(), 0.01F);
      assertEquals(673.28394F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1910.4764F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, (-1461.0F), 0.1F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean1 = wall1.containsWallEndAt((-313.763F), 980.88F, 0.1F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float0 = wall0.getHeightAtEnd();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(float0);
      assertFalse(wall0.equals((Object)wall1));
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall1));
      
      HomeTexture homeTexture2 = wall1.getRightSideTexture();
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture2);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall(5366.0F, (-1227.3F), (-1227.3F), 1.0F, 2.0F, 0.0F);
      assertEquals(6706.7373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5366.0F, wall0.getXStart(), 0.01F);
      assertEquals(2069.35F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1227.3F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(6706.7373F, wall0.getLength(), 0.01F);
      assertEquals((-613.15F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1227.3F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(5366.0F, 2.0F, 1.0F, (-1625.5938F), (-1227.3F));
      assertEquals(5606.45F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2683.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(5366.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1227.3F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(5606.45F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1625.5938F), wall1.getYEnd(), 0.01F);
      assertEquals((-811.7969F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall1.intersectsRectangle((-1625.5938F), (-1625.5938F), 325.1511F, 1.0F);
      assertEquals(5606.45F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2683.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(5366.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1227.3F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(5606.45F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1625.5938F), wall1.getYEnd(), 0.01F);
      assertEquals((-811.7969F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertTrue(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(387.7F);
      assertEquals(387.7F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1353.4945F));
      assertEquals((-1353.4945F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(6706.7373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5366.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1227.3F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2236.655F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(284.91415F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1227.3F), wall0.getXEnd(), 0.01F);
      assertEquals(4704166.0F, wall0.getLength(), 0.01F);
      assertEquals((-1353.4945F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall1.setYEnd((-1227.3F));
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2683.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(5366.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1227.3F), wall1.getThickness(), 0.01F);
      assertEquals((-612.65F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5504.035F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(5504.035F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1227.3F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall0.intersectsRectangle((-1353.4945F), 2.0F, 1.0F, (-28.95082F));
      assertEquals(6706.7373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5366.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1227.3F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2236.655F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(284.91415F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1227.3F), wall0.getXEnd(), 0.01F);
      assertEquals(4704166.0F, wall0.getLength(), 0.01F);
      assertEquals((-1353.4945F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertTrue(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(6706.7373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5366.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1227.3F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2236.655F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(284.91415F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1227.3F), wall0.getXEnd(), 0.01F);
      assertEquals(4704166.0F, wall0.getLength(), 0.01F);
      assertEquals((-1353.4945F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2683.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(5366.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1227.3F), wall1.getThickness(), 0.01F);
      assertEquals((-612.65F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5504.035F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(5504.035F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1227.3F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = wall0.getArcExtent();
      assertEquals(6706.7373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5366.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1227.3F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2236.655F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(284.91415F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1227.3F), wall0.getXEnd(), 0.01F);
      assertEquals(4704166.0F, wall0.getLength(), 0.01F);
      assertEquals((-1353.4945F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1353.4945F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      float float3 = Float.min(5366.0F, 1.0F);
      assertEquals(1.0F, float3, 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertEquals(6706.7373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5366.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1227.3F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2236.655F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(284.91415F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1227.3F), wall0.getXEnd(), 0.01F);
      assertEquals(4704166.0F, wall0.getLength(), 0.01F);
      assertEquals((-1353.4945F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2683.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(5366.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1227.3F), wall1.getThickness(), 0.01F);
      assertEquals((-612.65F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5504.035F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(5504.035F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1227.3F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float4 = wall0.getLength();
      assertEquals(6706.7373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5366.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1227.3F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2236.655F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(284.91415F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1227.3F), wall0.getXEnd(), 0.01F);
      assertEquals(4704166.0F, wall0.getLength(), 0.01F);
      assertEquals((-1353.4945F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(4704166.0F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float3, 0.01F);
      
      wall0.setHeight(float1);
      assertEquals(6706.7373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5366.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1227.3F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2236.655F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(284.91415F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1227.3F), wall0.getXEnd(), 0.01F);
      assertEquals(4704166.0F, wall0.getLength(), 0.01F);
      assertEquals((-1353.4945F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1353.4945F), wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float4, 0.01F);
      
      float float5 = wall0.getStartPointToEndPointDistance();
      assertEquals(6706.7373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5366.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1227.3F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2236.655F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(284.91415F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1227.3F), wall0.getXEnd(), 0.01F);
      assertEquals(4704166.0F, wall0.getLength(), 0.01F);
      assertEquals((-1353.4945F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1353.4945F), wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(6706.7373F, float5, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 528.3F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-0.048267417F), 0.0F, (-843.9F), (-1848.0F), (-843.9F), 0.0F);
      assertEquals((-1848.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-421.97415F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-924.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.048267417F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-843.9F), wall1.getXEnd(), 0.01F);
      assertEquals(2031.5486F, wall1.getLength(), 0.01F);
      assertEquals((-843.9F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2031.5486F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1848.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-421.97415F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-924.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.048267417F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-843.9F), wall1.getXEnd(), 0.01F);
      assertEquals(2031.5486F, wall1.getLength(), 0.01F);
      assertEquals((-843.9F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2031.5486F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1848.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-421.97415F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-924.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.048267417F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-843.9F), wall1.getXEnd(), 0.01F);
      assertEquals(2031.5486F, wall1.getLength(), 0.01F);
      assertEquals((-843.9F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2031.5486F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float((double) 528.3F);
      assertEquals(528.3F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-843.9F));
      assertEquals((-843.9F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.min(691.793F, (-1791.6509F));
      assertEquals((-1791.6509F), float2, 0.01F);
      
      wall1.setArcExtent(float1);
      assertEquals((-1848.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-843.9F), wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-638.9235F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1034534.5F, wall1.getLength(), 0.01F);
      assertEquals((-1046.2797F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.048267417F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-843.9F), wall1.getXEnd(), 0.01F);
      assertEquals((-843.9F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2031.5486F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertEquals((-1848.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-843.9F), wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-638.9235F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1034534.5F, wall1.getLength(), 0.01F);
      assertEquals((-1046.2797F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.048267417F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-843.9F), wall1.getXEnd(), 0.01F);
      assertEquals((-843.9F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2031.5486F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(528.3F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      float[][] floatArray0 = wall2.getPoints();
      assertEquals((-1848.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-843.9F), wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-638.9235F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1034534.5F, wall1.getLength(), 0.01F);
      assertEquals((-1046.2797F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.048267417F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-843.9F), wall1.getXEnd(), 0.01F);
      assertEquals((-843.9F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2031.5486F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(528.3F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.1F, 0.0F, (-1349.896F), 0.0F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setLeftSideShininess(0.1F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean0 = wall0.intersectsRectangle(1106.0F, 1597.1F, 1106.0F, 0.0F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float0 = new Float((double) 1106.0F);
      assertEquals(1106.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall1.setHeight(float1);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall((-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F));
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(integer0);
      
      float float0 = 0.0F;
      float float1 = 1602.183F;
      Wall wall1 = wall0.clone();
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2305.2F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2305.2F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2305.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(integer1, "HEIGHT", wall1, wall0);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2305.2F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2305.2F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2305.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals("HEIGHT", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("HEIGHT", propertyChangeListener0);
      assertEquals("HEIGHT", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2305.2F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2305.2F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2305.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals("HEIGHT", propertyChangeEvent0.getPropertyName());
      assertEquals("HEIGHT", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.clone();
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2305.2F), wall2.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2305.2F), wall2.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall2.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2305.2F), wall2.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals("HEIGHT", propertyChangeListenerProxy0.getPropertyName());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2305.2F), wall2.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2305.2F), wall2.getXEnd(), 0.01F);
      assertEquals((-2305.2F), wall2.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2305.2F), wall2.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float2 = wall1.getXEnd();
      assertEquals((-2305.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2305.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2305.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2305.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2305.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2305.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2305.2F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2305.2F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2305.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-2305.2F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2305.2F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-2305.2F), float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("E\"LL:*>H0bV4KZz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.E\"LL:*>H0bV4KZz
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall((-2230.836F), (-2230.836F), 0.0F, 0.1F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3154.9492F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2230.836F), wall0.getXStart(), 0.01F);
      assertEquals((-2230.836F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1115.3679F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3154.9492F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1115.418F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3154.9492F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2230.836F), wall0.getXStart(), 0.01F);
      assertEquals((-2230.836F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1115.3679F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3154.9492F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1115.418F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2230.836F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1115.418F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3154.9492F, wall1.getLength(), 0.01F);
      assertEquals((-2230.836F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertEquals((-1115.3679F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3154.9492F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setThickness(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3154.9492F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2230.836F), wall0.getXStart(), 0.01F);
      assertEquals((-2230.836F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1115.3679F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3154.9492F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1115.418F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2230.836F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1115.418F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3154.9492F, wall1.getLength(), 0.01F);
      assertEquals((-2230.836F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertEquals((-1115.3679F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3154.9492F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 1519.382F, 1.0F, 1.0F, 1.0F, 0.0F);
      assertEquals(760.191F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1518.3822F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1518.3822F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1519.382F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(760.191F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1518.3822F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1518.3822F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1519.382F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1518.3822F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1518.3822F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(1519.382F, wall1.getYStart(), 0.01F);
      assertEquals(760.191F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd(1.0F);
      assertEquals(760.191F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1518.3822F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1518.3822F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1519.382F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1518.3822F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1518.3822F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(1519.382F, wall1.getYStart(), 0.01F);
      assertEquals(760.191F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(wall0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Wall wall1 = new Wall(3564.68F, 3564.68F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(5041.2188F, wall1.getLength(), 0.01F);
      assertEquals(3564.68F, wall1.getYStart(), 0.01F);
      assertEquals(5041.2188F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1782.34F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3564.68F, wall1.getXStart(), 0.01F);
      assertEquals(1782.34F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(5041.2188F, wall1.getLength(), 0.01F);
      assertEquals(3564.68F, wall1.getYStart(), 0.01F);
      assertEquals(5041.2188F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1782.34F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3564.68F, wall1.getXStart(), 0.01F);
      assertEquals(1782.34F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(5041.2188F, wall1.getLength(), 0.01F);
      assertEquals(3564.68F, wall1.getYStart(), 0.01F);
      assertEquals(5041.2188F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1782.34F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3564.68F, wall1.getXStart(), 0.01F);
      assertEquals(1782.34F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(5041.2188F, wall1.getLength(), 0.01F);
      assertEquals(3564.68F, wall1.getYStart(), 0.01F);
      assertEquals(5041.2188F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1782.34F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3564.68F, wall1.getXStart(), 0.01F);
      assertEquals(1782.34F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall(250.6536F, (-815.80774F), (-815.80774F), 2559.7F, 250.6536F, (-815.80774F));
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(1.0F);
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertNull(integer0);
      
      boolean boolean0 = wall0.intersectsRectangle(2559.7F, 0.0F, 2559.7F, 0.0F);
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setYEnd((-3609.95F));
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2212.879F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3609.95F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2990.7476F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertEquals(2990.7476F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2212.879F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3609.95F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2990.7476F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertEquals(2990.7476F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-815.80774F), wall1.getYStart(), 0.01F);
      assertEquals(2990.7476F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall1.getThickness(), 0.01F);
      assertEquals(250.6536F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall1.getXEnd(), 0.01F);
      assertEquals((-3609.95F), wall1.getYEnd(), 0.01F);
      assertEquals((-815.80774F), wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2212.879F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2990.7476F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-282.5771F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float((-1728.6168586));
      assertEquals((-1728.6168F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeightAtEnd((Float) null);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2212.879F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3609.95F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2990.7476F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertEquals(2990.7476F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-815.80774F), wall1.getYStart(), 0.01F);
      assertEquals(2990.7476F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall1.getThickness(), 0.01F);
      assertEquals(250.6536F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall1.getXEnd(), 0.01F);
      assertEquals((-3609.95F), wall1.getYEnd(), 0.01F);
      assertEquals((-815.80774F), wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2212.879F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2990.7476F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-282.5771F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setYEnd(0.0F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals((-407.90387F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(1342.7145F, wall0.getLength(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1342.7145F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals((-407.90387F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(1342.7145F, wall0.getLength(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1342.7145F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall1.clone();
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals((-407.90387F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(1342.7145F, wall0.getLength(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1342.7145F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-815.80774F), wall1.getYStart(), 0.01F);
      assertEquals(2990.7476F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall1.getThickness(), 0.01F);
      assertEquals(250.6536F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall1.getXEnd(), 0.01F);
      assertEquals((-3609.95F), wall1.getYEnd(), 0.01F);
      assertEquals((-815.80774F), wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2212.879F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2990.7476F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-282.5771F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2990.7476F, wall2.getLength(), 0.01F);
      assertEquals(250.6536F, wall2.getThickness(), 0.01F);
      assertEquals((-815.80774F), wall2.getYStart(), 0.01F);
      assertEquals((-2212.879F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-282.5771F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-815.80774F), wall2.getXEnd(), 0.01F);
      assertEquals((-815.80774F), wall2.getHeight(), 0.01F);
      assertEquals(250.6536F, wall2.getXStart(), 0.01F);
      assertEquals((-3609.95F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2990.7476F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals((-407.90387F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(1342.7145F, wall0.getLength(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1342.7145F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals((-282.5771F), float1, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      float float2 = wall0.getLeftSideShininess();
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals((-407.90387F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(1342.7145F, wall0.getLength(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1342.7145F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float2, float1, 0.01F);
      
      Wall wall3 = wall2.getWallAtStart();
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertEquals((-407.90387F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(1342.7145F, wall0.getLength(), 0.01F);
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1342.7145F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-815.80774F), wall1.getYStart(), 0.01F);
      assertEquals(2990.7476F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall1.getThickness(), 0.01F);
      assertEquals(250.6536F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall1.getXEnd(), 0.01F);
      assertEquals((-3609.95F), wall1.getYEnd(), 0.01F);
      assertEquals((-815.80774F), wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2212.879F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2990.7476F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-282.5771F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2990.7476F, wall2.getLength(), 0.01F);
      assertEquals(250.6536F, wall2.getThickness(), 0.01F);
      assertEquals((-815.80774F), wall2.getYStart(), 0.01F);
      assertEquals((-2212.879F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-282.5771F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-815.80774F), wall2.getXEnd(), 0.01F);
      assertEquals((-815.80774F), wall2.getHeight(), 0.01F);
      assertEquals(250.6536F, wall2.getXStart(), 0.01F);
      assertEquals((-3609.95F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2990.7476F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(wall3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(0.0F, 0.07153723F);
      assertEquals(0.07153723F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.07153723F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.07153723F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.07153723F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.07153723F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.07153723F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.07153723F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.07153723F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.07153723F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Level level0 = new Level("eWNH!OH[ph:Tkd6^B", 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("eWNH!OH[ph:Tkd6^B", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("eWNH!OH[ph:Tkd6^B", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("eWNH!OH[ph:Tkd6^B", level1.getName());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall1.isAtLevel(level0);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("eWNH!OH[ph:Tkd6^B", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(4196.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4196.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4196.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(boolean0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4196.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4196.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4196.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(4196.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setLeftSideShininess(0.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(float0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(3.0496716499328613E-4);
      assertEquals(3.0496716E-4F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3.0496716E-4F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3.0496716E-4F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float float0 = 1.0F;
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Float float1 = new Float(2727.0F);
      assertEquals(2727.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = (-3435.0376F);
      Wall wall0 = new Wall(1.0F, (-3435.0376F), (-3435.0376F), 1.0F, (-3435.0376F));
      assertEquals(4859.291F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1717.0188F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3435.0376F), wall0.getXEnd(), 0.01F);
      assertEquals((-1717.0188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3435.0376F), wall0.getYStart(), 0.01F);
      assertEquals(4859.291F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setArcExtent(float1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.35857696E8F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3435.0376F), wall0.getXEnd(), 0.01F);
      assertEquals((-36902.79F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2727.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3435.0376F), wall0.getYStart(), 0.01F);
      assertEquals(4859.291F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36902.79F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      float float3 = 2.0F;
      wall0.intersectsRectangle(float0, float0, float3, float3);
      Wall wall1 = new Wall(float0, float0, float2, float0, float0);
      wall0.getArcExtent();
      Float float4 = new Float(float0);
      double double0 = 1.0E-10;
      Float float5 = new Float(double0);
      wall1.setArcExtent(float5);
      wall0.getPoints();
      Wall.Property.values();
      int int0 = (-3221);
      Integer integer0 = new Integer(int0);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, float0, 0.01F);
      
      Integer integer0 = new Integer(721);
      assertEquals(721, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(721, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 2520.127F, 0.1F, 2520.127F, 2520.127F, 1259.0988F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-4182.4F), 0.0F, 0.1F, 0.1F, 1259.0988F);
      assertEquals((-4182.4F), wall1.getXStart(), 0.01F);
      assertEquals((-2091.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4182.5F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1259.0988F, wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(4182.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4182.4F), wall1.getXStart(), 0.01F);
      assertEquals((-2091.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4182.5F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1259.0988F, wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(4182.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float((double) 1259.0988F);
      assertEquals(1259.0988F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1259.0988F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setYEnd((-759.2F));
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-759.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1259.0988F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2189818.2F, wall0.getLength(), 0.01F);
      assertEquals(3279.327F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(580.0164F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(880.4635F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean0 = wall0.intersectsRectangle((-1.0F), 2520.127F, (-9.0F), 1259.0988F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-759.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1259.0988F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2189818.2F, wall0.getLength(), 0.01F);
      assertEquals(3279.327F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(580.0164F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(880.4635F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float1 = wall1.getArcExtent();
      assertEquals((-4182.4F), wall1.getXStart(), 0.01F);
      assertEquals((-2091.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4182.5F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1259.0988F, wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(4182.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertNull(float1);
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = Float.min(1718.05F, (-9.0F));
      assertEquals((-9.0F), float2, 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-759.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1259.0988F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2189818.2F, wall0.getLength(), 0.01F);
      assertEquals(3279.327F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(580.0164F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(880.4635F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4182.4F), wall1.getXStart(), 0.01F);
      assertEquals((-2091.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4182.5F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1259.0988F, wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(4182.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float3 = wall0.getLength();
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-759.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1259.0988F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2189818.2F, wall0.getLength(), 0.01F);
      assertEquals(3279.327F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(580.0164F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(880.4635F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(2189818.2F, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float2, 0.01F);
      
      Float float4 = wall0.getHeight();
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-759.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1259.0988F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2189818.2F, wall0.getLength(), 0.01F);
      assertEquals(3279.327F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(580.0164F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(880.4635F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(1259.0988F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      wall1.setHeight((Float) null);
      assertEquals((-4182.4F), wall1.getXStart(), 0.01F);
      assertEquals((-2091.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4182.5F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1259.0988F, wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(4182.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float5 = wall0.getStartPointToEndPointDistance();
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-759.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1259.0988F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2189818.2F, wall0.getLength(), 0.01F);
      assertEquals(3279.327F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.0988F, wall0.getHeight(), 0.01F);
      assertEquals(580.0164F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(880.4635F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(3279.327F, float5, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Wall wall0 = new Wall((-1349.896F), (-1349.896F), 0.0F, 0.01F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1909.0483F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-674.943F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1909.0483F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1909.0483F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-674.943F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1909.0483F, wall0.getLength(), 0.01F);
      assertEquals(1909.0483F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(1909.0483F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.943F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean2 = wall1.containsWallEndAt(1.0F, 1.0F, (-623.25F));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1909.0483F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-674.943F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1909.0483F, wall0.getLength(), 0.01F);
      assertEquals(1909.0483F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(1909.0483F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.943F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(boolean2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = wall1.intersectsRectangle(1.0F, 1.0F, (-998.0F), 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1909.0483F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-674.943F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1909.0483F, wall0.getLength(), 0.01F);
      assertEquals(1909.0483F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(1909.0483F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.943F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertTrue(boolean3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1909.0483F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-674.943F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1909.0483F, wall0.getLength(), 0.01F);
      assertEquals(1909.0483F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(1909.0483F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.943F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-674.948F), float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1349.896F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1909.0483F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-674.943F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-674.948F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1349.896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1909.0483F, wall0.getLength(), 0.01F);
      assertEquals(1909.0483F, wall1.getLength(), 0.01F);
      assertEquals((-1349.896F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1349.896F), wall1.getYStart(), 0.01F);
      assertEquals(1909.0483F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-674.948F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.943F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall(1642.3F, 1.0F, 0.01F, (-1243.6664F), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1243.6664F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(821.155F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-621.3332F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1642.3F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2060.658F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2060.658F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1243.6664F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(821.155F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-621.3332F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1642.3F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2060.658F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2060.658F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 529.48804F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.move(529.48804F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(529.48804F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertEquals(529.48804F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(529.48804F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(529.48804F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertEquals(529.48804F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(529.48804F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(529.48804F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertEquals(529.48804F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(529.48804F, wall0.getXArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(529.48804F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertEquals(529.48804F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(529.48804F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 528.3F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      
      Wall wall1 = new Wall((-719.8896F), (-719.8896F), 0.0F, 0.0F, 0.1F);
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-359.9448F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-359.9448F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      wall1.setArcExtent(float2);
      assertEquals(5.8783449E18F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals((-5.8783449E18F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5.8783449E18F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals((-5.8783449E18F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5.8783449E18F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-719.8896F), wall1.getYStart(), 0.01F);
      assertEquals(1018.07764F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1018.07764F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals((-5.8783449E18F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-719.8896F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 2051.5732F, 0.0F, 1.0F, 1.0F, 0.0F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 1.0F, 1.0F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(homeTexture0);
      
      float float0 = wall0.getXStart();
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, float0, 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 1258.3762F, 0.0F, 2295.3481F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1258.3762F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1258.3762F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1258.3762F, wall1.getXEnd(), 0.01F);
      assertEquals(629.1881F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2295.3481F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.clone();
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2050.5735F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(1026.2866F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall1, "[ d^OX", propertyChangeListenerProxy0, wall2);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1258.3762F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1258.3762F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1258.3762F, wall1.getXEnd(), 0.01F);
      assertEquals(629.1881F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2295.3481F, wall1.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2050.5735F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(1026.2866F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals("[ d^OX", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.move(0.0F, 47.34F);
      assertEquals(47.34F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1258.3762F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(47.34F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(47.34F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1258.3762F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1258.3762F, wall1.getXEnd(), 0.01F);
      assertEquals(629.1881F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2295.3481F, wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      float float1 = wall2.getStartPointToEndPointDistance();
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2050.5735F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(1026.2866F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(2050.5735F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float1, float0, 0.01F);
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      wall2.setArcExtent(float2);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.6744201E19F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-8.1656197E15F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2050.5735F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Wall wall3 = wall1.clone();
      assertEquals(47.34F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1258.3762F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(47.34F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(47.34F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1258.3762F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1258.3762F, wall1.getXEnd(), 0.01F);
      assertEquals(629.1881F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2295.3481F, wall1.getThickness(), 0.01F);
      assertEquals(47.34F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(47.34F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(1258.3762F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2295.3481F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(1258.3762F, wall3.getLength(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(1258.3762F, wall3.getXEnd(), 0.01F);
      assertEquals(629.1881F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(47.34F, wall3.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotNull(wall3);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      
      wall3.setYEnd((-1.0F));
      assertEquals(47.34F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1258.3762F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(47.34F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(47.34F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1258.3762F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1258.3762F, wall1.getXEnd(), 0.01F);
      assertEquals(629.1881F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2295.3481F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals(47.34F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(1259.3043F, wall3.getLength(), 0.01F);
      assertEquals(1259.3043F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2295.3481F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(1258.3762F, wall3.getXEnd(), 0.01F);
      assertEquals(629.1881F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(23.17F, wall3.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      
      wall2.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.6744201E19F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-8.1656197E15F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2050.5735F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      
      Level level0 = new Level((String) null, (-1.0F), (-1994.219F), 697.14954F);
      assertTrue(level0.isVisible());
      assertEquals(697.14954F, level0.getHeight(), 0.01F);
      assertEquals((-1994.219F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertTrue(level0.isVisible());
      assertEquals(697.14954F, level0.getHeight(), 0.01F);
      assertEquals((-1994.219F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertEquals(697.14954F, level1.getHeight(), 0.01F);
      assertEquals((-1994.219F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertTrue(level0.isVisible());
      assertEquals(697.14954F, level0.getHeight(), 0.01F);
      assertEquals((-1994.219F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(level1.getName());
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertEquals(697.14954F, level1.getHeight(), 0.01F);
      assertEquals((-1994.219F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotSame(level0, level1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(level1, level0);
      assertFalse(boolean1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, (-1461.0F), 0.1F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", resourceURLContent0, (-1461.0F), 0.0F, "");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertEquals("", catalogTexture0.getId());
      assertEquals("", catalogTexture0.getCreator());
      assertEquals((-1461.0F), catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertEquals("", catalogTexture0.getId());
      assertEquals("", catalogTexture0.getCreator());
      assertEquals((-1461.0F), catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1461.0F), homeTexture0.getWidth(), 0.01F);
      assertEquals("", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertNotNull(homeTexture0);
      
      wall1.setRightSideTexture(homeTexture0);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertEquals("", catalogTexture0.getId());
      assertEquals("", catalogTexture0.getCreator());
      assertEquals((-1461.0F), catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1461.0F), homeTexture0.getWidth(), 0.01F);
      assertEquals("", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = wall1.getStartPointToEndPointDistance();
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(1461.1F, float0, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = wall1.getLeftSideShininess();
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float1, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1299.42F), 0.0F, (-1.0F));
      assertEquals(1299.4204F, wall0.getLength(), 0.01F);
      assertEquals((-1299.42F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-649.71F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1299.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals(1299.4204F, wall0.getLength(), 0.01F);
      assertEquals((-1299.42F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-649.71F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1299.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall1);
      
      boolean boolean0 = linkedList0.add((Wall) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(wall0));
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(1, linkedList0.size());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall((-2104.0F), 453.1F, (-2104.0F), (-2104.0F), 453.1F);
      assertEquals(2557.1F, wall0.getLength(), 0.01F);
      assertEquals((-2104.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-825.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2104.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2104.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(453.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2104.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(453.1F, wall0.getYStart(), 0.01F);
      assertEquals(2557.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(64);
      assertEquals(64, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(2557.1F, wall0.getLength(), 0.01F);
      assertEquals((-2104.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-825.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2104.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2104.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(453.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2104.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64, (int)wall0.getLeftSideColor());
      assertEquals(453.1F, wall0.getYStart(), 0.01F);
      assertEquals(2557.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Wall wall0 = new Wall(0.5951248F, 0.5951248F, 0.5951248F, 0.5951248F, 0.5951248F);
      assertEquals(0.5951248F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.5951248F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5951248F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5951248F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.5951248F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5951248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5951248F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.5951248F);
      assertEquals(0.5951248F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.5951248F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.5951248F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5951248F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5951248F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5951248F, wall0.getYStart(), 0.01F);
      assertEquals(0.5951248F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5951248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5951248F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall(1.0F, 2051.5732F, 0.0F, 1.0F, 1.0F, 0.0F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      float float1 = 3305.9958F;
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 1.0F, 3305.9958F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertTrue(boolean0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(homeTexture0);
      
      float float2 = wall0.getXStart();
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      float float3 = 1258.3762F;
      Wall wall1 = new Wall(0.0F, 0.0F, 1258.3762F, 0.0F, 2295.3481F);
      assertEquals(1258.3762F, wall1.getLength(), 0.01F);
      assertEquals(1258.3762F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(629.1881F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1258.3762F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2295.3481F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.clone();
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(1026.2866F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(2050.5735F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2050.5735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall1, "[ d^OX", propertyChangeListenerProxy0, wall2);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(1258.3762F, wall1.getLength(), 0.01F);
      assertEquals(1258.3762F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(629.1881F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1258.3762F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2295.3481F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(1026.2866F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(2050.5735F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2050.5735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals("[ d^OX", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(1258.3762F, wall1.getLength(), 0.01F);
      assertEquals(1258.3762F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(629.1881F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1258.3762F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2295.3481F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(1026.2866F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(2050.5735F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2050.5735F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals("[ d^OX", propertyChangeEvent0.getPropertyName());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      float float4 = wall0.getXEnd();
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2050.5735F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1026.2866F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2050.5735F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("com.eteks.sweethome3d.tools.TemporaryURLContent");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.com.eteks.sweethome3d.tools.TemporaryURLContent
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Wall wall0 = new Wall(21.48986F, 0.1F, 21.48986F, 0.1F, 21.48986F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertEquals(21.48986F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(21.48986F, 21.48986F, 21.48986F, 0.1F, 0.1F);
      assertEquals(21.48986F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(21.38986F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(10.79493F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(21.48986F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(21.48986F, wall1.getXStart(), 0.01F);
      assertEquals(21.38986F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(21.48986F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(21.48986F);
      assertEquals(21.48986F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall2 = new Wall(21.48986F, 0.1F, 21.48986F, 21.48986F, 0.1F, 21.48986F);
      assertEquals(21.48986F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(10.79493F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(21.48986F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(21.48986F, wall2.getHeight(), 0.01F);
      assertEquals(21.38986F, wall2.getLength(), 0.01F);
      assertEquals(21.38986F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(21.48986F, wall2.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall0.setWallAtEnd(wall2);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertEquals(21.48986F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21.48986F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(10.79493F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(21.48986F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(21.48986F, wall2.getHeight(), 0.01F);
      assertEquals(21.38986F, wall2.getLength(), 0.01F);
      assertEquals(21.38986F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(21.48986F, wall2.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall2.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertEquals(21.48986F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21.48986F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(10.79493F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(21.48986F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(21.48986F, wall2.getHeight(), 0.01F);
      assertEquals(21.38986F, wall2.getLength(), 0.01F);
      assertEquals(21.38986F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(21.48986F, wall2.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(21.48986F, wall0.getThickness(), 0.01F);
      assertEquals(21.48986F, wall0.getXStart(), 0.01F);
      assertEquals(21.48986F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(21.48986F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Wall wall0 = new Wall((-1858.0514F), (-1636.89F), 0.01F, (-313.763F), (-313.763F), (-1858.0514F));
      assertNull(wall0.getRightSideColor());
      assertEquals(2281.021F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1858.0514F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-929.0207F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-313.763F), wall0.getThickness(), 0.01F);
      assertEquals(2281.021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-975.32654F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1636.89F), wall0.getYStart(), 0.01F);
      assertEquals((-1858.0514F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-313.763F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      boolean boolean1 = wall0.containsWallStartAt(0.7537297F, 1099.036F, 1.0F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2281.021F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1858.0514F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-929.0207F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-313.763F), wall0.getThickness(), 0.01F);
      assertEquals(2281.021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-975.32654F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1636.89F), wall0.getYStart(), 0.01F);
      assertEquals((-1858.0514F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-313.763F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = wall0.intersectsRectangle(1099.036F, 528.3F, 0.0F, (-313.763F));
      assertNull(wall0.getRightSideColor());
      assertEquals(2281.021F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1858.0514F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-929.0207F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-313.763F), wall0.getThickness(), 0.01F);
      assertEquals(2281.021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-975.32654F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1636.89F), wall0.getYStart(), 0.01F);
      assertEquals((-1858.0514F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-313.763F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Float float0 = new Float(0.1F);
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1858.0514F), wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2281.9717F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-313.763F), wall0.getThickness(), 0.01F);
      assertEquals(2281.021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1636.89F), wall0.getYStart(), 0.01F);
      assertEquals(17589.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-14149.263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1858.0514F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-313.763F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall(1.0F, (-1858.0514F), 3312.98F, 0.1F, (-1636.89F));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-928.9757F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1656.99F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3797.6226F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1636.89F), wall1.getThickness(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYStart(), 0.01F);
      assertEquals(3797.6226F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(3312.98F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd(1767.1F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1656.99F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4910.2886F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4910.2886F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1636.89F), wall1.getThickness(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYStart(), 0.01F);
      assertEquals(1767.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-45.475708F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3312.98F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean3 = wall0.intersectsRectangle(2.0F, (-1625.5938F), (-1636.89F), 2462.0F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1858.0514F), wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2281.9717F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-313.763F), wall0.getThickness(), 0.01F);
      assertEquals(2281.021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1636.89F), wall0.getYStart(), 0.01F);
      assertEquals(17589.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-14149.263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1858.0514F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-313.763F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertTrue(boolean3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1858.0514F), wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2281.9717F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-313.763F), wall0.getThickness(), 0.01F);
      assertEquals(2281.021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1636.89F), wall0.getYStart(), 0.01F);
      assertEquals(17589.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-14149.263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1858.0514F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-313.763F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1656.99F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4910.2886F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4910.2886F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1636.89F), wall1.getThickness(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYStart(), 0.01F);
      assertEquals(1767.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-45.475708F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3312.98F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall0.getArcExtent();
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1858.0514F), wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2281.9717F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-313.763F), wall0.getThickness(), 0.01F);
      assertEquals(2281.021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1636.89F), wall0.getYStart(), 0.01F);
      assertEquals(17589.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-14149.263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1858.0514F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-313.763F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float2 = new Float((-3325.191F));
      assertEquals((-3325.191F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float((-29.0F));
      assertEquals((-29.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      wall1.setArcExtent(float3);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(583.20557F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(76157.41F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4910.2886F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1636.89F), wall1.getThickness(), 0.01F);
      assertEquals(968.8624F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-29.0F), wall1.getArcExtent(), 0.01F);
      assertEquals((-1858.0514F), wall1.getYStart(), 0.01F);
      assertEquals(1767.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(3312.98F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      Wall wall2 = new Wall(0.1F, 0.0F, 2013.3651F, 0.1F, (-29.0F));
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(2013.3651F, wall2.getXEnd(), 0.01F);
      assertEquals(2013.2651F, wall2.getLength(), 0.01F);
      assertEquals(2013.2651F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1006.73254F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals((-29.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      float float4 = wall2.getXArcCircleCenter();
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(2013.3651F, wall2.getXEnd(), 0.01F);
      assertEquals(2013.2651F, wall2.getLength(), 0.01F);
      assertEquals(2013.2651F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1006.73254F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals((-29.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(1006.73254F, float4, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      float[][] floatArray0 = wall2.getPoints();
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(2013.3651F, wall2.getXEnd(), 0.01F);
      assertEquals(2013.2651F, wall2.getLength(), 0.01F);
      assertEquals(2013.2651F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1006.73254F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals((-29.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(integer0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Wall wall0 = new Wall((-824.2772F), -0.0F, 0.1F, -0.0F, (-1625.5938F), 0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(824.3772F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(-0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(824.3772F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(-0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(-0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-412.08862F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-824.2772F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = wall0.containsWallStartAt((-1.0F), (-1.0F), (-313.763F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(824.3772F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(-0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(824.3772F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(-0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(-0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-412.08862F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-824.2772F), wall0.getXStart(), 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(824.3772F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(-0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(824.3772F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(-0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(-0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-412.08862F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-824.2772F), wall0.getXStart(), 0.01F);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(824.3772F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(-0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(824.3772F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(-0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(-0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-412.08862F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-824.2772F), wall0.getXStart(), 0.01F);
      assertEquals(-0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-412.08862F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(824.3772F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(-0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(-0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(824.3772F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-824.2772F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(0.1F);
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall2 = new Wall((-1858.0514F), (-1625.5938F), (-824.2772F), 1.1310453F, (-1183.2F));
      assertEquals((-1341.1643F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1927.4135F, wall2.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1183.2F), wall2.getThickness(), 0.01F);
      assertEquals(1927.4135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-824.2772F), wall2.getXEnd(), 0.01F);
      assertEquals((-812.2313F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1858.0514F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.1310453F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall0.setWallAtEnd(wall2);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(824.3772F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(-0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(824.3772F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(-0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(-0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-412.08862F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-824.2772F), wall0.getXStart(), 0.01F);
      assertEquals((-1341.1643F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1927.4135F, wall2.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1183.2F), wall2.getThickness(), 0.01F);
      assertEquals(1927.4135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-824.2772F), wall2.getXEnd(), 0.01F);
      assertEquals((-812.2313F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1858.0514F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.1310453F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      boolean boolean3 = wall2.containsPoint((-1183.2F), (-342.317F), (-1.0F));
      assertEquals((-1341.1643F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1927.4135F, wall2.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1183.2F), wall2.getThickness(), 0.01F);
      assertEquals(1927.4135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-824.2772F), wall2.getXEnd(), 0.01F);
      assertEquals((-812.2313F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1858.0514F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.1310453F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(boolean3);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      wall0.setWallAtEnd(wall2);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(824.3772F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(-0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(824.3772F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(-0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(-0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-412.08862F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-824.2772F), wall0.getXStart(), 0.01F);
      assertEquals((-1341.1643F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1927.4135F, wall2.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1183.2F), wall2.getThickness(), 0.01F);
      assertEquals(1927.4135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-824.2772F), wall2.getXEnd(), 0.01F);
      assertEquals((-812.2313F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1858.0514F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.1310453F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall2.setWallAtStart(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(824.3772F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(-0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(824.3772F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(-0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(-0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-412.08862F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-824.2772F), wall0.getXStart(), 0.01F);
      assertEquals((-1341.1643F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1927.4135F, wall2.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1183.2F), wall2.getThickness(), 0.01F);
      assertEquals(1927.4135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-824.2772F), wall2.getXEnd(), 0.01F);
      assertEquals((-812.2313F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1858.0514F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.1310453F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall0.setWallAtStart(wall2);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(824.3772F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(-0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(824.3772F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(-0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(-0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-412.08862F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-824.2772F), wall0.getXStart(), 0.01F);
      assertEquals((-1341.1643F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1927.4135F, wall2.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1183.2F), wall2.getThickness(), 0.01F);
      assertEquals(1927.4135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-824.2772F), wall2.getXEnd(), 0.01F);
      assertEquals((-812.2313F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1858.0514F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.1310453F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      HomeTexture homeTexture0 = wall2.getRightSideTexture();
      assertEquals((-1341.1643F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1927.4135F, wall2.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1183.2F), wall2.getThickness(), 0.01F);
      assertEquals(1927.4135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-824.2772F), wall2.getXEnd(), 0.01F);
      assertEquals((-812.2313F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1858.0514F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.1310453F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(homeTexture0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      float[][] floatArray0 = wall2.getPoints();
      assertEquals((-1341.1643F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1927.4135F, wall2.getLength(), 0.01F);
      assertEquals((-1625.5938F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1183.2F), wall2.getThickness(), 0.01F);
      assertEquals(1927.4135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-824.2772F), wall2.getXEnd(), 0.01F);
      assertEquals((-812.2313F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1858.0514F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.1310453F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 2164.556F, 2164.556F, (-1625.5938F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(3061.003F, wall0.getLength(), 0.01F);
      assertEquals(1082.328F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3061.003F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1625.5938F));
      assertEquals((-1625.5938F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setYStart(2164.556F);
      assertEquals(2164.4558F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(2164.556F, wall0.getYStart(), 0.01F);
      assertEquals(2164.556F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2164.4558F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      
      Float float2 = new Float(1.0E-5);
      assertEquals(1.0E-5F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float(0.1F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      wall0.setArcExtent(float3);
      assertEquals(2164.4558F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2165.3582F, wall0.getLength(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(2164.556F, wall0.getYStart(), 0.01F);
      assertEquals(23791.076F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "applicationSubFolder");
      assertFalse(boolean0);
      
      float float4 = Float.min(0.1F, 0.1F);
      assertEquals(0.1F, float4, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(2164.4558F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2165.3582F, wall0.getLength(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(2164.556F, wall0.getYStart(), 0.01F);
      assertEquals(23791.076F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1082.328F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(23791.076F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(2164.556F, wall1.getYEnd(), 0.01F);
      assertEquals(2164.556F, wall1.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertEquals(2164.556F, wall1.getYStart(), 0.01F);
      assertEquals(2164.4558F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2165.3582F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      float float5 = wall1.getLength();
      assertEquals(2164.4558F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2165.3582F, wall0.getLength(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(2164.556F, wall0.getYStart(), 0.01F);
      assertEquals(23791.076F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1082.328F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(23791.076F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(2164.556F, wall1.getYEnd(), 0.01F);
      assertEquals(2164.556F, wall1.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertEquals(2164.556F, wall1.getYStart(), 0.01F);
      assertEquals(2164.4558F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2165.3582F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2165.3582F, float5, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float5, float4, 0.01F);
      
      Integer integer0 = new Integer(651);
      assertEquals(651, (int)integer0);
      assertNotNull(integer0);
      
      wall1.setLeftSideColor(integer0);
      assertEquals(2164.4558F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2165.3582F, wall0.getLength(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(2164.556F, wall0.getYStart(), 0.01F);
      assertEquals(23791.076F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1082.328F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(23791.076F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(2164.556F, wall1.getYEnd(), 0.01F);
      assertEquals(651, (int)wall1.getLeftSideColor());
      assertEquals(2164.556F, wall1.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertEquals(2164.556F, wall1.getYStart(), 0.01F);
      assertEquals(2164.4558F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2165.3582F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer1 = wall1.getLeftSideColor();
      assertEquals(2164.4558F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2165.3582F, wall0.getLength(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(2164.556F, wall0.getYStart(), 0.01F);
      assertEquals(23791.076F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1082.328F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(23791.076F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(2164.556F, wall1.getYEnd(), 0.01F);
      assertEquals(651, (int)wall1.getLeftSideColor());
      assertEquals(2164.556F, wall1.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertEquals(2164.556F, wall1.getYStart(), 0.01F);
      assertEquals(2164.4558F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2165.3582F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(651, (int)integer1);
      assertNotNull(integer1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setRightSideColor(integer1);
      assertEquals(2164.4558F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(651, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2165.3582F, wall0.getLength(), 0.01F);
      assertEquals(2164.556F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2164.556F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1625.5938F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(2164.556F, wall0.getYStart(), 0.01F);
      assertEquals(23791.076F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1082.328F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1082.328F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(23791.076F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(2164.556F, wall1.getYEnd(), 0.01F);
      assertEquals(651, (int)wall1.getLeftSideColor());
      assertEquals(2164.556F, wall1.getXEnd(), 0.01F);
      assertEquals((-1625.5938F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertEquals(2164.556F, wall1.getYStart(), 0.01F);
      assertEquals(2164.4558F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2165.3582F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Wall wall0 = new Wall(2520.127F, 2520.127F, 387.7F, 2520.127F, 1.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1453.9135F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2132.427F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(387.7F, wall0.getXEnd(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      assertEquals(2132.427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1453.9135F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2132.427F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(387.7F, wall0.getXEnd(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      assertEquals(2132.427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(level0);
      
      Wall wall1 = new Wall(387.7F, 387.7F, 1.0F, (-3527.1035F), 1.0F, 2520.127F);
      assertEquals(2520.127F, wall1.getHeight(), 0.01F);
      assertEquals(3933.856F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3933.856F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(387.7F, wall1.getXStart(), 0.01F);
      assertEquals(194.35F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1569.7018F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3527.1035F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(387.7F, wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertEquals(2520.127F, wall1.getHeight(), 0.01F);
      assertEquals(3933.856F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3933.856F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(387.7F, wall1.getXStart(), 0.01F);
      assertEquals(194.35F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1569.7018F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3527.1035F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(387.7F, wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setPattern((TextureImage) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1453.9135F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2132.427F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(387.7F, wall0.getXEnd(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      assertEquals(2132.427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer0 = new Integer(2147038107);
      assertEquals(2147038107, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(1453.9135F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2132.427F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.127F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2520.127F, wall0.getYStart(), 0.01F);
      assertEquals(2147038107, (int)wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(387.7F, wall0.getXEnd(), 0.01F);
      assertEquals(2520.127F, wall0.getXStart(), 0.01F);
      assertEquals(2132.427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float0 = wall1.getXArcCircleCenter();
      assertEquals(2520.127F, wall1.getHeight(), 0.01F);
      assertEquals(3933.856F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3933.856F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(387.7F, wall1.getXStart(), 0.01F);
      assertEquals(194.35F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1569.7018F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3527.1035F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(387.7F, wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(194.35F, float0, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(homeTexture0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(homeTexture1);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-4820.749F), (-1.0F), 1.0F, (-4820.749F), 334.53F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4821.7495F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2409.8745F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.53F, wall0.getHeight(), 0.01F);
      assertEquals(4821.7495F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4820.749F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4820.749F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-3.9372566E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4821.7495F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.53F, wall0.getHeight(), 0.01F);
      assertEquals(4821.7495F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4820.749F), wall0.getYStart(), 0.01F);
      assertEquals((-1.63312384E16F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4820.749F), wall0.getThickness(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m");
      assertFalse(boolean0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-3.9372566E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4821.7495F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.53F, wall0.getHeight(), 0.01F);
      assertEquals(4821.7495F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4820.749F), wall0.getYStart(), 0.01F);
      assertEquals((-1.63312384E16F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4820.749F), wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-3.9372566E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4821.7495F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.53F, wall0.getHeight(), 0.01F);
      assertEquals(4821.7495F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4820.749F), wall0.getYStart(), 0.01F);
      assertEquals((-1.63312384E16F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4820.749F), wall0.getThickness(), 0.01F);
      
      Float float1 = wall0.getArcExtent();
      assertEquals((-3.9372566E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4821.7495F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.53F, wall0.getHeight(), 0.01F);
      assertEquals(4821.7495F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4820.749F), wall0.getYStart(), 0.01F);
      assertEquals((-1.63312384E16F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4820.749F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setYEnd((-4820.749F));
      assertEquals((-4820.749F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.53F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4820.749F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.63312395E16F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4820.749F), wall0.getThickness(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals((-4820.749F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.53F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4820.749F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.63312395E16F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4820.749F), wall0.getThickness(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals((-4820.749F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.53F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4820.749F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.63312395E16F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4820.749F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 1.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 1.0F, 1.0F, 0.0F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYStart((-1801.5431F));
      assertEquals(1802.5433F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-900.27155F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1801.5431F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1802.5433F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.5F, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall1.getYStart();
      assertEquals(1802.5433F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-900.27155F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1801.5431F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1802.5433F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals((-1801.5431F), float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float1, float0, 0.01F);
      
      Class<Wall> class0 = Wall.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", resourceURLContent0, 0.0F, 0.5F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals("", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.5F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNotNull(catalogTexture0);
      
      wall1.setRightSideShininess(1.0F);
      assertEquals(1802.5433F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-900.27155F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1801.5431F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1802.5433F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.clone();
      assertEquals(1802.5433F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-900.27155F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1801.5431F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1802.5433F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-900.27155F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(1802.5433F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1802.5433F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1801.5431F), wall2.getYStart(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      CatalogTexture catalogTexture1 = new CatalogTexture("l.", resourceURLContent0, 2860.904F, 1.0F, false);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(2860.904F, catalogTexture1.getWidth(), 0.01F);
      assertNull(catalogTexture1.getId());
      assertNull(catalogTexture1.getCreator());
      assertFalse(catalogTexture1.isModifiable());
      assertEquals(1.0F, catalogTexture1.getHeight(), 0.01F);
      assertEquals("l.", catalogTexture1.getName());
      assertNotNull(catalogTexture1);
      assertFalse(catalogTexture1.equals((Object)catalogTexture0));
      
      int int0 = catalogTexture0.compareTo(catalogTexture1);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals("", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.5F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(2860.904F, catalogTexture1.getWidth(), 0.01F);
      assertNull(catalogTexture1.getId());
      assertNull(catalogTexture1.getCreator());
      assertFalse(catalogTexture1.isModifiable());
      assertEquals(1.0F, catalogTexture1.getHeight(), 0.01F);
      assertEquals("l.", catalogTexture1.getName());
      assertNotSame(catalogTexture0, catalogTexture1);
      assertNotSame(catalogTexture1, catalogTexture0);
      assertEquals((-1), int0);
      assertFalse(catalogTexture0.equals((Object)catalogTexture1));
      assertFalse(catalogTexture1.equals((Object)catalogTexture0));
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals("", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.5F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(0.5F, homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("", homeTexture0.getName());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertNotNull(homeTexture0);
      assertFalse(catalogTexture0.equals((Object)catalogTexture1));
      
      wall0.setRightSideTexture(homeTexture0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals("", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.5F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(0.5F, homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("", homeTexture0.getName());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(catalogTexture0, catalogTexture1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(catalogTexture0.equals((Object)catalogTexture1));
      
      float float2 = wall1.getLeftSideShininess();
      assertEquals(1802.5433F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-900.27155F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1801.5431F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1802.5433F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      Level level0 = wall1.getLevel();
      assertEquals(1802.5433F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-900.27155F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1801.5431F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1802.5433F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(level0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall3 = wall0.clone();
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(1.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.5F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1.0F, wall3.getYEnd(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      
      Stream<Wall> stream0 = linkedList0.stream();
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      assertTrue(linkedList0.contains(wall0));
      
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, (-1461.0F), 0.1F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = linkedList0.add(wall1);
      assertEquals(2, linkedList0.size());
      assertEquals(1461.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-730.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setYEnd(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall(0.1F, 0.0F, 0.30888185F, (-1461.0F), 0.1F);
      assertEquals(0.20444092F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-730.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1461.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1461.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.30888185F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.20444092F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-730.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1461.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1461.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.30888185F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.20444092F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-730.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1461.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1461.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.30888185F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.20444092F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-730.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1461.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1461.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.30888185F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.20444092F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-730.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1461.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1461.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.30888185F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(0.20444092F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-730.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1461.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1461.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1461.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.30888185F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 529.48804F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Float float1 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.max(529.48804F, (-719.8896F));
      assertEquals(529.48804F, float2, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      float float3 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      float float4 = wall0.getLength();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Wall wall0 = new Wall((-45.543083F), 1.0F, (-45.543083F), (-45.543083F), (-2868.51F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(46.543083F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-45.543083F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-45.543083F), wall0.getXStart(), 0.01F);
      assertEquals((-45.543083F), wall0.getXEnd(), 0.01F);
      assertEquals((-45.543083F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2868.51F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(46.543083F, wall0.getLength(), 0.01F);
      assertEquals((-22.271542F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(46.543083F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-45.543083F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-45.543083F), wall0.getXStart(), 0.01F);
      assertEquals((-45.543083F), wall0.getXEnd(), 0.01F);
      assertEquals((-45.543083F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2868.51F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(46.543083F, wall0.getLength(), 0.01F);
      assertEquals((-22.271542F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      Level level0 = new Level((String) null, (-2868.51F), (-45.543083F), (-45.543083F));
      assertEquals((-45.543083F), level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-45.543083F), level0.getFloorThickness(), 0.01F);
      assertEquals((-2868.51F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals((-45.543083F), level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-45.543083F), level0.getFloorThickness(), 0.01F);
      assertEquals((-2868.51F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-45.543083F), level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-45.543083F), level1.getFloorThickness(), 0.01F);
      assertEquals((-2868.51F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      
      boolean boolean0 = wall0.containsPoint((-2868.51F), 1.0F, (-2868.51F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(46.543083F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-45.543083F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-45.543083F), wall0.getXStart(), 0.01F);
      assertEquals((-45.543083F), wall0.getXEnd(), 0.01F);
      assertEquals((-45.543083F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2868.51F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(46.543083F, wall0.getLength(), 0.01F);
      assertEquals((-22.271542F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Float float0 = new Float(2727.0F);
      assertEquals(2727.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(0.1F, (-3435.0376F), (-3435.0376F), 1.0F, (-3435.0376F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1717.4688F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3435.0376F), wall0.getXEnd(), 0.01F);
      assertEquals((-1717.0188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4858.655F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3435.0376F), wall0.getYStart(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4858.655F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1717.4688F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3435.0376F), wall0.getXEnd(), 0.01F);
      assertEquals((-1717.0188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4858.655F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3435.0376F), wall0.getYStart(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4858.655F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(0.1F, 1.0F, 2.0F, 2.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1717.4688F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3435.0376F), wall0.getXEnd(), 0.01F);
      assertEquals((-1717.0188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4858.655F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3435.0376F), wall0.getYStart(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4858.655F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Wall wall1 = new Wall(1.0F, 1.0F, (-3435.0376F), 0.1F, 1.0F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.55F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1717.0188F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3436.0376F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3436.0376F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-3435.0376F), wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1717.4688F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3435.0376F), wall0.getXEnd(), 0.01F);
      assertEquals((-1717.0188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4858.655F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3435.0376F), wall0.getYStart(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4858.655F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.55F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1717.0188F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3436.0376F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3436.0376F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-3435.0376F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1717.4688F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3435.0376F), wall0.getXEnd(), 0.01F);
      assertEquals((-1717.0188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4858.655F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3435.0376F), wall0.getYStart(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4858.655F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(float1);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float2 = new Float((-2617.36F));
      assertEquals((-2617.36F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      float float3 = Float.min((-1.0F), 0.1F);
      assertEquals((-1.0F), float3, 0.01F);
      
      float float4 = wall1.getLength();
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.55F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1717.0188F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3436.0376F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3436.0376F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-3435.0376F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(3436.0376F, float4, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float4, float3, 0.01F);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1717.4688F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3435.0376F), wall0.getXEnd(), 0.01F);
      assertEquals((-1717.0188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4858.655F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3435.0376F), wall0.getYStart(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4858.655F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals((-3435.0376F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.55F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3436.0376F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1717.0188F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3436.0376F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float5 = wall2.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1717.4688F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3435.0376F), wall0.getXEnd(), 0.01F);
      assertEquals((-1717.0188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4858.655F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3435.0376F), wall0.getYStart(), 0.01F);
      assertEquals((-3435.0376F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4858.655F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals((-3435.0376F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.55F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3436.0376F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1717.0188F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3436.0376F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-1717.0188F), float5, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.55F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1717.0188F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3436.0376F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3436.0376F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-3435.0376F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Wall wall0 = new Wall(2525.9714F, (-1618.0F), (-1618.0F), 1390.0F, (-3204.5F), 994.0F);
      assertEquals(5120.602F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-114.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1618.0F), wall0.getXEnd(), 0.01F);
      assertEquals(453.98572F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1390.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3204.5F), wall0.getThickness(), 0.01F);
      assertEquals((-1618.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2525.9714F, wall0.getXStart(), 0.01F);
      assertEquals(5120.602F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = wall0.containsWallStartAt(5366.0F, 0.1F, 1.0F);
      assertEquals(5120.602F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-114.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1618.0F), wall0.getXEnd(), 0.01F);
      assertEquals(453.98572F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1390.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3204.5F), wall0.getThickness(), 0.01F);
      assertEquals((-1618.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2525.9714F, wall0.getXStart(), 0.01F);
      assertEquals(5120.602F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Float float0 = new Float((-1618.0F));
      assertEquals((-1618.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(5120.602F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-114.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1618.0F), wall0.getXEnd(), 0.01F);
      assertEquals(453.98572F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1390.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3204.5F), wall0.getThickness(), 0.01F);
      assertEquals((-1618.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2525.9714F, wall0.getXStart(), 0.01F);
      assertEquals(5120.602F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(5120.602F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-114.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1618.0F), wall0.getXEnd(), 0.01F);
      assertEquals(453.98572F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1390.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3204.5F), wall0.getThickness(), 0.01F);
      assertEquals((-1618.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2525.9714F, wall0.getXStart(), 0.01F);
      assertEquals(5120.602F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float1 = Float.min((-313.763F), 994.0F);
      assertEquals((-313.763F), float1, 0.01F);
      
      Wall wall1 = new Wall(0.0F, 1075.6006F, 0.1F, (-1625.5938F), 54.98507F, 0.01F);
      assertEquals(1075.6006F, wall1.getYStart(), 0.01F);
      assertEquals(2701.1943F, wall1.getLength(), 0.01F);
      assertEquals((-274.99658F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(54.98507F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1625.5938F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2701.1943F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = wall1.getLength();
      assertEquals(1075.6006F, wall1.getYStart(), 0.01F);
      assertEquals(2701.1943F, wall1.getLength(), 0.01F);
      assertEquals((-274.99658F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(54.98507F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1625.5938F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2701.1943F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertEquals(2701.1943F, float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
      
      float float3 = wall0.getXArcCircleCenter();
      assertEquals(5120.602F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-114.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1618.0F), wall0.getXEnd(), 0.01F);
      assertEquals(453.98572F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1390.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3204.5F), wall0.getThickness(), 0.01F);
      assertEquals((-1618.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2525.9714F, wall0.getXStart(), 0.01F);
      assertEquals(5120.602F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(453.98572F, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(5120.602F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-114.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1618.0F), wall0.getXEnd(), 0.01F);
      assertEquals(453.98572F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1390.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3204.5F), wall0.getThickness(), 0.01F);
      assertEquals((-1618.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2525.9714F, wall0.getXStart(), 0.01F);
      assertEquals(5120.602F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(994.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(level0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      Float float0 = new Float((-69.0329968509732));
      assertEquals((-69.033F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-69.033F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-69.033F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-69.033F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-69.033F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-69.033F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.1F, 0.0F, (-1349.896F), 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1349.896F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setThickness(50.25F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(50.25F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall(0.1F, 0.1F, (-1.0F), (-2403.75F), 575.817F, 3305.9958F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2403.8503F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals(575.817F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals((-1201.825F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2403.8503F, wall2.getLength(), 0.01F);
      assertEquals((-0.45F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-2403.75F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(3305.9958F, wall2.getHeight(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Wall wall3 = wall0.clone();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-1349.896F), wall3.getThickness(), 0.01F);
      assertEquals(0.05F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.1F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.1F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      
      wall0.setXEnd(0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      
      float float0 = wall3.getYEnd();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-1349.896F), wall3.getThickness(), 0.01F);
      assertEquals(0.05F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.1F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.1F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      
      Wall wall4 = wall1.getWallAtStart();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1349.896F), wall0.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(50.25F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNull(wall4);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Wall wall0 = new Wall(250.6536F, (-815.80774F), (-815.80774F), 2559.7F, 250.6536F, (-815.80774F));
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(2.0F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      
      wall0.setRightSideShininess(664.4F);
      assertEquals(664.4F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(664.4F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-815.80774F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(871.9461F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(250.6536F, wall1.getXStart(), 0.01F);
      assertEquals(664.4F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall1.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall1.getLength(), 0.01F);
      assertEquals(3539.9707F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-282.5771F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(250.6536F, wall1.getThickness(), 0.01F);
      assertEquals((-815.80774F), wall1.getYStart(), 0.01F);
      assertEquals(2559.7F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer((-2146416130));
      assertEquals((-2146416130), (int)integer0);
      assertNotNull(integer0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(664.4F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setPattern((TextureImage) null);
      assertEquals(664.4F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Level level0 = wall1.getLevel();
      assertEquals(664.4F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-815.80774F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(871.9461F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(250.6536F, wall1.getXStart(), 0.01F);
      assertEquals(664.4F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall1.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall1.getLength(), 0.01F);
      assertEquals(3539.9707F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-282.5771F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(250.6536F, wall1.getThickness(), 0.01F);
      assertEquals((-815.80774F), wall1.getYStart(), 0.01F);
      assertEquals(2559.7F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(664.4F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-815.80774F), wall0.getYStart(), 0.01F);
      assertEquals(3539.9707F, wall0.getLength(), 0.01F);
      assertEquals((-815.80774F), wall0.getXEnd(), 0.01F);
      assertEquals(3539.9707F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(250.6536F, wall0.getXStart(), 0.01F);
      assertEquals((-815.80774F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(871.9461F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(250.6536F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-282.5771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2559.7F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(664.4F, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Wall wall0 = new Wall(2051.5732F, 2051.5732F, 3820.953F, 2051.5732F, 2051.5732F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1769.3796F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.2632F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(1769.3796F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXStart(3820.953F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertNull(integer0);
      
      wall0.setYStart(2051.5732F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt((-964.9045F), 2372.0F, 2124.585F);
      assertEquals(3820.953F, wall0.getXEnd(), 0.01F);
      assertEquals(3820.953F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3820.953F, wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      
      Wall wall1 = new Wall(1.0F, 0.01F, (-1.0F), (-3825.361F), 2124.585F, (-3825.361F));
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(3825.3716F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1912.6755F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2124.585F, wall1.getThickness(), 0.01F);
      assertEquals((-3825.361F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(3825.3716F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3825.361F), wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      boolean boolean1 = linkedList0.add(wall1);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(3825.3716F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1912.6755F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2124.585F, wall1.getThickness(), 0.01F);
      assertEquals((-3825.361F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(3825.3716F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3825.361F), wall1.getYEnd(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotSame(wall1, wall0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(wall1));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall1));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      Float float0 = new Float(3463.0F);
      assertEquals(3463.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(3652.0718F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1914.585F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2124.585F, wall1.getThickness(), 0.01F);
      assertEquals(3463.0F, wall1.getArcExtent(), 0.01F);
      assertEquals((-3825.361F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3825.3716F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4276635E7F, wall1.getLength(), 0.01F);
      assertEquals((-3825.361F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(3652.0718F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1914.585F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2124.585F, wall1.getThickness(), 0.01F);
      assertEquals(3463.0F, wall1.getArcExtent(), 0.01F);
      assertEquals((-3825.361F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3825.3716F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4276635E7F, wall1.getLength(), 0.01F);
      assertEquals((-3825.361F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(3652.0718F, float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1299.42F), 0.0F, (-1.0F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1299.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-649.71F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1299.4204F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1299.42F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1299.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-649.71F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1299.4204F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1299.42F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setPattern((TextureImage) null);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1299.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-649.71F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1299.4204F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1299.42F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1299.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-649.71F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1299.4204F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1299.42F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Wall wall0 = new Wall(3820.95F, 3820.95F, 3820.95F, 2051.5732F, 3820.95F, 2051.5732F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3820.95F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.95F, wall0.getYStart(), 0.01F);
      assertEquals(3820.95F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1769.3767F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(2936.2617F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.95F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1769.3767F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.95F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3820.95F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.95F, wall0.getYStart(), 0.01F);
      assertEquals(3820.95F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1769.3767F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(2936.2617F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.95F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1769.3767F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.95F, wall0.getXStart(), 0.01F);
      assertNull(integer0);
      
      wall0.setYStart(2051.5732F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.95F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.95F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(3820.95F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.95F, wall0.getXStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.95F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.95F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(3820.95F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.95F, wall0.getXStart(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.95F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.95F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(3820.95F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.95F, wall0.getXStart(), 0.01F);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.95F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.95F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(3820.95F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.95F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = wall0.getYArcCircleCenter();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3820.95F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3820.95F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(3820.95F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3820.95F, wall0.getXStart(), 0.01F);
      assertEquals(2051.5732F, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 2847.9133F, (-4455.8203F), 1.0F, 1097.5245F);
      assertEquals(5286.808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4455.8203F), wall0.getXEnd(), 0.01F);
      assertEquals(5286.808F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1424.4567F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2847.9133F, wall0.getYStart(), 0.01F);
      assertEquals(1097.5245F, wall0.getThickness(), 0.01F);
      assertEquals((-2228.4102F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1.0F, (-1.0F), (-2371.8264F), (-1668.0F), 2847.9133F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1185.4132F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2899.861F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1668.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2371.8264F), wall1.getXEnd(), 0.01F);
      assertEquals((-834.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2847.9133F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2899.861F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall((-785.501F), 1.0F, (-3476.5676F), (-1920.0F), (-3481.2083F), (-2371.8264F));
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-785.501F), wall2.getXStart(), 0.01F);
      assertEquals((-2371.8264F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3306.3696F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3476.5676F), wall2.getXEnd(), 0.01F);
      assertEquals((-959.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1920.0F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3306.3696F, wall2.getLength(), 0.01F);
      assertEquals((-3481.2083F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-2131.0342F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(5286.808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4455.8203F), wall0.getXEnd(), 0.01F);
      assertEquals(5286.808F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1424.4567F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2847.9133F, wall0.getYStart(), 0.01F);
      assertEquals(1097.5245F, wall0.getThickness(), 0.01F);
      assertEquals((-2228.4102F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1, linkedList0.size());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      List<Wall> list1 = Wall.clone(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list1.equals((Object)list0));
      
      Random.setNextRandom((-593));
      Float float0 = new Float((-2536.4F));
      assertEquals((-2536.4F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall2.setArcExtent(float0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-785.501F), wall2.getXStart(), 0.01F);
      assertEquals((-2371.8264F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3306.3696F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3476.5676F), wall2.getXEnd(), 0.01F);
      assertEquals(4972022.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1519.0155F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2536.4F), wall2.getArcExtent(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1816.857F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1920.0F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-3481.2083F), wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      List<Wall> list2 = Wall.clone(list1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotNull(list2);
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertFalse(list0.equals((Object)list1));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      
      float float1 = wall0.getYStart();
      assertEquals(5286.808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4455.8203F), wall0.getXEnd(), 0.01F);
      assertEquals(5286.808F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1424.4567F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2847.9133F, wall0.getYStart(), 0.01F);
      assertEquals(1097.5245F, wall0.getThickness(), 0.01F);
      assertEquals((-2228.4102F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(2847.9133F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Wall wall0 = new Wall(2051.5732F, 2051.5732F, 2051.5732F, 2051.5732F, 2051.5732F);
      assertEquals(2051.5732F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2051.5732F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      wall0.setXStart(2051.5732F);
      assertEquals(2051.5732F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2051.5732F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(2051.5732F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2051.5732F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(2051.5732F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2051.5732F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(integer0);
      
      wall0.setYStart(2051.5732F);
      assertEquals(2051.5732F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2051.5732F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(2051.5732F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2051.5732F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(2051.5732F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2051.5732F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      float float0 = wall0.getLength();
      assertEquals(2051.5732F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2051.5732F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, float0, 0.01F);
      
      Wall wall1 = new Wall(1.0F, 2432.7F, 0.0F, 2432.7F, 2432.7F, 866.8F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2432.7F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2432.7F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(2432.7F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2432.7F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(866.8F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      boolean boolean0 = linkedList0.add(wall1);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2432.7F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2432.7F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(2432.7F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2432.7F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(866.8F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1, linkedList0.size());
      assertNotSame(wall1, wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall1));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(wall1.equals((Object)wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall1));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      Float float1 = new Float(2051.5732F);
      assertEquals(2051.5732F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(2051.5732F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2051.5732F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = wall1.getXArcCircleCenter();
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2432.7F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2432.7F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(2432.7F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2432.7F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(866.8F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertEquals(0.5F, float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float0, 0.01F);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(2051.5732F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2051.5732F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2051.5732F, wall0.getXEnd(), 0.01F);
      assertEquals(2051.5732F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2051.5732F, wall0.getThickness(), 0.01F);
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2051.5732F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 528.3F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = wall0.getLeftSideShininess();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      
      Float float2 = wall0.getHeight();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(float2);
      
      wall0.setHeightAtEnd((Float) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.getRightSideTexture();
      Wall wall1 = wall0.getWallAtStart();
      assertNotNull(wall1);
      
      wall0.setWallAtStart(wall1);
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      linkedList0.add(wall0);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.getRightSideTexture();
      Wall wall1 = wall0.getWallAtEnd();
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall((-69.90036F), 0.0F, (-1461.0F), 445.08322F, 1.0F);
      wall2.setWallAtEnd(wall0);
      Float float0 = new Float(1.0F);
      wall0.setHeight(float0);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, (-1461.0F), 0.1F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall1.getPoints();
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1461.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)71;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Float float0 = new Float(0.0F);
      wall0.setRightSideShininess(3070.496F);
      Integer integer0 = new Integer(75);
      wall0.setRightSideColor(integer0);
      Wall wall1 = wall0.clone();
      wall1.setXEnd(75);
      wall0.getXArcCircleCenter();
      wall1.setRightSideColor(integer0);
      assertEquals(75.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Wall wall0 = new Wall(2520.127F, 2520.127F, (-451.31363F), 2520.127F, 2.0F);
      wall0.getPoints();
      wall0.getRightSideColor();
      wall0.containsWallEndAt(2520.127F, (-1957.36F), 0.0F);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.intersectsRectangle((-1.0F), (-1263.0F), 2.0F, (-2589.25F));
      Float float0 = new Float((double) 0.0F);
      Wall.Property.values();
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(1034.4066F, float1, 0.01F);
      
      wall0.getPattern();
      wall0.setHeight(float0);
      assertEquals(2520.127F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Wall wall0 = new Wall((-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F), (-2305.2F));
      wall0.getPoints();
      wall0.getRightSideColor();
      wall0.containsWallEndAt(1.0F, 1.0F, (-2142.026F));
      boolean boolean0 = wall0.intersectsRectangle((-2305.2F), 1.0F, 0.0F, (-2305.2F));
      assertFalse(boolean0);
      
      Float float0 = new Float((double) 1.0F);
      Wall.Property.values();
      float float1 = wall0.getXArcCircleCenter();
      assertEquals((-2305.2F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall((-1349.896F), (-1349.896F), 0.0F, 0.1F, 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setThickness(50.25F);
      wall1.getLeftSideColor();
      wall0.getWallAtStart();
      String string0 = "Y";
      String string1 = null;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MockURL.URL((String) null, "Y", 0, (String) null, uRLStreamHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setXEnd((-3013.072F));
      wall0.setXStart(0.0F);
      wall0.getWallAtStart();
      assertEquals(3013.072F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Wall wall0 = new Wall(3820.953F, 3820.953F, 3820.953F, 2051.5732F, 3820.953F, 2051.5732F);
      wall0.setXStart(3820.953F);
      wall0.getRightSideColor();
      wall0.setYStart(2051.5732F);
      wall0.getLeftSideTexture();
      wall0.getLength();
      Float float0 = new Float(1392.0);
      Float float1 = new Float((-365.0F));
      wall0.setArcExtent(float1);
      float float2 = wall0.getYArcCircleCenter();
      assertEquals(2051.5732F, wall0.getYStart(), 0.01F);
      assertEquals(2051.5732F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Wall wall0 = new Wall(1.8360189F, 1.8360189F, (-1625.5938F), (-1625.5938F), (-1625.5938F));
      Float float0 = new Float((-2.39428F));
      wall0.setArcExtent(float0);
      Float float1 = new Float((double) (-1625.5938F));
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      assertEquals(2959.4634F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 529.48804F);
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      assertEquals(529.48804F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 2520.127F, 0.1F, 2520.127F, 2520.127F, 1259.0988F);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtStart(wall1);
      wall0.getRightSideTexture();
      boolean boolean0 = wall0.containsWallEndAt(0.1F, 0.1F, 2520.127F);
      assertEquals(2520.127F, wall0.getThickness(), 0.01F);
      assertTrue(boolean0);
      
      wall1.getLeftSideTexture();
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 528.3F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("`@ZK_&y*ZGZ$&y@8r$5", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1.4377735E-12F, (-1.0F), (-1.0F), (-29.0F), (-1385.0F));
      wall0.getLeftSideColor();
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1385.0F), wall0.getHeight(), 0.01F);
      assertEquals((-29.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1.4377735E-12F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 2051.5732F, 0.0F, 1.0F, 1.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 1.0F, 0.0F);
      wall0.getRightSideTexture();
      wall0.getXStart();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.tools.TemporaryURLContent", propertyChangeListener0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.intersectsRectangle(1.0F, 1258.3762F, 2051.5732F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      Wall wall1 = new Wall(1258.3762F, 2.0F, (-16.906F), 0.0F, (-2584.754F), (-16.906F));
      assertEquals((-16.906F), wall1.getHeight(), 0.01F);
      
      wall1.setHeight(float0);
      float float1 = wall0.getYEnd();
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1499.06F), (-598.0F));
      wall0.move(2.0F, 0.0F);
      wall0.getRightSideTexture();
      wall0.setYStart(2.0F);
      wall0.setXEnd((-1.0F));
      Wall wall1 = wall0.clone();
      wall1.setRightSideTexture((HomeTexture) null);
      Level level0 = new Level("fW#{V][IF", (-698.46F), (-1499.06F), (-598.0F));
      level0.clone();
      level0.setName("KRh3+Py");
      level0.setFloorThickness((-1499.06F));
      level0.setHeight(0.0F);
      level0.addPropertyChangeListener((PropertyChangeListener) null);
      level0.setElevation(6778.11F);
      wall0.setLevel(level0);
      wall0.setArcExtent((Float) null);
      wall0.setArcExtent((Float) null);
      wall0.setHeight((Float) null);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(1.0F, 572.1F, (-336.0F), 688.32F, 728.2226F, (-253.93613F));
      wall0.getYArcCircleCenter();
      float float0 = 124.45F;
      wall0.setYEnd(124.45F);
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 528.3F);
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Float float0 = new Float(0.0F);
      Float float1 = new Float((double) 528.3F);
      wall0.setHeightAtEnd(float1);
      boolean boolean0 = wall0.isTrapezoidal();
      assertEquals(528.3F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Integer integer0 = new Integer((-2146416130));
      Wall wall0 = new Wall((-1510.944F), (-2146416130), (-2750.7422F), 1249.2233F, (-2750.7422F));
      wall0.getLength();
      Float float0 = new Float((double) (-1510.944F));
      wall0.setArcExtent(float0);
      assertEquals((-1.07320736E9F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1299.42F), 0.0F, (-1.0F));
      assertEquals(1299.4204F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      linkedList0.add(wall1);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(wall1));
  }
}
