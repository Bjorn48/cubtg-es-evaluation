/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:06:42 GMT 2019
 */

package org.sat4j.minisat.orders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.tools.ModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaturalStaticOrder_ESTest extends NaturalStaticOrder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      naturalStaticOrder0.setPhaseSelectionStrategy((IPhaseSelectionStrategy) null);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = naturalStaticOrder0.getPhaseSelectionStrategy();
      assertNull(iPhaseSelectionStrategy0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Lits lits0 = new Lits();
      lits0.getFromPool((-5748));
      naturalStaticOrder0.setLits(lits0);
      int int0 = naturalStaticOrder0.select();
      assertEquals(11497, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      // Undeclared exception!
      try { 
        naturalStaticOrder0.select();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Lits lits0 = new Lits();
      lits0.getFromPool(512);
      naturalStaticOrder0.setLits(lits0);
      int int0 = naturalStaticOrder0.select();
      assertEquals(1025, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Lits lits0 = new Lits();
      lits0.getFromPool(512);
      naturalStaticOrder0.setLits(lits0);
      lits0.satisfies(1024);
      naturalStaticOrder0.select();
      // Undeclared exception!
      try { 
        naturalStaticOrder0.select();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      double[] doubleArray0 = naturalStaticOrder0.getVariableHeuristics();
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      naturalStaticOrder0.varDecayActivity();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      naturalStaticOrder0.init();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIterator> basicLauncher0 = new BasicLauncher<ModelIterator>(aSolverFactory0);
      PrintWriter printWriter0 = basicLauncher0.getLogWriter();
      naturalStaticOrder0.printStat(printWriter0, "c ");
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      naturalStaticOrder0.assignLiteral(512);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      naturalStaticOrder0.setVarDecay((-977));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      naturalStaticOrder0.updateVarAtDecisionLevel(66);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      String string0 = naturalStaticOrder0.toString();
      assertEquals("Natural static ordering", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      naturalStaticOrder0.updateVar(14);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      naturalStaticOrder0.undo((-102));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      double double0 = naturalStaticOrder0.varActivity(1060);
      assertEquals(0.0, double0, 0.01);
  }
}
