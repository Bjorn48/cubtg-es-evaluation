/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:31:49 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.specs.IVec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vec_ESTest extends Vec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.growTo((-1689), "");
      vec0.indexOf("");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1040));
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integerArray0[0];
      integerArray0[3] = integerArray0[0];
      integerArray0[4] = integerArray0[1];
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      vec0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.growTo((-2287), "1");
      vec0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(2);
      vec0.shrinkTo(1178);
      Vec<Integer>[] vecArray0 = (Vec<Integer>[]) Array.newInstance(Vec.class, 9);
      Vec<Vec<Integer>> vec1 = new Vec<Vec<Integer>>(vecArray0);
      vec1.equals(vec0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer(0);
      vec0.growTo((-1032), integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Integer integer0 = new Integer(2059);
          Vec<Integer> vec0 = new Vec<Integer>(2059, integer0);
          Integer integer1 = new Integer(2059);
          vec0.insertFirstWithShifting(integer1);
          Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
          vec0.sortUnique(comparator0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1900);
      Vec<Integer> vec0 = new Vec<Integer>(937, integer0);
      ReadOnlyVec<Integer>[] readOnlyVecArray0 = (ReadOnlyVec<Integer>[]) Array.newInstance(ReadOnlyVec.class, 9);
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec0);
      readOnlyVecArray0[0] = readOnlyVec0;
      Vec<ReadOnlyVec<Integer>> vec1 = new Vec<ReadOnlyVec<Integer>>(readOnlyVecArray0);
      vec1.removeFromLast(readOnlyVec0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(10, (Object) null);
      vec0.removeFromLast((Object) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(9);
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 8);
      vecArray0[0] = vec0;
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(vecArray0);
      vec1.remove(vec0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Vec<String> vec1 = new Vec<String>(0, "org.sat4j.minisat.core.Solver$2");
      vec0.unsafePush(vec1);
      // Undeclared exception!
      try { 
        vec0.shrinkTo((-1333));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.shrinkTo(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(2, (Integer) null);
      vec0.shrink(2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.selectionSort(3028, (-1), (Comparator<String>) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(14, "");
      vec0.copyTo((IVec<String>) vec0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(1776);
      Vec<Integer> vec0 = new Vec<Integer>(1776, integer0);
      vec0.set(45, integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(15);
      Vec<Integer> vec0 = new Vec<Integer>(50, integer0);
      vec0.pop();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 0);
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(vecArray0);
      vec0.toArray();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(14, "");
      vec0.size();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      vec0.last();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(5, "&.`JUBH?/c[");
      vec0.last();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(1879);
      Vec<Object> vec0 = new Vec<Object>(1110, integer0);
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 5);
      vecArray0[0] = vec0;
      vecArray0[1] = vec0;
      vecArray0[2] = vec0;
      vecArray0[3] = vec0;
      Vec<Object> vec1 = new Vec<Object>();
      vecArray0[4] = vec1;
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(vecArray0);
      vec2.indexOf(vec1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.get(3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(40, "G");
      vec0.get(12);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.unsafePush("&.`JUBH?/c[");
      vec0.delete(3);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(2, "");
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(2, vec0);
      Object object0 = vec1.delete(0);
      vec0.push(object0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(423, 452, 441, 432, (-3684)).when(comparator0).compare(any() , any());
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      vec0.clone();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(238, "org.r>sat4j.cre.Vec");
      // Undeclared exception!
      try { 
        vec0.unsafePush("org.r>sat4j.cre.Vec");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 238
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2505, "org.r>sat4j.cre.Vec");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      // Undeclared exception!
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1079, "ARVG8");
      // Undeclared exception!
      try { 
        vec0.sortUnique((Comparator<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2505, "org.r>sat4j.cre.Vec");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2505, 854, 854, 2505, (-1697)).when(comparator0).compare(anyString() , anyString());
      // Undeclared exception!
      try { 
        vec0.sortUnique(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2505
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Integer integer0 = new Integer(1776);
          Vec<Integer> vec0 = new Vec<Integer>(1776, integer0);
          Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
          // Undeclared exception!
          vec0.sort(comparator0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Vec<Integer> vec0 = new Vec<Integer>(5, integer0);
      // Undeclared exception!
      try { 
        vec0.sort((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(40);
      Vec<Integer> vec0 = new Vec<Integer>(40, integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2410), 45, (-2410), 40, (-1)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vec0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2505, "org.r>sat4j.cre.Vec");
      assertEquals(2505, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      // Undeclared exception!
      vec0.sort(892, 2505, comparator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(786, (Object) null);
      assertEquals(786, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(530, 89, 530, 530, 530).when(comparator0).compare(any() , any());
      // Undeclared exception!
      vec0.selectionSort(530, 786, comparator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2521);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>(2521, vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2521, vec1.size());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec1.selectionSort(9, 966, (Comparator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.selectionSort((-2709), 100, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.moveTo((IVec<Vec<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(5, "'-63URCH8d");
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(5, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertNotNull(readOnlyVec0);
      
      // Undeclared exception!
      try { 
        vec0.moveTo((IVec<String>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(2);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.shrinkTo(1178);
      assertFalse(vec0.isEmpty());
      assertEquals(1178, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.moveTo((IVec<Integer>) vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(10, "org.sat4j.specs.Constr");
      assertEquals(10, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.moveTo(1614, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vec1.shrinkTo(3895);
      assertEquals(3895, vec1.size());
      assertFalse(vec1.isEmpty());
      
      // Undeclared exception!
      try { 
        vec1.insertFirstWithShifting(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      vec0.growTo((-4695), object0);
      assertEquals((-4695), vec0.size());
      assertFalse(vec0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        vec0.insertFirst(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4695
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 6);
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>(vecArray0);
      assertEquals(6, vecArray0.length);
      assertEquals(6, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>();
      assertFalse(vec1.equals((Object)vec0));
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec0.moveTo((IVec<Vec<String>>) vec1);
      assertEquals(6, vecArray0.length);
      assertFalse(vec0.equals((Object)vec1));
      assertFalse(vec1.equals((Object)vec0));
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(6, vec1.size());
      
      // Undeclared exception!
      try { 
        vec1.equals(vec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.shrinkTo(2492);
      assertFalse(vec0.isEmpty());
      assertEquals(2492, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.ensure(821);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(359);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.copyTo((ReadOnlyVec<Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(359);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.insertFirstWithShifting((Vec<Object>) null);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      ReadOnlyVec<Integer>[] readOnlyVecArray0 = (ReadOnlyVec<Integer>[]) Array.newInstance(ReadOnlyVec.class, 0);
      // Undeclared exception!
      try { 
        vec0.copyTo(readOnlyVecArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 0);
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      assertEquals(0, readOnlyVecArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      ReadOnlyVec<ReadOnlyVec<Object>> readOnlyVec0 = new ReadOnlyVec<ReadOnlyVec<Object>>(vec0);
      assertEquals(0, readOnlyVecArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertNotNull(readOnlyVec0);
      
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<ReadOnlyVec<Object>>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vec<String> vec0 = null;
      try {
        vec0 = new Vec<String>((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(65535, "");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer((-1594));
      assertEquals((-1594), (int)integer0);
      assertNotNull(integer0);
      
      Vec<Integer> vec0 = null;
      try {
        vec0 = new Vec<Integer>((-1594), integer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vec<Integer> vec0 = null;
      try {
        vec0 = new Vec<Integer>((-2073));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      boolean boolean0 = vec0.equals(vec1);
      assertTrue(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      boolean boolean0 = vec0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(2521);
      assertEquals(2521, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(2521, integer0);
      assertEquals(2521, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(5, (-2477), 5000, 2, 2521).when(comparator0).compare(anyInt() , anyInt());
      vec0.sort(2, 698, comparator0);
      assertEquals(2521, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(2521);
      Vec<Integer> vec0 = new Vec<Integer>(2521, integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3053), (-1), 698, 520, 2).when(comparator0).compare(anyInt() , anyInt());
      vec0.sort(2, 698, comparator0);
      assertEquals(2521, vec0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(873);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.sort(873, 3135, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2004
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2, "Xb7qn_");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(2, (-1997), comparator0);
      assertEquals(2, vec0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer(2521);
      Vec<Integer> vec0 = new Vec<Integer>(2521, integer0);
      vec0.ensure(1);
      assertEquals(2521, vec0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.clear();
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      // Undeclared exception!
      try { 
        vec0.get(987);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      int int0 = vec0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 0);
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      Integer integer0 = new Integer(1);
      Vec<Object> vec1 = new Vec<Object>(1, integer0);
      int int0 = vec1.indexOf(vec0);
      assertEquals((-1), int0);
      assertEquals(1, vec1.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Object object0 = new Object();
      Vec<Object> vec0 = new Vec<Object>(1120, object0);
      boolean boolean0 = vec0.contains(object0);
      assertEquals(1120, vec0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(37, (ReadOnlyVec<Object>) null);
      // Undeclared exception!
      try { 
        vec0.contains((ReadOnlyVec<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Object object0 = new Object();
      boolean boolean0 = vec0.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      boolean boolean0 = vec0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer((-113));
      Vec<Integer> vec0 = new Vec<Integer>(5, integer0);
      boolean boolean0 = vec0.isEmpty();
      assertFalse(boolean0);
      assertEquals(5, vec0.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Vec<Object> vec1 = new Vec<Object>(2505, vec0);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(2505, vec1);
      // Undeclared exception!
      vec2.indexOf(vec1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(2505, vec0);
      int int0 = vec1.indexOf(vec0);
      assertEquals(0, int0);
      assertEquals(2505, vec1.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(5, "'-63URCH8d");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(5, 5, 5, 5, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      //  // Unstable assertion: assertEquals(5, vec0.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(238, "org.r>sat4j.cre.Vec");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1976), 238, (-1976), 5000, 5000).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      assertEquals(1, vec0.size());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Integer integer0 = new Integer(3779);
      Vec<Integer> vec0 = new Vec<Integer>(3779, integer0);
      vec0.toString();
      assertEquals(3779, vec0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      String string0 = vec0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2415);
      vec0.moveTo(2, 1089);
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1430, "Ji");
      vec0.moveTo(5000, 5000);
      assertEquals(1430, vec0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(6, "XdO8}0k/:1eaV");
      Integer integer0 = new Integer(11);
      // Undeclared exception!
      try { 
        vec0.removeFromLast(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer(823);
      vec0.insertFirst(integer0);
      assertEquals(1, vec0.size());
      
      vec0.removeFromLast(integer0);
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.remove("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.remove((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer(829);
      vec0.insertFirst(integer0);
      vec0.insertFirst(integer0);
      assertEquals(2, vec0.size());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.growTo(18, "");
      // Undeclared exception!
      try { 
        vec0.remove("_@0uN,pDY o");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      vec0.shrinkTo(1092);
      // Undeclared exception!
      try { 
        vec0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      // Undeclared exception!
      try { 
        vec0.shrink(1504);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      vec0.shrink((-2121));
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 1);
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      Vec<Object> vec1 = new Vec<Object>(595, vec0);
      // Undeclared exception!
      try { 
        vec1.indexOf(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>(20);
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 6);
      vec0.copyTo(vecArray0);
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.unsafePush("qzf^dhx\"I=+X");
      boolean boolean0 = vec0.contains((Object) null);
      assertEquals(1, vec0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      IVec<Integer> iVec0 = vec0.clone();
      assertEquals(0, iVec0.size());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      // Undeclared exception!
      try { 
        vec0.set(6, (Integer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      // Undeclared exception!
      try { 
        vec0.delete(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(1226);
      // Undeclared exception!
      try { 
        vec0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(2505, vec0);
      Vec<String> vec2 = new Vec<String>(2505, "\n");
      boolean boolean0 = vec2.equals(vec1);
      assertFalse(boolean0);
      assertEquals(2505, vec2.size());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>();
      Iterator<Vec<Integer>> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
  }
}
