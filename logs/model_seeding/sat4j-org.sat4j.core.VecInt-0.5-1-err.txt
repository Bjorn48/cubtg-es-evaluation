[MASTER] 23:20:14.650 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 23:24:37.478 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_9_1550355877478
[MASTER] 23:25:01.032 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_154_1550355901002/org/sat4j/core/VecInt_153_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_154_1550355901002/org/sat4j/core/VecInt_153_tmp__ESTest_scaffolding.java]]
[MASTER] 23:25:01.032 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 23:25:01.032 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 23:25:01.036 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 28
[MASTER] 23:25:01.053 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_154_1550355901002/org/sat4j/core/VecInt_153_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Sat Feb 16 22:25:01 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class VecInt_153_tmp__ESTest extends VecInt_153_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       VecInt vecInt0 = new VecInt(1, (-398));
22:       vecInt0.subset(1);
23:       vecInt0.sortUnique();
24:       vecInt0.isEmpty();
25:       VecInt vecInt1 = null;
26:       // Undeclared exception!
27:       try { 
28:         VecInt.access$000((VecInt) null);
29:         fail("Expecting exception: NullPointerException");
30:       
31:       } catch(NullPointerException e) {
32:          //
33:          // no message in exception (getMessage() returned null)
34:          //
35:          verifyException("org.sat4j.core.VecInt", e);
36:       }
37:   }
38: }
RegularFileObject[/tmp/EvoSuite_154_1550355901002/org/sat4j/core/VecInt_153_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Sat Feb 16 22:25:01 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_153_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_153_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt"
87:     );
88:   } 
89: 
90:   private static void resetClasses() {
91:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_153_tmp__ESTest_scaffolding.class.getClassLoader()); 
92: 
93:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
94:       "org.sat4j.core.EmptyVecInt",
95:       "org.sat4j.core.VecInt",
96:       "org.sat4j.core.VecInt$1",
97:       "org.sat4j.core.ReadOnlyVecInt"
98:     );
99:   }
100: }

[MASTER] 23:25:16.131 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_199_1550355903150/org/sat4j/core/VecInt_198_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_199_1550355903150/org/sat4j/core/VecInt_198_tmp__ESTest_scaffolding.java]]
[MASTER] 23:25:16.131 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 23:25:16.131 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 23:25:16.136 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 2397
[MASTER] 23:25:16.136 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_199_1550355903150/org/sat4j/core/VecInt_198_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 23:25:16.136 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 23:25:16.143 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_199_1550355903150/org/sat4j/core/VecInt_198_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Sat Feb 16 22:25:15 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.NoSuchElementException;
14: import java.util.concurrent.ExecutorService;
15: import java.util.concurrent.Executors;
16: import java.util.concurrent.Future;
17: import java.util.concurrent.TimeUnit;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: import org.sat4j.core.EmptyVecInt;
23: import org.sat4j.core.ReadOnlyVecInt;
24: import org.sat4j.core.VecInt;
25: import org.sat4j.specs.IVecInt;
26: 
27: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
28: public class VecInt_198_tmp__ESTest extends VecInt_198_tmp__ESTest_scaffolding {
29: 
30:   @Test(timeout = 4000)
31:   public void test000()  throws Throwable  {
32:       VecInt vecInt0 = new VecInt();
33:       vecInt0.ensure(5);
34:       vecInt0.contains(0);
35:       vecInt0.pop();
36:       // Undeclared exception!
37:       try { 
38:         vecInt0.subset(1300);
39:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
40:       
41:       } catch(ArrayIndexOutOfBoundsException e) {
42:          //
43:          // no message in exception (getMessage() returned null)
44:          //
45:          verifyException("org.sat4j.core.VecInt", e);
46:       }
47:   }
48: 
49:   @Test(timeout = 4000)
50:   public void test001()  throws Throwable  {
51:       int int0 = 1760;
52:       VecInt vecInt0 = new VecInt(1760);
53:       vecInt0.clone();
54:       vecInt0.growTo(1760, 1760);
55:       vecInt0.iterator();
56:       vecInt0.selectionSort(1760, 1760, (Comparator<Integer>) null);
57:       int int1 = (-1);
58:       // Undeclared exception!
59:       try { 
60:         vecInt0.subset(int1);
61:         fail("Expecting exception: StackOverflowError");
62:       
63:       } catch(StackOverflowError e) {
64:       }
65:   }
66: 
67:   @Test(timeout = 4000)
68:   public void test002()  throws Throwable  {
69:       int[] intArray0 = new int[15];
70:       intArray0[0] = (-109);
71:       VecInt vecInt0 = new VecInt();
72:       // Undeclared exception!
73:       try { 
74:         vecInt0.moveTo((-109), intArray0);
75:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
76:       
77:       } catch(ArrayIndexOutOfBoundsException e) {
78:       }
79:   }
80: 
81:   @Test(timeout = 4000)
82:   public void test003()  throws Throwable  {
83:       VecInt vecInt0 = new VecInt();
84:       EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
85:       // Undeclared exception!
86:       try { 
87:         vecInt0.sort((-506), 1411);
88:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
89:       
90:       } catch(ArrayIndexOutOfBoundsException e) {
91:          //
92:          // 452
93:          //
94:          verifyException("org.sat4j.core.VecInt", e);
95:       }
96:   }
97: 
98:   @Test(timeout = 4000)
99:   public void test004()  throws Throwable  {
100:       VecInt vecInt0 = new VecInt(2, 2);
101:       vecInt0.sortUnique();
102:       vecInt0.isEmpty();
103:   }
104: 
105:   @Test(timeout = 4000)
106:   public void test005()  throws Throwable  {
107:       VecInt vecInt0 = new VecInt();
108:       // Undeclared exception!
109:       try { 
110:         vecInt0.unsafeGet(171);
111:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
112:       
113:       } catch(ArrayIndexOutOfBoundsException e) {
114:          //
115:          // 171
116:          //
117:          verifyException("org.sat4j.core.VecInt", e);
118:       }
119:   }
120: 
121:   @Test(timeout = 4000)
122:   public void test006()  throws Throwable  {
123:       VecInt vecInt0 = new VecInt();
124:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
125:       vecInt0.sort(0, 0, comparator0);
126:       int[] intArray0 = new int[7];
127:       IVecInt iVecInt0 = vecInt0.clone();
128:       intArray0[0] = 0;
129:       intArray0[1] = 0;
130:       intArray0[2] = 0;
131:       intArray0[3] = 0;
132:       intArray0[4] = 0;
133:       vecInt0.moveTo(iVecInt0);
134:       intArray0[5] = 0;
135:       intArray0[6] = 0;
136:       vecInt0.pushAll(iVecInt0);
137:       vecInt0.moveTo(0, intArray0);
138:       // Undeclared exception!
139:       try { 
140:         vecInt0.copyTo((IVecInt) null);
141:         fail("Expecting exception: NullPointerException");
142:       
143:       } catch(NullPointerException e) {
144:          //
145:          // no message in exception (getMessage() returned null)
146:          //
147:       }
148:   }
149: 
150:   @Test(timeout = 4000)
151:   public void test007()  throws Throwable  {
152:       VecInt vecInt0 = new VecInt(2, 2);
153:       vecInt0.sortUnique();
154:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
155:       vecInt0.sort(comparator0);
156:       VecInt vecInt1 = new VecInt(39, 39);
157:       vecInt1.isSubsetOf(vecInt0);
158:       vecInt1.isEmpty();
159:   }
160: 
161:   @Test(timeout = 4000)
162:   public void test008()  throws Throwable  {
163:       VecInt vecInt0 = new VecInt(2, 1);
164:       vecInt0.clone();
165:   }
166: 
167:   @Test(timeout = 4000)
168:   public void test009()  throws Throwable  {
169:       int[] intArray0 = new int[6];
170:       intArray0[0] = (-2004);
171:       intArray0[1] = 5;
172:       int int0 = 3164;
173:       intArray0[2] = 3164;
174:       int int1 = (-2957);
175:       intArray0[3] = (-2957);
176:       int int2 = (-375);
177:       intArray0[4] = (-375);
178:       int int3 = 1376;
179:       intArray0[5] = 1376;
180:       VecInt vecInt0 = new VecInt(intArray0);
181:       EmptyVecInt emptyVecInt0 = new EmptyVecInt();
182:       vecInt0.equals(emptyVecInt0);
183:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
184:       ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
185:       // Undeclared exception!
186:       try { 
187:         vecInt0.moveTo2(readOnlyVecInt0);
188:         fail("Expecting exception: ClassCastException");
189:       
190:       } catch(ClassCastException e) {
191:          //
192:          // org.sat4j.core.ReadOnlyVecInt cannot be cast to org.sat4j.core.VecInt
193:          //
194:          verifyException("org.sat4j.core.VecInt", e);
195:       }
196:   }
197: 
198:   @Test(timeout = 4000)
199:   public void test010()  throws Throwable  {
200:       int int0 = 1;
201:       VecInt vecInt0 = new VecInt(2205, 1);
202:       // Undeclared exception!
203:       vecInt0.sortUnique();
204:   }
205: 
206:   @Test(timeout = 4000)
207:   public void test011()  throws Throwable  {
208:       VecInt vecInt0 = new VecInt(2, 2);
209:       vecInt0.isEmpty();
210:   }
211: 
212:   @Test(timeout = 4000)
213:   public void test012()  throws Throwable  {
214:       VecInt vecInt0 = new VecInt();
215:       vecInt0.copyTo((IVecInt) vecInt0);
216:       // Undeclared exception!
217:       try { 
218:         vecInt0.hashCode();
219:         fail("Expecting exception: ArithmeticException");
220:       
221:       } catch(ArithmeticException e) {
222:          //
223:          // / by zero
224:          //
225:          verifyException("org.sat4j.core.VecInt", e);
226:       }
227:   }
228: 
229:   @Test(timeout = 4000)
230:   public void test013()  throws Throwable  {
231:       VecInt vecInt0 = new VecInt(0);
232:       int[] intArray0 = new int[9];
233:       intArray0[0] = 0;
234:       vecInt0.moveTo(intArray0);
235:       intArray0[1] = 287;
236:       intArray0[2] = 5;
237:       intArray0[3] = 0;
238:       intArray0[4] = 0;
239:       intArray0[5] = 0;
240:       intArray0[6] = 0;
241:       intArray0[7] = 0;
242:       intArray0[8] = 801;
243:       vecInt0.moveTo(intArray0);
244:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
245:       vecInt0.sort(comparator0);
246:       vecInt0.size();
247:       vecInt0.push(0);
248:       vecInt0.isEmpty();
249:   }
250: 
251:   @Test(timeout = 4000)
252:   public void test014()  throws Throwable  {
253:       VecInt vecInt0 = new VecInt();
254:       EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
255:       vecInt0.equals(emptyVecInt0);
256:   }
257: 
258:   @Test(timeout = 4000)
259:   public void test015()  throws Throwable  {
260:       VecInt vecInt0 = new VecInt();
261:       vecInt0.indexOf(2116);
262:       VecInt vecInt1 = new VecInt();
263:       vecInt0.clear();
264:   }
265: 
266:   @Test(timeout = 4000)
267:   public void test016()  throws Throwable  {
268:       int[] intArray0 = new int[2];
269:       int int0 = (-1160);
270:       intArray0[0] = (-1160);
271:       intArray0[1] = (-1198);
272:       VecInt vecInt0 = new VecInt(intArray0);
273:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
274:       // Undeclared exception!
275:       try { 
276:         vecInt0.sort((-1198), 1717, comparator0);
277:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
278:       
279:       } catch(ArrayIndexOutOfBoundsException e) {
280:          //
281:          // 259
282:          //
283:          verifyException("org.sat4j.core.VecInt", e);
284:       }
285:   }
286: 
287:   @Test(timeout = 4000)
288:   public void test017()  throws Throwable  {
289:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
290:       VecInt vecInt0 = new VecInt();
291:       vecInt0.contains((-1));
292:   }
293: 
294:   @Test(timeout = 4000)
295:   public void test018()  throws Throwable  {
296:       int[] intArray0 = new int[15];
297:       intArray0[0] = 0;
298:       intArray0[1] = 3279;
299:       intArray0[2] = 2200;
300:       VecInt vecInt0 = new VecInt(intArray0);
301:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
302:       vecInt0.selectionSort(3279, 1324, comparator0);
303:       vecInt0.growTo(0, 0);
304:       vecInt0.clone();
305:       vecInt0.indexOf(3279);
306:       vecInt0.selectionSort(3279, 1);
307:   }
308: 
309:   @Test(timeout = 4000)
310:   public void test019()  throws Throwable  {
311:       int[] intArray0 = new int[3];
312:       intArray0[0] = 0;
313:       int int0 = 3279;
314:       intArray0[1] = 3279;
315:       VecInt vecInt0 = new VecInt(intArray0);
316:       VecInt vecInt1 = new VecInt(intArray0);
317:       vecInt1.last();
318:       vecInt1.hashCode();
319:       // Undeclared exception!
320:       try { 
321:         vecInt0.set((-2898), 3279);
322:         fail("Expecting exception: AssertionError");
323:       
324:       } catch(AssertionError e) {
325:          //
326:          // no message in exception (getMessage() returned null)
327:          //
328:       }
329:   }
330: 
331:   @Test(timeout = 4000)
332:   public void test020()  throws Throwable  {
333:       VecInt vecInt0 = new VecInt();
334:       vecInt0.insertFirst((-1));
335:       vecInt0.sort((-1), (-1));
336:       IVecInt iVecInt0 = vecInt0.pop();
337:       vecInt0.copyTo(iVecInt0);
338:       int int0 = 0;
339:       VecInt vecInt1 = new VecInt(0, 0);
340:       vecInt0.moveTo((IVecInt) vecInt1);
341:       // Undeclared exception!
342:       try { 
343:         vecInt0.set((-1), 2951);
344:         fail("Expecting exception: AssertionError");
345:       
346:       } catch(AssertionError e) {
347:          //
348:          // no message in exception (getMessage() returned null)
349:          //
350:       }
351:   }
352: 
353:   @Test(timeout = 4000)
354:   public void test021()  throws Throwable  {
355:       VecInt vecInt0 = new VecInt();
356:       vecInt0.push(6);
357:   }
358: 
359:   @Test(timeout = 4000)
360:   public void test022()  throws Throwable  {
361:       VecInt vecInt0 = new VecInt(1392);
362:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
363:       vecInt0.selectionSort(1392, (-2012), comparator0);
364:       int[] intArray0 = new int[9];
365:       intArray0[0] = 1392;
366:       intArray0[1] = 1392;
367:       intArray0[2] = (-2012);
368:       intArray0[3] = 1392;
369:       intArray0[4] = (-2012);
370:       intArray0[5] = 1392;
371:       intArray0[6] = 1392;
372:       intArray0[7] = (-2012);
373:       intArray0[8] = 1392;
374:       VecInt vecInt1 = new VecInt(intArray0);
375:       vecInt1.isSubsetOf(vecInt0);
376:   }
377: 
378:   @Test(timeout = 4000)
379:   public void test023()  throws Throwable  {
380:       int[] intArray0 = new int[5];
381:       int int0 = 0;
382:       VecInt vecInt0 = new VecInt(intArray0);
383:       // Undeclared exception!
384:       try { 
385:         vecInt0.sort((Comparator<Integer>) null);
386:         fail("Expecting exception: NullPointerException");
387:       
388:       } catch(NullPointerException e) {
389:          //
390:          // no message in exception (getMessage() returned null)
391:          //
392:          verifyException("org.sat4j.core.VecInt", e);
393:       }
394:   }
395: 
396:   @Test(timeout = 4000)
397:   public void test024()  throws Throwable  {
398:       int[] intArray0 = new int[1];
399:       VecInt vecInt0 = new VecInt(intArray0);
400:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
401:       vecInt0.sort(comparator0);
402:       VecInt vecInt1 = new VecInt();
403:       IVecInt iVecInt0 = vecInt1.pop();
404:       // Undeclared exception!
405:       try { 
406:         vecInt1.copyTo(iVecInt0);
407:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
408:       
409:       } catch(ArrayIndexOutOfBoundsException e) {
410:          //
411:          // no message in exception (getMessage() returned null)
412:          //
413:          verifyException("org.sat4j.core.VecInt", e);
414:       }
415:   }
416: 
417:   @Test(timeout = 4000)
418:   public void test025()  throws Throwable  {
419:       int int0 = 1;
420:       int int1 = 1;
421:       VecInt vecInt0 = new VecInt(1, 1);
422:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
423:       vecInt0.sortUnique();
424:       vecInt0.clear();
425:       vecInt0.sort(comparator0);
426:       Comparator<Integer> comparator1 = null;
427:       int int2 = 0;
428:       vecInt0.selectionSort(1, 0, (Comparator<Integer>) null);
429:       vecInt0.sort((Comparator<Integer>) null);
430:       // Undeclared exception!
431:       try { 
432:         vecInt0.remove(1);
433:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
434:       
435:       } catch(ArrayIndexOutOfBoundsException e) {
436:       }
437:   }
438: 
439:   @Test(timeout = 4000)
440:   public void test026()  throws Throwable  {
441:       int int0 = 2;
442:       VecInt vecInt0 = new VecInt(2, 2);
443:       int int1 = 3062;
444:       int int2 = 1456;
445:       IVecInt iVecInt0 = vecInt0.push(3062);
446:       vecInt0.clone();
447:       vecInt0.clear();
448:       int int3 = 0;
449:       vecInt0.shrink(0);
450:       vecInt0.unsafeGet(2);
451:       vecInt0.copyTo(iVecInt0);
452:       // Undeclared exception!
453:       try { 
454:         vecInt0.set(2, 3062);
455:         fail("Expecting exception: AssertionError");
456:       
457:       } catch(AssertionError e) {
458:          //
459:          // no message in exception (getMessage() returned null)
460:          //
461:       }
462:   }
463: 
464:   @Test(timeout = 4000)
465:   public void test027()  throws Throwable  {
466:       int[] intArray0 = new int[15];
467:       intArray0[0] = (-109);
468:       VecInt vecInt0 = new VecInt();
469:       EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
470:       vecInt0.shrink(4553);
471:       vecInt0.sortUnique();
472:       vecInt0.isEmpty();
473:   }
474: 
475:   @Test(timeout = 4000)
476:   public void test028()  throws Throwable  {
477:       VecInt vecInt0 = new VecInt(0);
478:       vecInt0.clone();
479:       int[] intArray0 = new int[7];
480:       intArray0[0] = (-1);
481:       intArray0[1] = (-1);
482:       intArray0[2] = 0;
483:       intArray0[3] = 0;
484:       intArray0[4] = (-1);
485:       intArray0[5] = 0;
486:       intArray0[6] = (-1);
487:       // Undeclared exception!
488:       try { 
489:         vecInt0.moveTo((-1), intArray0);
490:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
491:       
492:       } catch(ArrayIndexOutOfBoundsException e) {
493:       }
494:   }
495: 
496:   @Test(timeout = 4000)
497:   public void test029()  throws Throwable  {
498:       VecInt vecInt0 = new VecInt();
499:       vecInt0.insertFirst(15);
500:       IVecInt iVecInt0 = vecInt0.pop();
501:       int[] intArray0 = new int[1];
502:       intArray0[0] = 15;
503:       VecInt vecInt1 = new VecInt(intArray0);
504:       iVecInt0.contains(0);
505:   }
506: 
507:   @Test(timeout = 4000)
508:   public void test030()  throws Throwable  {
509:       int int0 = 1760;
510:       VecInt vecInt0 = new VecInt(1760);
511:       vecInt0.clone();
512:       vecInt0.iterator();
513:       vecInt0.selectionSort(1760, 1760, (Comparator<Integer>) null);
514:       int int1 = (-1);
515:       vecInt0.subset((-1));
516:       int int2 = 0;
517:       vecInt0.shrink(1760);
518:       vecInt0.containsAt(0);
519:       vecInt0.contains((-1));
520:       // Undeclared exception!
521:       try { 
522:         vecInt0.delete(5);
523:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
524:       
525:       } catch(ArrayIndexOutOfBoundsException e) {
526:          //
527:          // -1761
528:          //
529:          verifyException("org.sat4j.core.VecInt", e);
530:       }
531:   }
532: 
533:   @Test(timeout = 4000)
534:   public void test031()  throws Throwable  {
535:       VecInt vecInt0 = new VecInt(2, 2);
536:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
537:       doReturn(2).when(comparator0).compare(anyInt() , anyInt());
538:       vecInt0.sort(comparator0);
539:       vecInt0.sortUnique();
540:       vecInt0.isEmpty();
541:   }
542: 
543:   @Test(timeout = 4000)
544:   public void test032()  throws Throwable  {
545:       VecInt vecInt0 = new VecInt();
546:       // Undeclared exception!
547:       try { 
548:         vecInt0.hashCode();
549:         fail("Expecting exception: ArithmeticException");
550:       
551:       } catch(ArithmeticException e) {
552:          //
553:          // / by zero
554:          //
555:          verifyException("org.sat4j.core.VecInt", e);
556:       }
557:   }
558: 
559:   @Test(timeout = 4000)
560:   public void test033()  throws Throwable  {
561:       VecInt vecInt0 = new VecInt();
562:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
563:       // Undeclared exception!
564:       try { 
565:         vecInt0.sort((-611), 2345, comparator0);
566:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
567:       
568:       } catch(ArrayIndexOutOfBoundsException e) {
569:          //
570:          // 867
571:          //
572:          verifyException("org.sat4j.core.VecInt", e);
573:       }
574:   }
575: 
576:   @Test(timeout = 4000)
577:   public void test034()  throws Throwable  {
578:       VecInt vecInt0 = new VecInt(1, 1);
579:       vecInt0.selectionSort(0, 0);
580:       vecInt0.growTo(1, 0);
581:       int[] intArray0 = new int[9];
582:       intArray0[0] = 0;
583:       vecInt0.delete(0);
584:       intArray0[1] = 0;
585:       intArray0[2] = 0;
586:       intArray0[3] = 0;
587:       intArray0[4] = 1;
588:       intArray0[5] = 0;
589:       intArray0[6] = 1;
590:       intArray0[7] = 0;
591:       intArray0[8] = 0;
592:       vecInt0.copyTo(intArray0);
593:   }
594: 
595:   @Test(timeout = 4000)
596:   public void test035()  throws Throwable  {
597:       VecInt vecInt0 = new VecInt(0, 0);
598:       vecInt0.ensure(0);
599:       int int0 = 44;
600:       vecInt0.push(0);
601:       vecInt0.delete(0);
602:       Integer integer0 = new Integer(44);
603:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
604:       vecInt0.sort(0, 0, comparator0);
605:       Integer.min(44, 0);
606:       try { 
607:         Integer.parseUnsignedInt((String) null);
608:         fail("Expecting exception: NumberFormatException");
609:       
610:       } catch(NumberFormatException e) {
611:          //
612:          // null
613:          //
614:          verifyException("java.lang.Integer", e);
615:       }
616:   }
617: 
618:   @Test(timeout = 4000)
619:   public void test036()  throws Throwable  {
620:       VecInt vecInt0 = new VecInt();
621:       vecInt0.insertFirst((-2044));
622:       VecInt vecInt1 = new VecInt(15, 278);
623:       vecInt0.isSubsetOf(vecInt1);
624:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
625:       vecInt0.selectionSort(15, 0, comparator0);
626:   }
627: 
628:   @Test(timeout = 4000)
629:   public void test037()  throws Throwable  {
630:       VecInt vecInt0 = new VecInt();
631:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
632:       vecInt0.sort(comparator0);
633:       vecInt0.sortUnique();
634:       vecInt0.isEmpty();
635:   }
636: 
637:   @Test(timeout = 4000)
638:   public void test038()  throws Throwable  {
639:       VecInt vecInt0 = new VecInt();
640:       vecInt0.insertFirst(15);
641:       IVecInt iVecInt0 = vecInt0.pop();
642:       vecInt0.containsAt((-2742));
643:       vecInt0.equals(iVecInt0);
644:       vecInt0.push(0);
645:       vecInt0.subset(0);
646:       vecInt0.push(0);
647:       // Undeclared exception!
648:       try { 
649:         vecInt0.selectionSort((-1), 1);
650:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
651:       
652:       } catch(ArrayIndexOutOfBoundsException e) {
653:          //
654:          // -1
655:          //
656:          verifyException("org.sat4j.core.VecInt", e);
657:       }
658:   }
659: 
660:   @Test(timeout = 4000)
661:   public void test039()  throws Throwable  {
662:       int[] intArray0 = new int[2];
663:       intArray0[0] = (-2428);
664:       VecInt vecInt0 = new VecInt(intArray0);
665:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
666:       doReturn(5).when(comparator0).compare(anyInt() , anyInt());
667:       vecInt0.sort(comparator0);
668:       vecInt0.insertFirst((-2428));
669:       vecInt0.sortUnique();
670:       vecInt0.isEmpty();
671:   }
672: 
673:   @Test(timeout = 4000)
674:   public void test040()  throws Throwable  {
675:       VecInt vecInt0 = new VecInt(2, 2);
676:       vecInt0.ensure(2);
677:       // Undeclared exception!
678:       try { 
679:         vecInt0.pushAll((IVecInt) null);
680:         fail("Expecting exception: NullPointerException");
681:       
682:       } catch(NullPointerException e) {
683:          //
684:          // no message in exception (getMessage() returned null)
685:          //
686:          verifyException("org.sat4j.core.VecInt", e);
687:       }
688:   }
689: 
690:   @Test(timeout = 4000)
691:   public void test041()  throws Throwable  {
692:       int int0 = 0;
693:       VecInt vecInt0 = new VecInt(0);
694:       vecInt0.clear();
695:       vecInt0.shrinkTo((-1019));
696:       // Undeclared exception!
697:       try { 
698:         vecInt0.delete(0);
699:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
700:       
701:       } catch(ArrayIndexOutOfBoundsException e) {
702:          //
703:          // 0
704:          //
705:          verifyException("org.sat4j.core.VecInt", e);
706:       }
707:   }
708: 
709:   @Test(timeout = 4000)
710:   public void test042()  throws Throwable  {
711:       VecInt vecInt0 = new VecInt();
712:       vecInt0.push(2);
713:       vecInt0.toString();
714:   }
715: 
716:   @Test(timeout = 4000)
717:   public void test043()  throws Throwable  {
718:       int[] intArray0 = new int[1];
719:       VecInt vecInt0 = null;
720:       try {
721:         vecInt0 = new VecInt((-109), (-109));
722:         fail("Expecting exception: NegativeArraySizeException");
723:       
724:       } catch(NegativeArraySizeException e) {
725:          //
726:          // no message in exception (getMessage() returned null)
727:          //
728:          verifyException("org.sat4j.core.VecInt", e);
729:       }
730:   }
731: 
732:   @Test(timeout = 4000)
733:   public void test044()  throws Throwable  {
734:       int int0 = 850;
735:       VecInt vecInt0 = new VecInt(850, 850);
736:       // Undeclared exception!
737:       try { 
738:         vecInt0.unsafePush(850);
739:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
740:       
741:       } catch(ArrayIndexOutOfBoundsException e) {
742:          //
743:          // 850
744:          //
745:          verifyException("org.sat4j.core.VecInt", e);
746:       }
747:   }
748: 
749:   @Test(timeout = 4000)
750:   public void test045()  throws Throwable  {
751:       VecInt vecInt0 = new VecInt();
752:       // Undeclared exception!
753:       try { 
754:         vecInt0.remove(1170);
755:         fail("Expecting exception: NoSuchElementException");
756:       
757:       } catch(NoSuchElementException e) {
758:          //
759:          // no message in exception (getMessage() returned null)
760:          //
761:          verifyException("org.sat4j.core.VecInt", e);
762:       }
763:   }
764: 
765:   @Test(timeout = 4000)
766:   public void test046()  throws Throwable  {
767:       int int0 = 0;
768:       VecInt vecInt0 = new VecInt(0);
769:       int int1 = 2;
770:       VecInt vecInt1 = new VecInt(2, 1);
771:       IVecInt iVecInt0 = vecInt1.pop();
772:       iVecInt0.iterator();
773:       // Undeclared exception!
774:       try { 
775:         vecInt0.delete(1);
776:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
777:       
778:       } catch(ArrayIndexOutOfBoundsException e) {
779:          //
780:          // 1
781:          //
782:          verifyException("org.sat4j.core.VecInt", e);
783:       }
784:   }
785: 
786:   @Test(timeout = 4000)
787:   public void test047()  throws Throwable  {
788:       VecInt vecInt0 = new VecInt();
789:       Object object0 = new Object();
790:       vecInt0.equals(object0);
791:   }
792: 
793:   @Test(timeout = 4000)
794:   public void test048()  throws Throwable  {
795:       VecInt vecInt0 = new VecInt();
796:       vecInt0.toArray();
797:       vecInt0.ensure(0);
798:   }
799: 
800:   @Test(timeout = 4000)
801:   public void test049()  throws Throwable  {
802:       int[] intArray0 = new int[2];
803:       VecInt vecInt0 = new VecInt(intArray0);
804:       vecInt0.toString();
805:       VecInt vecInt1 = new VecInt();
806:       vecInt0.shrinkTo(2350);
807:       int int0 = (-2555);
808:       // Undeclared exception!
809:       try { 
810:         vecInt0.contains((-2555));
811:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
812:       
813:       } catch(ArrayIndexOutOfBoundsException e) {
814:          //
815:          // 2
816:          //
817:          verifyException("org.sat4j.core.VecInt", e);
818:       }
819:   }
820: 
821:   @Test(timeout = 4000)
822:   public void test050()  throws Throwable  {
823:       VecInt vecInt0 = new VecInt();
824:       vecInt0.toArray();
825:   }
826: 
827:   @Test(timeout = 4000)
828:   public void test051()  throws Throwable  {
829:       VecInt vecInt0 = new VecInt();
830:       vecInt0.sortUnique();
831:       int int0 = 3897;
832:       vecInt0.insertFirst(3897);
833:       vecInt0.toString();
834:       vecInt0.pop();
835:       IVecInt iVecInt0 = vecInt0.clone();
836:       IVecInt iVecInt1 = vecInt0.clone();
837:       vecInt0.unsafeGet(0);
838:       vecInt0.unsafePush(3897);
839:       vecInt0.size();
840:       VecInt vecInt1 = new VecInt();
841:       vecInt0.moveTo2(iVecInt0);
842:       vecInt1.pushAll(iVecInt1);
843:       vecInt1.sortUnique();
844:       vecInt1.contains((-1));
845:       vecInt1.sort((Comparator<Integer>) null);
846:       vecInt0.isSubsetOf(vecInt1);
847:       vecInt1.sort((Comparator<Integer>) null);
848:       int int1 = 0;
849:       vecInt1.unsafeGet(0);
850:       // Undeclared exception!
851:       try { 
852:         vecInt0.remove((-1));
853:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
854:       
855:       } catch(ArrayIndexOutOfBoundsException e) {
856:          //
857:          // 0
858:          //
859:          verifyException("org.sat4j.core.VecInt", e);
860:       }
861:   }
862: 
863:   @Test(timeout = 4000)
864:   public void test052()  throws Throwable  {
865:       int[] intArray0 = new int[3];
866:       intArray0[0] = 0;
867:       intArray0[1] = 3279;
868:       VecInt vecInt0 = new VecInt(intArray0);
869:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
870:       doReturn(3279, 0, 3279).when(comparator0).compare(anyInt() , anyInt());
871:       vecInt0.sort(comparator0);
872:       vecInt0.insertFirst(3279);
873:       vecInt0.toString();
874:       VecInt vecInt1 = new VecInt(intArray0);
875:       vecInt1.moveTo(intArray0);
876:   }
877: 
878:   @Test(timeout = 4000)
879:   public void test053()  throws Throwable  {
880:     Future<?> future = executor.submit(new Runnable(){ 
881:             @Override public void run() { 
882:           int[] intArray0 = new int[4];
883:           intArray0[0] = 2205;
884:           VecInt vecInt0 = new VecInt(intArray0);
885:           VecInt vecInt1 = new VecInt(1265, 2448);
886:           vecInt1.push((-517));
887:           VecInt vecInt2 = new VecInt();
888:           VecInt vecInt3 = new VecInt();
889:           vecInt3.size();
890:           vecInt1.push(1101);
891:           VecInt vecInt4 = new VecInt();
892:           VecInt vecInt5 = new VecInt(2448);
893:           vecInt5.push(0);
894:           vecInt5.copyTo((IVecInt) vecInt4);
895:           vecInt4.clear();
896:           vecInt4.push(229);
897:           vecInt1.sort();
898:           vecInt5.toArray();
899:           vecInt0.isSubsetOf(vecInt5);
900:       } 
901:     });
902:     future.get(4000, TimeUnit.MILLISECONDS);
903:   }
904: 
905:   @Test(timeout = 4000)
906:   public void test054()  throws Throwable  {
907:       VecInt vecInt0 = new VecInt();
908:       VecInt vecInt1 = new VecInt(1991, (-646));
909:       vecInt1.toString();
910:       VecInt vecInt2 = new VecInt();
911:       vecInt0.contains(1957);
912:       vecInt0.subset(1984);
913:       vecInt1.unsafeGet(1957);
914:   }
915: 
916:   @Test(timeout = 4000)
917:   public void test055()  throws Throwable  {
918:       int[] intArray0 = new int[5];
919:       intArray0[0] = 617;
920:       intArray0[1] = 15;
921:       intArray0[2] = (-3478);
922:       intArray0[3] = 452;
923:       intArray0[4] = (-4922);
924:       VecInt vecInt0 = new VecInt(intArray0);
925:       int int0 = (-666);
926:       vecInt0.shrink((-666));
927:       // Undeclared exception!
928:       try { 
929:         vecInt0.toString();
930:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
931:       
932:       } catch(ArrayIndexOutOfBoundsException e) {
933:          //
934:          // 5
935:          //
936:          verifyException("org.sat4j.core.VecInt", e);
937:       }
938:   }
939: 
940:   @Test(timeout = 4000)
941:   public void test056()  throws Throwable  {
942:       VecInt vecInt0 = new VecInt();
943:       vecInt0.pop();
944:   }
945: 
946:   @Test(timeout = 4000)
947:   public void test057()  throws Throwable  {
948:       VecInt vecInt0 = new VecInt();
949:       EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
950:       // Undeclared exception!
951:       try { 
952:         vecInt0.moveTo2(emptyVecInt0);
953:         fail("Expecting exception: ClassCastException");
954:       
955:       } catch(ClassCastException e) {
956:          //
957:          // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
958:          //
959:          verifyException("org.sat4j.core.VecInt", e);
960:       }
961:   }
962: 
963:   @Test(timeout = 4000)
964:   public void test058()  throws Throwable  {
965:       VecInt vecInt0 = new VecInt(1392);
966:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
967:       vecInt0.selectionSort(1392, (-2012), comparator0);
968:       Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
969:       vecInt0.push(0);
970:       vecInt0.sort(comparator1);
971:       vecInt0.contains((-1));
972:       vecInt0.size();
973:       vecInt0.growTo((-1), 5);
974:       int int0 = 1411;
975:       // Undeclared exception!
976:       try { 
977:         vecInt0.sort((-171), 1411);
978:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
979:       
980:       } catch(ArrayIndexOutOfBoundsException e) {
981:          //
982:          // -171
983:          //
984:          verifyException("org.sat4j.core.VecInt", e);
985:       }
986:   }
987: 
988:   @Test(timeout = 4000)
989:   public void test059()  throws Throwable  {
990:       VecInt vecInt0 = new VecInt(2, 2);
991:       vecInt0.contains(2);
992:   }
993: 
994:   @Test(timeout = 4000)
995:   public void test060()  throws Throwable  {
996:       int[] intArray0 = new int[7];
997:       intArray0[0] = (-587);
998:       intArray0[1] = 0;
999:       intArray0[2] = 0;
1000:       intArray0[3] = 2778;
1001:       intArray0[4] = 1533;
1002:       intArray0[5] = 0;
1003:       intArray0[6] = 0;
1004:       VecInt vecInt0 = new VecInt(intArray0);
1005:       vecInt0.copyTo(intArray0);
1006:   }
1007: 
1008:   @Test(timeout = 4000)
1009:   public void test061()  throws Throwable  {
1010:       VecInt vecInt0 = new VecInt(2, 2);
1011:       vecInt0.push(1419);
1012:       vecInt0.push(2);
1013:       vecInt0.remove(2);
1014:       vecInt0.unsafePush(3657);
1015:       vecInt0.unsafePush((-5366));
1016:       // Undeclared exception!
1017:       try { 
1018:         vecInt0.growTo(1284, 2);
1019:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1020:       
1021:       } catch(ArrayIndexOutOfBoundsException e) {
1022:          //
1023:          // 1284
1024:          //
1025:          verifyException("org.sat4j.core.VecInt", e);
1026:       }
1027:   }
1028: 
1029:   @Test(timeout = 4000)
1030:   public void test062()  throws Throwable  {
1031:       VecInt vecInt0 = new VecInt(0);
1032:       IVecInt iVecInt0 = vecInt0.push(0);
1033:       int[] intArray0 = new int[5];
1034:       intArray0[0] = 0;
1035:       int int0 = (-607);
1036:       vecInt0.copyTo(iVecInt0);
1037:       intArray0[1] = (-607);
1038:       intArray0[2] = 0;
1039:       intArray0[3] = 0;
1040:       intArray0[4] = 0;
1041:       vecInt0.moveTo(intArray0);
1042:       vecInt0.iterator();
1043:       // Undeclared exception!
1044:       try { 
1045:         vecInt0.set((-2540), 0);
1046:         fail("Expecting exception: AssertionError");
1047:       
1048:       } catch(AssertionError e) {
1049:          //
1050:          // no message in exception (getMessage() returned null)
1051:          //
1052:       }
1053:   }
1054: 
1055:   @Test(timeout = 4000)
1056:   public void test063()  throws Throwable  {
1057:       VecInt vecInt0 = new VecInt();
1058:       vecInt0.shrink(1280);
1059:       // Undeclared exception!
1060:       try { 
1061:         vecInt0.ensure(2391);
1062:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1063:       
1064:       } catch(ArrayIndexOutOfBoundsException e) {
1065:       }
1066:   }
1067: 
1068:   @Test(timeout = 4000)
1069:   public void test064()  throws Throwable  {
1070:       int[] intArray0 = new int[2];
1071:       intArray0[0] = 0;
1072:       intArray0[1] = 3279;
1073:       VecInt vecInt0 = new VecInt(intArray0);
1074:       vecInt0.sortUnique();
1075:       vecInt0.isEmpty();
1076:   }
1077: 
1078:   @Test(timeout = 4000)
1079:   public void test065()  throws Throwable  {
1080:       int int0 = 1;
1081:       VecInt vecInt0 = new VecInt(1, (-398));
1082:       vecInt0.shrink(1355);
1083:       // Undeclared exception!
1084:       try { 
1085:         vecInt0.push(2606);
1086:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1087:       
1088:       } catch(ArrayIndexOutOfBoundsException e) {
1089:          //
1090:          // -1354
1091:          //
1092:          verifyException("org.sat4j.core.VecInt", e);
1093:       }
1094:   }
1095: 
1096:   @Test(timeout = 4000)
1097:   public void test066()  throws Throwable  {
1098:       VecInt vecInt0 = new VecInt(2, 2);
1099:       // Undeclared exception!
1100:       try { 
1101:         vecInt0.growTo(2361, 2368);
1102:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1103:       
1104:       } catch(ArrayIndexOutOfBoundsException e) {
1105:          //
1106:          // 2361
1107:          //
1108:          verifyException("org.sat4j.core.VecInt", e);
1109:       }
1110:   }
1111: 
1112:   @Test(timeout = 4000)
1113:   public void test067()  throws Throwable  {
1114:       VecInt vecInt0 = new VecInt();
1115:       // Undeclared exception!
1116:       try { 
1117:         vecInt0.delete(3604);
1118:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1119:       
1120:       } catch(ArrayIndexOutOfBoundsException e) {
1121:          //
1122:          // 3604
1123:          //
1124:          verifyException("org.sat4j.core.VecInt", e);
1125:       }
1126:   }
1127: 
1128:   @Test(timeout = 4000)
1129:   public void test068()  throws Throwable  {
1130:       int int0 = 0;
1131:       int int1 = (-398);
1132:       VecInt vecInt0 = new VecInt(0, (-398));
1133:       vecInt0.subset(0);
1134:       int int2 = (-1104);
1135:       vecInt0.growTo((-1104), (-1104));
1136:       int int3 = (-3016);
1137:       EmptyVecInt emptyVecInt0 = new EmptyVecInt();
1138:       // Undeclared exception!
1139:       try { 
1140:         emptyVecInt0.toArray();
1141:         fail("Expecting exception: UnsupportedOperationException");
1142:       
1143:       } catch(UnsupportedOperationException e) {
1144:          //
1145:          // no message in exception (getMessage() returned null)
1146:          //
1147:          verifyException("org.sat4j.core.EmptyVecInt", e);
1148:       }
1149:   }
1150: 
1151:   @Test(timeout = 4000)
1152:   public void test069()  throws Throwable  {
1153:       VecInt vecInt0 = new VecInt(2, 2);
1154:       vecInt0.contains(2);
1155:       vecInt0.subset(2);
1156:   }
1157: 
1158:   @Test(timeout = 4000)
1159:   public void test070()  throws Throwable  {
1160:       VecInt vecInt0 = new VecInt(844);
1161:       // Undeclared exception!
1162:       try { 
1163:         vecInt0.last();
1164:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1165:       
1166:       } catch(ArrayIndexOutOfBoundsException e) {
1167:          //
1168:          // -1
1169:          //
1170:          verifyException("org.sat4j.core.VecInt", e);
1171:       }
1172:   }
1173: 
1174:   @Test(timeout = 4000)
1175:   public void test071()  throws Throwable  {
1176:       VecInt vecInt0 = new VecInt();
1177:       VecInt vecInt1 = new VecInt(2391, 2391);
1178:       vecInt1.shrink(1280);
1179:       vecInt1.ensure(2391);
1180:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1181:       doReturn((-2157), (-2157), 14, 1672, (-2157)).when(comparator0).compare(anyInt() , anyInt());
1182:       // Undeclared exception!
1183:       try { 
1184:         vecInt1.sort(comparator0);
1185:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1186:       
1187:       } catch(ArrayIndexOutOfBoundsException e) {
1188:          //
1189:          // 2391
1190:          //
1191:          verifyException("org.sat4j.core.VecInt", e);
1192:       }
1193:   }
1194: 
1195:   @Test(timeout = 4000)
1196:   public void test072()  throws Throwable  {
1197:       VecInt vecInt0 = new VecInt();
1198:       vecInt0.shrinkTo(0);
1199:       vecInt0.pop();
1200:   }
1201: 
1202:   @Test(timeout = 4000)
1203:   public void test073()  throws Throwable  {
1204:       int[] intArray0 = new int[4];
1205:       intArray0[0] = (-473);
1206:       intArray0[1] = (-95);
1207:       intArray0[2] = 15;
1208:       intArray0[3] = (-2924);
1209:       VecInt vecInt0 = new VecInt(intArray0);
1210:       vecInt0.shrinkTo(15);
1211:       // Undeclared exception!
1212:       try { 
1213:         vecInt0.clone();
1214:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1215:       
1216:       } catch(ArrayIndexOutOfBoundsException e) {
1217:          //
1218:          // no message in exception (getMessage() returned null)
1219:          //
1220:          verifyException("org.sat4j.core.VecInt", e);
1221:       }
1222:   }
1223: 
1224:   @Test(timeout = 4000)
1225:   public void test074()  throws Throwable  {
1226:       VecInt vecInt0 = new VecInt(1662, (-267));
1227:       // Undeclared exception!
1228:       try { 
1229:         vecInt0.copyTo((IVecInt) null);
1230:         fail("Expecting exception: NullPointerException");
1231:       
1232:       } catch(NullPointerException e) {
1233:          //
1234:          // no message in exception (getMessage() returned null)
1235:          //
1236:       }
1237:   }
1238: 
1239:   @Test(timeout = 4000)
1240:   public void test075()  throws Throwable  {
1241:       VecInt vecInt0 = new VecInt(1, 1);
1242:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1243:       vecInt0.sortUnique();
1244:       vecInt0.clear();
1245:       vecInt0.sort(comparator0);
1246:       vecInt0.selectionSort(1, 0, (Comparator<Integer>) null);
1247:       vecInt0.sort((Comparator<Integer>) null);
1248:       vecInt0.shrink(0);
1249:       VecInt vecInt1 = new VecInt(1412);
1250:       vecInt1.sort();
1251:       vecInt1.get(1);
1252:   }
1253: 
1254:   @Test(timeout = 4000)
1255:   public void test076()  throws Throwable  {
1256:       VecInt vecInt0 = new VecInt();
1257:       VecInt vecInt1 = new VecInt();
1258:       vecInt0.isSubsetOf(vecInt1);
1259:   }
1260: 
1261:   @Test(timeout = 4000)
1262:   public void test077()  throws Throwable  {
1263:       VecInt vecInt0 = new VecInt();
1264:       // Undeclared exception!
1265:       try { 
1266:         vecInt0.selectionSort(1, 760);
1267:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1268:       
1269:       } catch(ArrayIndexOutOfBoundsException e) {
1270:          //
1271:          // 5
1272:          //
1273:          verifyException("org.sat4j.core.VecInt", e);
1274:       }
1275:   }
1276: 
1277:   @Test(timeout = 4000)
1278:   public void test078()  throws Throwable  {
1279:       VecInt vecInt0 = new VecInt();
1280:       VecInt vecInt1 = new VecInt();
1281:       vecInt1.contains(2943);
1282:       vecInt1.toString();
1283:       VecInt vecInt2 = new VecInt();
1284:       // Undeclared exception!
1285:       try { 
1286:         vecInt2.moveTo((-1660), (int[]) null);
1287:         fail("Expecting exception: NullPointerException");
1288:       
1289:       } catch(NullPointerException e) {
1290:       }
1291:   }
1292: 
1293:   @Test(timeout = 4000)
1294:   public void test079()  throws Throwable  {
1295:       int[] intArray0 = new int[2];
1296:       intArray0[0] = (-2428);
1297:       intArray0[1] = 1;
1298:       VecInt vecInt0 = new VecInt(intArray0);
1299:       vecInt0.contains(0);
1300:   }
1301: 
1302:   @Test(timeout = 4000)
1303:   public void test080()  throws Throwable  {
1304:       VecInt vecInt0 = new VecInt();
1305:       EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
1306:       vecInt0.isEmpty();
1307:   }
1308: 
1309:   @Test(timeout = 4000)
1310:   public void test081()  throws Throwable  {
1311:       int[] intArray0 = new int[1];
1312:       VecInt vecInt0 = new VecInt(intArray0);
1313:       // Undeclared exception!
1314:       try { 
1315:         vecInt0.set((-1071), (-1071));
1316:         fail("Expecting exception: AssertionError");
1317:       
1318:       } catch(AssertionError e) {
1319:          //
1320:          // no message in exception (getMessage() returned null)
1321:          //
1322:       }
1323:   }
1324: 
1325:   @Test(timeout = 4000)
1326:   public void test082()  throws Throwable  {
1327:       int int0 = 1;
1328:       int int1 = (-398);
1329:       VecInt vecInt0 = new VecInt(1, (-398));
1330:       vecInt0.subset(1);
1331:       int int2 = (-1104);
1332:       vecInt0.growTo((-1104), (-1104));
1333:       int int3 = (-3016);
1334:       EmptyVecInt emptyVecInt0 = new EmptyVecInt();
1335:       // Undeclared exception!
1336:       try { 
1337:         emptyVecInt0.toArray();
1338:         fail("Expecting exception: UnsupportedOperationException");
1339:       
1340:       } catch(UnsupportedOperationException e) {
1341:          //
1342:          // no message in exception (getMessage() returned null)
1343:          //
1344:          verifyException("org.sat4j.core.EmptyVecInt", e);
1345:       }
1346:   }
1347: 
1348:   @Test(timeout = 4000)
1349:   public void test083()  throws Throwable  {
1350:       VecInt vecInt0 = new VecInt();
1351:       vecInt0.sort();
1352:   }
1353: 
1354:   @Test(timeout = 4000)
1355:   public void test084()  throws Throwable  {
1356:       VecInt vecInt0 = new VecInt();
1357:       int int0 = 0;
1358:       int[] intArray0 = new int[7];
1359:       intArray0[0] = 0;
1360:       intArray0[1] = 0;
1361:       intArray0[2] = 0;
1362:       intArray0[3] = 0;
1363:       intArray0[4] = 0;
1364:       intArray0[5] = (-2620);
1365:       intArray0[6] = 0;
1366:       vecInt0.moveTo(0, intArray0);
1367:       // Undeclared exception!
1368:       try { 
1369:         vecInt0.set(0, 0);
1370:         fail("Expecting exception: AssertionError");
1371:       
1372:       } catch(AssertionError e) {
1373:          //
1374:          // no message in exception (getMessage() returned null)
1375:          //
1376:       }
1377:   }
1378: 
1379:   @Test(timeout = 4000)
1380:   public void test085()  throws Throwable  {
1381:       VecInt vecInt0 = new VecInt(2132);
1382:       vecInt0.push(2132);
1383:       int int0 = 1971;
1384:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1385:       doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
1386:       // Undeclared exception!
1387:       vecInt0.selectionSort(0, 1971, comparator0);
1388:   }
1389: 
1390:   @Test(timeout = 4000)
1391:   public void test086()  throws Throwable  {
1392:       VecInt vecInt0 = new VecInt();
1393:       vecInt0.shrink((-2044));
1394:       // Undeclared exception!
1395:       try { 
1396:         vecInt0.insertFirst((-2044));
1397:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1398:       
1399:       } catch(ArrayIndexOutOfBoundsException e) {
1400:       }
1401:   }
1402: 
1403:   @Test(timeout = 4000)
1404:   public void test087()  throws Throwable  {
1405:       VecInt vecInt0 = new VecInt();
1406:       vecInt0.ensure(7);
1407:       vecInt0.size();
1408:   }
1409: 
1410:   @Test(timeout = 4000)
1411:   public void test088()  throws Throwable  {
1412:     Future<?> future = executor.submit(new Runnable(){ 
1413:             @Override public void run() { 
1414:           VecInt vecInt0 = new VecInt();
1415:           vecInt0.sortUnique();
1416:           int int0 = 1932;
1417:           VecInt vecInt1 = new VecInt(1932, 1932);
1418:           // Undeclared exception!
1419:           vecInt1.sortUnique();
1420:       } 
1421:     });
1422:     future.get(4000, TimeUnit.MILLISECONDS);
1423:   }
1424: 
1425:   @Test(timeout = 4000)
1426:   public void test089()  throws Throwable  {
1427:       VecInt vecInt0 = new VecInt();
1428:       vecInt0.contains((-1));
1429:       vecInt0.push((-1));
1430:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1431:       vecInt0.sort(comparator0);
1432:       vecInt0.contains((-1211));
1433:       vecInt0.size();
1434:       VecInt vecInt1 = new VecInt();
1435:       vecInt1.growTo((-1642), (-2113));
1436:       vecInt1.equals(vecInt0);
1437:   }
1438: 
1439:   @Test(timeout = 4000)
1440:   public void test090()  throws Throwable  {
1441:       int int0 = (-5082);
1442:       VecInt vecInt0 = null;
1443:       try {
1444:         vecInt0 = new VecInt((-5082));
1445:         fail("Expecting exception: NegativeArraySizeException");
1446:       
1447:       } catch(NegativeArraySizeException e) {
1448:          //
1449:          // no message in exception (getMessage() returned null)
1450:          //
1451:          verifyException("org.sat4j.core.VecInt", e);
1452:       }
1453:   }
1454: 
1455:   @Test(timeout = 4000)
1456:   public void test091()  throws Throwable  {
1457:       VecInt vecInt0 = new VecInt();
1458:       // Undeclared exception!
1459:       try { 
1460:         vecInt0.get((-2439));
1461:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1462:       
1463:       } catch(ArrayIndexOutOfBoundsException e) {
1464:          //
1465:          // no message in exception (getMessage() returned null)
1466:          //
1467:       }
1468:   }
1469: 
1470:   @Test(timeout = 4000)
1471:   public void test092()  throws Throwable  {
1472:       int[] intArray0 = new int[5];
1473:       intArray0[0] = 0;
1474:       int int0 = 3791;
1475:       intArray0[1] = 3791;
1476:       int int1 = 1107;
1477:       intArray0[2] = 1107;
1478:       intArray0[3] = 1694;
1479:       intArray0[4] = 2377;
1480:       VecInt vecInt0 = new VecInt(intArray0);
1481:       int int2 = (-1863);
1482:       IVecInt iVecInt0 = vecInt0.pop();
1483:       vecInt0.pushAll(iVecInt0);
1484:       vecInt0.push(0);
1485:       vecInt0.clear();
1486:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1487:       vecInt0.selectionSort(3791, 1818, comparator0);
1488:       // Undeclared exception!
1489:       try { 
1490:         vecInt0.set((-1863), 1694);
1491:         fail("Expecting exception: AssertionError");
1492:       
1493:       } catch(AssertionError e) {
1494:          //
1495:          // no message in exception (getMessage() returned null)
1496:          //
1497:       }
1498:   }
1499: 
1500:   @Test(timeout = 4000)
1501:   public void test093()  throws Throwable  {
1502:       int[] intArray0 = new int[1];
1503:       intArray0[0] = 0;
1504:       VecInt vecInt0 = new VecInt(intArray0);
1505:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1506:       vecInt0.sort(comparator0);
1507:       vecInt0.insertFirst(0);
1508:       vecInt0.toString();
1509:       vecInt0.containsAt(1279, 1279);
1510:   }
1511: 
1512:   @Test(timeout = 4000)
1513:   public void test094()  throws Throwable  {
1514:       VecInt vecInt0 = new VecInt(2, 2);
1515:       vecInt0.toString();
1516:       VecInt vecInt1 = new VecInt();
1517:       vecInt0.sortUnique();
1518:       vecInt0.isEmpty();
1519:   }
1520: 
1521:   @Test(timeout = 4000)
1522:   public void test095()  throws Throwable  {
1523:       int[] intArray0 = new int[1];
1524:       VecInt vecInt0 = new VecInt(intArray0);
1525:       vecInt0.clear();
1526:       vecInt0.copyTo(intArray0);
1527:       EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
1528:       // Undeclared exception!
1529:       try { 
1530:         vecInt0.pushAll(emptyVecInt0);
1531:         fail("Expecting exception: ClassCastException");
1532:       
1533:       } catch(ClassCastException e) {
1534:          //
1535:          // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
1536:          //
1537:          verifyException("org.sat4j.core.VecInt", e);
1538:       }
1539:   }
1540: 
1541:   @Test(timeout = 4000)
1542:   public void test096()  throws Throwable  {
1543:       int int0 = 1;
1544:       VecInt vecInt0 = new VecInt(1, 1);
1545:       // Undeclared exception!
1546:       try { 
1547:         vecInt0.moveTo2((IVecInt) null);
1548:         fail("Expecting exception: NullPointerException");
1549:       
1550:       } catch(NullPointerException e) {
1551:          //
1552:          // no message in exception (getMessage() returned null)
1553:          //
1554:          verifyException("org.sat4j.core.VecInt", e);
1555:       }
1556:   }
1557: 
1558:   @Test(timeout = 4000)
1559:   public void test097()  throws Throwable  {
1560:       VecInt vecInt0 = new VecInt();
1561:       vecInt0.containsAt(1073);
1562:   }
1563: 
1564:   @Test(timeout = 4000)
1565:   public void test098()  throws Throwable  {
1566:       VecInt vecInt0 = new VecInt(1, 1);
1567:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1568:       vecInt0.sort(comparator0);
1569:       int[] intArray0 = new int[9];
1570:       intArray0[0] = 1;
1571:       intArray0[1] = 1;
1572:       intArray0[2] = 1;
1573:       intArray0[3] = 750;
1574:       intArray0[4] = 1;
1575:       intArray0[5] = 1;
1576:       intArray0[6] = 1;
1577:       intArray0[7] = 1;
1578:       intArray0[8] = 1;
1579:       vecInt0.moveTo(intArray0);
1580:       vecInt0.clone();
1581:       ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
1582:       // Undeclared exception!
1583:       try { 
1584:         vecInt0.moveTo2(readOnlyVecInt0);
1585:         fail("Expecting exception: ClassCastException");
1586:       
1587:       } catch(ClassCastException e) {
1588:          //
1589:          // org.sat4j.core.ReadOnlyVecInt cannot be cast to org.sat4j.core.VecInt
1590:          //
1591:          verifyException("org.sat4j.core.VecInt", e);
1592:       }
1593:   }
1594: 
1595:   @Test(timeout = 4000)
1596:   public void test099()  throws Throwable  {
1597:       int[] intArray0 = new int[3];
1598:       intArray0[0] = 0;
1599:       intArray0[1] = 3279;
1600:       intArray0[2] = 2200;
1601:       VecInt vecInt0 = new VecInt(intArray0);
1602:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1603:       vecInt0.selectionSort(3279, 1328, comparator0);
1604:       vecInt0.shrinkTo(0);
1605:       vecInt0.growTo(0, 0);
1606:       vecInt0.clone();
1607:       vecInt0.indexOf(3279);
1608:       vecInt0.selectionSort(3279, 1);
1609:   }
1610: 
1611:   @Test(timeout = 4000)
1612:   public void test100()  throws Throwable  {
1613:       VecInt vecInt0 = new VecInt(8, 8);
1614:       IVecInt iVecInt0 = vecInt0.clone();
1615:       vecInt0.sortUnique();
1616:       iVecInt0.set(1, (-1071));
1617:   }
1618: 
1619:   @Test(timeout = 4000)
1620:   public void test101()  throws Throwable  {
1621:     Future<?> future = executor.submit(new Runnable(){ 
1622:             @Override public void run() { 
1623:           VecInt vecInt0 = new VecInt();
1624:           VecInt vecInt1 = new VecInt(2391, 2391);
1625:           vecInt1.shrink(1280);
1626:           vecInt1.ensure(2391);
1627:           vecInt0.pushAll(vecInt1);
1628:           vecInt1.copyTo((IVecInt) vecInt0);
1629:           Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1630:           vecInt0.selectionSort(1280, 1280, comparator0);
1631:           Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1632:           doReturn(0, 15, 5, 5, 5).when(comparator1).compare(anyInt() , anyInt());
1633:           vecInt1.sort(comparator1);
1634:           // Undeclared exception!
1635:           vecInt0.sort();
1636:       } 
1637:     });
1638:     future.get(4000, TimeUnit.MILLISECONDS);
1639:   }
1640: 
1641:   @Test(timeout = 4000)
1642:   public void test102()  throws Throwable  {
1643:       int[] intArray0 = new int[1];
1644:       intArray0[0] = (-109);
1645:       VecInt vecInt0 = new VecInt(intArray0);
1646:       vecInt0.shrink(491);
1647:       vecInt0.isSubsetOf(vecInt0);
1648:       // Undeclared exception!
1649:       try { 
1650:         vecInt0.get(396);
1651:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1652:       
1653:       } catch(ArrayIndexOutOfBoundsException e) {
1654:          //
1655:          // no message in exception (getMessage() returned null)
1656:          //
1657:       }
1658:   }
1659: 
1660:   @Test(timeout = 4000)
1661:   public void test103()  throws Throwable  {
1662:       int[] intArray0 = new int[2];
1663:       intArray0[0] = 1261;
1664:       intArray0[1] = 0;
1665:       VecInt vecInt0 = new VecInt(intArray0);
1666:       vecInt0.pop();
1667:       IVecInt iVecInt0 = vecInt0.pop();
1668:       vecInt0.pushAll(iVecInt0);
1669:       vecInt0.indexOf(0);
1670:       vecInt0.moveTo2(iVecInt0);
1671:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1672:       // Undeclared exception!
1673:       try { 
1674:         vecInt0.pushAll((IVecInt) null);
1675:         fail("Expecting exception: NullPointerException");
1676:       
1677:       } catch(NullPointerException e) {
1678:          //
1679:          // no message in exception (getMessage() returned null)
1680:          //
1681:          verifyException("org.sat4j.core.VecInt", e);
1682:       }
1683:   }
1684: 
1685:   @Test(timeout = 4000)
1686:   public void test104()  throws Throwable  {
1687:       int int0 = 1455;
1688:       int int1 = 1;
1689:       VecInt vecInt0 = new VecInt(1455, 1);
1690:       vecInt0.containsAt(1455, 0);
1691:       vecInt0.toString();
1692:       vecInt0.insertFirst(0);
1693:       EmptyVecInt emptyVecInt0 = new EmptyVecInt();
1694:       vecInt0.shrinkTo(1455);
1695:       // Undeclared exception!
1696:       try { 
1697:         vecInt0.pushAll(emptyVecInt0);
1698:         fail("Expecting exception: ClassCastException");
1699:       
1700:       } catch(ClassCastException e) {
1701:          //
1702:          // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
1703:          //
1704:          verifyException("org.sat4j.core.VecInt", e);
1705:       }
1706:   }
1707: 
1708:   @Test(timeout = 4000)
1709:   public void test105()  throws Throwable  {
1710:       VecInt vecInt0 = new VecInt(2, 2);
1711:       vecInt0.sortUnique();
1712:       // Undeclared exception!
1713:       try { 
1714:         vecInt0.isSubsetOf((VecInt) null);
1715:         fail("Expecting exception: NullPointerException");
1716:       
1717:       } catch(NullPointerException e) {
1718:          //
1719:          // no message in exception (getMessage() returned null)
1720:          //
1721:          verifyException("org.sat4j.core.VecInt", e);
1722:       }
1723:   }
1724: 
1725:   @Test(timeout = 4000)
1726:   public void test106()  throws Throwable  {
1727:       VecInt vecInt0 = new VecInt();
1728:       int int0 = 0;
1729:       // Undeclared exception!
1730:       try { 
1731:         vecInt0.set(0, 0);
1732:         fail("Expecting exception: AssertionError");
1733:       
1734:       } catch(AssertionError e) {
1735:          //
1736:          // no message in exception (getMessage() returned null)
1737:          //
1738:       }
1739:   }
1740: 
1741:   @Test(timeout = 4000)
1742:   public void test107()  throws Throwable  {
1743:       VecInt vecInt0 = new VecInt();
1744:       int int0 = 1280;
1745:       VecInt vecInt1 = new VecInt(2391, 2391);
1746:       vecInt1.shrink(1280);
1747:       vecInt1.ensure(2391);
1748:       vecInt0.pushAll(vecInt1);
1749:       vecInt1.copyTo((IVecInt) vecInt0);
1750:       vecInt0.set(1280, 5);
1751:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1752:       vecInt0.selectionSort(1280, 1280, comparator0);
1753:       int int1 = 1416;
1754:       vecInt0.sort(1416, (-1));
1755:       vecInt0.iterator();
1756:       Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1757:       doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
1758:       // Undeclared exception!
1759:       vecInt1.sort(0, 2391, comparator1);
1760:   }
1761: 
1762:   @Test(timeout = 4000)
1763:   public void test108()  throws Throwable  {
1764:       VecInt vecInt0 = new VecInt();
1765:       int int0 = 1422;
1766:       vecInt0.shrink(1422);
1767:       vecInt0.toArray();
1768:       vecInt0.sort((-1), (-1));
1769:       int int1 = (-1860);
1770:       // Undeclared exception!
1771:       try { 
1772:         vecInt0.remove((-1));
1773:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1774:       
1775:       } catch(ArrayIndexOutOfBoundsException e) {
1776:          //
1777:          // 5
1778:          //
1779:          verifyException("org.sat4j.core.VecInt", e);
1780:       }
1781:   }
1782: 
1783:   @Test(timeout = 4000)
1784:   public void test109()  throws Throwable  {
1785:       VecInt vecInt0 = new VecInt(2, 2);
1786:       vecInt0.sortUnique();
1787:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1788:       vecInt0.sort(comparator0);
1789:       ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
1790:       vecInt0.equals(readOnlyVecInt0);
1791:   }
1792: 
1793:   @Test(timeout = 4000)
1794:   public void test110()  throws Throwable  {
1795:       VecInt vecInt0 = new VecInt();
1796:       int int0 = 1453;
1797:       VecInt vecInt1 = new VecInt(1453, 1453);
1798:       vecInt0.toString();
1799:       int int1 = (-4396);
1800:       // Undeclared exception!
1801:       try { 
1802:         vecInt1.moveTo(1453, (-4396));
1803:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1804:       
1805:       } catch(ArrayIndexOutOfBoundsException e) {
1806:          //
1807:          // -4396
1808:          //
1809:          verifyException("org.sat4j.core.VecInt", e);
1810:       }
1811:   }
1812: 
1813:   @Test(timeout = 4000)
1814:   public void test111()  throws Throwable  {
1815:       VecInt vecInt0 = new VecInt();
1816:       vecInt0.clone();
1817:       int int0 = 5;
1818:       vecInt0.shrink(5);
1819:       vecInt0.sort();
1820:       int int1 = 0;
1821:       // Undeclared exception!
1822:       try { 
1823:         vecInt0.insertFirst(0);
1824:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1825:       
1826:       } catch(ArrayIndexOutOfBoundsException e) {
1827:          //
1828:          // -5
1829:          //
1830:          verifyException("org.sat4j.core.VecInt", e);
1831:       }
1832:   }
1833: 
1834:   @Test(timeout = 4000)
1835:   public void test112()  throws Throwable  {
1836:       VecInt vecInt0 = new VecInt();
1837:       vecInt0.shrink((-2044));
1838:       // Undeclared exception!
1839:       try { 
1840:         vecInt0.sort();
1841:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1842:       
1843:       } catch(ArrayIndexOutOfBoundsException e) {
1844:          //
1845:          // 1022
1846:          //
1847:          verifyException("org.sat4j.core.VecInt", e);
1848:       }
1849:   }
1850: 
1851:   @Test(timeout = 4000)
1852:   public void test113()  throws Throwable  {
1853:       VecInt vecInt0 = new VecInt();
1854:       int int0 = 2391;
1855:       VecInt vecInt1 = new VecInt(2391, 2391);
1856:       vecInt0.shrink(1280);
1857:       vecInt1.shrink(1280);
1858:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1859:       vecInt0.sort(comparator0);
1860:       vecInt1.ensure(2391);
1861:       // Undeclared exception!
1862:       try { 
1863:         vecInt0.pushAll(vecInt1);
1864:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1865:       
1866:       } catch(ArrayIndexOutOfBoundsException e) {
1867:       }
1868:   }
1869: 
1870:   @Test(timeout = 4000)
1871:   public void test114()  throws Throwable  {
1872:       int[] intArray0 = new int[3];
1873:       intArray0[0] = 0;
1874:       intArray0[1] = 3279;
1875:       VecInt vecInt0 = new VecInt(intArray0);
1876:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1877:       doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
1878:       vecInt0.sort(comparator0);
1879:       vecInt0.insertFirst(3279);
1880:       vecInt0.toString();
1881:       vecInt0.containsAt(2094, 0);
1882:   }
1883: 
1884:   @Test(timeout = 4000)
1885:   public void test115()  throws Throwable  {
1886:       VecInt vecInt0 = new VecInt(3279, (-3));
1887:       // Undeclared exception!
1888:       try { 
1889:         vecInt0.remove((-1867));
1890:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1891:       
1892:       } catch(ArrayIndexOutOfBoundsException e) {
1893:          //
1894:          // 3279
1895:          //
1896:          verifyException("org.sat4j.core.VecInt", e);
1897:       }
1898:   }
1899: 
1900:   @Test(timeout = 4000)
1901:   public void test116()  throws Throwable  {
1902:       VecInt vecInt0 = new VecInt();
1903:       vecInt0.clear();
1904:       VecInt vecInt1 = new VecInt();
1905:       vecInt1.clear();
1906:       vecInt1.clear();
1907:       vecInt0.clear();
1908:       vecInt1.push(1);
1909:       vecInt1.clear();
1910:       vecInt1.clear();
1911:       vecInt0.push(1);
1912:       vecInt0.pop();
1913:       vecInt1.pop();
1914:       vecInt0.push(1243);
1915:       vecInt1.isEmpty();
1916:       // Undeclared exception!
1917:       try { 
1918:         vecInt1.clone();
1919:         fail("Expecting exception: NegativeArraySizeException");
1920:       
1921:       } catch(NegativeArraySizeException e) {
1922:          //
1923:          // no message in exception (getMessage() returned null)
1924:          //
1925:          verifyException("org.sat4j.core.VecInt", e);
1926:       }
1927:   }
1928: 
1929:   @Test(timeout = 4000)
1930:   public void test117()  throws Throwable  {
1931:       VecInt vecInt0 = new VecInt();
1932:       int int0 = 1280;
1933:       VecInt vecInt1 = new VecInt(2391, 2391);
1934:       vecInt1.shrink(1280);
1935:       vecInt1.ensure(2391);
1936:       vecInt0.pushAll(vecInt1);
1937:       vecInt1.copyTo((IVecInt) vecInt0);
1938:       vecInt0.set(1280, 5);
1939:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1940:       vecInt0.selectionSort(1280, 1280, comparator0);
1941:       int int1 = 1416;
1942:       vecInt0.sort(1416, (-1));
1943:       vecInt0.iterator();
1944:       Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1945:       doReturn(2391, 0, 0, 2611, 2391).when(comparator1).compare(anyInt() , anyInt());
1946:       // Undeclared exception!
1947:       vecInt1.sort(0, 2391, comparator1);
1948:   }
1949: 
1950:   @Test(timeout = 4000)
1951:   public void test118()  throws Throwable  {
1952:       VecInt vecInt0 = new VecInt();
1953:       vecInt0.insertFirst((-1));
1954:       int[] intArray0 = new int[4];
1955:       intArray0[0] = (-1);
1956:       intArray0[1] = (-1);
1957:       intArray0[2] = (-1);
1958:       intArray0[3] = (-1);
1959:       VecInt vecInt1 = new VecInt(intArray0);
1960:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1961:       vecInt0.sort(comparator0);
1962:       Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1963:       doReturn(524, 1287, (-1), 524, (-1744)).when(comparator1).compare(anyInt() , anyInt());
1964:       vecInt1.sort(comparator1);
1965:       vecInt1.moveTo(intArray0);
1966:       VecInt vecInt2 = new VecInt();
1967:       vecInt2.size();
1968:       vecInt2.moveTo(0, intArray0);
1969:       vecInt2.moveTo(0, 0);
1970:       Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1971:       vecInt2.sort(comparator2);
1972:       vecInt2.size();
1973:       vecInt0.push(1);
1974:       vecInt0.isEmpty();
1975:       // Undeclared exception!
1976:       try { 
1977:         vecInt2.sort((-1), 1930);
1978:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1979:       
1980:       } catch(ArrayIndexOutOfBoundsException e) {
1981:          //
1982:          // 964
1983:          //
1984:          verifyException("org.sat4j.core.VecInt", e);
1985:       }
1986:   }
1987: 
1988:   @Test(timeout = 4000)
1989:   public void test119()  throws Throwable  {
1990:       VecInt vecInt0 = new VecInt(1, (-398));
1991:       vecInt0.subset(1);
1992:       vecInt0.shrink((-398));
1993:       // Undeclared exception!
1994:       try { 
1995:         vecInt0.sortUnique();
1996:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
1997:       
1998:       } catch(ArrayIndexOutOfBoundsException e) {
1999:          //
2000:          // 199
2001:          //
2002:          verifyException("org.sat4j.core.VecInt", e);
2003:       }
2004:   }
2005: 
2006:   @Test(timeout = 4000)
2007:   public void test120()  throws Throwable  {
2008:     Future<?> future = executor.submit(new Runnable(){ 
2009:             @Override public void run() { 
2010:           VecInt vecInt0 = new VecInt(2412, 2412);
2011:           // Undeclared exception!
2012:           vecInt0.sortUnique();
2013:       } 
2014:     });
2015:     future.get(4000, TimeUnit.MILLISECONDS);
2016:   }
2017: 
2018:   @Test(timeout = 4000)
2019:   public void test121()  throws Throwable  {
2020:       VecInt vecInt0 = new VecInt();
2021:       IVecInt iVecInt0 = vecInt0.pop();
2022:       vecInt0.containsAt((-2742));
2023:       ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
2024:       vecInt0.equals(readOnlyVecInt0);
2025:       // Undeclared exception!
2026:       try { 
2027:         vecInt0.push(593);
2028:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2029:       
2030:       } catch(ArrayIndexOutOfBoundsException e) {
2031:          //
2032:          // -1
2033:          //
2034:          verifyException("org.sat4j.core.VecInt", e);
2035:       }
2036:   }
2037: 
2038:   @Test(timeout = 4000)
2039:   public void test122()  throws Throwable  {
2040:       VecInt vecInt0 = new VecInt();
2041:       vecInt0.clear();
2042:       EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
2043:       // Undeclared exception!
2044:       try { 
2045:         vecInt0.delete(2395);
2046:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2047:       
2048:       } catch(ArrayIndexOutOfBoundsException e) {
2049:          //
2050:          // 2395
2051:          //
2052:          verifyException("org.sat4j.core.VecInt", e);
2053:       }
2054:   }
2055: 
2056:   @Test(timeout = 4000)
2057:   public void test123()  throws Throwable  {
2058:       int[] intArray0 = new int[1];
2059:       intArray0[0] = (-109);
2060:       VecInt vecInt0 = new VecInt(intArray0);
2061:       vecInt0.isEmpty();
2062:       vecInt0.last();
2063:       vecInt0.sort((-109), (-109));
2064:   }
2065: 
2066:   @Test(timeout = 4000)
2067:   public void test124()  throws Throwable  {
2068:       VecInt vecInt0 = new VecInt(0, 3315);
2069:       VecInt vecInt1 = new VecInt();
2070:       EmptyVecInt emptyVecInt0 = new EmptyVecInt();
2071:       // Undeclared exception!
2072:       try { 
2073:         vecInt1.copyTo((IVecInt) emptyVecInt0);
2074:         fail("Expecting exception: ClassCastException");
2075:       
2076:       } catch(ClassCastException e) {
2077:          //
2078:          // no message in exception (getMessage() returned null)
2079:          //
2080:       }
2081:   }
2082: 
2083:   @Test(timeout = 4000)
2084:   public void test125()  throws Throwable  {
2085:       VecInt vecInt0 = new VecInt();
2086:       VecInt vecInt1 = new VecInt(2391, 2391);
2087:       vecInt1.shrink(1280);
2088:       vecInt1.ensure(2391);
2089:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2090:       doReturn(2391, (-1043), (-1043), (-1043), (-1)).when(comparator0).compare(anyInt() , anyInt());
2091:       // Undeclared exception!
2092:       try { 
2093:         vecInt1.sort(comparator0);
2094:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2095:       
2096:       } catch(ArrayIndexOutOfBoundsException e) {
2097:          //
2098:          // -1
2099:          //
2100:          verifyException("org.sat4j.core.VecInt", e);
2101:       }
2102:   }
2103: 
2104:   @Test(timeout = 4000)
2105:   public void test126()  throws Throwable  {
2106:       VecInt vecInt0 = new VecInt(2, 2);
2107:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2108:       VecInt vecInt1 = new VecInt();
2109:       vecInt0.equals(vecInt1);
2110:       // Undeclared exception!
2111:       try { 
2112:         vecInt0.set(2, (-1071));
2113:         fail("Expecting exception: AssertionError");
2114:       
2115:       } catch(AssertionError e) {
2116:          //
2117:          // no message in exception (getMessage() returned null)
2118:          //
2119:       }
2120:   }
2121: 
2122:   @Test(timeout = 4000)
2123:   public void test127()  throws Throwable  {
2124:       int[] intArray0 = new int[3];
2125:       intArray0[0] = 0;
2126:       intArray0[1] = 3279;
2127:       VecInt vecInt0 = new VecInt(intArray0);
2128:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2129:       doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
2130:       vecInt0.sort(comparator0);
2131:       vecInt0.insertFirst(3279);
2132:       vecInt0.toString();
2133:       vecInt0.containsAt(2094, 0);
2134:       vecInt0.indexOf(3279);
2135:   }
2136: 
2137:   @Test(timeout = 4000)
2138:   public void test128()  throws Throwable  {
2139:       VecInt vecInt0 = new VecInt();
2140:       VecInt vecInt1 = new VecInt();
2141:       vecInt1.size();
2142:       vecInt1.contains(2190);
2143:       // Undeclared exception!
2144:       try { 
2145:         vecInt0.remove(0);
2146:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2147:       
2148:       } catch(ArrayIndexOutOfBoundsException e) {
2149:       }
2150:   }
2151: 
2152:   @Test(timeout = 4000)
2153:   public void test129()  throws Throwable  {
2154:       VecInt vecInt0 = new VecInt(2006);
2155:       int int0 = 1440;
2156:       int[] intArray0 = new int[7];
2157:       intArray0[0] = (-1);
2158:       intArray0[1] = (-1403);
2159:       intArray0[2] = 2006;
2160:       intArray0[3] = 2006;
2161:       intArray0[4] = 1440;
2162:       intArray0[5] = 2006;
2163:       intArray0[6] = 2006;
2164:       vecInt0.moveTo(intArray0);
2165:       vecInt0.sort(1440, 2006);
2166:       vecInt0.sortUnique();
2167:       // Undeclared exception!
2168:       vecInt0.selectionSort(1440, 2006);
2169:   }
2170: 
2171:   @Test(timeout = 4000)
2172:   public void test130()  throws Throwable  {
2173:       VecInt vecInt0 = new VecInt();
2174:       VecInt vecInt1 = new VecInt(2391, 2391);
2175:       vecInt1.shrink(1280);
2176:       vecInt1.ensure(2391);
2177:       vecInt0.pushAll(vecInt1);
2178:       vecInt1.copyTo((IVecInt) vecInt0);
2179:       vecInt0.set(1280, 5);
2180:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2181:       vecInt0.selectionSort(1280, 1280, comparator0);
2182:       vecInt0.sort(1416, (-1));
2183:       vecInt0.iterator();
2184:       vecInt0.iterator();
2185:       vecInt0.last();
2186:       vecInt1.hashCode();
2187:       vecInt0.set(1404, (-249));
2188:       vecInt0.indexOf((-3981));
2189:       // Undeclared exception!
2190:       try { 
2191:         vecInt1.set((-1), 2107);
2192:         fail("Expecting exception: AssertionError");
2193:       
2194:       } catch(AssertionError e) {
2195:          //
2196:          // no message in exception (getMessage() returned null)
2197:          //
2198:       }
2199:   }
2200: 
2201:   @Test(timeout = 4000)
2202:   public void test131()  throws Throwable  {
2203:       VecInt vecInt0 = new VecInt();
2204:       int int0 = 1280;
2205:       VecInt vecInt1 = new VecInt(1163, 0);
2206:       // Undeclared exception!
2207:       try { 
2208:         vecInt1.unsafePush(1163);
2209:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2210:       
2211:       } catch(ArrayIndexOutOfBoundsException e) {
2212:          //
2213:          // 1163
2214:          //
2215:          verifyException("org.sat4j.core.VecInt", e);
2216:       }
2217:   }
2218: 
2219:   @Test(timeout = 4000)
2220:   public void test132()  throws Throwable  {
2221:       int[] intArray0 = new int[15];
2222:       VecInt vecInt0 = new VecInt(intArray0);
2223:       VecInt vecInt1 = new VecInt();
2224:       vecInt0.sortUnique();
2225:       vecInt1.size();
2226:       vecInt0.isSubsetOf(vecInt1);
2227:   }
2228: 
2229:   @Test(timeout = 4000)
2230:   public void test133()  throws Throwable  {
2231:       VecInt vecInt0 = new VecInt(11);
2232:       IVecInt iVecInt0 = vecInt0.clone();
2233:       vecInt0.moveTo(iVecInt0);
2234:       vecInt0.subset((-3824));
2235:       vecInt0.subset((-3824));
2236:       vecInt0.selectionSort(609, 609);
2237:   }
2238: 
2239:   @Test(timeout = 4000)
2240:   public void test134()  throws Throwable  {
2241:       int[] intArray0 = new int[3];
2242:       intArray0[0] = 0;
2243:       intArray0[1] = 3279;
2244:       VecInt vecInt0 = new VecInt(intArray0);
2245:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2246:       doReturn(0, 3279, 0).when(comparator0).compare(anyInt() , anyInt());
2247:       vecInt0.sort(comparator0);
2248:       Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2249:       doReturn(0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
2250:       vecInt0.sort(comparator1);
2251:       int int0 = 1972;
2252:       VecInt vecInt1 = new VecInt(1972, 0);
2253:       vecInt0.isSubsetOf(vecInt1);
2254:       // Undeclared exception!
2255:       try { 
2256:         vecInt1.unsafeGet((-2523));
2257:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2258:       
2259:       } catch(ArrayIndexOutOfBoundsException e) {
2260:          //
2261:          // -2523
2262:          //
2263:          verifyException("org.sat4j.core.VecInt", e);
2264:       }
2265:   }
2266: 
2267:   @Test(timeout = 4000)
2268:   public void test135()  throws Throwable  {
2269:       int[] intArray0 = new int[2];
2270:       intArray0[0] = (-2428);
2271:       VecInt vecInt0 = new VecInt(intArray0);
2272:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2273:       doReturn(5).when(comparator0).compare(anyInt() , anyInt());
2274:       vecInt0.sort(comparator0);
2275:       Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2276:       doReturn(0).when(comparator1).compare(anyInt() , anyInt());
2277:       vecInt0.sort(comparator1);
2278:       vecInt0.insertFirst((-2428));
2279:       vecInt0.toString();
2280:       VecInt vecInt1 = new VecInt();
2281:       vecInt1.shrink(127);
2282:       vecInt1.contains(127);
2283:       vecInt0.isSubsetOf(vecInt1);
2284:       Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2285:       vecInt0.sort((-2428), (-2428), comparator2);
2286:   }
2287: 
2288:   @Test(timeout = 4000)
2289:   public void test136()  throws Throwable  {
2290:       int int0 = 1280;
2291:       VecInt vecInt0 = new VecInt(2391, 2391);
2292:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2293:       doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
2294:       // Undeclared exception!
2295:       vecInt0.sort(comparator0);
2296:   }
2297: 
2298:   @Test(timeout = 4000)
2299:   public void test137()  throws Throwable  {
2300:       int[] intArray0 = new int[1];
2301:       VecInt vecInt0 = new VecInt(intArray0);
2302:       vecInt0.contains((-649));
2303:       vecInt0.subset(2353);
2304:   }
2305: 
2306:   @Test(timeout = 4000)
2307:   public void test138()  throws Throwable  {
2308:       VecInt vecInt0 = new VecInt(940, 940);
2309:       // Undeclared exception!
2310:       vecInt0.selectionSort(27, 940);
2311:   }
2312: 
2313:   @Test(timeout = 4000)
2314:   public void test139()  throws Throwable  {
2315:       VecInt vecInt0 = new VecInt();
2316:       vecInt0.subset((-1847));
2317:   }
2318: 
2319:   @Test(timeout = 4000)
2320:   public void test140()  throws Throwable  {
2321:       VecInt vecInt0 = new VecInt();
2322:       vecInt0.sortUnique();
2323:       vecInt0.isEmpty();
2324:   }
2325: 
2326:   @Test(timeout = 4000)
2327:   public void test141()  throws Throwable  {
2328:       VecInt vecInt0 = new VecInt();
2329:       vecInt0.shrink(1593);
2330:       int int0 = 2;
2331:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2332:       // Undeclared exception!
2333:       try { 
2334:         vecInt0.delete(1593);
2335:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2336:       
2337:       } catch(ArrayIndexOutOfBoundsException e) {
2338:          //
2339:          // 1593
2340:          //
2341:          verifyException("org.sat4j.core.VecInt", e);
2342:       }
2343:   }
2344: 
2345:   @Test(timeout = 4000)
2346:   public void test142()  throws Throwable  {
2347:       int[] intArray0 = new int[5];
2348:       intArray0[0] = 0;
2349:       intArray0[1] = 1;
2350:       intArray0[2] = 0;
2351:       intArray0[3] = 4044;
2352:       intArray0[4] = 2090;
2353:       VecInt vecInt0 = new VecInt(intArray0);
2354:       vecInt0.remove(0);
2355:       EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
2356:       // Undeclared exception!
2357:       try { 
2358:         emptyVecInt0.containsAt(0);
2359:         fail("Expecting exception: UnsupportedOperationException");
2360:       
2361:       } catch(UnsupportedOperationException e) {
2362:          //
2363:          // no message in exception (getMessage() returned null)
2364:          //
2365:          verifyException("org.sat4j.core.EmptyVecInt", e);
2366:       }
2367:   }
2368: 
2369:   @Test(timeout = 4000)
2370:   public void test143()  throws Throwable  {
2371:       int[] intArray0 = new int[1];
2372:       int int0 = 0;
2373:       intArray0[0] = 0;
2374:       VecInt vecInt0 = new VecInt(intArray0);
2375:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2376:       // Undeclared exception!
2377:       try { 
2378:         vecInt0.selectionSort((-1981), 0, comparator0);
2379:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2380:       
2381:       } catch(ArrayIndexOutOfBoundsException e) {
2382:          //
2383:          // no message in exception (getMessage() returned null)
2384:          //
2385:       }
2386:   }
2387: 
2388:   @Test(timeout = 4000)
2389:   public void test144()  throws Throwable  {
2390:       VecInt vecInt0 = new VecInt(1, (-398));
2391:       vecInt0.subset(1);
2392:       vecInt0.sortUnique();
2393:       vecInt0.isEmpty();
2394:       VecInt vecInt1 = null;
2395:       // Undeclared exception!
2396:       try { 
2397:         VecInt.access$000((VecInt) null);
2398:         fail("Expecting exception: NullPointerException");
2399:       
2400:       } catch(NullPointerException e) {
2401:          //
2402:          // no message in exception (getMessage() returned null)
2403:          //
2404:          verifyException("org.sat4j.core.VecInt", e);
2405:       }
2406:   }
2407: 
2408:   @Test(timeout = 4000)
2409:   public void test145()  throws Throwable  {
2410:       VecInt vecInt0 = new VecInt();
2411:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2412:       vecInt0.sort(2371, 2371, comparator0);
2413:   }
2414: 
2415:   @Test(timeout = 4000)
2416:   public void test146()  throws Throwable  {
2417:       int[] intArray0 = new int[2];
2418:       VecInt vecInt0 = new VecInt(intArray0);
2419:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2420:       doReturn((-30)).when(comparator0).compare(anyInt() , anyInt());
2421:       vecInt0.sort(comparator0);
2422:       vecInt0.toString();
2423:       VecInt vecInt1 = new VecInt();
2424:       vecInt1.contains(127);
2425:   }
2426: 
2427:   @Test(timeout = 4000)
2428:   public void test147()  throws Throwable  {
2429:       int int0 = 0;
2430:       VecInt vecInt0 = new VecInt(0);
2431:       // Undeclared exception!
2432:       try { 
2433:         vecInt0.hashCode();
2434:         fail("Expecting exception: ArithmeticException");
2435:       
2436:       } catch(ArithmeticException e) {
2437:          //
2438:          // / by zero
2439:          //
2440:          verifyException("org.sat4j.core.VecInt", e);
2441:       }
2442:   }
2443: 
2444:   @Test(timeout = 4000)
2445:   public void test148()  throws Throwable  {
2446:       int int0 = 1280;
2447:       int int1 = 2391;
2448:       VecInt vecInt0 = new VecInt(2391, 2391);
2449:       vecInt0.shrink(1280);
2450:       vecInt0.ensure(2391);
2451:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2452:       Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2453:       doReturn((-830), (-57), 5, (-519), (-372)).when(comparator1).compare(anyInt() , anyInt());
2454:       // Undeclared exception!
2455:       try { 
2456:         vecInt0.sort(0, 2391, comparator1);
2457:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2458:       
2459:       } catch(ArrayIndexOutOfBoundsException e) {
2460:          //
2461:          // -1
2462:          //
2463:          verifyException("org.sat4j.core.VecInt", e);
2464:       }
2465:   }
2466: 
2467:   @Test(timeout = 4000)
2468:   public void test149()  throws Throwable  {
2469:       VecInt vecInt0 = new VecInt(0);
2470:       vecInt0.growTo(0, (-1851));
2471:       // Undeclared exception!
2472:       try { 
2473:         vecInt0.moveTo((int[]) null);
2474:         fail("Expecting exception: NullPointerException");
2475:       
2476:       } catch(NullPointerException e) {
2477:       }
2478:   }
2479: 
2480:   @Test(timeout = 4000)
2481:   public void test150()  throws Throwable  {
2482:       VecInt vecInt0 = new VecInt(283);
2483:       vecInt0.containsAt(283);
2484:       EmptyVecInt emptyVecInt0 = new EmptyVecInt();
2485:       // Undeclared exception!
2486:       try { 
2487:         emptyVecInt0.containsAt((-1));
2488:         fail("Expecting exception: UnsupportedOperationException");
2489:       
2490:       } catch(UnsupportedOperationException e) {
2491:          //
2492:          // no message in exception (getMessage() returned null)
2493:          //
2494:          verifyException("org.sat4j.core.EmptyVecInt", e);
2495:       }
2496:   }
2497: 
2498:   @Test(timeout = 4000)
2499:   public void test151()  throws Throwable  {
2500:       VecInt vecInt0 = new VecInt();
2501:       vecInt0.sortUnique();
2502:       vecInt0.insertFirst(3897);
2503:       vecInt0.toString();
2504:       VecInt vecInt1 = new VecInt(3897);
2505:       IVecInt iVecInt0 = vecInt0.clone();
2506:       VecInt vecInt2 = (VecInt)vecInt0.clone();
2507:       int int0 = new Integer(3897);
2508:       vecInt0.unsafePush(3897);
2509:       vecInt0.size();
2510:       VecInt vecInt3 = new VecInt();
2511:       vecInt0.moveTo2(iVecInt0);
2512:       vecInt3.pushAll(vecInt2);
2513:       vecInt3.sortUnique();
2514:       vecInt3.contains((-1));
2515:       vecInt3.sort((Comparator<Integer>) null);
2516:       vecInt0.isSubsetOf(vecInt3);
2517:       vecInt3.sort((Comparator<Integer>) null);
2518:       vecInt1.shrink(0);
2519:       vecInt1.containsAt((-4148));
2520:       int int1 = new Integer(2);
2521:       vecInt1.isEmpty();
2522:       vecInt0.insertFirst(2195);
2523:       vecInt2.pushAll(vecInt0);
2524:       vecInt1.containsAt(181);
2525:   }
2526: 
2527:   @Test(timeout = 4000)
2528:   public void test152()  throws Throwable  {
2529:       VecInt vecInt0 = new VecInt(2, 2);
2530:       vecInt0.sortUnique();
2531:       int[] intArray0 = new int[7];
2532:       intArray0[0] = 1;
2533:       intArray0[1] = 2677;
2534:       intArray0[2] = 3062;
2535:       intArray0[3] = 1;
2536:       intArray0[4] = 1456;
2537:       intArray0[5] = 3062;
2538:       intArray0[6] = 2;
2539:       vecInt0.shrink(2);
2540:       VecInt vecInt1 = new VecInt(intArray0);
2541:       vecInt1.contains(1805);
2542:       vecInt0.isEmpty();
2543:       // Undeclared exception!
2544:       try { 
2545:         vecInt0.subset(1805);
2546:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2547:       
2548:       } catch(ArrayIndexOutOfBoundsException e) {
2549:          //
2550:          // no message in exception (getMessage() returned null)
2551:          //
2552:          verifyException("org.sat4j.core.VecInt", e);
2553:       }
2554:   }
2555: 
2556:   @Test(timeout = 4000)
2557:   public void test153()  throws Throwable  {
2558:       VecInt vecInt0 = new VecInt(1198, 1198);
2559:   }
2560: 
2561:   @Test(timeout = 4000)
2562:   public void test154()  throws Throwable  {
2563:       int[] intArray0 = new int[1];
2564:       VecInt vecInt0 = new VecInt(intArray0);
2565:       vecInt0.hashCode();
2566:   }
2567: 
2568:   @Test(timeout = 4000)
2569:   public void test155()  throws Throwable  {
2570:       VecInt vecInt0 = new VecInt(2, 2);
2571:       vecInt0.sortUnique();
2572:       vecInt0.delete(1);
2573:       vecInt0.unsafePush(2);
2574:       // Undeclared exception!
2575:       try { 
2576:         vecInt0.set((-3225), (-3225));
2577:         fail("Expecting exception: AssertionError");
2578:       
2579:       } catch(AssertionError e) {
2580:          //
2581:          // no message in exception (getMessage() returned null)
2582:          //
2583:       }
2584:   }
2585: 
2586:   @Test(timeout = 4000)
2587:   public void test156()  throws Throwable  {
2588:       VecInt vecInt0 = new VecInt();
2589:       vecInt0.iterator();
2590:   }
2591: 
2592:   @Test(timeout = 4000)
2593:   public void test157()  throws Throwable  {
2594:       VecInt vecInt0 = new VecInt();
2595:       int int0 = 3549;
2596:       vecInt0.shrink(3549);
2597:       vecInt0.indexOf(3549);
2598:       vecInt0.clear();
2599:       vecInt0.ensure((-1));
2600:       int int1 = 30;
2601:       vecInt0.toString();
2602:       // Undeclared exception!
2603:       try { 
2604:         vecInt0.set(1530, 961);
2605:         fail("Expecting exception: AssertionError");
2606:       
2607:       } catch(AssertionError e) {
2608:          //
2609:          // no message in exception (getMessage() returned null)
2610:          //
2611:       }
2612:   }
2613: 
2614:   @Test(timeout = 4000)
2615:   public void test158()  throws Throwable  {
2616:       VecInt vecInt0 = new VecInt();
2617:       VecInt vecInt1 = new VecInt(2391, 2391);
2618:       vecInt1.shrink(1280);
2619:       vecInt1.ensure(2391);
2620:       vecInt0.pushAll(vecInt1);
2621:       vecInt1.copyTo((IVecInt) vecInt0);
2622:       vecInt0.set(1280, 5);
2623:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2624:       vecInt0.selectionSort(1280, 1280, comparator0);
2625:       vecInt0.sort(1416, (-1));
2626:       vecInt0.iterator();
2627:       vecInt0.iterator();
2628:       vecInt0.last();
2629:       vecInt1.hashCode();
2630:       vecInt0.set(1404, (-249));
2631:       vecInt0.indexOf((-3981));
2632:       vecInt0.isEmpty();
2633:       Integer integer0 = new Integer(3279);
2634:       vecInt1.equals(integer0);
2635:   }
2636: 
2637:   @Test(timeout = 4000)
2638:   public void test159()  throws Throwable  {
2639:       VecInt vecInt0 = new VecInt();
2640:       vecInt0.toString();
2641:   }
2642: 
2643:   @Test(timeout = 4000)
2644:   public void test160()  throws Throwable  {
2645:       int int0 = 2;
2646:       VecInt vecInt0 = new VecInt(2, 2);
2647:       vecInt0.sortUnique();
2648:       int int1 = 3062;
2649:       int int2 = 1456;
2650:       vecInt0.insertFirst(1456);
2651:       IVecInt iVecInt0 = vecInt0.push(3062);
2652:       vecInt0.clone();
2653:       vecInt0.clear();
2654:       vecInt0.ensure(3062);
2655:       int int3 = 0;
2656:       vecInt0.shrink(0);
2657:       vecInt0.unsafeGet(2);
2658:       vecInt0.copyTo(iVecInt0);
2659:       // Undeclared exception!
2660:       try { 
2661:         vecInt0.set(2, 0);
2662:         fail("Expecting exception: AssertionError");
2663:       
2664:       } catch(AssertionError e) {
2665:          //
2666:          // no message in exception (getMessage() returned null)
2667:          //
2668:       }
2669:   }
2670: 
2671:   @Test(timeout = 4000)
2672:   public void test161()  throws Throwable  {
2673:       int[] intArray0 = new int[3];
2674:       intArray0[0] = 0;
2675:       intArray0[1] = 3279;
2676:       VecInt vecInt0 = new VecInt(intArray0);
2677:       VecInt vecInt1 = new VecInt();
2678:       vecInt1.clone();
2679:       vecInt0.clone();
2680:       vecInt0.unsafeGet(0);
2681:       vecInt1.unsafePush(0);
2682:       vecInt0.size();
2683:       VecInt vecInt2 = new VecInt();
2684:       VecInt vecInt3 = new VecInt();
2685:       VecInt vecInt4 = new VecInt();
2686:       vecInt3.clear();
2687:       VecInt vecInt5 = new VecInt();
2688:       vecInt5.moveTo2(vecInt3);
2689:       VecInt vecInt6 = new VecInt(3279);
2690:       vecInt2.pushAll(vecInt6);
2691:       vecInt0.sortUnique();
2692:       vecInt1.contains((-1));
2693:       vecInt2.insertFirst((-1));
2694:       vecInt1.containsAt((-1), 2);
2695:   }
2696: 
2697:   @Test(timeout = 4000)
2698:   public void test162()  throws Throwable  {
2699:       VecInt vecInt0 = new VecInt(1250, 1254);
2700:       vecInt0.containsAt(1250, 1233);
2701:   }
2702: 
2703:   @Test(timeout = 4000)
2704:   public void test163()  throws Throwable  {
2705:       VecInt vecInt0 = new VecInt();
2706:       vecInt0.subset(1370);
2707:       vecInt0.sortUnique();
2708:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2709:       // Undeclared exception!
2710:       try { 
2711:         vecInt0.selectionSort(1370, 1436, comparator0);
2712:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2713:       
2714:       } catch(ArrayIndexOutOfBoundsException e) {
2715:          //
2716:          // no message in exception (getMessage() returned null)
2717:          //
2718:       }
2719:   }
2720: 
2721:   @Test(timeout = 4000)
2722:   public void test164()  throws Throwable  {
2723:       VecInt vecInt0 = new VecInt();
2724:       vecInt0.shrinkTo(1758);
2725:       // Undeclared exception!
2726:       try { 
2727:         vecInt0.sort((Comparator<Integer>) null);
2728:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2729:       
2730:       } catch(ArrayIndexOutOfBoundsException e) {
2731:          //
2732:          // 879
2733:          //
2734:          verifyException("org.sat4j.core.VecInt", e);
2735:       }
2736:   }
2737: 
2738:   @Test(timeout = 4000)
2739:   public void test165()  throws Throwable  {
2740:       int int0 = 2740;
2741:       VecInt vecInt0 = new VecInt(2740, 2740);
2742:       int int1 = 1386;
2743:       // Undeclared exception!
2744:       try { 
2745:         vecInt0.moveTo(2740, 1386);
2746:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2747:       
2748:       } catch(ArrayIndexOutOfBoundsException e) {
2749:          //
2750:          // 2740
2751:          //
2752:          verifyException("org.sat4j.core.VecInt", e);
2753:       }
2754:   }
2755: 
2756:   @Test(timeout = 4000)
2757:   public void test166()  throws Throwable  {
2758:       VecInt vecInt0 = new VecInt();
2759:       // Undeclared exception!
2760:       try { 
2761:         vecInt0.moveTo((-1937), 0);
2762:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2763:       
2764:       } catch(ArrayIndexOutOfBoundsException e) {
2765:          //
2766:          // -1937
2767:          //
2768:          verifyException("org.sat4j.core.VecInt", e);
2769:       }
2770:   }
2771: 
2772:   @Test(timeout = 4000)
2773:   public void test167()  throws Throwable  {
2774:       int[] intArray0 = new int[1];
2775:       VecInt vecInt0 = new VecInt(intArray0);
2776:   }
2777: 
2778:   @Test(timeout = 4000)
2779:   public void test168()  throws Throwable  {
2780:       VecInt vecInt0 = new VecInt(8, 1);
2781:       vecInt0.sortUnique();
2782:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2783:       vecInt0.sort(comparator0);
2784:       ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt((IVecInt) null);
2785:       ReadOnlyVecInt readOnlyVecInt1 = new ReadOnlyVecInt((IVecInt) null);
2786:       // Undeclared exception!
2787:       try { 
2788:         vecInt0.equals(readOnlyVecInt1);
2789:         fail("Expecting exception: NullPointerException");
2790:       
2791:       } catch(NullPointerException e) {
2792:          //
2793:          // no message in exception (getMessage() returned null)
2794:          //
2795:          verifyException("org.sat4j.core.ReadOnlyVecInt", e);
2796:       }
2797:   }
2798: 
2799:   @Test(timeout = 4000)
2800:   public void test169()  throws Throwable  {
2801:       VecInt vecInt0 = new VecInt();
2802:       vecInt0.ensure(5);
2803:       vecInt0.contains(0);
2804:       // Undeclared exception!
2805:       try { 
2806:         vecInt0.remove((-352));
2807:         fail("Expecting exception: NoSuchElementException");
2808:       
2809:       } catch(NoSuchElementException e) {
2810:          //
2811:          // no message in exception (getMessage() returned null)
2812:          //
2813:          verifyException("org.sat4j.core.VecInt", e);
2814:       }
2815:   }
2816: 
2817:   @Test(timeout = 4000)
2818:   public void test170()  throws Throwable  {
2819:       VecInt vecInt0 = new VecInt();
2820:       IVecInt iVecInt0 = null;
2821:       // Undeclared exception!
2822:       try { 
2823:         vecInt0.moveTo2((IVecInt) null);
2824:         fail("Expecting exception: NullPointerException");
2825:       
2826:       } catch(NullPointerException e) {
2827:          //
2828:          // no message in exception (getMessage() returned null)
2829:          //
2830:          verifyException("org.sat4j.core.VecInt", e);
2831:       }
2832:   }
2833: 
2834:   @Test(timeout = 4000)
2835:   public void test171()  throws Throwable  {
2836:       VecInt vecInt0 = new VecInt(2, 2);
2837:       vecInt0.sortUnique();
2838:       vecInt0.isEmpty();
2839:       // Undeclared exception!
2840:       try { 
2841:         vecInt0.containsAt((-427), (-427));
2842:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2843:       
2844:       } catch(ArrayIndexOutOfBoundsException e) {
2845:          //
2846:          // -426
2847:          //
2848:          verifyException("org.sat4j.core.VecInt", e);
2849:       }
2850:   }
2851: 
2852:   @Test(timeout = 4000)
2853:   public void test172()  throws Throwable  {
2854:       int[] intArray0 = new int[15];
2855:       intArray0[0] = (-109);
2856:       VecInt vecInt0 = new VecInt(intArray0);
2857:       vecInt0.isSubsetOf(vecInt0);
2858:   }
2859: 
2860:   @Test(timeout = 4000)
2861:   public void test173()  throws Throwable  {
2862:       VecInt vecInt0 = new VecInt();
2863:       vecInt0.subset((-684));
2864:       int[] intArray0 = new int[9];
2865:       intArray0[0] = (-109);
2866:       intArray0[1] = 0;
2867:       intArray0[2] = (-109);
2868:       intArray0[3] = (-109);
2869:       intArray0[4] = 0;
2870:       intArray0[5] = 0;
2871:       intArray0[6] = 0;
2872:       intArray0[7] = (-109);
2873:       intArray0[8] = (-109);
2874:       VecInt vecInt1 = new VecInt(intArray0);
2875:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2876:       vecInt1.sort(2211, 0, comparator0);
2877:       vecInt1.isEmpty();
2878:       vecInt0.sort(0, 0);
2879:       vecInt1.containsAt((-109), (-1));
2880:       vecInt1.push((-3013));
2881:   }
2882: 
2883:   @Test(timeout = 4000)
2884:   public void test174()  throws Throwable  {
2885:       int int0 = 0;
2886:       VecInt vecInt0 = new VecInt(0);
2887:       vecInt0.clear();
2888:       vecInt0.shrinkTo((-1019));
2889:       int int1 = new Integer((-1019));
2890:       int[] intArray0 = new int[7];
2891:       intArray0[0] = 0;
2892:       intArray0[1] = 0;
2893:       intArray0[2] = 0;
2894:       Integer integer0 = Integer.getInteger("1~*Z|&k@", (-2858));
2895:       vecInt0.equals(integer0);
2896:       intArray0[3] = 1;
2897:       intArray0[4] = 0;
2898:       intArray0[5] = 0;
2899:       intArray0[6] = 0;
2900:       // Undeclared exception!
2901:       try { 
2902:         vecInt0.moveTo((IVecInt) null);
2903:         fail("Expecting exception: NullPointerException");
2904:       
2905:       } catch(NullPointerException e) {
2906:          //
2907:          // no message in exception (getMessage() returned null)
2908:          //
2909:       }
2910:   }
2911: 
2912:   @Test(timeout = 4000)
2913:   public void test175()  throws Throwable  {
2914:       VecInt vecInt0 = new VecInt(3897);
2915:       VecInt vecInt1 = null;
2916:       try {
2917:         vecInt1 = new VecInt((int[]) null);
2918:         fail("Expecting exception: NullPointerException");
2919:       
2920:       } catch(NullPointerException e) {
2921:          //
2922:          // no message in exception (getMessage() returned null)
2923:          //
2924:          verifyException("org.sat4j.core.VecInt", e);
2925:       }
2926:   }
2927: 
2928:   @Test(timeout = 4000)
2929:   public void test176()  throws Throwable  {
2930:       int int0 = 3076;
2931:       VecInt vecInt0 = new VecInt(3076);
2932:       vecInt0.iterator();
2933:       int int1 = (-1571);
2934:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
2935:       // Undeclared exception!
2936:       try { 
2937:         vecInt0.remove(3076);
2938:         fail("Expecting exception: NoSuchElementException");
2939:       
2940:       } catch(NoSuchElementException e) {
2941:          //
2942:          // no message in exception (getMessage() returned null)
2943:          //
2944:          verifyException("org.sat4j.core.VecInt", e);
2945:       }
2946:   }
2947: 
2948:   @Test(timeout = 4000)
2949:   public void test177()  throws Throwable  {
2950:       VecInt vecInt0 = new VecInt();
2951:       int int0 = 1280;
2952:       VecInt vecInt1 = new VecInt(2391, 2391);
2953:       vecInt1.shrink(1280);
2954:       int[] intArray0 = new int[2];
2955:       intArray0[0] = 1280;
2956:       intArray0[1] = 2391;
2957:       // Undeclared exception!
2958:       try { 
2959:         vecInt1.moveTo(intArray0);
2960:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2961:       
2962:       } catch(ArrayIndexOutOfBoundsException e) {
2963:       }
2964:   }
2965: 
2966:   @Test(timeout = 4000)
2967:   public void test178()  throws Throwable  {
2968:       int[] intArray0 = new int[1];
2969:       VecInt vecInt0 = new VecInt(intArray0);
2970:       vecInt0.ensure(5);
2971:       VecInt vecInt1 = new VecInt(5, 5);
2972:       vecInt1.contains(5);
2973:       // Undeclared exception!
2974:       try { 
2975:         vecInt1.remove(2192);
2976:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
2977:       
2978:       } catch(ArrayIndexOutOfBoundsException e) {
2979:          //
2980:          // 5
2981:          //
2982:          verifyException("org.sat4j.core.VecInt", e);
2983:       }
2984:   }
2985: 
2986:   @Test(timeout = 4000)
2987:   public void test179()  throws Throwable  {
2988:       int[] intArray0 = new int[1];
2989:       intArray0[0] = (-109);
2990:       VecInt vecInt0 = new VecInt(intArray0);
2991:       vecInt0.isSubsetOf(vecInt0);
2992:   }
2993: 
2994:   @Test(timeout = 4000)
2995:   public void test180()  throws Throwable  {
2996:       VecInt vecInt0 = new VecInt();
2997:       int int0 = (-1016);
2998:       vecInt0.sortUnique();
2999:       vecInt0.shrinkTo((-1016));
3000:       int int1 = 3897;
3001:       // Undeclared exception!
3002:       try { 
3003:         vecInt0.insertFirst(3897);
3004:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
3005:       
3006:       } catch(ArrayIndexOutOfBoundsException e) {
3007:          //
3008:          // -1016
3009:          //
3010:          verifyException("org.sat4j.core.VecInt", e);
3011:       }
3012:   }
3013: 
3014:   @Test(timeout = 4000)
3015:   public void test181()  throws Throwable  {
3016:       VecInt vecInt0 = new VecInt(2, 2);
3017:       vecInt0.toString();
3018:       VecInt vecInt1 = new VecInt();
3019:       vecInt0.contains(2);
3020:       vecInt0.subset(2);
3021:   }
3022: 
3023:   @Test(timeout = 4000)
3024:   public void test182()  throws Throwable  {
3025:       VecInt vecInt0 = new VecInt();
3026:       vecInt0.shrink((-2227));
3027:       vecInt0.iterator();
3028:       // Undeclared exception!
3029:       try { 
3030:         vecInt0.set(141, 141);
3031:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
3032:       
3033:       } catch(ArrayIndexOutOfBoundsException e) {
3034:          //
3035:          // 141
3036:          //
3037:          verifyException("org.sat4j.core.VecInt", e);
3038:       }
3039:   }
3040: 
3041:   @Test(timeout = 4000)
3042:   public void test183()  throws Throwable  {
3043:       VecInt vecInt0 = new VecInt();
3044:       vecInt0.sortUnique();
3045:       vecInt0.insertFirst(3897);
3046:       vecInt0.toString();
3047:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
3048:       vecInt0.sort(comparator0);
3049:       Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
3050:       vecInt0.sort(comparator1);
3051:       int int0 = 1718;
3052:       VecInt vecInt1 = new VecInt(1718, 1150);
3053:       vecInt1.isSubsetOf(vecInt0);
3054:       VecInt vecInt2 = null;
3055:       try {
3056:         vecInt2 = new VecInt((-2523), 2439);
3057:         fail("Expecting exception: NegativeArraySizeException");
3058:       
3059:       } catch(NegativeArraySizeException e) {
3060:          //
3061:          // no message in exception (getMessage() returned null)
3062:          //
3063:          verifyException("org.sat4j.core.VecInt", e);
3064:       }
3065:   }
3066: 
3067:   @Test(timeout = 4000)
3068:   public void test184()  throws Throwable  {
3069:       VecInt vecInt0 = new VecInt();
3070:       vecInt0.pop();
3071:       vecInt0.toString();
3072:       vecInt0.toString();
3073:       int[] intArray0 = new int[5];
3074:       intArray0[0] = 0;
3075:       intArray0[1] = 0;
3076:       intArray0[2] = 0;
3077:       intArray0[4] = 0;
3078:       // Undeclared exception!
3079:       try { 
3080:         vecInt0.copyTo(intArray0);
3081:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
3082:       
3083:       } catch(ArrayIndexOutOfBoundsException e) {
3084:       }
3085:   }
3086: 
3087:   @Test(timeout = 4000)
3088:   public void test185()  throws Throwable  {
3089:       VecInt vecInt0 = new VecInt(1392);
3090:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
3091:       vecInt0.selectionSort(1392, (-2012), comparator0);
3092:       Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
3093:       VecInt vecInt1 = (VecInt)vecInt0.push(0);
3094:       vecInt0.sort(comparator1);
3095:       vecInt0.contains((-1));
3096:       vecInt0.size();
3097:       vecInt0.growTo((-1), 5);
3098:       vecInt1.equals(vecInt0);
3099:   }
3100: 
3101:   @Test(timeout = 4000)
3102:   public void test186()  throws Throwable  {
3103:       VecInt vecInt0 = new VecInt();
3104:       ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
3105:       // Undeclared exception!
3106:       try { 
3107:         vecInt0.copyTo((IVecInt) readOnlyVecInt0);
3108:         fail("Expecting exception: ClassCastException");
3109:       
3110:       } catch(ClassCastException e) {
3111:          //
3112:          // no message in exception (getMessage() returned null)
3113:          //
3114:       }
3115:   }
3116: 
3117:   @Test(timeout = 4000)
3118:   public void test187()  throws Throwable  {
3119:       VecInt vecInt0 = new VecInt();
3120:       vecInt0.indexOf(3549);
3121:       vecInt0.clear();
3122:       vecInt0.ensure(1);
3123:       vecInt0.ensure((-1));
3124:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
3125:       vecInt0.sort(5, 1, comparator0);
3126:       vecInt0.size();
3127:       EmptyVecInt emptyVecInt0 = new EmptyVecInt();
3128:       // Undeclared exception!
3129:       try { 
3130:         emptyVecInt0.pop();
3131:         fail("Expecting exception: UnsupportedOperationException");
3132:       
3133:       } catch(UnsupportedOperationException e) {
3134:          //
3135:          // no message in exception (getMessage() returned null)
3136:          //
3137:          verifyException("org.sat4j.core.EmptyVecInt", e);
3138:       }
3139:   }
3140: 
3141:   @Test(timeout = 4000)
3142:   public void test188()  throws Throwable  {
3143:       VecInt vecInt0 = new VecInt();
3144:       vecInt0.pop();
3145:       vecInt0.toString();
3146:       // Undeclared exception!
3147:       try { 
3148:         vecInt0.set(0, 2017);
3149:         fail("Expecting exception: AssertionError");
3150:       
3151:       } catch(AssertionError e) {
3152:          //
3153:          // no message in exception (getMessage() returned null)
3154:          //
3155:       }
3156:   }
3157: }
RegularFileObject[/tmp/EvoSuite_199_1550355903150/org/sat4j/core/VecInt_198_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Sat Feb 16 22:25:15 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: import java.util.concurrent.ExecutorService;
17: import java.util.concurrent.Executors;
18: import java.util.concurrent.Future;
19: import java.util.concurrent.TimeUnit;
20: 
21: import static org.evosuite.shaded.org.mockito.Mockito.*;
22: @EvoSuiteClassExclude
23: public class VecInt_198_tmp__ESTest_scaffolding {
24: 
25:   @org.junit.Rule 
26:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
27: 
28:   protected static ExecutorService executor; 
29: 
30:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
31: 
32:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
33: 
34: 
35:   @BeforeClass 
36:   public static void initEvoSuiteFramework() { 
37:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
38:     org.evosuite.runtime.GuiSupport.initialize(); 
39:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
40:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
41:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
42:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
43:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
44:     executor = Executors.newCachedThreadPool(); 
45:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
46:     setSystemProperties();
47:     initializeClasses();
48:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
49:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
50:   } 
51: 
52:   @AfterClass 
53:   public static void clearEvoSuiteFramework(){ 
54:     Sandbox.resetDefaultSecurityManager(); 
55:     executor.shutdownNow(); 
56:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
57:   } 
58: 
59:   @Before 
60:   public void initTestCase(){ 
61:     threadStopper.storeCurrentThreads();
62:     threadStopper.startRecordingTime();
63:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
64:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
65:     setSystemProperties(); 
66:     org.evosuite.runtime.GuiSupport.setHeadless(); 
67:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
69:   } 
70: 
71:   @After 
72:   public void doneWithTestCase(){ 
73:     threadStopper.killAndJoinClientThreads();
74:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
75:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
76:     resetClasses(); 
77:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
78:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
79:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
80:   } 
81: 
82:   public static void setSystemProperties() {
83:  
84:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
85:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
86:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
87:   }
88: 
89:   private static void initializeClasses() {
90:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_198_tmp__ESTest_scaffolding.class.getClassLoader() ,
91:       "org.sat4j.core.ReadOnlyVecInt",
92:       "org.sat4j.specs.IteratorInt",
93:       "org.sat4j.core.VecInt$1",
94:       "org.sat4j.specs.IVecInt",
95:       "org.sat4j.core.EmptyVecInt",
96:       "org.sat4j.core.VecInt"
97:     );
98:   } 
99:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
100:     mock(Class.forName("java.util.Comparator", false, VecInt_198_tmp__ESTest_scaffolding.class.getClassLoader()));
101:   }
102: 
103:   private static void resetClasses() {
104:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_198_tmp__ESTest_scaffolding.class.getClassLoader()); 
105: 
106:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
107:       "org.sat4j.core.EmptyVecInt",
108:       "org.sat4j.core.VecInt",
109:       "org.sat4j.core.VecInt$1",
110:       "org.sat4j.core.ReadOnlyVecInt"
111:     );
112:   }
113: }

