/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 17:38:35 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.BufferedImage;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      complexImage0.Y();
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.add(0, 0, (float) 0, (-1.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.setReal(2137, 0, (float) 2137, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2137
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      complexImage0.Y();
      complexImage0.divide(complexImage0);
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ROI rOI0 = new ROI(1602, 2137, 2137, 1602);
      complexImage0.max();
      rOI0.setROI(2137, 2100, (-770), 0);
      rOI0.setROI((-770), 456, 1602, (-11));
      ROI rOI1 = new ROI();
      rOI0.setROI(0, 0, (-132), (-770));
      complexImage0.Y();
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.getMagnitudeImage();
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = (-4226);
      ROI rOI0 = new ROI();
      rOI0.setROI(2113, 2113, 2113, 1);
      // Undeclared exception!
      try { 
        complexImage0.getReal((-4226), (-4226), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.get((-1790), (-1790));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.subtract(0.0F, 0.0F);
      complexImage1.imag();
      complexImage1.setReal((RealGrayImage) null);
      ROI rOI0 = new ROI(962, 0, 0, 0);
      complexImage0.imag();
      ROI rOI1 = new ROI(2098, 0, 2098, 2136);
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.X();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ROI rOI0 = new ROI((-1), 0, (-1), 0);
      complexImage0.max();
      complexImage0.max();
      ROI rOI1 = new ROI((-1), 8, 243, 645);
      rOI0.setROI((-2323), 255, 1160, 255);
      ROI rOI2 = new ROI();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      // Undeclared exception!
      try { 
        complexImage1.add(0, 645, (float) 0, 713.8F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2323
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.subtract(0.0F, 0.0F);
      complexImage1.imag();
      complexImage1.setReal((RealGrayImage) null);
      ROI rOI0 = new ROI(962, 0, 0, 0);
      rOI0.setROI(0, (-1228), (-1584), (-570));
      rOI0.setROI(0, 0, (-570), (-570));
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      int int0 = 2114;
      // Undeclared exception!
      try { 
        complexImage1.multiply(2114, 2114, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      complexImage0.Y();
      complexImage0.divide(complexImage0);
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ROI rOI0 = new ROI(1602, 2137, 2137, 1602);
      Complex complex0 = complexImage0.max();
      ROI rOI1 = new ROI((-11), 2128, (-2235), 2128);
      // Undeclared exception!
      try { 
        complexImage0.set((-2235), (-2235), complex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2235
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ComplexImage complexImage1 = complexImage0.multiply(2470.1F, 2470.1F);
      Complex complex0 = complexImage0.min();
      complexImage1.divide(complexImage0);
      Complex complex1 = new Complex(complex0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      complexImage0.Y();
      complexImage0.divide(complexImage0);
      ComplexImage complexImage1 = new ComplexImage(16, 16);
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      complexImage2.addbuffer(0, 0, 0.0F, (-1774.0F));
      complexImage2.copy(rOI0);
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage2, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(1, 0);
      complexImage1.toString();
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      complexImage2.getMagnitudeImage();
      complexImage0.min();
      ROI rOI0 = new ROI(1812, 128, 1, 128);
      ROI rOI1 = new ROI(2109, 1, 8, 16);
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage0.imaginary();
      // Undeclared exception!
      try { 
        complexImage1.addbuffer((-1), 0, 0.0F, 4286.25F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage(2111, 2107);
      ROI rOI1 = new ROI(16, (-707), (-70), 2107);
      ROI rOI2 = new ROI(1602, 2, 1, 2470);
      ROI rOI3 = new ROI();
      ComplexImage complexImage2 = new ComplexImage();
      complexImage0.add(complexImage2);
      // Undeclared exception!
      try { 
        complexImage1.multiply(0.0F, 0.0F, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -707
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.imag;
      complexImage0.setImaginary(realGrayImage0);
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, 0.0F, (float) 0);
      ROI rOI0 = new ROI(2105, 0, 2089, (-922));
      rOI0.setROI(1, 1, 1, 1629);
      rOI0.setROI((-1713), (-1), (-1), 2116);
      ROI rOI1 = new ROI();
      rOI1.setROI(2116, (-1), 1326, (-1642));
      rOI1.setROI(2352, 1, 0, 2116);
      complexImage0.Y();
      complexImage0.divide(complexImage1);
      // Undeclared exception!
      try { 
        complexImage1.setImag((-1713), 1, (-2106.6497F), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI((-70), 16, (-268), 0);
      ROI rOI2 = new ROI(2604, 2604, (-2886), (-707));
      ROI rOI3 = new ROI();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.add(complexImage1);
      ComplexImage complexImage2 = new ComplexImage(0, 0);
      // Undeclared exception!
      try { 
        complexImage2.multiply(32767.0F, (-2805.4092F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(0, 0, 8, 8, 0.0F, 477.9221F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ComplexImage complexImage1 = complexImage0.subtract((float) 2137, (float) 2137);
      complexImage0.imag();
      complexImage1.Y();
      complexImage1.real();
      ROI rOI0 = new ROI((-1971), 128, 2137, (-3104));
      // Undeclared exception!
      try { 
        complexImage1.multiply(2137, 128, 0.0F, (-2682.9634F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2137
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(0, 8, 0, 2136);
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      int int1 = 2680;
      ComplexImage complexImage0 = new ComplexImage(2680, 2680);
      // Undeclared exception!
      try { 
        complexImage0.subtract((-1.0F), (float) 2137);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(2114, 2114);
      int int0 = 4409;
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        complexImage0.subtract(2114, 4409, 0.0F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4409
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ComplexImage complexImage1 = complexImage0.subtract(1142.0F, (float) 2137);
      ROI rOI0 = new ROI(2137, 0, 2137, 2391);
      rOI0.setROI(2391, 2137, 0, 0);
      complexImage1.Y();
      complexImage1.divide(complexImage0);
      // Undeclared exception!
      try { 
        complexImage0.subtract(0.0F, 1081.89F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.subtract((-103), 16, 1774.0F, (float) (-103));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1921, 16);
      int int0 = 3724;
      int int1 = 0;
      ROI rOI0 = new ROI(16, 1921, 3724, 0);
      // Undeclared exception!
      try { 
        complexImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage1.getMagnitudeImage();
      ROI rOI0 = new ROI();
      complexImage0.Y();
      complexImage1.divide(complexImage0);
      complexImage1.phaseImage();
      complexImage0.multiply(complexImage1);
      // Undeclared exception!
      try { 
        complexImage1.getImag((-574), (-574), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      ComplexImage complexImage1 = complexImage0.subtract((float) 0, (float) 0);
      complexImage1.phaseImage();
      complexImage1.imag();
      int int0 = new Integer(0);
      complexImage0.real();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ComplexImage complexImage1 = complexImage0.subtract(1142.0F, (float) 2137);
      RealGrayImage realGrayImage0 = complexImage1.imag();
      ROI rOI0 = new ROI(2106, 2106, 2137, 0);
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      RealGrayImage realGrayImage0 = complexImage0.imag;
      complexImage0.setImaginary(realGrayImage0);
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, 0.0F, (float) 0);
      ROI rOI0 = new ROI(2105, 0, 2089, (-922));
      rOI0.setROI(1, 2094, 1, 1629);
      rOI0.setROI((-1713), (-1), (-1), 2116);
      ROI rOI1 = new ROI();
      rOI1.setROI(2116, 2116, 1363, (-1642));
      complexImage0.Y();
      complexImage0.divide(complexImage1);
      // Undeclared exception!
      try { 
        complexImage1.set((-1), (-2447), (float) 2089, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2447
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 13;
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.magnitudeImage();
      ComplexImage complexImage1 = new ComplexImage();
      int int1 = 2;
      int int2 = 0;
      // Undeclared exception!
      try { 
        complexImage1.getReal(2, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      float float0 = 2613.5642F;
      int int0 = 2106;
      int int1 = 40;
      ROI rOI0 = new ROI(2106, 40, 40, 2106);
      // Undeclared exception!
      try { 
        complexImage0.add((-890.0F), 2613.5642F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = (-313);
      int int1 = (-3251);
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-313), (-3251));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.subtract(0.0F, 0.0F);
      complexImage1.imag();
      complexImage1.setReal((RealGrayImage) null);
      ROI rOI0 = new ROI(962, 0, 0, 0);
      // Undeclared exception!
      try { 
        complexImage1.add((float) (-547), (-1.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(4827, 4827);
      // Undeclared exception!
      complexImage1.phaseImage();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ROI rOI0 = new ROI(1602, 2137, 2137, 1602);
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.getReal(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage(2111, 2107);
      complexImage1.Y();
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      Complex complex0 = complexImage0.max();
      ROI rOI0 = new ROI((-2235), 2109, (-2235), 1628);
      // Undeclared exception!
      try { 
        complexImage1.set(1, (-788), complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 2137;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.setReal(2137, 2137, (-1354.3108F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(0, 2107);
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI2 = new ROI();
      rOI2.setROI(0, (-1175), 1, 2107);
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI0, rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ROI rOI0 = new ROI(1602, 2137, 2137, 1602);
      ROI rOI1 = new ROI();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage0.multiply(complexImage1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      RealGrayImage realGrayImage0 = complexImage0.imag;
      complexImage0.setImaginary(realGrayImage0);
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      ROI rOI0 = new ROI(0, 0, 0, 0);
      complexImage0.setImag(realGrayImage0);
      complexImage0.setImag(realGrayImage0);
      complexImage1.diff(complexImage0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(2121, 2121);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.setImag(2107, 2121, (float) 1628, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ComplexImage complexImage1 = complexImage0.subtract(1142.0F, (float) 2137);
      RealGrayImage realGrayImage0 = complexImage1.imag();
      complexImage1.clear();
      ROI rOI0 = new ROI(2106, 2106, 2106, 0);
      complexImage1.real();
      complexImage0.imaginary();
      complexImage1.setReal(realGrayImage0);
      ROI rOI1 = new ROI(2092, 2092, 962, 2124);
      complexImage1.imag();
      ROI rOI2 = new ROI(1687, 962, 2136, 2124);
      // Undeclared exception!
      try { 
        complexImage0.min(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 962
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 2137;
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      int int1 = 2092;
      ROI rOI0 = new ROI();
      rOI0.setROI(2108, (-2993), 2105, 16);
      // Undeclared exception!
      try { 
        complexImage0.setReal(2092, 127, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2866
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.magnitudeImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.setReal(2092, 42, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI((-2110), 16, (-2110), 16);
      rOI0.setROI((-2110), 16, 16, 16);
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      complexImage0.subtract(1142.0F, (float) 2137);
      int int1 = 2625;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage1.add(complexImage0);
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI();
      BufferedImage bufferedImage0 = new BufferedImage(2130, 388, 1);
      ComplexImage complexImage2 = new ComplexImage(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(14, 2137);
      ROI rOI0 = new ROI(1602, 2137, 2137, 1602);
      // Undeclared exception!
      try { 
        complexImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 0;
      int int1 = 2137;
      ComplexImage complexImage0 = new ComplexImage(3097, 2137);
      complexImage0.toString();
      complexImage0.getMagnitudeImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage1.getMagnitudeImage();
      complexImage0.min();
      complexImage1.divide(complexImage0);
      int int2 = 1122;
      ROI rOI0 = null;
      complexImage0.add(int0, int2, (float) int1, (float) int1, rOI0);
      int int3 = (-1);
      int int4 = 2127;
      float float0 = 1.0F;
      complexImage1.subtract(int3, int4, float0, (float) int3, rOI0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      int int0 = 1602;
      ROI rOI0 = new ROI(1602, 2137, 2137, 1602);
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(2096, 0);
      ROI rOI0 = new ROI(0, 1, 0, 1);
      complexImage0.imag();
      complexImage0.max();
      rOI0.setROI((-900), 0, 0, 0);
      ROI rOI1 = new ROI(0, 0, (-2933), 2112);
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.multiply(885.9F, 1.0F);
      RealGrayImage realGrayImage0 = complexImage0.real;
      Complex complex0 = complexImage1.min();
      ROI rOI0 = new ROI((-1281), 4133, 13, 4732);
      rOI0.setROI((-1281), 0, (-1561), (-16777216));
      complex0.polar(0.0, 0);
      ComplexImage complexImage2 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.set(0, 3256, complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 2127;
      ComplexImage complexImage0 = new ComplexImage(749, 2127);
      // Undeclared exception!
      try { 
        complexImage0.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      RealGrayImage realGrayImage0 = complexImage0.imag;
      complexImage0.setImaginary(realGrayImage0);
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, 0.0F, (float) 0);
      ComplexImage complexImage2 = complexImage1.addbuffer(0, 2, 0, 1, (float) 0, 0.0F);
      int int1 = 0;
      ROI rOI0 = new ROI((-1), 2096, 0, 2121);
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage2, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2096
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 2137;
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ROI rOI0 = new ROI(0, (-1669), 1602, (-1669));
      RealGrayImage realGrayImage0 = complexImage0.real();
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1669
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      complexImage1.setImag(realGrayImage0);
      int int0 = 0;
      complexImage1.getMagnitudeImage();
      float float0 = 244.6F;
      float float1 = (-1.0F);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.add(0, 0, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      int int0 = 1;
      complexImage1.getMagnitudeImage();
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      float float0 = 0.0F;
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, 1.0F);
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      int int1 = 16;
      int int2 = (-2838);
      realGrayImage0.addbuffer(0, 16, (-2838), 0, (float) 16);
      realGrayImage0.getJavaImage();
      complexImage1.setImag(realGrayImage0);
      complexImage0.clear();
      complexImage0.setReal(realGrayImage0);
      int int3 = 1016;
      // Undeclared exception!
      try { 
        complexImage0.getReal(1016, 1016);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1016
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI();
      complexImage1.multiply(complexImage0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.multiply(1807, 306, 1.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ComplexImage complexImage1 = complexImage0.multiply(2470.1F, 2470.1F);
      // Undeclared exception!
      complexImage1.copy();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage0.phaseImage();
      complexImage1.subtract(complexImage0);
      ComplexImage complexImage2 = new ComplexImage();
      ComplexImage complexImage3 = new ComplexImage();
      complexImage0.add(complexImage3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 3500;
      ComplexImage complexImage0 = new ComplexImage(3500, 3445);
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(3500, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3500
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = (-16777216);
      // Undeclared exception!
      try { 
        complexImage0.setImag(713, (-16777216), (float) 713);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI((-2110), 16, (-2110), 16);
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      int int0 = (-1);
      int int1 = 0;
      ROI rOI0 = new ROI((-1), 0, (-1), 0);
      complexImage0.max();
      complexImage0.max();
      int int2 = 2134;
      rOI0.setROI((-2614), (-1874), 2134, 0);
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1874
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage0.imaginary();
      // Undeclared exception!
      try { 
        complexImage1.addbuffer((-1), 0, 0.055790797F, 4286.25F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 2137;
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      ComplexImage complexImage1 = complexImage0.subtract(1142.0F, (float) 2137);
      RealGrayImage realGrayImage0 = complexImage1.imag();
      ROI rOI0 = new ROI(2106, 2106, 2137, 0);
      complexImage0.clear();
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage();
      int int0 = (-2110);
      int int1 = 139;
      ROI rOI0 = new ROI((-2110), 139, (-2110), 139);
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-1), 0, (-1), (-27));
      assertNotNull(rOI0);
      assertEquals((-1), rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-1), rOI0.ux());
      assertEquals(28, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-27), rOI0.uy());
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertNotNull(realGrayImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(2137, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      complexImage0.setImaginary(realGrayImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(2137, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      rOI0.setROI((-1), (-27), 801, 0);
      assertEquals(803, rOI0.X());
      assertEquals(801, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-1), rOI0.ux());
      assertEquals(28, rOI0.Y());
      assertEquals((-27), rOI0.uy());
      
      rOI0.setROI((-1903), (-1903), (-902), (-1874));
      assertEquals((-1874), rOI0.ly());
      assertEquals(1002, rOI0.X());
      assertEquals((-1903), rOI0.uy());
      assertEquals((-902), rOI0.lx());
      assertEquals((-1903), rOI0.ux());
      assertEquals(30, rOI0.Y());
      
      RealGrayImage realGrayImage1 = complexImage0.imag;
      assertSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2137, realGrayImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add((-902), 2113, 0.0F, (-3434.7F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2805
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 0;
      int int1 = 2137;
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply(2470.1F, 2470.1F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(2137, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage1.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(2121, 2121);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(2121, complexImage1.X());
      assertEquals(2121, complexImage1.Y());
      
      ROI rOI0 = new ROI(1636, 1636, 1636, 893);
      assertNotNull(rOI0);
      assertEquals(1636, rOI0.lx());
      assertEquals(1636, rOI0.ly());
      assertEquals(744, rOI0.Y());
      assertEquals(893, rOI0.uy());
      assertEquals(1636, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      rOI0.setROI(893, (-1373), 1289, (-1373));
      assertEquals(893, rOI0.ux());
      assertEquals((-1373), rOI0.ly());
      assertEquals((-1373), rOI0.uy());
      assertEquals(1289, rOI0.lx());
      assertEquals(397, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.set(1289, 2108, 1174.61F, 255.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2182
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      
      ROI rOI0 = new ROI(1602, 2137, 2137, 1602);
      assertNotNull(rOI0);
      assertEquals(2137, rOI0.lx());
      assertEquals(1602, rOI0.ux());
      assertEquals(2137, rOI0.ly());
      assertEquals(1602, rOI0.uy());
      assertEquals(536, rOI0.Y());
      assertEquals(536, rOI0.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract(0.0F, 0.0F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage1.imag();
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      complexImage1.setReal((RealGrayImage) null);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ROI rOI0 = new ROI(2134, (-1774), 285, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(285, rOI0.ux());
      assertEquals(1775, rOI0.Y());
      assertEquals((-1774), rOI0.uy());
      assertEquals(2134, rOI0.lx());
      assertEquals(1850, rOI0.X());
      
      rOI0.setROI(0, 2464, 2602, (-444));
      assertEquals(2464, rOI0.ly());
      assertEquals(2602, rOI0.lx());
      assertEquals(2909, rOI0.Y());
      assertEquals((-444), rOI0.uy());
      assertEquals(2603, rOI0.X());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage1.divide(2464, 962, (float) 285, (float) 2602, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.imag;
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.add(1.0F, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.imaginary();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(2137, realGrayImage0.Y());
      
      complexImage0.setImaginary(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(2137, realGrayImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract(1142.0F, (float) 2137);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage1 = complexImage1.imag();
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2137, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      ROI rOI0 = new ROI(0, 2111, 255, (-3272));
      assertNotNull(rOI0);
      assertEquals(2111, rOI0.ly());
      assertEquals(255, rOI0.lx());
      assertEquals(256, rOI0.X());
      assertEquals(5384, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-3272), rOI0.uy());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      complexImage0.add(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = (-4);
      int int1 = 2137;
      ComplexImage complexImage0 = new ComplexImage(2137, 2133);
      assertNotNull(complexImage0);
      assertEquals(2137, complexImage0.X());
      assertEquals(2133, complexImage0.Y());
      
      int int2 = 1602;
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 0;
      int int1 = 2137;
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      String string0 = complexImage0.toString();
      assertEquals("0:2137\n0:2137\n", string0);
      assertNotNull(string0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(2137, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(2137, complexImage1.Y());
      
      RealGrayImage realGrayImage1 = complexImage1.getMagnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(2137, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      Complex complex0 = complexImage1.min();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(2137, complexImage1.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      
      ROI rOI0 = new ROI(2688, (-1669), (-1669), 2688);
      assertNotNull(rOI0);
      assertEquals((-1669), rOI0.ux());
      assertEquals((-1669), rOI0.uy());
      assertEquals(4358, rOI0.X());
      assertEquals(4358, rOI0.Y());
      assertEquals(2688, rOI0.lx());
      assertEquals(2688, rOI0.ly());
      
      // Undeclared exception!
      realGrayImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = complexImage0.Y();
      assertEquals(0, int0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      complexImage0.multiply(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      int int1 = 16;
      rOI0.setROI(2096, 1605, 2118, 2118);
      assertEquals(23, rOI0.X());
      assertEquals(514, rOI0.Y());
      assertEquals(1605, rOI0.uy());
      assertEquals(2118, rOI0.lx());
      assertEquals(2118, rOI0.ly());
      assertEquals(2096, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(0, 16, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1621
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.multiply(2470.1F, 2470.1F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      int int0 = complexImage1.Y();
      assertEquals(2137, int0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI0 = new ROI(3229, 2109, 454, 874);
      assertNotNull(rOI0);
      assertEquals(2776, rOI0.X());
      assertEquals(1236, rOI0.Y());
      assertEquals(874, rOI0.uy());
      assertEquals(3229, rOI0.lx());
      assertEquals(2109, rOI0.ly());
      assertEquals(454, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 454
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.subtract(0.0F, 0.0F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage1.imag();
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply(1.0F, 1.0F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real;
      assertNull(realGrayImage0);
      
      Complex complex0 = complexImage1.min();
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(1256, 0, 255, 1);
      assertEquals(1, rOI0.ly());
      assertEquals(2, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1256, rOI0.lx());
      assertEquals(255, rOI0.ux());
      assertEquals(1002, rOI0.X());
      
      rOI0.setROI(0, 1256, 0, 855);
      assertEquals(0, rOI0.lx());
      assertEquals(855, rOI0.uy());
      assertEquals(402, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1256, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      ROI rOI1 = new ROI(1, 2118, 1, (-1825));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(2118, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals((-1825), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.lx());
      assertEquals(3944, rOI1.Y());
      
      rOI1.setROI(0, (-1349), 0, 255);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(255, rOI1.ly());
      assertEquals(1605, rOI1.Y());
      assertEquals((-1349), rOI1.uy());
      
      ROI rOI2 = new ROI(2106, 0, 2095, 0);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotNull(rOI2);
      assertEquals(1, rOI2.Y());
      assertEquals(2106, rOI2.lx());
      assertEquals(2095, rOI2.ux());
      assertEquals(12, rOI2.X());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ly());
      
      rOI0.setROI(1856, (-5537), 1, 1668);
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI0, rOI1);
      assertEquals((-5537), rOI0.uy());
      assertEquals(1856, rOI0.lx());
      assertEquals(7206, rOI0.Y());
      assertEquals(1856, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals(1668, rOI0.ly());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.setImag(0, 0, (-1844.398F), rOI2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI(0, (-16777216), (-16777216), (-872));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(16777217, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-872), rOI1.ly());
      assertEquals(16776345, rOI1.Y());
      assertEquals((-16777216), rOI1.ux());
      assertEquals((-16777216), rOI1.uy());
      
      ROI rOI2 = new ROI();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotNull(rOI2);
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      complexImage0.multiply(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(2663, (-3050), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3050
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract(1142.0F, (float) 2137);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage1.imag();
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(2137, realGrayImage0.Y());
      
      ROI rOI0 = new ROI(0, 0, 255, (-3272));
      assertNotNull(rOI0);
      assertEquals(3273, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(255, rOI0.lx());
      assertEquals((-3272), rOI0.uy());
      assertEquals(256, rOI0.X());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      ComplexImage complexImage3 = new ComplexImage(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      
      complexImage3.multiply(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getImag((-521), 2096, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1176
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 852;
      ROI rOI0 = new ROI(852, (-1), 852, (-1));
      assertNotNull(rOI0);
      assertEquals(852, rOI0.lx());
      assertEquals((-1), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(852, rOI0.ux());
      assertEquals((-1), rOI0.uy());
      
      int int1 = (-247);
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real;
      assertNull(realGrayImage0);
      
      complexImage0.setImag((RealGrayImage) null);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.getImag(0, (-869));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(556, 1416, 556, 1416);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(556, rOI0.lx());
      assertEquals(556, rOI0.ux());
      assertEquals(1416, rOI0.uy());
      assertEquals(1416, rOI0.ly());
      
      int int0 = complexImage0.Y();
      assertEquals(0, int0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.divide(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 1416, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = complexImage0.Y();
      assertEquals(0, int0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage(0, 0);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = (-999);
      ROI rOI0 = new ROI((-999), 0, 0, 686);
      assertNotNull(rOI0);
      assertEquals(687, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1000, rOI0.X());
      assertEquals(686, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-999), rOI0.ux());
      
      rOI0.setROI(686, 0, 0, 0);
      assertEquals(687, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(686, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.set(0, 0, (float) 0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 0, 0.0F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.imag;
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      complexImage0.setImaginary(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, 0.0F, (float) 0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.get(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(8, 13, (float) 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.imag;
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      complexImage0.setImaginary(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, 0.0F, (float) 0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ROI rOI0 = new ROI(2105, 0, 2089, (-922));
      assertNotNull(rOI0);
      assertEquals(2105, rOI0.lx());
      assertEquals(923, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(2089, rOI0.ux());
      assertEquals((-922), rOI0.uy());
      assertEquals(17, rOI0.X());
      
      rOI0.setROI(1, 1, 1, 1629);
      assertEquals(1629, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(1629, rOI0.ly());
      assertEquals(1, rOI0.X());
      
      rOI0.setROI((-1713), (-1), (-1), 2116);
      assertEquals((-1), rOI0.uy());
      assertEquals(2116, rOI0.ly());
      assertEquals(2118, rOI0.Y());
      assertEquals((-1713), rOI0.ux());
      assertEquals((-1), rOI0.lx());
      assertEquals(1713, rOI0.X());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      rOI1.setROI(2116, (-1), 1326, (-1642));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(1642, rOI1.Y());
      assertEquals((-1642), rOI1.uy());
      assertEquals((-1), rOI1.ly());
      assertEquals(791, rOI1.X());
      assertEquals(2116, rOI1.lx());
      assertEquals(1326, rOI1.ux());
      
      int int0 = complexImage0.Y();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertEquals(0, int0);
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      complexImage0.divide(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      complexImage0.setImag((RealGrayImage) null);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(26, 26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.multiply(2470.1F, (-458.6F));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = null;
      try {
        complexImage2 = new ComplexImage((-1461), (-2963));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(1598, 1598);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1598, complexImage1.Y());
      assertEquals(1598, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage1.setImag(2107, 1, (float) 2107, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2107
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage1.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage1.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1657, 1657);
      assertNotNull(complexImage0);
      assertEquals(1657, complexImage0.Y());
      assertEquals(1657, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      int int0 = complexImage0.Y();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertEquals(2137, int0);
      assertNotSame(complexImage0, complexImage1);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      complexImage0.add(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5516, 5516);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 2015);
      assertNotNull(complexImage0);
      assertEquals(2015, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ROI rOI0 = new ROI(3178, 1, (-1), 2015);
      assertNotNull(rOI0);
      assertEquals(2015, rOI0.Y());
      assertEquals(3178, rOI0.lx());
      assertEquals(2015, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(3180, rOI0.X());
      assertEquals((-1), rOI0.ux());
      
      rOI0.setROI(0, (-247), (-1), 1);
      assertEquals((-247), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(249, rOI0.Y());
      assertEquals((-1), rOI0.ux());
      
      rOI0.setROI((-2821), 0, (-9), 2891);
      assertEquals(2891, rOI0.ly());
      assertEquals((-2821), rOI0.ux());
      assertEquals(2892, rOI0.Y());
      assertEquals(2813, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals((-9), rOI0.lx());
      
      rOI0.setROI(1, 2015, (-3323), (-1));
      assertEquals(2015, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(2017, rOI0.Y());
      assertEquals((-3323), rOI0.ux());
      assertEquals(3325, rOI0.X());
      assertEquals((-1), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(0.0F, (-32768.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(1602, 2137, 2137, 1602);
      assertNotNull(rOI0);
      assertEquals(536, rOI0.X());
      assertEquals(536, rOI0.Y());
      assertEquals(2137, rOI0.ly());
      assertEquals(1602, rOI0.uy());
      assertEquals(2137, rOI0.lx());
      assertEquals(1602, rOI0.ux());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1602
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ROI rOI0 = new ROI(1602, 2137, 2137, 1602);
      assertNotNull(rOI0);
      assertEquals(536, rOI0.X());
      assertEquals(536, rOI0.Y());
      assertEquals(2137, rOI0.ly());
      assertEquals(1602, rOI0.ux());
      assertEquals(2137, rOI0.lx());
      assertEquals(1602, rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(2117, 1, (-3601.9082F), (float) 2137);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage0, rOI1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract(1142.0F, (float) 2137);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage1.magnitudeImage();
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(2137, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = complexImage1.imag();
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(2137, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      
      ROI rOI0 = new ROI(2106, 2106, 2137, 0);
      assertNotNull(rOI0);
      assertEquals(2106, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2106, rOI0.ly());
      assertEquals(2137, rOI0.lx());
      assertEquals(32, rOI0.X());
      assertEquals(2107, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realGrayImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.add(2371.6606F, 2371.6606F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1657, 1657);
      assertNotNull(complexImage0);
      assertEquals(1657, complexImage0.Y());
      assertEquals(1657, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ROI rOI0 = new ROI(1602, 2137, 2137, 1602);
      assertNotNull(rOI0);
      assertEquals(1602, rOI0.ux());
      assertEquals(2137, rOI0.lx());
      assertEquals(2137, rOI0.ly());
      assertEquals(1602, rOI0.uy());
      assertEquals(536, rOI0.Y());
      assertEquals(536, rOI0.X());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ComplexImage complexImage0 = null;
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 2137;
      ComplexImage complexImage1 = new ComplexImage(2107, 2137);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(2137, complexImage1.Y());
      assertEquals(2107, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      String string0 = complexImage1.toString(rOI0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals("2107:2137\nnull \n2107:2137\nnull \n", string0);
      assertNotSame(complexImage1, complexImage0);
      assertNotNull(string0);
      assertEquals(2137, complexImage1.Y());
      assertEquals(2107, complexImage1.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(0.0F, 2469.7563F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      complexImage0.setReal(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.add((-1054), 2122, (float) (-614), (float) 2122, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2122
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      float float0 = (-1.0F);
      float float1 = 0.0F;
      int int0 = (-160);
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-1300), 0, (-70), (-70), 0.0F, (float) (-70));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int0 = complexImage0.Y();
      assertEquals(0, int0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertNull(realGrayImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(2121, 0, (float) 2121, (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.multiply(2470.1F, 2470.1F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage1.real;
      assertNotNull(realGrayImage0);
      assertEquals(2137, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = complexImage0.real();
      assertSame(complexImage0, complexImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2137, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(0, 1631);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1631, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI0 = new ROI(0, 2103, 1602, 1);
      assertNotNull(rOI0);
      assertEquals(1602, rOI0.lx());
      assertEquals(1603, rOI0.X());
      assertEquals(2103, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(2103, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      complexImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 2137, (float) 2137);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(2137, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertSame(complexImage0, complexImage1);
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(2137, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage0.imag();
      assertSame(complexImage0, complexImage1);
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2137, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      int int0 = complexImage1.Y();
      assertEquals(2137, int0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(2137, complexImage1.Y());
      
      RealGrayImage realGrayImage2 = complexImage1.real();
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotNull(realGrayImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(2137, complexImage1.Y());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(2137, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage1.divide(2137, (-1971), 0.0F, (float) 2137);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1971
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2137);
      assertNotNull(complexImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      String string0 = complexImage0.toString();
      assertEquals("0:2137\n0:2137\n", string0);
      assertNotNull(string0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(2137, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(2137, complexImage1.Y());
      
      RealGrayImage realGrayImage1 = complexImage1.getMagnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(2137, complexImage1.Y());
      assertEquals(2137, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      
      Complex complex0 = complexImage1.min();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(2137, complexImage1.Y());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      
      complexImage1.divide(complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(2137, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(2137, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.add((-3107), 1122, 3414.04F, (float) 1122, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.imag;
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      complexImage0.setImaginary(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, 0.0F, (float) 0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      int int0 = 2763;
      int int1 = 0;
      // Undeclared exception!
      try { 
        complexImage0.multiply(2763, 0, 1809.7F, 1809.7F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }
}
