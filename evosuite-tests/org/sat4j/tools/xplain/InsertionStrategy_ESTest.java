/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:55:20 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.xplain.InsertionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InsertionStrategy_ESTest extends InsertionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-1163));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, (-3447));
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, tabuListDecorator0, lubyRestarts0);
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(solver0, hashMap0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.InsertionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(dimacsStringSolver0, hashMap0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(dimacsStringSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(stringArray0, singleSolutionDetectorArray0);
      VecInt vecInt0 = new VecInt(0, 0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(manyCore0, hashMap0, vecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      hashMap0.put((Integer) null, insertionStrategy0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(dimacsStringSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      String string0 = insertionStrategy0.toString();
      assertEquals("Replay (Insertion-based) minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      insertionStrategy0.cancelExplanationComputation();
      assertEquals("Replay (Insertion-based) minimization strategy", insertionStrategy0.toString());
  }
}
