[MASTER] 10:15:19.162 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:20:02.023 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_109_1550568001928/org/sat4j/core/VecInt_109_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_109_1550568001928/org/sat4j/core/VecInt_109_tmp__ESTest_scaffolding.java]]
[MASTER] 10:20:02.023 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 10:20:02.023 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 10:20:02.032 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 167
[MASTER] 10:20:02.033 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_109_1550568001928/org/sat4j/core/VecInt_109_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 09:20:01 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: import org.sat4j.specs.IVecInt;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class VecInt_109_tmp__ESTest extends VecInt_109_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       VecInt vecInt0 = new VecInt();
23:       assertEquals(0, vecInt0.size());
24:       assertTrue(vecInt0.isEmpty());
25:       assertNotNull(vecInt0);
26:       
27:       VecInt vecInt1 = new VecInt(0, 0);
28:       assertTrue(vecInt1.isEmpty());
29:       assertEquals(0, vecInt1.size());
30:       assertNotNull(vecInt1);
31:       assertTrue(vecInt1.equals((Object)vecInt0));
32:       
33:       vecInt0.pushAll(vecInt1);
34:       assertEquals(0, vecInt0.size());
35:       assertTrue(vecInt0.isEmpty());
36:       assertTrue(vecInt1.isEmpty());
37:       assertEquals(0, vecInt1.size());
38:       assertNotSame(vecInt0, vecInt1);
39:       assertNotSame(vecInt1, vecInt0);
40:       assertTrue(vecInt0.equals((Object)vecInt1));
41:       assertTrue(vecInt1.equals((Object)vecInt0));
42:       
43:       boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
44:       assertEquals(0, vecInt0.size());
45:       assertTrue(vecInt0.isEmpty());
46:       assertTrue(vecInt1.isEmpty());
47:       assertEquals(0, vecInt1.size());
48:       assertTrue(boolean0);
49:       assertNotSame(vecInt0, vecInt1);
50:       assertNotSame(vecInt1, vecInt0);
51:       assertTrue(vecInt0.equals((Object)vecInt1));
52:       assertTrue(vecInt1.equals((Object)vecInt0));
53:       
54:       IVecInt iVecInt0 = vecInt0.clone();
55:       assertEquals(0, vecInt0.size());
56:       assertTrue(vecInt0.isEmpty());
57:       assertTrue(iVecInt0.isEmpty());
58:       assertEquals(0, iVecInt0.size());
59:       assertNotNull(iVecInt0);
60:       assertNotSame(vecInt0, iVecInt0);
61:       assertNotSame(vecInt0, vecInt1);
62:       assertNotSame(iVecInt0, vecInt1);
63:       assertNotSame(iVecInt0, vecInt0);
64:       assertTrue(vecInt0.equals((Object)vecInt1));
65:       assertTrue(iVecInt0.equals((Object)vecInt1));
66:       assertTrue(iVecInt0.equals((Object)vecInt0));
67:       
68:       VecInt vecInt2 = new VecInt();
69:       assertTrue(vecInt2.isEmpty());
70:       assertEquals(0, vecInt2.size());
71:       assertNotNull(vecInt2);
72:       assertTrue(vecInt2.equals((Object)vecInt0));
73:       assertTrue(vecInt2.equals((Object)iVecInt0));
74:       assertTrue(vecInt2.equals((Object)vecInt1));
75:       
76:       VecInt vecInt3 = new VecInt(0, 0);
77:       assertEquals(0, vecInt3.size());
78:       assertTrue(vecInt3.isEmpty());
79:       assertNotNull(vecInt3);
80:       assertTrue(vecInt3.equals((Object)iVecInt0));
81:       assertTrue(vecInt3.equals((Object)vecInt0));
82:       assertTrue(vecInt3.equals((Object)vecInt1));
83:       assertTrue(vecInt3.equals((Object)vecInt2));
84:       
85:       boolean boolean1 = vecInt0.isSubsetOf(vecInt2);
86:       assertEquals(0, vecInt0.size());
87:       assertTrue(vecInt0.isEmpty());
88:       assertTrue(vecInt2.isEmpty());
89:       assertEquals(0, vecInt2.size());
90:       assertTrue(boolean1);
91:       assertNotSame(vecInt0, iVecInt0);
92:       assertNotSame(vecInt0, vecInt3);
93:       assertNotSame(vecInt0, vecInt1);
94:       assertNotSame(vecInt0, vecInt2);
95:       assertNotSame(vecInt2, vecInt3);
96:       assertNotSame(vecInt2, vecInt1);
97:       assertNotSame(vecInt2, vecInt0);
98:       assertNotSame(vecInt2, iVecInt0);
99:       assertTrue(vecInt0.equals((Object)vecInt3));
100:       assertTrue(vecInt0.equals((Object)vecInt2));
101:       assertTrue(vecInt0.equals((Object)vecInt1));
102:       assertTrue(vecInt0.equals((Object)iVecInt0));
103:       assertTrue(vecInt2.equals((Object)vecInt0));
104:       assertTrue(vecInt2.equals((Object)iVecInt0));
105:       assertTrue(vecInt2.equals((Object)vecInt3));
106:       assertTrue(vecInt2.equals((Object)vecInt1));
107:       assertTrue(boolean1 == boolean0);
108:       
109:       boolean boolean2 = vecInt0.isSubsetOf(vecInt1);
110:       assertEquals(0, vecInt0.size());
111:       assertTrue(vecInt0.isEmpty());
112:       assertTrue(vecInt1.isEmpty());
113:       assertEquals(0, vecInt1.size());
114:       assertTrue(boolean2);
115:       assertNotSame(vecInt0, iVecInt0);
116:       assertNotSame(vecInt0, vecInt3);
117:       assertNotSame(vecInt0, vecInt1);
118:       assertNotSame(vecInt0, vecInt2);
119:       assertNotSame(vecInt1, vecInt2);
120:       assertNotSame(vecInt1, vecInt3);
121:       assertNotSame(vecInt1, vecInt0);
122:       assertNotSame(vecInt1, iVecInt0);
123:       assertTrue(vecInt0.equals((Object)vecInt3));
124:       assertTrue(vecInt0.equals((Object)vecInt2));
125:       assertTrue(vecInt0.equals((Object)vecInt1));
126:       assertTrue(vecInt0.equals((Object)iVecInt0));
127:       assertTrue(vecInt1.equals((Object)vecInt0));
128:       assertTrue(vecInt1.equals((Object)iVecInt0));
129:       assertTrue(vecInt1.equals((Object)vecInt3));
130:       assertTrue(vecInt1.equals((Object)vecInt2));
131:       assertTrue(boolean2 == boolean0);
132:       assertTrue(boolean2 == boolean1);
133:       
134:       vecInt1.selectionSort(0, 0);
135:       assertTrue(vecInt1.isEmpty());
136:       assertEquals(0, vecInt1.size());
137:       assertNotSame(vecInt1, vecInt2);
138:       assertNotSame(vecInt1, vecInt3);
139:       assertNotSame(vecInt1, vecInt0);
140:       assertNotSame(vecInt1, iVecInt0);
141:       assertTrue(vecInt1.equals((Object)vecInt0));
142:       assertTrue(vecInt1.equals((Object)iVecInt0));
143:       assertTrue(vecInt1.equals((Object)vecInt3));
144:       assertTrue(vecInt1.equals((Object)vecInt2));
145:       
146:       int[] intArray0 = vecInt1.toArray();
147:       assertTrue(vecInt1.isEmpty());
148:       assertEquals(0, vecInt1.size());
149:       assertEquals(0, intArray0.length);
150:       assertNotNull(intArray0);
151:       assertNotSame(vecInt1, vecInt2);
152:       assertNotSame(vecInt1, vecInt3);
153:       assertNotSame(vecInt1, vecInt0);
154:       assertNotSame(vecInt1, iVecInt0);
155:       assertTrue(vecInt1.equals((Object)vecInt0));
156:       assertTrue(vecInt1.equals((Object)iVecInt0));
157:       assertTrue(vecInt1.equals((Object)vecInt3));
158:       assertTrue(vecInt1.equals((Object)vecInt2));
159:       assertArrayEquals(new int[] {}, intArray0);
160:       
161:       int int0 = new Integer(0);
162:       assertEquals(0, int0);
163:       
164:       VecInt vecInt4 = null;
165:       // Undeclared exception!
166:       try { 
167:         VecInt.access$100((VecInt) null);
168:         fail("Expecting exception: NullPointerException");
169:       
170:       } catch(NullPointerException e) {
171:          //
172:          // no message in exception (getMessage() returned null)
173:          //
174:          verifyException("org.sat4j.core.VecInt", e);
175:       }
176:   }
177: }
RegularFileObject[/tmp/EvoSuite_109_1550568001928/org/sat4j/core/VecInt_109_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 09:20:01 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_109_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_109_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt",
87:       "org.sat4j.core.EmptyVecInt$1"
88:     );
89:   } 
90: 
91:   private static void resetClasses() {
92:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_109_tmp__ESTest_scaffolding.class.getClassLoader()); 
93: 
94:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
95:       "org.sat4j.core.EmptyVecInt",
96:       "org.sat4j.core.VecInt",
97:       "org.sat4j.core.VecInt$1",
98:       "org.sat4j.core.EmptyVecInt$1",
99:       "org.sat4j.core.ReadOnlyVecInt"
100:     );
101:   }
102: }

[MASTER] 10:20:02.035 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

VecInt vecInt1 = new VecInt(0, 0);
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertNotNull(vecInt1);
assertTrue(vecInt1.equals((Object)vecInt0));

vecInt0.pushAll(vecInt1);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt1, vecInt0);
assertTrue(vecInt0.equals((Object)vecInt1));
assertTrue(vecInt1.equals((Object)vecInt0));

boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertTrue(boolean0);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt1, vecInt0);
assertTrue(vecInt0.equals((Object)vecInt1));
assertTrue(vecInt1.equals((Object)vecInt0));

IVecInt iVecInt0 = vecInt0.clone();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertNotNull(iVecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, vecInt1);
assertNotSame(iVecInt0, vecInt1);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.equals((Object)vecInt1));
assertTrue(iVecInt0.equals((Object)vecInt1));
assertTrue(iVecInt0.equals((Object)vecInt0));

VecInt vecInt2 = new VecInt();
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertNotNull(vecInt2);
assertTrue(vecInt2.equals((Object)vecInt0));
assertTrue(vecInt2.equals((Object)iVecInt0));
assertTrue(vecInt2.equals((Object)vecInt1));

VecInt vecInt3 = new VecInt(0, 0);
assertEquals(0, vecInt3.size());
assertTrue(vecInt3.isEmpty());
assertNotNull(vecInt3);
assertTrue(vecInt3.equals((Object)iVecInt0));
assertTrue(vecInt3.equals((Object)vecInt0));
assertTrue(vecInt3.equals((Object)vecInt1));
assertTrue(vecInt3.equals((Object)vecInt2));

boolean boolean1 = vecInt0.isSubsetOf(vecInt2);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertTrue(boolean1);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, vecInt3);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt0, vecInt2);
assertNotSame(vecInt2, vecInt3);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertNotSame(vecInt2, iVecInt0);
assertTrue(vecInt0.equals((Object)vecInt3));
assertTrue(vecInt0.equals((Object)vecInt2));
assertTrue(vecInt0.equals((Object)vecInt1));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(vecInt2.equals((Object)vecInt0));
assertTrue(vecInt2.equals((Object)iVecInt0));
assertTrue(vecInt2.equals((Object)vecInt3));
assertTrue(vecInt2.equals((Object)vecInt1));
assertTrue(boolean1 == boolean0);

boolean boolean2 = vecInt0.isSubsetOf(vecInt1);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertTrue(boolean2);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, vecInt3);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt0, vecInt2);
assertNotSame(vecInt1, vecInt2);
assertNotSame(vecInt1, vecInt3);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt0);
assertTrue(vecInt0.equals((Object)vecInt3));
assertTrue(vecInt0.equals((Object)vecInt2));
assertTrue(vecInt0.equals((Object)vecInt1));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(vecInt1.equals((Object)vecInt0));
assertTrue(vecInt1.equals((Object)iVecInt0));
assertTrue(vecInt1.equals((Object)vecInt3));
assertTrue(vecInt1.equals((Object)vecInt2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

vecInt1.selectionSort(0, 0);
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertNotSame(vecInt1, vecInt2);
assertNotSame(vecInt1, vecInt3);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt0);
assertTrue(vecInt1.equals((Object)vecInt0));
assertTrue(vecInt1.equals((Object)iVecInt0));
assertTrue(vecInt1.equals((Object)vecInt3));
assertTrue(vecInt1.equals((Object)vecInt2));

int[] intArray0 = vecInt1.toArray();
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertEquals(0, intArray0.length);
assertNotNull(intArray0);
assertNotSame(vecInt1, vecInt2);
assertNotSame(vecInt1, vecInt3);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt0);
assertTrue(vecInt1.equals((Object)vecInt0));
assertTrue(vecInt1.equals((Object)iVecInt0));
assertTrue(vecInt1.equals((Object)vecInt3));
assertTrue(vecInt1.equals((Object)vecInt2));
assertArrayEquals(new int[] {}, intArray0);

int int0 = new Integer(0);
assertEquals(0, int0);

VecInt vecInt4 = null;
VecInt.access$100((VecInt) null);

[MASTER] 10:20:03.624 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_124_1550568003516/org/sat4j/core/VecInt_124_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_124_1550568003516/org/sat4j/core/VecInt_124_tmp__ESTest_scaffolding.java]]
[MASTER] 10:20:03.624 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 10:20:03.624 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 10:20:03.625 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 47
[MASTER] 10:20:03.625 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_124_1550568003516/org/sat4j/core/VecInt_124_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 09:20:03 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class VecInt_124_tmp__ESTest extends VecInt_124_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       int[] intArray0 = new int[2];
22:       intArray0[0] = 0;
23:       intArray0[1] = 0;
24:       VecInt vecInt0 = new VecInt();
25:       assertEquals(0, vecInt0.size());
26:       assertTrue(vecInt0.isEmpty());
27:       assertNotNull(vecInt0);
28:       
29:       VecInt vecInt1 = new VecInt(intArray0);
30:       assertEquals(0, vecInt1.last());
31:       assertFalse(vecInt1.isEmpty());
32:       assertEquals(2, vecInt1.size());
33:       assertEquals(2, intArray0.length);
34:       assertNotNull(vecInt1);
35:       assertFalse(vecInt1.equals((Object)vecInt0));
36:       assertArrayEquals(new int[] {0, 0}, intArray0);
37:       
38:       VecInt vecInt2 = new VecInt();
39:       assertTrue(vecInt2.isEmpty());
40:       assertEquals(0, vecInt2.size());
41:       assertNotNull(vecInt2);
42:       assertFalse(vecInt2.equals((Object)vecInt1));
43:       assertTrue(vecInt2.equals((Object)vecInt0));
44:       
45:       // Undeclared exception!
46:       try { 
47:         VecInt.access$000((VecInt) null);
48:         fail("Expecting exception: NullPointerException");
49:       
50:       } catch(NullPointerException e) {
51:          //
52:          // no message in exception (getMessage() returned null)
53:          //
54:          verifyException("org.sat4j.core.VecInt", e);
55:       }
56:   }
57: }
RegularFileObject[/tmp/EvoSuite_124_1550568003516/org/sat4j/core/VecInt_124_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 09:20:03 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_124_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_124_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt",
87:       "org.sat4j.core.EmptyVecInt$1"
88:     );
89:   } 
90: 
91:   private static void resetClasses() {
92:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_124_tmp__ESTest_scaffolding.class.getClassLoader()); 
93: 
94:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
95:       "org.sat4j.core.EmptyVecInt",
96:       "org.sat4j.core.VecInt",
97:       "org.sat4j.core.VecInt$1",
98:       "org.sat4j.core.EmptyVecInt$1",
99:       "org.sat4j.core.ReadOnlyVecInt"
100:     );
101:   }
102: }

[MASTER] 10:20:03.625 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int[] intArray0 = new int[2];
intArray0[0] = 0;
intArray0[1] = 0;
VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

VecInt vecInt1 = new VecInt(intArray0);
assertEquals(0, vecInt1.last());
assertFalse(vecInt1.isEmpty());
assertEquals(2, vecInt1.size());
assertEquals(2, intArray0.length);
assertNotNull(vecInt1);
assertFalse(vecInt1.equals((Object)vecInt0));
assertArrayEquals(new int[] {0, 0}, intArray0);

VecInt vecInt2 = new VecInt();
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertNotNull(vecInt2);
assertFalse(vecInt2.equals((Object)vecInt1));
assertTrue(vecInt2.equals((Object)vecInt0));

VecInt.access$000((VecInt) null);

