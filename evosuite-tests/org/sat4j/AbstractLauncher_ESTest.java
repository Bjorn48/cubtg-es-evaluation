/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:28:51 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.MUSLauncher;
import org.sat4j.OptimizationMode;
import org.sat4j.core.ASolverFactory;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.reader.JSONReader;
import org.sat4j.reader.Reader;
import org.sat4j.specs.IProblem;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.OptToSatAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractLauncher_ESTest extends AbstractLauncher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.setDisplaySolutionLine(true);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      basicLauncher0.showAvailableSolvers((ASolverFactory<ClausalCardinalitiesDecorator<AbstractMinimalModel>>) null, (String) null);
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.configureLauncher();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      IProblem iProblem0 = mock(IProblem.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iProblem0).isSatisfiable();
      basicLauncher0.solve(iProblem0);
      //  // Unstable assertion: assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[7];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("c ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "c ");
      stringArray0[6] = "c ";
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.MUSLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      basicLauncher0.displayLicense();
      basicLauncher0.displayLicense();
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      JSONReader<MinOneDecorator> jSONReader0 = new JSONReader<MinOneDecorator>(minOneDecorator0);
      basicLauncher0.reader = (Reader) jSONReader0;
      basicLauncher0.addHook();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[1];
      mUSLauncher0.usage();
      stringArray0[0] = "c ";
      mUSLauncher0.getInstanceName(stringArray0);
      basicLauncher0.log("^Rz,i`-QcL");
      mUSLauncher0.setDisplaySolutionLine(false);
      basicLauncher0.displayLicense();
      mUSLauncher0.getExitCode();
      basicLauncher0.getReader();
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.beginTime = (-999L);
      long long0 = mUSLauncher0.getBeginTime();
      assertEquals((-999L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.MUSLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.readProblem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.out = null;
      // Undeclared exception!
      try { 
        mUSLauncher0.log(" SqUs6LAS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.bufferizeLog();
      mUSLauncher0.usage();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      basicLauncher0.getLogWriter();
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      boolean boolean0 = basicLauncher0.isSilent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ASolverFactory<FullClauseSelectorSolver<OptToSatAdapter>> aSolverFactory0 = (ASolverFactory<FullClauseSelectorSolver<OptToSatAdapter>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(aSolverFactory0).solverNames();
      // Undeclared exception!
      try { 
        mUSLauncher0.showAvailableSolvers(aSolverFactory0, "This is free software under the dual EPL/GNU LGPL licenses.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.setSilent(true);
      String[] stringArray0 = new String[5];
      stringArray0[4] = "c ";
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.MUSLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.feedWithDecorated = true;
      // Undeclared exception!
      try { 
        mUSLauncher0.readProblem("V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.setIncomplete(true);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getLauncherMode();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.setLogWriter((PrintWriter) null);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.solve((IProblem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.bufferizeLog();
      try { 
        mUSLauncher0.readProblem("V");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      OptimizationMode optimizationMode0 = new OptimizationMode();
      mUSLauncher0.setLauncherMode(optimizationMode0);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.addHook();
      String[] stringArray0 = new String[5];
      stringArray0[4] = "c ";
      mUSLauncher0.run(stringArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      ExitCode exitCode0 = ExitCode.OPTIMUM_FOUND;
      // Undeclared exception!
      try { 
        basicLauncher0.setExitCode(exitCode0);
       //  fail("Expecting exception: NoSuchFieldError");
       // Unstable assertion
      } catch(NoSuchFieldError e) {
         //
         // exitCode
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getReader();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      basicLauncher0.displayResult();
      assertFalse(basicLauncher0.isSilent());
  }
}
