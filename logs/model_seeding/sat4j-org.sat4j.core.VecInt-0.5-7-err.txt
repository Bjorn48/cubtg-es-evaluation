[MASTER] 05:25:14.570 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 05:29:21.763 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_90_1550377761722/org/sat4j/core/VecInt_90_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_90_1550377761722/org/sat4j/core/VecInt_90_tmp__ESTest_scaffolding.java]]
[MASTER] 05:29:21.763 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:29:21.763 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:29:21.768 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 115
[MASTER] 05:29:21.768 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 131
[MASTER] 05:29:21.769 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_90_1550377761722/org/sat4j/core/VecInt_90_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Sun Feb 17 04:29:21 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: import org.sat4j.specs.IVecInt;
16: import org.sat4j.specs.IteratorInt;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class VecInt_90_tmp__ESTest extends VecInt_90_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       int[] intArray0 = new int[9];
24:       int int0 = 2991;
25:       intArray0[0] = 2991;
26:       VecInt vecInt0 = new VecInt();
27:       assertNotNull(vecInt0);
28:       assertEquals(0, vecInt0.size());
29:       assertTrue(vecInt0.isEmpty());
30:       
31:       int int1 = vecInt0.size();
32:       assertEquals(0, int1);
33:       assertFalse(int1 == int0);
34:       assertEquals(0, vecInt0.size());
35:       assertTrue(vecInt0.isEmpty());
36:       
37:       vecInt0.moveTo(0, 0);
38:       assertEquals(0, vecInt0.size());
39:       assertTrue(vecInt0.isEmpty());
40:       
41:       IVecInt iVecInt0 = vecInt0.clone();
42:       assertNotNull(iVecInt0);
43:       assertNotSame(vecInt0, iVecInt0);
44:       assertNotSame(iVecInt0, vecInt0);
45:       assertTrue(iVecInt0.equals((Object)vecInt0));
46:       assertEquals(0, vecInt0.size());
47:       assertTrue(vecInt0.isEmpty());
48:       assertTrue(iVecInt0.isEmpty());
49:       assertEquals(0, iVecInt0.size());
50:       
51:       VecInt vecInt1 = new VecInt(310);
52:       assertNotNull(vecInt1);
53:       assertTrue(vecInt1.equals((Object)iVecInt0));
54:       assertTrue(vecInt1.equals((Object)vecInt0));
55:       assertEquals(0, vecInt1.size());
56:       assertTrue(vecInt1.isEmpty());
57:       
58:       int int2 = 0;
59:       VecInt vecInt2 = new VecInt(0);
60:       assertNotNull(vecInt2);
61:       assertTrue(vecInt2.equals((Object)iVecInt0));
62:       assertTrue(vecInt2.equals((Object)vecInt0));
63:       assertTrue(vecInt2.equals((Object)vecInt1));
64:       assertTrue(vecInt2.isEmpty());
65:       assertEquals(0, vecInt2.size());
66:       
67:       vecInt2.sort();
68:       assertNotSame(vecInt2, vecInt0);
69:       assertNotSame(vecInt2, vecInt1);
70:       assertNotSame(vecInt2, iVecInt0);
71:       assertTrue(vecInt2.equals((Object)iVecInt0));
72:       assertTrue(vecInt2.equals((Object)vecInt0));
73:       assertTrue(vecInt2.equals((Object)vecInt1));
74:       assertTrue(vecInt2.isEmpty());
75:       assertEquals(0, vecInt2.size());
76:       
77:       IteratorInt iteratorInt0 = vecInt2.iterator();
78:       assertNotNull(iteratorInt0);
79:       assertNotSame(vecInt2, vecInt0);
80:       assertNotSame(vecInt2, vecInt1);
81:       assertNotSame(vecInt2, iVecInt0);
82:       assertTrue(vecInt2.equals((Object)iVecInt0));
83:       assertTrue(vecInt2.equals((Object)vecInt0));
84:       assertTrue(vecInt2.equals((Object)vecInt1));
85:       assertTrue(vecInt2.isEmpty());
86:       assertEquals(0, vecInt2.size());
87:       
88:       vecInt1.moveTo((IVecInt) vecInt2);
89:       assertNotSame(vecInt1, vecInt0);
90:       assertNotSame(vecInt1, vecInt2);
91:       assertNotSame(vecInt1, iVecInt0);
92:       assertNotSame(vecInt2, vecInt0);
93:       assertNotSame(vecInt2, vecInt1);
94:       assertNotSame(vecInt2, iVecInt0);
95:       assertTrue(vecInt1.equals((Object)iVecInt0));
96:       assertTrue(vecInt1.equals((Object)vecInt0));
97:       assertTrue(vecInt1.equals((Object)vecInt2));
98:       assertTrue(vecInt2.equals((Object)iVecInt0));
99:       assertTrue(vecInt2.equals((Object)vecInt0));
100:       assertTrue(vecInt2.equals((Object)vecInt1));
101:       assertEquals(0, vecInt1.size());
102:       assertTrue(vecInt1.isEmpty());
103:       assertTrue(vecInt2.isEmpty());
104:       assertEquals(0, vecInt2.size());
105:       
106:       VecInt vecInt3 = new VecInt();
107:       assertNotNull(vecInt3);
108:       assertTrue(vecInt3.equals((Object)iVecInt0));
109:       assertTrue(vecInt3.equals((Object)vecInt0));
110:       assertTrue(vecInt3.equals((Object)vecInt2));
111:       assertTrue(vecInt3.equals((Object)vecInt1));
112:       assertEquals(0, vecInt3.size());
113:       assertTrue(vecInt3.isEmpty());
114:       
115:       int int3 = VecInt.access$000(vecInt3);
116:       assertEquals(0, int3);
117:       assertNotSame(vecInt3, vecInt0);
118:       assertNotSame(vecInt3, vecInt2);
119:       assertNotSame(vecInt3, vecInt1);
120:       assertNotSame(vecInt3, iVecInt0);
121:       assertTrue(vecInt3.equals((Object)iVecInt0));
122:       assertTrue(vecInt3.equals((Object)vecInt0));
123:       assertTrue(vecInt3.equals((Object)vecInt2));
124:       assertTrue(vecInt3.equals((Object)vecInt1));
125:       assertTrue(int3 == int2);
126:       assertFalse(int3 == int0);
127:       assertTrue(int3 == int1);
128:       assertEquals(0, vecInt3.size());
129:       assertTrue(vecInt3.isEmpty());
130:       
131:       int[] intArray1 = VecInt.access$100(vecInt3);
132:       assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
133:       assertNotNull(intArray1);
134:       assertNotSame(vecInt3, vecInt0);
135:       assertNotSame(vecInt3, vecInt2);
136:       assertNotSame(vecInt3, vecInt1);
137:       assertNotSame(vecInt3, iVecInt0);
138:       assertNotSame(intArray1, intArray0);
139:       assertTrue(vecInt3.equals((Object)iVecInt0));
140:       assertTrue(vecInt3.equals((Object)vecInt0));
141:       assertTrue(vecInt3.equals((Object)vecInt2));
142:       assertTrue(vecInt3.equals((Object)vecInt1));
143:       assertFalse(intArray1.equals((Object)intArray0));
144:       assertEquals(5, intArray1.length);
145:       assertEquals(0, vecInt3.size());
146:       assertTrue(vecInt3.isEmpty());
147:       
148:       vecInt3.moveTo2(vecInt0);
149:       assertNotSame(vecInt0, iVecInt0);
150:       assertNotSame(vecInt0, vecInt3);
151:       assertNotSame(vecInt0, vecInt2);
152:       assertNotSame(vecInt0, vecInt1);
153:       assertNotSame(vecInt3, vecInt0);
154:       assertNotSame(vecInt3, vecInt2);
155:       assertNotSame(vecInt3, vecInt1);
156:       assertNotSame(vecInt3, iVecInt0);
157:       assertTrue(vecInt0.equals((Object)vecInt1));
158:       assertTrue(vecInt0.equals((Object)vecInt2));
159:       assertTrue(vecInt0.equals((Object)iVecInt0));
160:       assertTrue(vecInt0.equals((Object)vecInt3));
161:       assertTrue(vecInt3.equals((Object)iVecInt0));
162:       assertTrue(vecInt3.equals((Object)vecInt0));
163:       assertTrue(vecInt3.equals((Object)vecInt2));
164:       assertTrue(vecInt3.equals((Object)vecInt1));
165:       assertEquals(0, vecInt0.size());
166:       assertTrue(vecInt0.isEmpty());
167:       assertEquals(0, vecInt3.size());
168:       assertTrue(vecInt3.isEmpty());
169:       
170:       int int4 = 143;
171:       int int5 = vecInt1.containsAt(int4, int2);
172:       assertEquals((-1), int5);
173:       assertNotSame(vecInt1, vecInt3);
174:       assertNotSame(vecInt1, vecInt0);
175:       assertNotSame(vecInt1, vecInt2);
176:       assertNotSame(vecInt1, iVecInt0);
177:       assertFalse(int4 == int1);
178:       assertFalse(int4 == int3);
179:       assertFalse(int4 == int0);
180:       assertFalse(int4 == int2);
181:       assertFalse(int5 == int1);
182:       assertFalse(int5 == int4);
183:       assertFalse(int5 == int2);
184:       assertFalse(int5 == int0);
185:       assertFalse(int5 == int3);
186:       assertTrue(vecInt1.equals((Object)iVecInt0));
187:       assertTrue(vecInt1.equals((Object)vecInt3));
188:       assertTrue(vecInt1.equals((Object)vecInt0));
189:       assertTrue(vecInt1.equals((Object)vecInt2));
190:       assertTrue(int2 == int1);
191:       assertFalse(int2 == int4);
192:       assertFalse(int2 == int0);
193:       assertTrue(int2 == int3);
194:       assertEquals(0, vecInt1.size());
195:       assertTrue(vecInt1.isEmpty());
196:       
197:       vecInt1.moveTo2(iVecInt0);
198:       assertNotSame(vecInt0, iVecInt0);
199:       assertNotSame(vecInt0, vecInt3);
200:       assertNotSame(vecInt0, vecInt2);
201:       assertNotSame(vecInt0, vecInt1);
202:       assertNotSame(iVecInt0, vecInt3);
203:       assertNotSame(iVecInt0, vecInt0);
204:       assertNotSame(iVecInt0, vecInt2);
205:       assertNotSame(iVecInt0, vecInt1);
206:       assertNotSame(vecInt1, vecInt3);
207:       assertNotSame(vecInt1, vecInt0);
208:       assertNotSame(vecInt1, vecInt2);
209:       assertNotSame(vecInt1, iVecInt0);
210:       assertTrue(vecInt0.equals((Object)vecInt1));
211:       assertTrue(vecInt0.equals((Object)vecInt2));
212:       assertTrue(vecInt0.equals((Object)iVecInt0));
213:       assertTrue(vecInt0.equals((Object)vecInt3));
214:       assertTrue(iVecInt0.equals((Object)vecInt3));
215:       assertTrue(iVecInt0.equals((Object)vecInt2));
216:       assertTrue(iVecInt0.equals((Object)vecInt1));
217:       assertTrue(iVecInt0.equals((Object)vecInt0));
218:       assertTrue(vecInt1.equals((Object)iVecInt0));
219:       assertTrue(vecInt1.equals((Object)vecInt3));
220:       assertTrue(vecInt1.equals((Object)vecInt0));
221:       assertTrue(vecInt1.equals((Object)vecInt2));
222:       assertEquals(0, vecInt0.size());
223:       assertTrue(vecInt0.isEmpty());
224:       assertTrue(iVecInt0.isEmpty());
225:       assertEquals(0, iVecInt0.size());
226:       assertEquals(0, vecInt1.size());
227:       assertTrue(vecInt1.isEmpty());
228:       
229:       int int6 = 1;
230:       vecInt1.moveTo((IVecInt) vecInt3);
231:       assertNotSame(vecInt1, vecInt3);
232:       assertNotSame(vecInt1, vecInt0);
233:       assertNotSame(vecInt1, vecInt2);
234:       assertNotSame(vecInt1, iVecInt0);
235:       assertNotSame(vecInt3, vecInt0);
236:       assertNotSame(vecInt3, vecInt2);
237:       assertNotSame(vecInt3, vecInt1);
238:       assertNotSame(vecInt3, iVecInt0);
239:       assertTrue(vecInt1.equals((Object)iVecInt0));
240:       assertTrue(vecInt1.equals((Object)vecInt3));
241:       assertTrue(vecInt1.equals((Object)vecInt0));
242:       assertTrue(vecInt1.equals((Object)vecInt2));
243:       assertTrue(vecInt3.equals((Object)iVecInt0));
244:       assertTrue(vecInt3.equals((Object)vecInt0));
245:       assertTrue(vecInt3.equals((Object)vecInt2));
246:       assertTrue(vecInt3.equals((Object)vecInt1));
247:       assertEquals(0, vecInt1.size());
248:       assertTrue(vecInt1.isEmpty());
249:       assertEquals(0, vecInt3.size());
250:       assertTrue(vecInt3.isEmpty());
251:       
252:       // Undeclared exception!
253:       try { 
254:         vecInt2.unsafePush(int0);
255:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
256:       
257:       } catch(ArrayIndexOutOfBoundsException e) {
258:          //
259:          // 0
260:          //
261:          verifyException("org.sat4j.core.VecInt", e);
262:       }
263:   }
264: }
RegularFileObject[/tmp/EvoSuite_90_1550377761722/org/sat4j/core/VecInt_90_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Sun Feb 17 04:29:21 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_90_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_90_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt",
87:       "org.sat4j.core.EmptyVecInt$1"
88:     );
89:   } 
90: 
91:   private static void resetClasses() {
92:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_90_tmp__ESTest_scaffolding.class.getClassLoader()); 
93: 
94:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
95:       "org.sat4j.core.EmptyVecInt",
96:       "org.sat4j.core.VecInt",
97:       "org.sat4j.core.VecInt$1",
98:       "org.sat4j.core.ReadOnlyVecInt",
99:       "org.sat4j.core.EmptyVecInt$1"
100:     );
101:   }
102: }

[MASTER] 05:29:21.773 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int[] intArray0 = new int[9];
int int0 = 2991;
intArray0[0] = 2991;
VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

int int1 = vecInt0.size();
assertEquals(0, int1);
assertFalse(int1 == int0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

vecInt0.moveTo(0, 0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

IVecInt iVecInt0 = vecInt0.clone();
assertNotNull(iVecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(iVecInt0.equals((Object)vecInt0));
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

VecInt vecInt1 = new VecInt(310);
assertNotNull(vecInt1);
assertTrue(vecInt1.equals((Object)iVecInt0));
assertTrue(vecInt1.equals((Object)vecInt0));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());

int int2 = 0;
VecInt vecInt2 = new VecInt(0);
assertNotNull(vecInt2);
assertTrue(vecInt2.equals((Object)iVecInt0));
assertTrue(vecInt2.equals((Object)vecInt0));
assertTrue(vecInt2.equals((Object)vecInt1));
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());

vecInt2.sort();
assertNotSame(vecInt2, vecInt0);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, iVecInt0);
assertTrue(vecInt2.equals((Object)iVecInt0));
assertTrue(vecInt2.equals((Object)vecInt0));
assertTrue(vecInt2.equals((Object)vecInt1));
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());

IteratorInt iteratorInt0 = vecInt2.iterator();
assertNotNull(iteratorInt0);
assertNotSame(vecInt2, vecInt0);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, iVecInt0);
assertTrue(vecInt2.equals((Object)iVecInt0));
assertTrue(vecInt2.equals((Object)vecInt0));
assertTrue(vecInt2.equals((Object)vecInt1));
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());

vecInt1.moveTo((IVecInt) vecInt2);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, vecInt2);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt2, vecInt0);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, iVecInt0);
assertTrue(vecInt1.equals((Object)iVecInt0));
assertTrue(vecInt1.equals((Object)vecInt0));
assertTrue(vecInt1.equals((Object)vecInt2));
assertTrue(vecInt2.equals((Object)iVecInt0));
assertTrue(vecInt2.equals((Object)vecInt0));
assertTrue(vecInt2.equals((Object)vecInt1));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());

VecInt vecInt3 = new VecInt();
assertNotNull(vecInt3);
assertTrue(vecInt3.equals((Object)iVecInt0));
assertTrue(vecInt3.equals((Object)vecInt0));
assertTrue(vecInt3.equals((Object)vecInt2));
assertTrue(vecInt3.equals((Object)vecInt1));
assertEquals(0, vecInt3.size());
assertTrue(vecInt3.isEmpty());

int int3 = VecInt.access$000(vecInt3);
assertEquals(0, int3);
assertNotSame(vecInt3, vecInt0);
assertNotSame(vecInt3, vecInt2);
assertNotSame(vecInt3, vecInt1);
assertNotSame(vecInt3, iVecInt0);
assertTrue(vecInt3.equals((Object)iVecInt0));
assertTrue(vecInt3.equals((Object)vecInt0));
assertTrue(vecInt3.equals((Object)vecInt2));
assertTrue(vecInt3.equals((Object)vecInt1));
assertTrue(int3 == int2);
assertFalse(int3 == int0);
assertTrue(int3 == int1);
assertEquals(0, vecInt3.size());
assertTrue(vecInt3.isEmpty());

int[] intArray1 = VecInt.access$100(vecInt3);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
assertNotNull(intArray1);
assertNotSame(vecInt3, vecInt0);
assertNotSame(vecInt3, vecInt2);
assertNotSame(vecInt3, vecInt1);
assertNotSame(vecInt3, iVecInt0);
assertNotSame(intArray1, intArray0);
assertTrue(vecInt3.equals((Object)iVecInt0));
assertTrue(vecInt3.equals((Object)vecInt0));
assertTrue(vecInt3.equals((Object)vecInt2));
assertTrue(vecInt3.equals((Object)vecInt1));
assertFalse(intArray1.equals((Object)intArray0));
assertEquals(5, intArray1.length);
assertEquals(0, vecInt3.size());
assertTrue(vecInt3.isEmpty());

vecInt3.moveTo2(vecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, vecInt3);
assertNotSame(vecInt0, vecInt2);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt3, vecInt0);
assertNotSame(vecInt3, vecInt2);
assertNotSame(vecInt3, vecInt1);
assertNotSame(vecInt3, iVecInt0);
assertTrue(vecInt0.equals((Object)vecInt1));
assertTrue(vecInt0.equals((Object)vecInt2));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(vecInt0.equals((Object)vecInt3));
assertTrue(vecInt3.equals((Object)iVecInt0));
assertTrue(vecInt3.equals((Object)vecInt0));
assertTrue(vecInt3.equals((Object)vecInt2));
assertTrue(vecInt3.equals((Object)vecInt1));
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt3.size());
assertTrue(vecInt3.isEmpty());

int int4 = 143;
int int5 = vecInt1.containsAt(int4, int2);
assertEquals((-1), int5);
assertNotSame(vecInt1, vecInt3);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, vecInt2);
assertNotSame(vecInt1, iVecInt0);
assertFalse(int4 == int1);
assertFalse(int4 == int3);
assertFalse(int4 == int0);
assertFalse(int4 == int2);
assertFalse(int5 == int1);
assertFalse(int5 == int4);
assertFalse(int5 == int2);
assertFalse(int5 == int0);
assertFalse(int5 == int3);
assertTrue(vecInt1.equals((Object)iVecInt0));
assertTrue(vecInt1.equals((Object)vecInt3));
assertTrue(vecInt1.equals((Object)vecInt0));
assertTrue(vecInt1.equals((Object)vecInt2));
assertTrue(int2 == int1);
assertFalse(int2 == int4);
assertFalse(int2 == int0);
assertTrue(int2 == int3);
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());

vecInt1.moveTo2(iVecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, vecInt3);
assertNotSame(vecInt0, vecInt2);
assertNotSame(vecInt0, vecInt1);
assertNotSame(iVecInt0, vecInt3);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(iVecInt0, vecInt2);
assertNotSame(iVecInt0, vecInt1);
assertNotSame(vecInt1, vecInt3);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, vecInt2);
assertNotSame(vecInt1, iVecInt0);
assertTrue(vecInt0.equals((Object)vecInt1));
assertTrue(vecInt0.equals((Object)vecInt2));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(vecInt0.equals((Object)vecInt3));
assertTrue(iVecInt0.equals((Object)vecInt3));
assertTrue(iVecInt0.equals((Object)vecInt2));
assertTrue(iVecInt0.equals((Object)vecInt1));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertTrue(vecInt1.equals((Object)iVecInt0));
assertTrue(vecInt1.equals((Object)vecInt3));
assertTrue(vecInt1.equals((Object)vecInt0));
assertTrue(vecInt1.equals((Object)vecInt2));
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());

int int6 = 1;
vecInt1.moveTo((IVecInt) vecInt3);
assertNotSame(vecInt1, vecInt3);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, vecInt2);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt3, vecInt0);
assertNotSame(vecInt3, vecInt2);
assertNotSame(vecInt3, vecInt1);
assertNotSame(vecInt3, iVecInt0);
assertTrue(vecInt1.equals((Object)iVecInt0));
assertTrue(vecInt1.equals((Object)vecInt3));
assertTrue(vecInt1.equals((Object)vecInt0));
assertTrue(vecInt1.equals((Object)vecInt2));
assertTrue(vecInt3.equals((Object)iVecInt0));
assertTrue(vecInt3.equals((Object)vecInt0));
assertTrue(vecInt3.equals((Object)vecInt2));
assertTrue(vecInt3.equals((Object)vecInt1));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt3.size());
assertTrue(vecInt3.isEmpty());

vecInt2.unsafePush(int0);

[MASTER] 05:29:22.257 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_107_1550377762237/org/sat4j/core/VecInt_107_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_107_1550377762237/org/sat4j/core/VecInt_107_tmp__ESTest_scaffolding.java]]
[MASTER] 05:29:22.257 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:29:22.257 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:29:22.258 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 28
[MASTER] 05:29:22.259 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 34
[MASTER] 05:29:22.259 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_107_1550377762237/org/sat4j/core/VecInt_107_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Sun Feb 17 04:29:22 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: import org.sat4j.specs.IVecInt;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class VecInt_107_tmp__ESTest extends VecInt_107_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       int int0 = 16;
23:       VecInt vecInt0 = new VecInt();
24:       assertNotNull(vecInt0);
25:       assertEquals(0, vecInt0.size());
26:       assertTrue(vecInt0.isEmpty());
27:       
28:       int int1 = VecInt.access$000(vecInt0);
29:       assertEquals(0, int1);
30:       assertFalse(int1 == int0);
31:       assertEquals(0, vecInt0.size());
32:       assertTrue(vecInt0.isEmpty());
33:       
34:       int[] intArray0 = VecInt.access$100(vecInt0);
35:       assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
36:       assertNotNull(intArray0);
37:       assertEquals(5, intArray0.length);
38:       assertEquals(0, vecInt0.size());
39:       assertTrue(vecInt0.isEmpty());
40:       
41:       IVecInt[] iVecIntArray0 = vecInt0.subset(int0);
42:       assertNotNull(iVecIntArray0);
43:       assertFalse(int0 == int1);
44:       assertEquals(0, iVecIntArray0.length);
45:       assertEquals(0, vecInt0.size());
46:       assertTrue(vecInt0.isEmpty());
47:       
48:       // Undeclared exception!
49:       try { 
50:         vecInt0.hashCode();
51:         fail("Expecting exception: ArithmeticException");
52:       
53:       } catch(ArithmeticException e) {
54:          //
55:          // / by zero
56:          //
57:          verifyException("org.sat4j.core.VecInt", e);
58:       }
59:   }
60: }
RegularFileObject[/tmp/EvoSuite_107_1550377762237/org/sat4j/core/VecInt_107_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Sun Feb 17 04:29:22 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_107_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_107_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt",
87:       "org.sat4j.core.EmptyVecInt$1"
88:     );
89:   } 
90: 
91:   private static void resetClasses() {
92:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_107_tmp__ESTest_scaffolding.class.getClassLoader()); 
93: 
94:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
95:       "org.sat4j.core.EmptyVecInt",
96:       "org.sat4j.core.VecInt",
97:       "org.sat4j.core.VecInt$1",
98:       "org.sat4j.core.ReadOnlyVecInt",
99:       "org.sat4j.core.EmptyVecInt$1"
100:     );
101:   }
102: }

[MASTER] 05:29:22.259 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int int0 = 16;
VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

int int1 = VecInt.access$000(vecInt0);
assertEquals(0, int1);
assertFalse(int1 == int0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

int[] intArray0 = VecInt.access$100(vecInt0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertNotNull(intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

IVecInt[] iVecIntArray0 = vecInt0.subset(int0);
assertNotNull(iVecIntArray0);
assertFalse(int0 == int1);
assertEquals(0, iVecIntArray0.length);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

vecInt0.hashCode();

