/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 16:53:49 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.Room;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, 660.984F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      room0.containsPoint(538.49F, (-1805.3322F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      room0.containsPoint((-849.0F), 1286.0F, (-540.1264F));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(6.1227794F);
      room0.isAreaCenterPointAt(0.0F, (-413.492F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      room0.move(2169.0F, 2359.253F);
      room0.isAreaCenterPointAt(2.0F, (-1.0F), 5383.6F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[][] floatArray0 = new float[8][4];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(1286.0F);
      room0.isAreaCenterPointAt(1286.0F, (-40.0F), (-849.0F));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, (-1138.3F));
      room0.isNameCenterPointAt(979.7071F, 979.7071F, 1600.75F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.isNameCenterPointAt(979.7071F, 979.7071F, 1600.75F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.move(1.0F, 1.0F);
      room0.isNameCenterPointAt((-275.21002F), 1600.75F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[][] floatArray0 = new float[3][6];
      float[] floatArray1 = new float[2];
      floatArray1[1] = 1327.5138F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 1327.5138F;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isClockwise();
      assertTrue(room0.isCeilingVisible());
      assertFalse(boolean0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.move(172.8F, 373.1561F);
      float float0 = room0.getArea();
      assertEquals(373.1561F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[6][9];
      float[] floatArray1 = new float[6];
      floatArray1[0] = (-5402.0F);
      floatArray0[4] = floatArray1;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt(736.5962F, 979.7071F, (-2837.002F));
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertFalse(boolean0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-2701.0F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(650.0F);
      assertEquals(2.8319135F, room0.getAreaAngle(), 0.01F);
      
      room0.setAreaAngle(0.0F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setPoint(0.0F, 4, 1);
      assertEquals(2.0F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[][] floatArray0 = new float[9][8];
      Room room0 = new Room(floatArray0);
      room0.setPoint((-2004.157F), 199.5F, 1);
      assertEquals((-1002.0785F), room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.removePoint(1);
      // Undeclared exception!
      try { 
        room0.setPoint((-1778.3467F), (-9.5F), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.addPoint(1.0F, 6.1227794F, 0);
      assertEquals(3, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.addPoint((-1138.3F), 1.0F);
      assertEquals((-569.15F), room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle((-737.5F));
      assertEquals(3.9158661F, room0.getNameAngle(), 0.01F);
      
      room0.setNameAngle(0.0F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset((-3109.0645F));
      assertEquals((-3109.0645F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      float[] floatArray1 = new float[2];
      floatArray1[0] = 6.1227794F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[1] = 6.1227794F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[13];
      floatArray3[0] = 2204.3508F;
      floatArray3[1] = 1.0F;
      floatArray0[4] = floatArray3;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isSingular();
      assertTrue(room0.isCeilingVisible());
      assertFalse(boolean0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(false);
      boolean boolean0 = room0.isCeilingVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(false);
      boolean boolean0 = room0.isAreaVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.intersectsRectangle(3899.8108F, (-1.0F), (-40.0F), 1108.0F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      float[] floatArray1 = new float[3];
      floatArray1[1] = 6.781976F;
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getYCenter();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(3.390988F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      float[] floatArray1 = new float[6];
      floatArray1[1] = (-1.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getYCenter();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-0.5F), float0, 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[][] floatArray0 = new float[6][0];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2.0F;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray0[2];
      floatArray0[4] = floatArray1;
      floatArray0[5] = floatArray0[3];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getXCenter();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(2.0F, float0, 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      room0.move((-129.48F), (-129.48F));
      float float0 = room0.getXCenter();
      assertEquals((-129.48F), room0.getYCenter(), 0.01F);
      assertEquals((-129.48F), float0, 0.01F);
  }
}
