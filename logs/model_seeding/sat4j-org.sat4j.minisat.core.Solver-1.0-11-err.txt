[MASTER] 18:47:13.966 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.ClausalDataStructureWL>> : Invalid generic instance
[MASTER] 18:47:14.184 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructureYanMin>> : Invalid generic instance
[MASTER] 18:47:14.300 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureSingleWL>> : Invalid generic instance
[MASTER] 18:47:31.436 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 4), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 18:47:38.711 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 4), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 18:49:10.063 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 4), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 18:49:12.748 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 4), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 18:51:08.420 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 4), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 18:51:10.471 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:158) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_91]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:279) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:543) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:254) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:160) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_91]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.net.SocketException: Broken pipe
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1580) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:294) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:153) ~[na:1.8.0_91]
	... 13 common frames omitted
[MASTER] 18:51:24.323 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 4), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 18:51:24.503 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_56_1550512284321/org/sat4j/minisat/core/Solver_56_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_56_1550512284321/org/sat4j/minisat/core/Solver_56_tmp__ESTest_scaffolding.java]]
[MASTER] 18:51:24.503 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 18:51:24.503 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 18:51:24.524 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielHT>[] cannot be converted to org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielHT>: 238
[MASTER] 18:51:24.524 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_56_1550512284321/org/sat4j/minisat/core/Solver_56_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 18:51:24.525 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 18:51:24.525 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_56_1550512284321/org/sat4j/minisat/core/Solver_56_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 18:51:24.525 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 18:51:24.527 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_56_1550512284321/org/sat4j/minisat/core/Solver_56_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Feb 18 17:51:24 GMT 2019
4:  */
5: 
6: package org.sat4j.minisat.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.lang.reflect.Array;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.ViolatedAssumptionAnswer;
16: import org.junit.runner.RunWith;
17: import org.sat4j.ExitCode;
18: import org.sat4j.MUSLauncher;
19: import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
20: import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
21: import org.sat4j.minisat.constraints.cnf.OriginalHTClause;
22: import org.sat4j.minisat.core.ILits;
23: import org.sat4j.minisat.core.LearningStrategy;
24: import org.sat4j.minisat.core.SearchParams;
25: import org.sat4j.minisat.core.Solver;
26: import org.sat4j.minisat.learning.PercentLengthLearning;
27: import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
28: import org.sat4j.minisat.orders.VarOrderHeap;
29: import org.sat4j.minisat.restarts.Glucose21Restarts;
30: import org.sat4j.specs.ISolver;
31: import org.sat4j.specs.IVecInt;
32: import org.sat4j.tools.AbstractMinimalModel;
33: import org.sat4j.tools.ManyCore;
34: 
35: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
36: public class Solver_56_tmp__ESTest extends Solver_56_tmp__ESTest_scaffolding {
37: 
38:   @Test(timeout = 4000)
39:   public void test0()  throws Throwable  {
40:       PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(596);
41:       assertEquals(596, percentLengthLearning0.getLimit());
42:       assertNotNull(percentLengthLearning0);
43:       
44:       MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
45:       assertNotNull(mixedDataStructureDanielHT0);
46:       
47:       LearningStrategy<MixedDataStructureSingleWL> learningStrategy0 = (LearningStrategy<MixedDataStructureSingleWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
48:       MixedDataStructureSingleWL mixedDataStructureSingleWL0 = mock(MixedDataStructureSingleWL.class, new ViolatedAssumptionAnswer());
49:       doReturn((ILits) null).when(mixedDataStructureSingleWL0).getVocabulary();
50:       SearchParams searchParams0 = new SearchParams();
51:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
52:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
53:       assertEquals(100, searchParams0.getInitConflictBound());
54:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
55:       assertNotNull(searchParams0);
56:       
57:       RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
58:       assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
59:       assertNotNull(randomLiteralSelectionStrategy0);
60:       
61:       VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
62:       assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
63:       assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
64:       assertNotNull(varOrderHeap0);
65:       
66:       Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
67:       assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
68:       assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
69:       assertNotNull(glucose21Restarts0);
70:       
71:       Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(learningStrategy0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, glucose21Restarts0);
72:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
73:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
74:       assertEquals(100, searchParams0.getInitConflictBound());
75:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
76:       assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
77:       assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
78:       assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
79:       assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
80:       assertFalse(solver0.isSolverKeptHot());
81:       assertEquals(2147483, solver0.getTimeout());
82:       assertFalse(solver0.isDBSimplificationAllowed());
83:       assertEquals(0, solver0.currentDecisionLevel());
84:       assertFalse(solver0.isVerbose());
85:       assertEquals(0, solver0.getPropagationLevel());
86:       assertEquals("c ", solver0.getLogPrefix());
87:       assertEquals(0, solver0.decisionLevel());
88:       assertEquals(0, solver0.nConstraints());
89:       assertNotNull(solver0);
90:       
91:       SearchParams searchParams1 = solver0.getSearchParams();
92:       assertSame(searchParams0, searchParams1);
93:       assertSame(searchParams1, searchParams0);
94:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
95:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
96:       assertEquals(100, searchParams0.getInitConflictBound());
97:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
98:       assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
99:       assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
100:       assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
101:       assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
102:       assertFalse(solver0.isSolverKeptHot());
103:       assertEquals(2147483, solver0.getTimeout());
104:       assertFalse(solver0.isDBSimplificationAllowed());
105:       assertEquals(0, solver0.currentDecisionLevel());
106:       assertFalse(solver0.isVerbose());
107:       assertEquals(0, solver0.getPropagationLevel());
108:       assertEquals("c ", solver0.getLogPrefix());
109:       assertEquals(0, solver0.decisionLevel());
110:       assertEquals(0, solver0.nConstraints());
111:       assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
112:       assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
113:       assertEquals(100, searchParams1.getInitConflictBound());
114:       assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
115:       assertNotNull(searchParams1);
116:       
117:       double double0 = searchParams1.getVarDecay();
118:       assertSame(searchParams0, searchParams1);
119:       assertSame(searchParams1, searchParams0);
120:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
121:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
122:       assertEquals(100, searchParams0.getInitConflictBound());
123:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
124:       assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
125:       assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
126:       assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
127:       assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
128:       assertFalse(solver0.isSolverKeptHot());
129:       assertEquals(2147483, solver0.getTimeout());
130:       assertFalse(solver0.isDBSimplificationAllowed());
131:       assertEquals(0, solver0.currentDecisionLevel());
132:       assertFalse(solver0.isVerbose());
133:       assertEquals(0, solver0.getPropagationLevel());
134:       assertEquals("c ", solver0.getLogPrefix());
135:       assertEquals(0, solver0.decisionLevel());
136:       assertEquals(0, solver0.nConstraints());
137:       assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
138:       assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
139:       assertEquals(100, searchParams1.getInitConflictBound());
140:       assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
141:       assertEquals(0.95, double0, 0.01);
142:       
143:       double double1 = searchParams1.getClaDecay();
144:       assertSame(searchParams0, searchParams1);
145:       assertSame(searchParams1, searchParams0);
146:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
147:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
148:       assertEquals(100, searchParams0.getInitConflictBound());
149:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
150:       assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
151:       assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
152:       assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
153:       assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
154:       assertFalse(solver0.isSolverKeptHot());
155:       assertEquals(2147483, solver0.getTimeout());
156:       assertFalse(solver0.isDBSimplificationAllowed());
157:       assertEquals(0, solver0.currentDecisionLevel());
158:       assertFalse(solver0.isVerbose());
159:       assertEquals(0, solver0.getPropagationLevel());
160:       assertEquals("c ", solver0.getLogPrefix());
161:       assertEquals(0, solver0.decisionLevel());
162:       assertEquals(0, solver0.nConstraints());
163:       assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
164:       assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
165:       assertEquals(100, searchParams1.getInitConflictBound());
166:       assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
167:       assertEquals(0.999, double1, 0.01);
168:       assertNotEquals(double1, double0, 0.01);
169:       
170:       MUSLauncher mUSLauncher0 = new MUSLauncher();
171:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
172:       assertEquals(0L, mUSLauncher0.getBeginTime());
173:       assertFalse(mUSLauncher0.isSilent());
174:       assertNotNull(mUSLauncher0);
175:       
176:       mUSLauncher0.log("org.sat4j.minisat.restarts.MiniSATRestarts");
177:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
178:       assertEquals(0L, mUSLauncher0.getBeginTime());
179:       assertFalse(mUSLauncher0.isSilent());
180:       
181:       mUSLauncher0.log("org.sat4j.minisat.restarts.MiniSATRestarts");
182:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
183:       assertEquals(0L, mUSLauncher0.getBeginTime());
184:       assertFalse(mUSLauncher0.isSilent());
185:       
186:       mUSLauncher0.log("");
187:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
188:       assertEquals(0L, mUSLauncher0.getBeginTime());
189:       assertFalse(mUSLauncher0.isSilent());
190:       
191:       mUSLauncher0.log((String) null);
192:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
193:       assertEquals(0L, mUSLauncher0.getBeginTime());
194:       assertFalse(mUSLauncher0.isSilent());
195:       
196:       Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams1, varOrderHeap0, glucose21Restarts0, mUSLauncher0);
197:       assertEquals(596, percentLengthLearning0.getLimit());
198:       assertFalse(solver1.isSolverKeptHot());
199:       assertFalse(solver1.isVerbose());
200:       assertEquals(2147483, solver1.getTimeout());
201:       assertFalse(solver1.isDBSimplificationAllowed());
202:       assertEquals(0, solver1.currentDecisionLevel());
203:       assertEquals("c ", solver1.getLogPrefix());
204:       assertEquals(0, solver1.getPropagationLevel());
205:       assertEquals(1, solver1.nVars());
206:       assertEquals(0, solver1.decisionLevel());
207:       assertEquals(2, solver1.newVar());
208:       assertEquals(0, solver1.nConstraints());
209:       assertEquals(1, solver1.realNumberOfVariables());
210:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
211:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
212:       assertEquals(100, searchParams0.getInitConflictBound());
213:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
214:       assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
215:       assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
216:       assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
217:       assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
218:       assertFalse(solver0.isSolverKeptHot());
219:       assertEquals(2147483, solver0.getTimeout());
220:       assertFalse(solver0.isDBSimplificationAllowed());
221:       assertEquals(0, solver0.currentDecisionLevel());
222:       assertFalse(solver0.isVerbose());
223:       assertEquals(0, solver0.getPropagationLevel());
224:       assertEquals("c ", solver0.getLogPrefix());
225:       assertEquals(0, solver0.decisionLevel());
226:       assertEquals(0, solver0.nConstraints());
227:       assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
228:       assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
229:       assertEquals(100, searchParams1.getInitConflictBound());
230:       assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
231:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
232:       assertEquals(0L, mUSLauncher0.getBeginTime());
233:       assertFalse(mUSLauncher0.isSilent());
234:       assertNotNull(solver1);
235:       
236:       boolean boolean0 = false;
237:       Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 4);
238:       solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0;
239:   }
240: }
RegularFileObject[/tmp/EvoSuite_56_1550512284321/org/sat4j/minisat/core/Solver_56_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Feb 18 17:51:24 GMT 2019
5:  */
6: 
7: package org.sat4j.minisat.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class Solver_56_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.minisat.core.Solver"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Solver_56_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.sat4j.minisat.core.ConflictTimerAdapter",
84:       "org.sat4j.tools.ManyCore",
85:       "org.sat4j.specs.UnitPropagationListener",
86:       "org.sat4j.minisat.core.SizeComparator",
87:       "org.sat4j.tools.FullClauseSelectorSolver",
88:       "org.sat4j.reader.LecteurDimacs",
89:       "org.sat4j.tools.SolverDecorator",
90:       "org.sat4j.specs.Propagatable",
91:       "org.sat4j.minisat.core.Undoable",
92:       "org.sat4j.minisat.learning.FixedLengthLearning",
93:       "org.sat4j.ILauncherMode",
94:       "org.sat4j.minisat.core.Pair",
95:       "org.sat4j.core.EmptyVecInt",
96:       "org.sat4j.ExitCode",
97:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
98:       "org.sat4j.specs.IVec",
99:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
100:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
101:       "org.sat4j.specs.Lbool",
102:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
103:       "org.sat4j.AbstractLauncher$2",
104:       "org.sat4j.AbstractLauncher$1",
105:       "org.sat4j.specs.IOptimizationProblem",
106:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
107:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
108:       "org.sat4j.specs.SearchListener",
109:       "org.sat4j.minisat.core.SimplificationType",
110:       "org.sat4j.minisat.learning.MiniSATLearning",
111:       "org.sat4j.minisat.core.SearchParams",
112:       "org.sat4j.tools.AbstractMinimalModel",
113:       "org.sat4j.minisat.core.Heap",
114:       "org.sat4j.minisat.constraints.cnf.BinaryClauses",
115:       "org.sat4j.specs.ILogAble$1",
116:       "org.sat4j.specs.TimeoutException",
117:       "org.sat4j.specs.Constr",
118:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
119:       "org.sat4j.minisat.core.ConflictTimerContainer",
120:       "org.sat4j.specs.ISolverService",
121:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
122:       "org.sat4j.minisat.core.LearningStrategy",
123:       "org.sat4j.minisat.constraints.cnf.WLClause",
124:       "org.sat4j.specs.IGroupSolver",
125:       "org.sat4j.DecisionMode",
126:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
127:       "org.sat4j.specs.IteratorInt",
128:       "org.sat4j.specs.ISolver",
129:       "org.sat4j.minisat.orders.RandomWalkDecorator",
130:       "org.sat4j.specs.UnitClauseProvider$1",
131:       "org.sat4j.minisat.constraints.cnf.HTClause",
132:       "org.sat4j.minisat.core.CircularBuffer",
133:       "org.sat4j.minisat.learning.LimitedLearning",
134:       "org.sat4j.minisat.restarts.LubyRestarts",
135:       "org.sat4j.minisat.core.VoidTracing",
136:       "org.sat4j.minisat.core.ActivityListener",
137:       "org.sat4j.minisat.restarts.Glucose21Restarts",
138:       "org.sat4j.minisat.core.GlucoseLCDS",
139:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
140:       "org.sat4j.tools.AbstractClauseSelectorSolver$SelectorState",
141:       "org.sat4j.minisat.core.ILits",
142:       "org.sat4j.BasicLauncher",
143:       "org.sat4j.minisat.constraints.card.AtLeast",
144:       "org.sat4j.specs.ILogAble",
145:       "org.sat4j.specs.ContradictionException",
146:       "org.sat4j.reader.GroupedCNFReader",
147:       "org.sat4j.minisat.constraints.card.MinWatchCard",
148:       "org.sat4j.core.LiteralsUtils",
149:       "org.sat4j.minisat.learning.PercentLengthLearning",
150:       "org.sat4j.specs.IConstr",
151:       "org.sat4j.specs.IVecInt",
152:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
153:       "org.sat4j.tools.SolutionFoundListener",
154:       "org.sat4j.tools.xplain.MinimizationStrategy",
155:       "org.sat4j.minisat.constraints.ClausalDataStructureWL",
156:       "org.sat4j.minisat.core.PrimeImplicantStrategy",
157:       "org.sat4j.OptimizationMode",
158:       "org.sat4j.minisat.core.Learner",
159:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
160:       "org.sat4j.minisat.core.ActivityComparator",
161:       "org.sat4j.specs.MandatoryLiteralListener",
162:       "org.sat4j.specs.IProblem",
163:       "org.sat4j.minisat.restarts.MiniSATRestarts",
164:       "org.sat4j.core.VecInt",
165:       "org.sat4j.minisat.core.Solver",
166:       "org.sat4j.tools.xplain.HighLevelXplain",
167:       "org.sat4j.minisat.core.QuadraticPrimeImplicantStrategy",
168:       "org.sat4j.minisat.constraints.cnf.Lits",
169:       "org.sat4j.minisat.core.Solver$2",
170:       "org.sat4j.minisat.core.Solver$1",
171:       "org.sat4j.specs.UnitClauseProvider",
172:       "org.sat4j.minisat.learning.AbstractLearning",
173:       "org.sat4j.AbstractLauncher",
174:       "org.sat4j.minisat.core.Solver$4",
175:       "org.sat4j.minisat.core.Solver$3",
176:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
177:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
178:       "org.sat4j.core.VecInt$1",
179:       "org.sat4j.core.ASolverFactory",
180:       "org.sat4j.core.Vec$1",
181:       "org.sat4j.reader.DimacsReader",
182:       "org.sat4j.minisat.core.DataStructureFactory",
183:       "org.sat4j.core.Vec",
184:       "org.sat4j.minisat.core.Solver$9",
185:       "org.sat4j.minisat.core.Glucose2LCDS",
186:       "org.sat4j.minisat.core.Solver$6",
187:       "org.sat4j.minisat.core.Solver$5",
188:       "org.sat4j.minisat.core.SolverStats",
189:       "org.sat4j.minisat.core.Solver$8",
190:       "org.sat4j.minisat.core.Solver$10",
191:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
192:       "org.sat4j.minisat.core.ConstrActivityListener",
193:       "org.sat4j.minisat.core.IPhaseSelectionStrategy",
194:       "org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy",
195:       "org.sat4j.minisat.orders.SubsetVarOrder",
196:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
197:       "org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy",
198:       "org.sat4j.minisat.restarts.ArminRestarts",
199:       "org.sat4j.tools.GroupClauseSelectorSolver",
200:       "org.sat4j.specs.SearchListenerAdapter",
201:       "org.sat4j.tools.xplain.Xplain",
202:       "org.sat4j.reader.ParseFormatException",
203:       "org.sat4j.tools.AbstractClauseSelectorSolver",
204:       "org.sat4j.tools.StatisticsSolver",
205:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
206:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
207:       "org.sat4j.tools.OutcomeListener",
208:       "org.sat4j.minisat.core.ActivityLCDS",
209:       "org.sat4j.minisat.learning.ActiveLearning",
210:       "org.sat4j.MUSLauncher",
211:       "org.sat4j.minisat.orders.VarOrderHeap",
212:       "org.sat4j.minisat.constraints.cnf.OriginalHTClause",
213:       "org.sat4j.minisat.orders.NaturalStaticOrder",
214:       "org.sat4j.minisat.core.ISimplifier",
215:       "org.sat4j.reader.InstanceReader",
216:       "org.sat4j.minisat.core.ConflictTimer",
217:       "org.sat4j.minisat.core.VarActivityListener",
218:       "org.sat4j.specs.Constr$1",
219:       "org.sat4j.specs.VarMapper",
220:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
221:       "org.sat4j.specs.RandomAccessModel",
222:       "org.sat4j.minisat.SolverFactory",
223:       "org.sat4j.minisat.core.LBDConflictTimer",
224:       "org.sat4j.minisat.orders.TabuListDecorator",
225:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
226:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
227:       "org.sat4j.minisat.orders.PureOrder",
228:       "org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy",
229:       "org.sat4j.minisat.core.SizeLCDS",
230:       "org.sat4j.minisat.core.RestartStrategy",
231:       "org.sat4j.minisat.core.AgeLCDS",
232:       "org.sat4j.opt.MinOneDecorator",
233:       "org.sat4j.tools.xplain.Explainer",
234:       "org.sat4j.core.ReadOnlyVecInt",
235:       "org.sat4j.reader.Reader",
236:       "org.sat4j.minisat.core.IOrder",
237:       "org.sat4j.minisat.orders.VariableComparator",
238:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
239:       "org.sat4j.minisat.core.ICDCL",
240:       "org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy",
241:       "org.sat4j.minisat.restarts.NoRestarts",
242:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
243:       "org.sat4j.core.EmptyVecInt$1",
244:       "org.sat4j.minisat.core.Solver$5$1",
245:       "org.sat4j.minisat.core.MemoryBasedConflictTimer"
246:     );
247:   } 
248:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
249:     mock(Class.forName("org.sat4j.minisat.constraints.MixedDataStructureSingleWL", false, Solver_56_tmp__ESTest_scaffolding.class.getClassLoader()));
250:     mock(Class.forName("org.sat4j.minisat.core.LearningStrategy", false, Solver_56_tmp__ESTest_scaffolding.class.getClassLoader()));
251:   }
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Solver_56_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "org.sat4j.minisat.core.Solver$1",
258:       "org.sat4j.minisat.core.Solver",
259:       "org.sat4j.minisat.core.Solver$2",
260:       "org.sat4j.minisat.core.Solver$3",
261:       "org.sat4j.minisat.core.Solver$4",
262:       "org.sat4j.minisat.core.Solver$5",
263:       "org.sat4j.minisat.core.Solver$9",
264:       "org.sat4j.minisat.core.Solver$6",
265:       "org.sat4j.minisat.core.Solver$GlucoseLCDS",
266:       "org.sat4j.minisat.core.Solver$Glucose2LCDS",
267:       "org.sat4j.minisat.core.ConflictTimerAdapter",
268:       "org.sat4j.minisat.core.Solver$7",
269:       "org.sat4j.minisat.core.Solver$8",
270:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
271:       "org.sat4j.minisat.core.Solver$10",
272:       "org.sat4j.minisat.core.Solver$11",
273:       "org.sat4j.specs.ILogAble$1",
274:       "org.sat4j.specs.ILogAble",
275:       "org.sat4j.specs.UnitClauseProvider$1",
276:       "org.sat4j.specs.UnitClauseProvider",
277:       "org.sat4j.core.LiteralsUtils",
278:       "org.sat4j.specs.Lbool",
279:       "org.sat4j.core.EmptyVecInt",
280:       "org.sat4j.core.VecInt",
281:       "org.sat4j.minisat.orders.VarOrderHeap",
282:       "org.sat4j.minisat.orders.PureOrder",
283:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
284:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
285:       "org.sat4j.minisat.orders.TabuListDecorator",
286:       "org.sat4j.minisat.learning.LimitedLearning",
287:       "org.sat4j.minisat.learning.PercentLengthLearning",
288:       "org.sat4j.minisat.learning.AbstractLearning",
289:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
290:       "org.sat4j.minisat.learning.MiniSATLearning",
291:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
292:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
293:       "org.sat4j.core.Vec",
294:       "org.sat4j.minisat.constraints.cnf.Lits",
295:       "org.sat4j.minisat.restarts.ArminRestarts",
296:       "org.sat4j.tools.StatisticsSolver",
297:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
298:       "org.sat4j.minisat.orders.RandomWalkDecorator",
299:       "org.sat4j.minisat.restarts.NoRestarts",
300:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
301:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
302:       "org.sat4j.minisat.learning.FixedLengthLearning",
303:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
304:       "org.sat4j.minisat.restarts.MiniSATRestarts",
305:       "org.sat4j.minisat.constraints.card.AtLeast",
306:       "org.sat4j.specs.ContradictionException",
307:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
308:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
309:       "org.sat4j.minisat.restarts.LubyRestarts",
310:       "org.sat4j.minisat.learning.ActiveLearning",
311:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
312:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
313:       "org.sat4j.minisat.core.ActivityComparator",
314:       "org.sat4j.specs.SearchListenerAdapter",
315:       "org.sat4j.minisat.core.VoidTracing",
316:       "org.sat4j.minisat.core.Pair",
317:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
318:       "org.sat4j.minisat.core.ActivityLCDS",
319:       "org.sat4j.minisat.core.LBDConflictTimer",
320:       "org.sat4j.minisat.core.GlucoseLCDS",
321:       "org.sat4j.minisat.core.Glucose2LCDS",
322:       "org.sat4j.minisat.core.AgeLCDS",
323:       "org.sat4j.minisat.core.SizeComparator",
324:       "org.sat4j.minisat.core.SizeLCDS",
325:       "org.sat4j.core.Vec$1",
326:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
327:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
328:       "org.sat4j.minisat.orders.SubsetVarOrder",
329:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
330:       "org.sat4j.minisat.restarts.Glucose21Restarts",
331:       "org.sat4j.minisat.core.CircularBuffer",
332:       "org.sat4j.AbstractLauncher",
333:       "org.sat4j.MUSLauncher",
334:       "org.sat4j.AbstractLauncher$1",
335:       "org.sat4j.DecisionMode",
336:       "org.sat4j.ExitCode",
337:       "org.sat4j.OptimizationMode",
338:       "org.sat4j.ILauncherMode",
339:       "org.sat4j.core.EmptyVecInt$1",
340:       "org.sat4j.minisat.core.Heap",
341:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
342:       "org.sat4j.core.VecInt$1",
343:       "org.sat4j.minisat.core.ConflictTimerContainer",
344:       "org.sat4j.tools.SolverDecorator",
345:       "org.sat4j.tools.AbstractClauseSelectorSolver",
346:       "org.sat4j.tools.FullClauseSelectorSolver",
347:       "org.sat4j.tools.xplain.Xplain",
348:       "org.sat4j.core.ASolverFactory",
349:       "org.sat4j.minisat.SolverFactory",
350:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
351:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
352:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
353:       "org.sat4j.tools.ClausalCardinalitiesDecorator",
354:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
355:       "org.sat4j.tools.encoding.Sequential",
356:       "org.sat4j.tools.encoding.Binary",
357:       "org.sat4j.tools.encoding.Product",
358:       "org.sat4j.tools.encoding.Commander",
359:       "org.sat4j.tools.encoding.Binomial",
360:       "org.sat4j.tools.encoding.Ladder",
361:       "org.sat4j.tools.encoding.Policy",
362:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
363:       "org.sat4j.opt.MaxSatDecorator",
364:       "org.sat4j.minisat.constraints.card.MinWatchCard",
365:       "org.sat4j.BasicLauncher",
366:       "org.sat4j.minisat.restarts.EMARestarts",
367:       "org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy",
368:       "org.sat4j.core.ReadOnlyVecInt",
369:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
370:       "org.sat4j.minisat.orders.NaturalStaticOrder",
371:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
372:       "org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy",
373:       "org.sat4j.tools.ManyCore",
374:       "org.sat4j.opt.MinOneDecorator",
375:       "org.sat4j.minisat.core.Solver$5$1",
376:       "org.sat4j.tools.AbstractOutputSolver",
377:       "org.sat4j.tools.DimacsOutputSolver",
378:       "org.sat4j.tools.DotSearchTracing",
379:       "org.sat4j.minisat.constraints.cnf.WLClause",
380:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
381:       "org.sat4j.tools.AbstractMinimalModel",
382:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
383:       "org.sat4j.minisat.core.SearchParams",
384:       "org.sat4j.minisat.core.SolverStats",
385:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
386:       "org.sat4j.specs.Constr$1",
387:       "org.sat4j.specs.Constr",
388:       "org.sat4j.minisat.core.QuadraticPrimeImplicantStrategy",
389:       "org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy",
390:       "org.sat4j.minisat.constraints.ClausalDataStructureWL"
391:     );
392:   }
393: }

[MASTER] 18:51:24.575 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(596);
assertEquals(596, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

LearningStrategy<MixedDataStructureSingleWL> learningStrategy0 = (LearningStrategy<MixedDataStructureSingleWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
MixedDataStructureSingleWL mixedDataStructureSingleWL0 = mock(MixedDataStructureSingleWL.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(mixedDataStructureSingleWL0).getVocabulary();
SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(learningStrategy0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, glucose21Restarts0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);

SearchParams searchParams1 = solver0.getSearchParams();
assertSame(searchParams0, searchParams1);
assertSame(searchParams1, searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertNotNull(searchParams1);

double double0 = searchParams1.getVarDecay();
assertSame(searchParams0, searchParams1);
assertSame(searchParams1, searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, double0, 0.01);

double double1 = searchParams1.getClaDecay();
assertSame(searchParams0, searchParams1);
assertSame(searchParams1, searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.999, double1, 0.01);
assertNotEquals(double1, double0, 0.01);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("org.sat4j.minisat.restarts.MiniSATRestarts");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log("org.sat4j.minisat.restarts.MiniSATRestarts");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log("");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log((String) null);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams1, varOrderHeap0, glucose21Restarts0, mUSLauncher0);
assertEquals(596, percentLengthLearning0.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertNotNull(solver1);

boolean boolean0 = false;
Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 4);
solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0;

[MASTER] 18:52:10.199 [logback-2] ERROR ClientNodeImpl - Error when generating tests for: org.sat4j.minisat.core.Solver with seed 1550512000909. Configuration id : null
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:158) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_91]
	at com.sun.proxy.$Proxy7.evosuite_collectTestGenerationResult(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:164) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_91]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.net.SocketException: Broken pipe
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeNonProxyDesc(ObjectOutputStream.java:1286) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeClassDesc(ObjectOutputStream.java:1231) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1427) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1577) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:294) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:153) ~[na:1.8.0_91]
	... 9 common frames omitted
