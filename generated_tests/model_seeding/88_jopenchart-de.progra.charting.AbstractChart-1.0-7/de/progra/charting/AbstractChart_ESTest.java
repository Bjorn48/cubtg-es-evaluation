/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 22:51:50 GMT 2019
 */

package de.progra.charting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.CoordSystem;
import de.progra.charting.DefaultChart;
import de.progra.charting.Legend;
import de.progra.charting.Title;
import de.progra.charting.model.ChartDataModel;
import de.progra.charting.model.DefaultChartDataModel;
import de.progra.charting.render.AbstractChartRenderer;
import de.progra.charting.render.LineChartRenderer;
import de.progra.charting.render.PieChartRenderer;
import de.progra.charting.render.RadarChartRenderer;
import de.progra.charting.render.RowColorModel;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractChart_ESTest extends AbstractChart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      DefaultChart defaultChart0 = new DefaultChart(defaultChartDataModel0, "\"~7xV*Ua\"0xs<e8[a", 0);
      assertEquals(1, DefaultChart.NO_COORDINATE_SYSTEM);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      defaultChart0.setRowColorModel((RowColorModel) null);
      assertEquals(0, DefaultChart.LINEAR_X_LINEAR_Y);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Legend legend0 = new Legend();
      defaultChart0.setLegend(legend0);
      assertEquals(0, DefaultChart.LINEAR_X_LINEAR_Y);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      defaultChart0.setChartDataModel((ChartDataModel) null);
      assertEquals(1, DefaultChart.NO_COORDINATE_SYSTEM);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Title title0 = new Title();
      defaultChart0.setTitle(title0);
      Title title1 = defaultChart0.getTitle();
      assertEquals("Chart Title", title1.getText());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      RowColorModel rowColorModel0 = defaultChart0.getRowColorModel();
      assertNull(rowColorModel0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      DefaultChart defaultChart0 = new DefaultChart(defaultChartDataModel0, ":C", 1662);
      RowColorModel rowColorModel0 = defaultChart0.getRowColorModel();
      assertEquals(0, rowColorModel0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Legend legend0 = defaultChart0.getLegend();
      assertNull(legend0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Rectangle rectangle0 = new Rectangle(1, 0);
      defaultChart0.bounds = rectangle0;
      Rectangle rectangle1 = defaultChart0.getBounds();
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      // Undeclared exception!
      try { 
        defaultChart0.setChartRenderer((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.AbstractChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      hashtable0.put(defaultChart0, "");
      // Undeclared exception!
      try { 
        defaultChart0.setChartRenderer(hashtable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to de.progra.charting.render.AbstractChartRenderer
         //
         verifyException("de.progra.charting.AbstractChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      // Undeclared exception!
      try { 
        defaultChart0.render((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.DefaultChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      // Undeclared exception!
      try { 
        defaultChart0.addChartRenderer((AbstractChartRenderer) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.AbstractChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      CoordSystem coordSystem0 = mock(CoordSystem.class, new ViolatedAssumptionAnswer());
      RadarChartRenderer radarChartRenderer0 = new RadarChartRenderer(coordSystem0, (ChartDataModel) null);
      defaultChart0.addChartRenderer(radarChartRenderer0, 0);
      assertEquals(0, DefaultChart.LINEAR_X_LINEAR_Y);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      AbstractChartRenderer abstractChartRenderer0 = defaultChart0.getChartRenderer(10);
      assertNull(abstractChartRenderer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Rectangle rectangle0 = defaultChart0.getBounds();
      assertNull(rectangle0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart((ChartDataModel) null, "");
      Legend legend0 = defaultChart0.getLegend();
      assertNotNull(legend0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart((ChartDataModel) null, "de.progra.charting.model.AbstractChartDataModel", 3112);
      Map map0 = defaultChart0.getChartRenderer();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      defaultChart0.setCoordSystem((CoordSystem) null);
      assertEquals(1, DefaultChart.NO_COORDINATE_SYSTEM);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      defaultChart0.paintDefault((Graphics2D) null);
      assertEquals(1, DefaultChart.NO_COORDINATE_SYSTEM);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      HashMap<PieChartRenderer, LineChartRenderer> hashMap0 = new HashMap<PieChartRenderer, LineChartRenderer>();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer((ChartDataModel) null);
      LineChartRenderer lineChartRenderer0 = new LineChartRenderer((CoordSystem) null, (ChartDataModel) null);
      hashMap0.put(pieChartRenderer0, lineChartRenderer0);
      defaultChart0.setChartRenderer(hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Title title0 = defaultChart0.getTitle();
      assertNull(title0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      CoordSystem coordSystem0 = defaultChart0.getCoordSystem();
      assertNull(coordSystem0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart((ChartDataModel) null, "");
      ChartDataModel chartDataModel0 = defaultChart0.getChartDataModel();
      assertNull(chartDataModel0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Rectangle rectangle0 = new Rectangle();
      defaultChart0.setBounds(rectangle0);
      Rectangle rectangle1 = defaultChart0.getBounds();
      assertEquals(0, rectangle1.width);
  }
}
