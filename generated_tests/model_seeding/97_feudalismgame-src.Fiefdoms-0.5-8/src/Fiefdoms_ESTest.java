/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 16:50:26 GMT 2019
 */

package src;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.ListIterator;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import src.Fiefdoms;
import src.Intruders;
import src.Knight;
import src.Player;
import src.Vassals;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fiefdoms_ESTest extends Fiefdoms_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setMagyar(1, true);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "zqL(%>p%K", "|Ny[Tu", 511, true, arrayList0);
      assertFalse(arrayList0.contains("zqL(%>p%K"));
      assertNotNull(fiefdoms0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals("zqL(%>p%K", fiefdoms0.getName());
      assertEquals(511, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("|Ny[Tu", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-16);
      fiefdoms0.selectioncolor = byteArray0;
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals("zqL(%>p%K", fiefdoms0.getName());
      assertEquals(511, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("|Ny[Tu", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setValue(0);
      assertFalse(arrayList0.contains("zqL(%>p%K"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals("zqL(%>p%K", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("|Ny[Tu", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      String string0 = fiefdoms0.getOwner();
      assertFalse(arrayList0.contains("zqL(%>p%K"));
      assertNotNull(string0);
      assertEquals("|Ny[Tu", string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals("zqL(%>p%K", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("|Ny[Tu", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      int int0 = fiefdoms0.getValue();
      assertFalse(arrayList0.contains("zqL(%>p%K"));
      assertEquals(0, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals("zqL(%>p%K", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("|Ny[Tu", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertFalse(arrayList0.contains("zqL(%>p%K"));
      assertNotNull(arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals("zqL(%>p%K", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("|Ny[Tu", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      String string1 = fiefdoms0.getName();
      assertFalse(arrayList0.contains("zqL(%>p%K"));
      assertNotNull(string1);
      assertEquals("zqL(%>p%K", string1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals("zqL(%>p%K", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("|Ny[Tu", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(string1.equals((Object)string0));
      
      fiefdoms0.setName("magyar");
      assertFalse(arrayList0.contains("zqL(%>p%K"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("magyar", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("|Ny[Tu", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      int int1 = fiefdoms0.getFiefdomCastles();
      assertFalse(arrayList0.contains("zqL(%>p%K"));
      assertEquals(0, int1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("magyar", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("|Ny[Tu", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(int1 == int0);
      
      boolean boolean0 = arrayList0.add("");
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains("zqL(%>p%K"));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      fiefdoms0.setKingdom(true);
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains("zqL(%>p%K"));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("magyar", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("|Ny[Tu", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getLoyalVassals();
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains("zqL(%>p%K"));
      assertNotNull(arrayList2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("magyar", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("|Ny[Tu", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setPeasants((-1371));
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1371), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertNotNull(arrayList0);
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1371), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.buyPersonalCastles(580);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      String string0 = fiefdoms0.getOwner();
      assertNull(string0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      String string1 = fiefdoms0.getOwner();
      assertNull(string1);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setName((String) null);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setOwner("QJ9l~UJq36qw#B)");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("QJ9l~UJq36qw#B)", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertNull(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("QJ9l~UJq36qw#B)", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertEquals(0, int0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("QJ9l~UJq36qw#B)", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList1 = fiefdoms0.getNeighbors();
      assertNull(arrayList1);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("QJ9l~UJq36qw#B)", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, (String) null, (String) null, 580, true, (ArrayList<String>) null);
      assertNotNull(fiefdoms1);
      assertEquals(580, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setOwner("i}RfaNV[@p_J'X|'\"");
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals("i}RfaNV[@p_J'X|'\"", fiefdoms1.getOwner());
      assertEquals(580, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      int int1 = fiefdoms1.getValue();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(580, int1);
      assertEquals("i}RfaNV[@p_J'X|'\"", fiefdoms1.getOwner());
      assertEquals(580, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Knight knight0 = new Knight("J/tkzb6~vn+1^K5uKMa", "J/tkzb6~vn+1^K5uKMa", "J/tkzb6~vn+1^K5uKMa");
      assertNotNull(knight0);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getPassword());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getwound());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getRank());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      
      ArrayList<String> arrayList0 = knight0.getFiefdoms();
      assertFalse(arrayList0.contains("J/tkzb6~vn+1^K5uKMa"));
      assertNotNull(arrayList0);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getPassword());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getwound());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getRank());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, (String) null, "g[7Y\u0006 OHE_y=", 485, false, arrayList0);
      assertFalse(arrayList0.contains("J/tkzb6~vn+1^K5uKMa"));
      assertNotNull(fiefdoms0);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getPassword());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getwound());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getRank());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("g[7Y\u0006 OHE_y=", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(485, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<String> arrayList1 = fiefdoms0.getInvaderType();
      assertFalse(arrayList0.contains("J/tkzb6~vn+1^K5uKMa"));
      assertFalse(arrayList1.contains("J/tkzb6~vn+1^K5uKMa"));
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getPassword());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getwound());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getRank());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("g[7Y\u0006 OHE_y=", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(485, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      ArrayList<String> arrayList2 = fiefdoms0.getNeighbors();
      assertFalse(arrayList0.contains("J/tkzb6~vn+1^K5uKMa"));
      assertFalse(arrayList2.contains("J/tkzb6~vn+1^K5uKMa"));
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList2, arrayList1);
      assertSame(arrayList2, arrayList0);
      assertNotNull(arrayList2);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getPassword());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getwound());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getRank());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("g[7Y\u0006 OHE_y=", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(485, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      
      Fiefdoms fiefdoms1 = new Fiefdoms(arrayList1, "g[7Y\u0006 OHE_y=", "3dj|f`%`-$(/|", 485, false, arrayList2);
      assertFalse(arrayList0.contains("J/tkzb6~vn+1^K5uKMa"));
      assertFalse(arrayList1.contains("J/tkzb6~vn+1^K5uKMa"));
      assertFalse(arrayList2.contains("J/tkzb6~vn+1^K5uKMa"));
      assertNotNull(fiefdoms1);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getPassword());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getwound());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getRank());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("g[7Y\u0006 OHE_y=", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(485, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("g[7Y\u0006 OHE_y=", fiefdoms1.getName());
      assertEquals(485, fiefdoms1.getValue());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("3dj|f`%`-$(/|", fiefdoms1.getOwner());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setConqueror("g[7Y\u0006 OHE_y=");
      assertFalse(arrayList0.contains("J/tkzb6~vn+1^K5uKMa"));
      assertFalse(arrayList1.contains("J/tkzb6~vn+1^K5uKMa"));
      assertFalse(arrayList2.contains("J/tkzb6~vn+1^K5uKMa"));
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList0, arrayList1);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertSame(arrayList1, arrayList2);
      assertSame(arrayList1, arrayList0);
      assertSame(arrayList2, arrayList1);
      assertSame(arrayList2, arrayList0);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getPassword());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getwound());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getRank());
      assertEquals("J/tkzb6~vn+1^K5uKMa", knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("g[7Y\u0006 OHE_y=", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(485, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals("g[7Y\u0006 OHE_y=", fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("g[7Y\u0006 OHE_y=", fiefdoms1.getName());
      assertEquals(485, fiefdoms1.getValue());
      assertEquals("3dj|f`%`-$(/|", fiefdoms1.getOwner());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertNotNull(arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setMuslim(arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<String> arrayList1 = fiefdoms0.getNeighbors();
      assertNull(arrayList1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertNotNull(fiefdoms1);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Vassals> arrayList0 = fiefdoms1.getLoyalVassals();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotNull(arrayList0);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms0.loyalVassals = arrayList0;
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.loyalVassals.size());
      assertTrue(fiefdoms0.loyalVassals.isEmpty());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-55);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-55)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Spliterator<Vassals> spliterator0 = arrayList0.spliterator();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotNull(spliterator0);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setRebelliousVassals(755, false);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      String string0 = fiefdoms0.getOwner();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(string0);
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      fiefdoms1.setName("j+:L*>lv");
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("j+:L*>lv", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<String> arrayList1 = fiefdoms1.getInvaderType();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(arrayList1);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("j+:L*>lv", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms0.setNeighbors((ArrayList<String>) null);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      fiefdoms0.setSelectioncolor((byte[]) null);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getMuslim();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotNull(arrayList2);
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      ArrayList<Player> arrayList3 = fiefdoms0.getVassalsList();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(arrayList3);
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      byte[] byteArray1 = fiefdoms0.getSelectioncolor();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(byteArray1);
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      int int0 = fiefdoms1.getFiefdomCastles();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, int0);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("j+:L*>lv", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setRebelliousVassals(1193, false);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("j+:L*>lv", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setOwner((String) null);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("j+:L*>lv", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms0.setViking(1, false);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      fiefdoms1.setMuslim(646, false);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("j+:L*>lv", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertNotNull(arrayList0);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setMuslim(arrayList0);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = fiefdoms0.isKingdom();
      assertFalse(boolean0);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setRebelliousVassals(0, true);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setMagyar(2407, true);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2171.0F;
      floatArray0[1] = 2282.86F;
      floatArray0[2] = (float) 2407;
      floatArray0[3] = 2282.86F;
      floatArray0[4] = 2282.86F;
      floatArray0[5] = 2282.86F;
      fiefdoms0.setShaderColor(floatArray0);
      assertArrayEquals(new float[] {2171.0F, 2282.86F, 2407.0F, 2282.86F, 2282.86F, 2282.86F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setOwner(" castles for ");
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertFalse(arrayList1.contains(" castles for "));
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      ArrayList<String> arrayList2 = new ArrayList<String>(arrayList1);
      assertFalse(arrayList2.contains(" castles for "));
      assertFalse(arrayList1.contains(" castles for "));
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList2.equals((Object)arrayList1));
      
      // Undeclared exception!
      try { 
        arrayList2.remove(312);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 312, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setFiefdomCastles(false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getLoyalVassals();
      assertNotNull(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      float[] floatArray0 = new float[4];
      fiefdoms0.setLoyalVassals((-850), true);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      floatArray0[0] = (-1352.1F);
      floatArray0[1] = (-1.0F);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      fiefdoms0.buyPersonalCastles(3785);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setMuslim(1, false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      floatArray0[2] = 452.41F;
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-)BEh#L|ZYu&Y[");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      floatArray0[3] = 1936.8024F;
      Knight knight0 = new Knight();
      assertNotNull(knight0);
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      
      boolean boolean3 = knight0.isFiefdomMine("0|*b8} =8,");
      assertFalse(boolean3);
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      knight0.setTotalMoney(4909);
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(4909, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      
      ArrayList<Player> arrayList0 = knight0.getAllies();
      assertNotNull(arrayList0);
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(4909, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setVassalsList(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(4909, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.shaderColor = floatArray0;
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setOwner("3hqu.4%8aag~],");
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("3hqu.4%8aag~],", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("3hqu.4%8aag~],", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<String> arrayList1 = fiefdoms0.getNeighbors();
      assertNull(arrayList1);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("3hqu.4%8aag~],", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setMagyar((-850), false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("3hqu.4%8aag~],", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Player> arrayList2 = fiefdoms0.getVassalsList();
      assertSame(arrayList2, arrayList0);
      assertNotNull(arrayList2);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("3hqu.4%8aag~],", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertNotNull(arrayList0);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Intruders intruders0 = new Intruders("T-z{yHOn~QQaRP}&f", "ybAG?jXH1%j{{");
      assertNotNull(intruders0);
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getLocation());
      
      intruders0.setType("T-z{yHOn~QQaRP}&f");
      assertEquals("T-z{yHOn~QQaRP}&f", intruders0.getType());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getLocation());
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertTrue(arrayList0.contains(intruders0));
      assertTrue(boolean0);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("T-z{yHOn~QQaRP}&f", intruders0.getType());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getLocation());
      
      fiefdoms0.setMagyar(arrayList0);
      assertTrue(arrayList0.contains(intruders0));
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      fiefdoms0.setMuslim(arrayList0);
      assertTrue(arrayList0.contains(intruders0));
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      boolean boolean1 = fiefdoms0.isKingdom();
      assertFalse(boolean1);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(boolean1 == boolean0);
      
      fiefdoms0.setRebelliousVassals(4428, true);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setFiefdomCastles(true);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setFiefdomCastles(4428);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(4428, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(4428, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      float[] floatArray1 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertSame(floatArray1, floatArray0);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(4428, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setPersonalCastles(4428);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(4428, fiefdoms0.getFiefdomCastles());
      assertEquals(4428, fiefdoms0.getPersonalCastles());
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getViking();
      assertFalse(arrayList1.contains(intruders0));
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(4428, fiefdoms0.getFiefdomCastles());
      assertEquals(4428, fiefdoms0.getPersonalCastles());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.equals((Object)arrayList0));
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getMuslim();
      assertTrue(arrayList2.contains(intruders0));
      assertNotSame(arrayList2, arrayList1);
      assertSame(arrayList2, arrayList0);
      assertNotNull(arrayList2);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(4428, fiefdoms0.getFiefdomCastles());
      assertEquals(4428, fiefdoms0.getPersonalCastles());
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList2.isEmpty());
      assertFalse(arrayList2.equals((Object)arrayList1));
      
      fiefdoms0.setMuslim(arrayList2);
      assertTrue(arrayList2.contains(intruders0));
      assertNotSame(arrayList2, arrayList1);
      assertSame(arrayList2, arrayList0);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(4428, fiefdoms0.getFiefdomCastles());
      assertEquals(4428, fiefdoms0.getPersonalCastles());
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList2.isEmpty());
      assertFalse(arrayList2.equals((Object)arrayList1));
      
      ArrayList<Vassals> arrayList3 = new ArrayList<Vassals>();
      assertNotNull(arrayList3);
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      
      ListIterator<Vassals> listIterator0 = arrayList3.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      fiefdoms0.setRebelliousVassals(arrayList3);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(4428, fiefdoms0.getFiefdomCastles());
      assertEquals(4428, fiefdoms0.getPersonalCastles());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      boolean boolean0 = true;
      fiefdoms0.setMagyar(3797, true);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setValue(3797);
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(3797, fiefdoms0.getValue());
      
      int int0 = (-2720);
      fiefdoms0.setPeasants((-2720));
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals((-2720), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(3797, fiefdoms0.getValue());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-730.288F);
      fiefdoms0.shaderColor = floatArray0;
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals((-2720), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(3797, fiefdoms0.getValue());
      
      fiefdoms0.setValue((-2720));
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals((-2720), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-2720), fiefdoms0.getValue());
      
      ArrayList<Vassals> arrayList0 = new ArrayList<Vassals>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vassals vassals0 = new Vassals((String) null, (String) null);
      assertNotNull(vassals0);
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      
      vassals0.setLocation((String) null);
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      
      vassals0.setLocation("WdfDy(nBP3cuN7a~HfT");
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getFiefdom());
      assertEquals("WdfDy(nBP3cuN7a~HfT", vassals0.getLocation());
      
      vassals0.setLocation("WdfDy(nBP3cuN7a~HfT");
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getFiefdom());
      assertEquals("WdfDy(nBP3cuN7a~HfT", vassals0.getLocation());
      
      vassals0.setLocation("");
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getFiefdom());
      assertEquals("", vassals0.getLocation());
      
      boolean boolean1 = arrayList0.add(vassals0);
      assertTrue(arrayList0.contains(vassals0));
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getFiefdom());
      assertEquals("", vassals0.getLocation());
      assertTrue(boolean1 == boolean0);
      
      Vassals vassals1 = new Vassals();
      assertNotNull(vassals1);
      assertEquals("vassal", vassals1.getRank());
      assertNull(vassals1.getFiefdom());
      assertNull(vassals1.getLord());
      assertNull(vassals1.getLocation());
      assertFalse(vassals1.equals((Object)vassals0));
      
      vassals1.setLocation("D1kNS}]4Sw/XamA");
      assertNotSame(vassals1, vassals0);
      assertEquals("vassal", vassals1.getRank());
      assertNull(vassals1.getFiefdom());
      assertNull(vassals1.getLord());
      assertEquals("D1kNS}]4Sw/XamA", vassals1.getLocation());
      assertFalse(vassals1.equals((Object)vassals0));
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator((-2720));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2720
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "zqL(%>p%K", "|Ny[Tu", 511, true, arrayList0);
      assertFalse(arrayList0.contains("|Ny[Tu"));
      assertNotNull(fiefdoms0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("|Ny[Tu", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(511, fiefdoms0.getValue());
      assertEquals("zqL(%>p%K", fiefdoms0.getName());
      
      boolean boolean0 = arrayList0.add("zqL(%>p%K");
      assertTrue(arrayList0.contains("zqL(%>p%K"));
      assertFalse(arrayList0.contains("|Ny[Tu"));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      fiefdoms0.setLoyalVassals((ArrayList<Vassals>) null);
      assertTrue(arrayList0.contains("zqL(%>p%K"));
      assertFalse(arrayList0.contains("|Ny[Tu"));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("|Ny[Tu", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(511, fiefdoms0.getValue());
      assertEquals("zqL(%>p%K", fiefdoms0.getName());
      
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      fiefdoms0.setOwner("move");
      assertTrue(arrayList0.contains("zqL(%>p%K"));
      assertFalse(arrayList0.contains("|Ny[Tu"));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("move", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(511, fiefdoms0.getValue());
      assertEquals("zqL(%>p%K", fiefdoms0.getName());
      
      ArrayList<String> arrayList1 = fiefdoms0.getInvaderType();
      assertTrue(arrayList0.contains("zqL(%>p%K"));
      assertFalse(arrayList0.contains("|Ny[Tu"));
      assertTrue(arrayList1.contains("zqL(%>p%K"));
      assertFalse(arrayList1.contains("|Ny[Tu"));
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("move", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(511, fiefdoms0.getValue());
      assertEquals("zqL(%>p%K", fiefdoms0.getName());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      
      Fiefdoms fiefdoms1 = new Fiefdoms(arrayList0, "zqL(%>p%K", "move", (byte)1, true, arrayList0);
      assertTrue(arrayList0.contains("zqL(%>p%K"));
      assertFalse(arrayList0.contains("move"));
      assertNotNull(fiefdoms1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("zqL(%>p%K", fiefdoms1.getName());
      assertEquals("move", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(1, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms0.setConqueror("4 (Ge&mL;AZp");
      assertTrue(arrayList0.contains("zqL(%>p%K"));
      assertFalse(arrayList0.contains("4 (Ge&mL;AZp"));
      assertSame(arrayList0, arrayList1);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("move", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(511, fiefdoms0.getValue());
      assertEquals("zqL(%>p%K", fiefdoms0.getName());
      assertEquals("4 (Ge&mL;AZp", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<String> arrayList0 = new ArrayList<String>(0);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setNeighbors(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = fiefdoms0.getConqueror();
      assertNull(string0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "`", "`", (-3), false, arrayList0);
      assertFalse(arrayList0.contains("`"));
      assertNotNull(fiefdoms0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-3), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("`", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("`", fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setRebelliousVassals(2705, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.buyPersonalCastles(0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setMagyar((ArrayList<Intruders>) null);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setViking((ArrayList<Intruders>) null);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setFiefdomCastles(2488);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(2488, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getLoyalVassals();
      assertNotNull(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(2488, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)15;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-101), (byte) (-58), (byte)71, (byte) (-44), (byte)3, (byte)15}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      
      fiefdoms0.setFiefdomCastles(2484);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2484, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setOwner("3m7c.ty0?pnP,z");
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2484, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("3m7c.ty0?pnP,z", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      String string0 = fiefdoms0.getConqueror();
      assertNull(string0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2484, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("3m7c.ty0?pnP,z", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getViking();
      assertNull(arrayList1);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2484, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("3m7c.ty0?pnP,z", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2484, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("3m7c.ty0?pnP,z", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList2 = fiefdoms0.getNeighbors();
      assertNull(arrayList2);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2484, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("3m7c.ty0?pnP,z", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Intruders> arrayList3 = fiefdoms0.getViking();
      assertNull(arrayList3);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2484, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("3m7c.ty0?pnP,z", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Intruders> arrayList4 = fiefdoms0.getMagyar();
      assertNull(arrayList4);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2484, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("3m7c.ty0?pnP,z", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertNull(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, ";x;`evD3RDo", "Cq4u0759^-H$)e", (-587), false, (ArrayList<String>) null);
      assertNotNull(fiefdoms1);
      assertEquals((-587), fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("Cq4u0759^-H$)e", fiefdoms1.getOwner());
      assertEquals(";x;`evD3RDo", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setValue(5);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(5, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("Cq4u0759^-H$)e", fiefdoms1.getOwner());
      assertEquals(";x;`evD3RDo", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Vassals> arrayList1 = fiefdoms1.getLoyalVassals();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotNull(arrayList1);
      assertEquals(5, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("Cq4u0759^-H$)e", fiefdoms1.getOwner());
      assertEquals(";x;`evD3RDo", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getMuslim();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotNull(arrayList2);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      Intruders intruders0 = new Intruders();
      assertNotNull(intruders0);
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      
      boolean boolean0 = arrayList2.add(intruders0);
      assertTrue(arrayList2.contains(intruders0));
      assertNotSame(fiefdoms0, fiefdoms1);
      assertTrue(boolean0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean2 = arrayList2.add(intruders0);
      assertTrue(arrayList2.contains(intruders0));
      assertNotSame(fiefdoms0, fiefdoms1);
      assertTrue(boolean2);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(arrayList2.isEmpty());
      assertEquals(2, arrayList2.size());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      byteArray0[0] = (byte)115;
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)115}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      fiefdoms0.setMuslim(arrayList2);
      assertTrue(arrayList2.contains(intruders0));
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(arrayList2.isEmpty());
      assertEquals(2, arrayList2.size());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      fiefdoms1.setRebelliousVassals((-1210), false);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(5, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("Cq4u0759^-H$)e", fiefdoms1.getOwner());
      assertEquals(";x;`evD3RDo", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      String string0 = fiefdoms0.getOwner();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(string0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      String string1 = fiefdoms0.getConqueror();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(string1);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, int0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.buyFiefdomCastles(5);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setPersonalCastles((-2656));
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-2656), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getLoyalVassals();
      assertNotNull(arrayList0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-2656), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertNotNull(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setKingdom(true);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Knight knight0 = new Knight();
      assertNotNull(knight0);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      
      ArrayList<String> arrayList0 = knight0.getFiefdoms();
      assertNotNull(arrayList0);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      boolean boolean0 = arrayList0.add(" castles for ");
      assertTrue(arrayList0.contains(" castles for "));
      assertTrue(boolean0);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      fiefdoms0.buyFiefdomCastles(1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      Fiefdoms fiefdoms1 = new Fiefdoms(arrayList0, "Qr`", "ge", 154, false, arrayList0);
      assertTrue(arrayList0.contains(" castles for "));
      assertFalse(arrayList0.contains("ge"));
      assertNotNull(fiefdoms1);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(154, fiefdoms1.getValue());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("ge", fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("Qr`", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setOwner("ge");
      assertTrue(arrayList0.contains(" castles for "));
      assertFalse(arrayList0.contains("ge"));
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(154, fiefdoms1.getValue());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("ge", fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("Qr`", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<String> arrayList1 = fiefdoms0.getInvaderType();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(arrayList1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      Knight knight1 = new Knight();
      assertNotNull(knight1);
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals(0, knight1.getScore());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getwound());
      assertNull(knight1.getName());
      assertEquals("knight", knight1.getRank());
      assertEquals(0, knight1.getTotalMoney());
      assertFalse(knight1.getDead());
      assertNull(knight1.getPassword());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getKill());
      assertFalse(knight1.isDead());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getHitsCounter());
      assertFalse(knight1.equals((Object)knight0));
      
      ArrayList<String> arrayList2 = fiefdoms1.getNeighbors();
      assertTrue(arrayList0.contains(" castles for "));
      assertFalse(arrayList0.contains("ge"));
      assertFalse(arrayList2.contains("ge"));
      assertTrue(arrayList2.contains(" castles for "));
      assertNotSame(knight0, knight1);
      assertSame(arrayList0, arrayList2);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertSame(arrayList2, arrayList0);
      assertNotNull(arrayList2);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(154, fiefdoms1.getValue());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("ge", fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("Qr`", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList2.isEmpty());
      assertFalse(knight0.equals((Object)knight1));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Intruders> arrayList3 = fiefdoms0.getMuslim();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotNull(arrayList3);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      fiefdoms1.setMagyar(arrayList3);
      assertTrue(arrayList0.contains(" castles for "));
      assertFalse(arrayList0.contains("ge"));
      assertNotSame(knight0, knight1);
      assertSame(arrayList0, arrayList2);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(154, fiefdoms1.getValue());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("ge", fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("Qr`", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertFalse(knight0.equals((Object)knight1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      Fiefdoms fiefdoms2 = new Fiefdoms(arrayList2, "ge", "Invalid destination fiefdom", 1, true, (ArrayList<String>) null);
      assertTrue(arrayList0.contains(" castles for "));
      assertFalse(arrayList0.contains("ge"));
      assertFalse(arrayList2.contains("ge"));
      assertTrue(arrayList2.contains(" castles for "));
      assertNotNull(fiefdoms2);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(154, fiefdoms1.getValue());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("ge", fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("Qr`", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList2.isEmpty());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(1, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals("Invalid destination fiefdom", fiefdoms2.getOwner());
      assertTrue(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals("ge", fiefdoms2.getName());
      assertFalse(knight0.equals((Object)knight1));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      
      fiefdoms0.setConqueror("ge");
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("ge", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      
      fiefdoms1.setKingdom(true);
      assertTrue(arrayList0.contains(" castles for "));
      assertFalse(arrayList0.contains("ge"));
      assertNotSame(knight0, knight1);
      assertSame(arrayList0, arrayList2);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(154, fiefdoms1.getValue());
      assertTrue(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("ge", fiefdoms1.getOwner());
      assertEquals("Qr`", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(knight0.equals((Object)knight1));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      
      boolean boolean2 = fiefdoms1.isKingdom();
      assertTrue(arrayList0.contains(" castles for "));
      assertFalse(arrayList0.contains("ge"));
      assertNotSame(knight0, knight1);
      assertSame(arrayList0, arrayList2);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertTrue(boolean2);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(154, fiefdoms1.getValue());
      assertTrue(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("ge", fiefdoms1.getOwner());
      assertEquals("Qr`", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(knight0.equals((Object)knight1));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
  }
}
