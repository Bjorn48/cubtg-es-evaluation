/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:55:59 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractClauseSelectorSolver;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.AllMUSes;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.Binary;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AllMUSes_ESTest extends AllMUSes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      VecInt vecInt0 = new VecInt(1, 1);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      allMUSes0.computeAllMSSOrdered(vecInt0, solutionFoundListener0);
      List<IVecInt> list0 = allMUSes0.computeAllMSSOrdered(vecInt0, solutionFoundListener0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0, maxSatDecorator0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) vecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AllMUSes allMUSes0 = new AllMUSes((AbstractClauseSelectorSolver<? extends ISolver>) null, (ASolverFactory<? extends ISolver>) null);
      DimacsStringSolver dimacsStringSolver0 = allMUSes0.getSolverInstance();
      assertNull(dimacsStringSolver0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      allMUSes0.computeAllMSS();
      List<IVecInt> list0 = allMUSes0.getMssList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) checkMUSSolutionListener0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsOutputSolver0);
      NegationDecorator<MinOneDecorator> negationDecorator0 = new NegationDecorator<MinOneDecorator>(minOneDecorator0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      GateTranslator gateTranslator0 = new GateTranslator(dimacsOutputSolver0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GateTranslator>(gateTranslator0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      List<IVecInt> list0 = allMUSes0.computeAllMUSesOrdered(iVecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes((SolutionFoundListener) checkMUSSolutionListener0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMUSes(solutionFoundListener0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt(1824, 1);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes((IVecInt) vecInt0, solutionFoundListener0);
      assertEquals(1824, vecInt0.size());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes(iVecInt0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      VecInt vecInt0 = new VecInt(1, 1);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes((IVecInt) vecInt0);
      assertFalse(list0.isEmpty());
      assertEquals(1, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsOutputSolver0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      dimacsOutputSolver0.getSearchListener();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      AllMUSes allMUSes0 = new AllMUSes(false, lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      GateTranslator gateTranslator0 = new GateTranslator(maxSatDecorator0);
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GateTranslator>(gateTranslator0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      List<IVecInt> list0 = allMUSes0.computeAllMSS(iVecInt0, solutionFoundListener0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsOutputSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(0.0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, varOrderHeap0, noRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      List<IVecInt> list0 = allMUSes0.computeAllMSS(iVecInt0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>((-4206.890692));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, varOrderHeap0, noRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, solutionFoundListener0);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMSS(iVecInt0);
      //  // Unstable assertion: assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(minOneDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false).when(minOneDecorator0).isVerbose();
      doReturn(0, 0, 0).when(minOneDecorator0).nVars();
      LexicoDecorator<MinOneDecorator> lexicoDecorator0 = new LexicoDecorator<MinOneDecorator>(minOneDecorator0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(lexicoDecorator0);
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(abstractMinimalModel0);
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minOneDecorator1).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMSS();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GateTranslator gateTranslator0 = new GateTranslator(statisticsSolver0);
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GateTranslator>(gateTranslator0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      SubModelIterator subModelIterator0 = new SubModelIterator(statisticsSolver0, iVecInt0);
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(subModelIterator0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      ASolverFactory<MinOneDecorator> aSolverFactory1 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, false, stringArray0);
      ModelIterator modelIterator0 = new ModelIterator(manyCore0);
      ASolverFactory<ModelIterator> aSolverFactory1 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIterator0).when(aSolverFactory1).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory1);
      ASolverFactory<MinOneDecorator> aSolverFactory2 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory2);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(1.5);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1355);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Minimal4InclusionModel> basicLauncher0 = new BasicLauncher<Minimal4InclusionModel>(aSolverFactory0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, subsetVarOrder0, arminRestarts0, basicLauncher0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, checkMUSSolutionListener0);
      ASolverFactory<ModelIterator> aSolverFactory1 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIteratorToSATAdapter0).when(aSolverFactory1).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1355
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(statisticsSolver0, checkMUSSolutionListener0);
      ASolverFactory<AbstractMinimalModel> aSolverFactory1 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(abstractMinimalModel0).when(aSolverFactory1).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory1);
      VecInt vecInt0 = new VecInt(0, 0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((IVecInt) vecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(iVecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      VecInt vecInt0 = new VecInt(1, 1);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((IVecInt) vecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt(1824, 1);
      vecInt0.growTo(1824, 670);
      // Undeclared exception!
      allMUSes0.computeAllMUSes((IVecInt) vecInt0, solutionFoundListener0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      iVecInt0.pop();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(iVecInt0, (SolutionFoundListener) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.pop();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      NegationDecorator<OptToSatAdapter> negationDecorator1 = new NegationDecorator<OptToSatAdapter>(optToSatAdapter0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator1, lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<StatisticsSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<StatisticsSolver>(statisticsSolver0, binary0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(clausalCardinalitiesDecorator0, 2808L, solutionFoundListener0);
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIteratorToSATAdapter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      ASolverFactory<MinOneDecorator> aSolverFactory1 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSSOrdered((IVecInt) null, checkMUSSolutionListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.pop();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSSOrdered(iVecInt0, checkMUSSolutionListener0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ModelIterator[] modelIteratorArray0 = new ModelIterator[0];
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(true, modelIteratorArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0, false);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS(solutionFoundListener0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(true, lightFactory0);
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MIN_VALUE;
      VecInt vecInt0 = new VecInt(intArray0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) vecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(negationDecorator0, iVecInt0);
      GroupClauseSelectorSolver<SubModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SubModelIterator>(subModelIterator0);
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      NegationDecorator<StatisticsSolver> negationDecorator0 = new NegationDecorator<StatisticsSolver>(statisticsSolver0);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AllMUSes allMUSes0 = null;
      try {
        allMUSes0 = new AllMUSes(false, (ASolverFactory<? extends ISolver>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AllMUSes allMUSes0 = null;
      try {
        allMUSes0 = new AllMUSes((ASolverFactory<? extends ISolver>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0, maxSatDecorator0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      VecInt vecInt0 = new VecInt(1, 1);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      allMUSes0.computeAllMSSOrdered(vecInt0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((IVecInt) vecInt0, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      VecInt vecInt0 = new VecInt(1, 1);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AllMUSes allMUSes0 = new AllMUSes(false, lightFactory0);
      allMUSes0.computeAllMSS(solutionFoundListener0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes((IVecInt) vecInt0, solutionFoundListener0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      VecInt vecInt0 = new VecInt(142, 142);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      SubModelIterator subModelIterator0 = new SubModelIterator((ISolver) null, iVecInt0);
      FullClauseSelectorSolver<SubModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SubModelIterator>(subModelIterator0, false);
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(fullClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS(iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(minOneDecorator0).modelWithInternalVariables();
      doReturn((String) null).when(minOneDecorator0).getLogPrefix();
      doReturn(true).when(minOneDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(minOneDecorator0).isVerbose();
      doReturn(2147483645).when(minOneDecorator0).nVars();
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minOneDecorator0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS(solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4InclusionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = VecInt.EMPTY;
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ASolverFactory<Minimal4InclusionModel> aSolverFactory1 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory1).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSSOrdered(iVecInt0, checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      VecInt vecInt0 = new VecInt(1457, 1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) vecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(minOneDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false).when(minOneDecorator0).isVerbose();
      doReturn(0).when(minOneDecorator0).nVars();
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minOneDecorator0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      ASolverFactory<SolutionCounter> aSolverFactory1 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMSS();
      assertEquals(1, list0.size());
      
      List<IVecInt> list1 = allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      allMUSes0.computeAllMUSes();
      List<IVecInt> list0 = allMUSes0.computeAllMUSes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(true, lightFactory0);
      ISolver iSolver0 = allMUSes0.getSolverInstance();
      assertTrue(iSolver0.isSatisfiable());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      allMUSes0.reset();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((MaxSatDecorator) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }
}
