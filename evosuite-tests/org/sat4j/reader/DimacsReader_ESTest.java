/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:05:56 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.core.Solver;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.reader.DimacsReader;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DimacsReader_ESTest extends DimacsReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      DimacsReader dimacsReader0 = new DimacsReader(subModelIterator0);
      int[] intArray0 = new int[6];
      intArray0[5] = 1452;
      MockFile mockFile0 = new MockFile("y4=/n#w|&DGh~Vg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      dimacsReader0.decode(intArray0, (PrintWriter) mockPrintWriter0);
      assertFalse(dimacsReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solver<CardinalityDataStructureYanMax> solver0 = (Solver<CardinalityDataStructureYanMax>) mock(Solver.class, new ViolatedAssumptionAnswer());
      NegationDecorator<Solver<CardinalityDataStructureYanMax>> negationDecorator0 = new NegationDecorator<Solver<CardinalityDataStructureYanMax>>(solver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, false);
      DimacsReader dimacsReader0 = new DimacsReader(maxSatDecorator0);
      int[] intArray0 = new int[9];
      intArray0[0] = 803;
      String string0 = dimacsReader0.decode(intArray0);
      assertEquals("803 0 0 0 0 0 0 0 0 0", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      DimacsReader dimacsReader0 = new DimacsReader(dimacsStringSolver0);
      dimacsReader0.flushConstraint();
      assertFalse(dimacsReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(subModelIterator0).toString(anyString());
      ClausalCardinalitiesDecorator<SubModelIterator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SubModelIterator>(subModelIterator0);
      DimacsReader dimacsReader0 = new DimacsReader(clausalCardinalitiesDecorator0);
      ISolver iSolver0 = dimacsReader0.getSolver();
      assertNotNull(iSolver0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      DimacsReader dimacsReader0 = new DimacsReader(statisticsSolver0);
      // Undeclared exception!
      try { 
        dimacsReader0.skipComments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      DimacsReader dimacsReader0 = new DimacsReader(statisticsSolver0);
      // Undeclared exception!
      try { 
        dimacsReader0.readProblemLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      // Undeclared exception!
      try { 
        dimacsReader0.parseInstance((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      DimacsReader dimacsReader0 = new DimacsReader(statisticsSolver0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1224), 115);
      // Undeclared exception!
      try { 
        dimacsReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      DimacsReader dimacsReader0 = new DimacsReader(statisticsSolver0);
      // Undeclared exception!
      try { 
        dimacsReader0.handleLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      DimacsReader dimacsReader0 = new DimacsReader(iSolver0);
      try { 
        dimacsReader0.flushConstraint();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      // Undeclared exception!
      try { 
        dimacsReader0.flushConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solver<CardinalityDataStructureYanMax> solver0 = (Solver<CardinalityDataStructureYanMax>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(99, (-3990)).when(solver0).nextFreeVarId(anyBoolean());
      NegationDecorator<Solver<CardinalityDataStructureYanMax>> negationDecorator0 = new NegationDecorator<Solver<CardinalityDataStructureYanMax>>(solver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, false);
      DimacsReader dimacsReader0 = new DimacsReader(maxSatDecorator0);
      // Undeclared exception!
      try { 
        dimacsReader0.flushConstraint();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      DimacsReader dimacsReader0 = new DimacsReader(statisticsSolver0);
      StringWriter stringWriter0 = new StringWriter(504);
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        dimacsReader0.decode((int[]) null, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      DimacsReader dimacsReader0 = new DimacsReader(statisticsSolver0);
      // Undeclared exception!
      try { 
        dimacsReader0.decode((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Solver<CardinalityDataStructureYanMax> solver0 = (Solver<CardinalityDataStructureYanMax>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0).when(solver0).nextFreeVarId(anyBoolean());
      NegationDecorator<Solver<CardinalityDataStructureYanMax>> negationDecorator0 = new NegationDecorator<Solver<CardinalityDataStructureYanMax>>(solver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, false);
      DimacsReader dimacsReader0 = new DimacsReader(maxSatDecorator0);
      dimacsReader0.flushConstraint();
      assertFalse(dimacsReader0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      DimacsReader dimacsReader0 = new DimacsReader(statisticsSolver0);
      // Undeclared exception!
      try { 
        dimacsReader0.readConstrs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[7] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DimacsReader dimacsReader0 = new DimacsReader(dimacsOutputSolver0, "p");
      try { 
        dimacsReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorproblem line expected (p cnf ...)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      DimacsReader dimacsReader0 = new DimacsReader(dimacsOutputSolver0);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        dimacsReader0.parseInstance((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorproblem line expected (p cnf ...)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      ISolver iSolver0 = dimacsReader0.getSolver();
      assertNull(iSolver0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      DimacsReader dimacsReader0 = new DimacsReader(statisticsSolver0);
      try { 
        dimacsReader0.parseInstance((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      DimacsReader dimacsReader0 = new DimacsReader(statisticsSolver0);
      dimacsReader0.disableNumberOfConstraintCheck();
      assertFalse(dimacsReader0.hasAMapping());
  }
}
