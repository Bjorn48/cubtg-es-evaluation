/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:38:46 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.reader.Reader;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicLauncher_ESTest extends BasicLauncher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<AbstractMinimalModel> basicLauncher0 = new BasicLauncher<AbstractMinimalModel>(aSolverFactory0);
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      LexicoDecorator<SingleSolutionDetector> lexicoDecorator0 = new LexicoDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      ModelIterator modelIterator0 = new ModelIterator(optToSatAdapter0, 10L);
      Reader reader0 = basicLauncher0.createReader(modelIterator0, "c ");
      assertFalse(reader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[5];
      BasicLauncher<Minimal4CardinalityModel> basicLauncher0 = new BasicLauncher<Minimal4CardinalityModel>((ASolverFactory<Minimal4CardinalityModel>) null);
      // Undeclared exception!
      try { 
        basicLauncher0.configureSolver(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.BasicLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASolverFactory<FullClauseSelectorSolver<MinOneDecorator>> aSolverFactory0 = (ASolverFactory<FullClauseSelectorSolver<MinOneDecorator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<FullClauseSelectorSolver<MinOneDecorator>> basicLauncher0 = new BasicLauncher<FullClauseSelectorSolver<MinOneDecorator>>(aSolverFactory0);
      String[] stringArray0 = new String[6];
      stringArray0[5] = "c ";
      String string0 = basicLauncher0.getInstanceName(stringArray0);
      assertEquals("c ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIteratorToSATAdapter> basicLauncher0 = new BasicLauncher<ModelIteratorToSATAdapter>(aSolverFactory0);
      String string0 = basicLauncher0.getInstanceName(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      BasicLauncher<StatisticsSolver> basicLauncher0 = new BasicLauncher<StatisticsSolver>(aSolverFactory0);
      // Undeclared exception!
      try { 
        basicLauncher0.configureSolver(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.BasicLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<DimacsStringSolver> basicLauncher0 = new BasicLauncher<DimacsStringSolver>(aSolverFactory0);
      basicLauncher0.setLogWriter((PrintWriter) null);
      // Undeclared exception!
      try { 
        basicLauncher0.usage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIterator> basicLauncher0 = new BasicLauncher<ModelIterator>(aSolverFactory0);
      // Undeclared exception!
      try { 
        basicLauncher0.getInstanceName((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.BasicLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicLauncher<DimacsStringSolver> basicLauncher0 = new BasicLauncher<DimacsStringSolver>((ASolverFactory<DimacsStringSolver>) null);
      basicLauncher0.usage();
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIteratorToSATAdapter> basicLauncher0 = new BasicLauncher<ModelIteratorToSATAdapter>(aSolverFactory0);
      String[] stringArray0 = new String[0];
      String string0 = basicLauncher0.getInstanceName(stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        BasicLauncher.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.BasicLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      BasicLauncher.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      BasicLauncher.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        BasicLauncher.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
