/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 23:51:26 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken(1365);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      long long0 = stringReader0.skip((-2461L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 57, 1520);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1327, 1327);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1327, javaCharStream1.getBeginLine());
      assertEquals(1331, javaCharStream1.getEndColumn());
      assertEquals(1327, javaCharStream1.getEndLine());
      assertEquals(1327, javaCharStream1.getLine());
      assertEquals(1327, javaCharStream1.getBeginColumn());
      assertEquals(1331, javaCharStream1.getColumn());
      assertEquals("y3A5S", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1331, token0.endColumn);
      assertEquals(1327, token0.beginColumn);
      assertEquals(1327, token0.beginLine);
      assertEquals(1327, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1327, javaCharStream1.getBeginLine());
      assertEquals(1332, javaCharStream1.getEndColumn());
      assertEquals(1332, javaCharStream1.getBeginColumn());
      assertEquals(1327, javaCharStream1.getEndLine());
      assertEquals(1327, javaCharStream1.getLine());
      assertEquals(1332, javaCharStream1.getColumn());
      assertEquals("%", token1.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token1.kind);
      assertEquals(1327, token1.beginLine);
      assertEquals(1332, token1.endColumn);
      assertEquals(1327, token1.endLine);
      assertEquals(1332, token1.beginColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[0] = (byte)75;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 106, 106);
      assertArrayEquals(new byte[] {(byte)75, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)75, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)75, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals("K", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(106, token0.endColumn);
      assertEquals(106, token0.endLine);
      assertEquals(106, token0.beginLine);
      assertEquals(106, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      StringReader stringReader0 = new StringReader("WccX0^Lt7^zJ/U#noD");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("WccX0", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("WccX0", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(5, token1.endColumn);
      assertEquals(74, token1.kind);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",Ak_F(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 292, 292);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(292, javaCharStream0.getBeginLine());
      assertEquals(292, javaCharStream0.getEndLine());
      assertEquals(292, javaCharStream0.getBeginColumn());
      assertEquals(292, javaCharStream0.getColumn());
      assertEquals(292, javaCharStream0.getEndColumn());
      assertEquals(292, javaCharStream0.getLine());
      assertEquals(",", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(292, token0.beginLine);
      assertEquals(84, token0.kind);
      assertEquals(292, token0.endLine);
      assertEquals(292, token0.endColumn);
      assertEquals(292, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(292, javaCharStream0.getBeginLine());
      assertEquals(293, javaCharStream0.getBeginColumn());
      assertEquals(292, javaCharStream0.getEndLine());
      assertEquals(296, javaCharStream0.getColumn());
      assertEquals(292, javaCharStream0.getLine());
      assertEquals(296, javaCharStream0.getEndColumn());
      assertEquals("Ak_F", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(293, token1.beginColumn);
      assertEquals(292, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(296, token1.endColumn);
      assertEquals(292, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(297, javaCharStream0.getEndColumn());
      assertEquals(297, javaCharStream0.getBeginColumn());
      assertEquals(292, javaCharStream0.getBeginLine());
      assertEquals(292, javaCharStream0.getEndLine());
      assertEquals(297, javaCharStream0.getColumn());
      assertEquals(292, javaCharStream0.getLine());
      assertEquals("(", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(292, token2.beginLine);
      assertEquals(297, token2.endColumn);
      assertEquals(292, token2.endLine);
      assertEquals(77, token2.kind);
      assertEquals(297, token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Ra[/Rv}\"C&=ln1}ubv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("7", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("Ra", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager2);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("[", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(81, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(4, token2.endColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("for");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"boolean\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip((-2598L));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-499), (-499));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 1242, (-2614));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      char char0 = javaCharStream1.BeginToken();
      assertEquals((-2614), javaCharStream1.getBeginColumn());
      assertEquals((-2614), javaCharStream1.getColumn());
      assertEquals(1242, javaCharStream1.getEndLine());
      assertEquals(1242, javaCharStream1.getBeginLine());
      assertEquals(1242, javaCharStream1.getLine());
      assertEquals((-2614), javaCharStream1.getEndColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals('\"', char0);
      
      stringReader1.close();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-2614), javaCharStream1.getBeginColumn());
      assertEquals((-2614), javaCharStream1.getColumn());
      assertEquals(1242, javaCharStream1.getEndLine());
      assertEquals(1242, javaCharStream1.getBeginLine());
      assertEquals(1242, javaCharStream1.getLine());
      assertEquals((-2614), javaCharStream1.getEndColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-2613), javaCharStream1.getBeginColumn());
      assertEquals(1242, javaCharStream1.getEndLine());
      assertEquals((-2607), javaCharStream1.getEndColumn());
      assertEquals((-2607), javaCharStream1.getColumn());
      assertEquals(1242, javaCharStream1.getBeginLine());
      assertEquals(1242, javaCharStream1.getLine());
      assertEquals("boolean", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream1.bufpos);
      assertEquals((-2613), token0.beginColumn);
      assertEquals(1242, token0.beginLine);
      assertEquals(1242, token0.endLine);
      assertEquals((-2607), token0.endColumn);
      assertEquals(15, token0.kind);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("WccX0^Lt7^zJ/U#noD");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("WccX0", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("^", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(6, token1.endColumn);
      assertEquals(107, token1.kind);
      assertEquals(6, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("Lt7", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(9, token2.endColumn);
      assertEquals(7, token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals("^", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(107, token3.kind);
      assertEquals(10, token3.beginColumn);
      assertEquals(10, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals("zJ", token4.toString());
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals(12, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(11, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotNull(token4);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals("/", token5.toString());
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(12, javaCharStream0.bufpos);
      assertEquals(104, token5.kind);
      assertEquals(1, token5.endLine);
      assertEquals(13, token5.beginColumn);
      assertEquals(1, token5.beginLine);
      assertEquals(13, token5.endColumn);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      assertNotNull(token5);
      
      Token token6 = javaParserTokenManager0.getNextToken();
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals("U", token6.toString());
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream0.bufpos);
      assertEquals(1, token6.beginLine);
      assertEquals(14, token6.endColumn);
      assertEquals(14, token6.beginColumn);
      assertEquals(1, token6.endLine);
      assertEquals(74, token6.kind);
      assertNotSame(token6, token5);
      assertNotSame(token6, token0);
      assertNotSame(token6, token3);
      assertNotSame(token6, token4);
      assertNotSame(token6, token1);
      assertNotSame(token6, token2);
      assertNotNull(token6);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("55ztK;Y[C6VCAm$");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"this\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip((-2598L));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 70, 1242);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)71;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)116, (byte) (-108), (byte)120, (byte)71}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)101, 114);
      assertArrayEquals(new byte[] {(byte)101, (byte)116, (byte) (-108), (byte)120, (byte)71}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(5, byteArray0.length);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)101, (byte)116, (byte) (-108), (byte)120, (byte)71}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(5, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)101, (byte)116, (byte) (-108), (byte)120, (byte)71}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(101, javaCharStream1.getEndLine());
      assertEquals(101, javaCharStream1.getLine());
      assertEquals(115, javaCharStream1.getColumn());
      assertEquals(101, javaCharStream1.getBeginLine());
      assertEquals(114, javaCharStream1.getBeginColumn());
      assertEquals(115, javaCharStream1.getEndColumn());
      assertEquals("et", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(115, token0.endColumn);
      assertEquals(101, token0.beginLine);
      assertEquals(114, token0.beginColumn);
      assertEquals(101, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(5, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a5PxbxP!HB^hsoXvB_m");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)74, (byte)108, (byte)108, (byte)108, (byte)108}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)108, (byte)74, (byte)108, (byte)108, (byte)108, (byte)108}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals("lJllll", token0.toString());
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(6, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C2X8ws[FP|q<&l=.TS*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 12, 12);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals("C2X8ws", token0.toString());
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(12, token0.beginColumn);
      assertEquals(12, token0.endLine);
      assertEquals(17, token0.endColumn);
      assertEquals(12, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals("[", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(12, token1.beginLine);
      assertEquals(12, token1.endLine);
      assertEquals(18, token1.beginColumn);
      assertEquals(18, token1.endColumn);
      assertEquals(81, token1.kind);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals("FP", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(20, token2.endColumn);
      assertEquals(12, token2.beginLine);
      assertEquals(19, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(12, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals("|", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(12, token3.beginLine);
      assertEquals(106, token3.kind);
      assertEquals(21, token3.endColumn);
      assertEquals(21, token3.beginColumn);
      assertEquals(12, token3.endLine);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals("q", token4.toString());
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(12, token4.beginLine);
      assertEquals(22, token4.endColumn);
      assertEquals(12, token4.endLine);
      assertEquals(74, token4.kind);
      assertEquals(22, token4.beginColumn);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotNull(token4);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"throw\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(".vtM=[A_SP{>'");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(".", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("vtM", token1.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(4, token1.endColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("=", token2.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(87, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(5, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(5, token2.endColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finally");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1682, 1682, 64);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.available = 64;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1682, javaCharStream0.getLine());
      assertEquals(1682, javaCharStream0.getBeginColumn());
      assertEquals(1682, javaCharStream0.getBeginLine());
      assertEquals(1688, javaCharStream0.getEndColumn());
      assertEquals(1688, javaCharStream0.getColumn());
      assertEquals(1682, javaCharStream0.getEndLine());
      assertEquals("finally", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1688, token0.endColumn);
      assertEquals(1682, token0.endLine);
      assertEquals(1682, token0.beginLine);
      assertEquals(1682, token0.beginColumn);
      assertEquals(32, token0.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1682, javaCharStream0.getLine());
      assertEquals(1682, javaCharStream0.getBeginColumn());
      assertEquals(1682, javaCharStream0.getBeginLine());
      assertEquals(1688, javaCharStream0.getEndColumn());
      assertEquals(1688, javaCharStream0.getColumn());
      assertEquals(1682, javaCharStream0.getEndLine());
      assertEquals("finally", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1688, token0.endColumn);
      assertEquals(1682, token0.endLine);
      assertEquals(1682, token0.beginLine);
      assertEquals(1682, token0.beginColumn);
      assertEquals(32, token0.kind);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("for");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 105, 104);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.backup(104);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3991, javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 105, 3991);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3991, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3991, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1L));
      assertEquals(0L, long0);
      
      StringReader stringReader1 = new StringReader("%peVuIb$");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 2014, 90);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(2014, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(2014, javaCharStream0.getEndLine());
      assertEquals(2014, javaCharStream0.getLine());
      assertEquals("%", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2014, token0.beginLine);
      assertEquals(2014, token0.endLine);
      assertEquals(90, token0.beginColumn);
      assertEquals(90, token0.endColumn);
      assertEquals(108, token0.kind);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(2014, javaCharStream0.getBeginLine());
      assertEquals(2014, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(2014, javaCharStream0.getLine());
      assertEquals("peVuIb$", token1.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(97, token1.endColumn);
      assertEquals(2014, token1.endLine);
      assertEquals(2014, token1.beginLine);
      assertEquals(91, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"impl[ements\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2043, 2043);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(2043, javaCharStream0.getEndLine());
      assertEquals(2043, javaCharStream0.getLine());
      assertEquals(2043, javaCharStream0.getEndColumn());
      assertEquals(2043, javaCharStream0.getBeginColumn());
      assertEquals(2043, javaCharStream0.getColumn());
      assertEquals(2043, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\"', char0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(2043, javaCharStream0.getEndLine());
      assertEquals(2047, javaCharStream0.getColumn());
      assertEquals(2043, javaCharStream0.getLine());
      assertEquals(2044, javaCharStream0.getBeginColumn());
      assertEquals(2047, javaCharStream0.getEndColumn());
      assertEquals(2043, javaCharStream0.getBeginLine());
      assertEquals("impl", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(2047, token0.endColumn);
      assertEquals(2043, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(2043, token0.endLine);
      assertEquals(2044, token0.beginColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2048, javaCharStream0.getColumn());
      assertEquals(2043, javaCharStream0.getEndLine());
      assertEquals(2043, javaCharStream0.getLine());
      assertEquals(2048, javaCharStream0.getEndColumn());
      assertEquals(2043, javaCharStream0.getBeginLine());
      assertEquals(2048, javaCharStream0.getBeginColumn());
      assertEquals("[", token1.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(81, token1.kind);
      assertEquals(2048, token1.beginColumn);
      assertEquals(2048, token1.endColumn);
      assertEquals(2043, token1.endLine);
      assertEquals(2043, token1.beginLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(2043, javaCharStream0.getEndLine());
      assertEquals(2054, javaCharStream0.getEndColumn());
      assertEquals(2043, javaCharStream0.getLine());
      assertEquals(2049, javaCharStream0.getBeginColumn());
      assertEquals(2043, javaCharStream0.getBeginLine());
      assertEquals(2054, javaCharStream0.getColumn());
      assertEquals("ements", token2.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(2049, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(2043, token2.endLine);
      assertEquals(2054, token2.endColumn);
      assertEquals(2043, token2.beginLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2043, column 2056.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("continue");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("continue");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip(1L);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 46, 46);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)35, (byte)24, (byte) (-58), (byte) (-99), (byte)36, (byte)11}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)24, (-1290));
      assertArrayEquals(new byte[] {(byte)35, (byte)24, (byte) (-58), (byte) (-99), (byte)36, (byte)11}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(6, byteArray0.length);
      assertNotNull(javaCharStream1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, (byte)24, (byte)36, (-2938));
      assertArrayEquals(new byte[] {(byte)35, (byte)24, (byte) (-58), (byte) (-99), (byte)36, (byte)11}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(6, byteArray0.length);
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertArrayEquals(new byte[] {(byte)35, (byte)24, (byte) (-58), (byte) (-99), (byte)36, (byte)11}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(6, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 24, column 36.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"throw\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("throw", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, token0.endColumn);
      assertEquals(58, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("throw", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(58, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 448, 448, 448);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = Token.newToken(0);
      assertNull(token1.toString());
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNotNull(token1);
      
      Token token2 = Token.newToken((-1175));
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1175));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1175. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("continue");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("continue");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip(1L);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 46, 46);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      Token token0 = Token.newToken(6170);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals("continue", token1.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(23, token1.kind);
      assertEquals(53, token1.endColumn);
      assertEquals(46, token1.beginLine);
      assertEquals(46, token1.endLine);
      assertEquals(46, token1.beginColumn);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("for");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(2L);
      assertEquals(2L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 90, 90);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      Token token0 = Token.newToken(90);
      assertNull(token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals("r", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(90, token1.endLine);
      assertEquals(90, token1.endColumn);
      assertEquals(90, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(90, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)75;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)75}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 106, 106);
      assertArrayEquals(new byte[] {(byte)48, (byte)75}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)75}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)48, (byte)75}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals("0", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(106, token0.endColumn);
      assertEquals(106, token0.beginColumn);
      assertEquals(106, token0.beginLine);
      assertEquals(106, token0.endLine);
      assertEquals(2, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("\"throw\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("RIG+p=hk'1{>YN,W0");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip((-2598L));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0L, long0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte)78, (byte)48, (byte) (-18), (byte) (-18)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-18), (byte) (-18));
      assertArrayEquals(new byte[] {(byte)75, (byte)78, (byte)48, (byte) (-18), (byte) (-18)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)75, (byte)78, (byte)48, (byte) (-18), (byte) (-18)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)75, (byte)78, (byte)48, (byte) (-18), (byte) (-18)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-18), javaCharStream0.getBeginLine());
      assertEquals((-18), javaCharStream0.getBeginColumn());
      assertEquals((-18), javaCharStream0.getLine());
      assertEquals((-16), javaCharStream0.getEndColumn());
      assertEquals((-18), javaCharStream0.getEndLine());
      assertEquals((-16), javaCharStream0.getColumn());
      assertEquals("KN0", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-18), token0.beginColumn);
      assertEquals((-16), token0.endColumn);
      assertEquals((-18), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-18), token0.beginLine);
      assertEquals(5, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader1 = new StringReader("Wcc'0^Le7^zJ/UrnoD");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader0.skip((-2461L));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 95);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 113, (-1315));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals('y', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(113, javaCharStream1.getBeginLine());
      assertEquals(113, javaCharStream1.getEndLine());
      assertEquals((-1315), javaCharStream1.getBeginColumn());
      assertEquals((-1313), javaCharStream1.getColumn());
      assertEquals((-1313), javaCharStream1.getEndColumn());
      assertEquals(113, javaCharStream1.getLine());
      assertEquals("Wcc", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals((-1313), token0.endColumn);
      assertEquals(113, token0.beginLine);
      assertEquals((-1315), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(113, token0.endLine);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 83. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[9];
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArray0[0] = (byte) (-117);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("for");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 105, (-2299));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2632, 2632);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals((-2299), javaCharStream0.getBeginColumn());
      assertEquals((-2297), javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals((-2297), javaCharStream0.getColumn());
      assertEquals("for", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(34, token0.kind);
      assertEquals(105, token0.endLine);
      assertEquals(105, token0.beginLine);
      assertEquals((-2299), token0.beginColumn);
      assertEquals((-2297), token0.endColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1727);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1727. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("y3A5S", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("y3A5S", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, (-1196));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1196. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",Ak_F(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.tokenBegin = 0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ",Ak_F(");
      assertEquals(",Ak_F(", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      javaParserTokenManager0.image = stringBuffer0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(",Ak_F(", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      assertEquals(6, javaParserTokenManager0.image.length());
      assertEquals(",Ak_F(", javaParserTokenManager0.image.toString());
      
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(",", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(84, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("y3A5S", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals("%", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(6, token1.endColumn);
      assertEquals(108, token1.kind);
      assertEquals(6, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("&=", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(8, token2.endColumn);
      assertEquals(114, token2.kind);
      assertEquals(1, token2.beginLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("&=", token3.toString());
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.endLine);
      assertEquals(114, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(8, token3.endColumn);
      assertEquals(7, token3.beginColumn);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"throw\"");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2212), (-2212));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-2212), javaCharStream0.getBeginColumn());
      assertEquals((-2212), javaCharStream0.getLine());
      assertEquals((-2212), javaCharStream0.getEndLine());
      assertEquals((-2206), javaCharStream0.getColumn());
      assertEquals((-2212), javaCharStream0.getBeginLine());
      assertEquals((-2206), javaCharStream0.getEndColumn());
      assertEquals("\"throw\"", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals((-2212), token0.endLine);
      assertEquals((-2212), token0.beginColumn);
      assertEquals((-2212), token0.beginLine);
      assertEquals(73, token0.kind);
      assertEquals((-2206), token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("for");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader1 = new StringReader("RIG+p=hk'1{>YN,W0");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip((-2461L));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 105, 105);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 36, 1327);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      char char0 = javaCharStream1.BeginToken();
      assertEquals(1327, javaCharStream1.getBeginColumn());
      assertEquals(1327, javaCharStream1.getColumn());
      assertEquals(1327, javaCharStream1.getEndColumn());
      assertEquals(36, javaCharStream1.getBeginLine());
      assertEquals(36, javaCharStream1.getEndLine());
      assertEquals(36, javaCharStream1.getLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals('R', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(1327, javaCharStream1.getBeginColumn());
      assertEquals(1327, javaCharStream1.getColumn());
      assertEquals(1327, javaCharStream1.getEndColumn());
      assertEquals(36, javaCharStream1.getBeginLine());
      assertEquals(36, javaCharStream1.getEndLine());
      assertEquals(36, javaCharStream1.getLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1327, javaCharStream1.getBeginColumn());
      assertEquals(1327, javaCharStream1.getColumn());
      assertEquals(1327, javaCharStream1.getEndColumn());
      assertEquals(36, javaCharStream1.getBeginLine());
      assertEquals(36, javaCharStream1.getEndLine());
      assertEquals(36, javaCharStream1.getLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1328, javaCharStream1.getBeginColumn());
      assertEquals(1329, javaCharStream1.getColumn());
      assertEquals(1329, javaCharStream1.getEndColumn());
      assertEquals(36, javaCharStream1.getBeginLine());
      assertEquals(36, javaCharStream1.getEndLine());
      assertEquals(36, javaCharStream1.getLine());
      assertEquals("IG", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1328, token0.beginColumn);
      assertEquals(36, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(36, token0.beginLine);
      assertEquals(1329, token0.endColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1327);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1327. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&_EiC=N`j");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      long long0 = stringReader0.skip((-2461L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5, 57);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(5, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals("&", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(57, token0.endColumn);
      assertEquals(5, token0.beginLine);
      assertEquals(57, token0.beginColumn);
      assertEquals(5, token0.endLine);
      assertEquals(105, token0.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(5, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(58, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals("_EiC", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(58, token1.beginColumn);
      assertEquals(61, token1.endColumn);
      assertEquals(5, token1.endLine);
      assertEquals(5, token1.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"throw\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("RIG+p=hk'1{>YN,W0");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip((-2598L));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1221, 1221);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 915, 1221);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      char char0 = javaCharStream1.BeginToken();
      assertEquals(915, javaCharStream1.getBeginLine());
      assertEquals(1221, javaCharStream1.getEndColumn());
      assertEquals(915, javaCharStream1.getLine());
      assertEquals(1221, javaCharStream1.getBeginColumn());
      assertEquals(1221, javaCharStream1.getColumn());
      assertEquals(915, javaCharStream1.getEndLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals('\"', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(915, javaCharStream1.getBeginLine());
      assertEquals(1221, javaCharStream1.getEndColumn());
      assertEquals(915, javaCharStream1.getLine());
      assertEquals(1221, javaCharStream1.getBeginColumn());
      assertEquals(1221, javaCharStream1.getColumn());
      assertEquals(915, javaCharStream1.getEndLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(915, javaCharStream1.getBeginLine());
      assertEquals(1221, javaCharStream1.getEndColumn());
      assertEquals(915, javaCharStream1.getLine());
      assertEquals(1221, javaCharStream1.getBeginColumn());
      assertEquals(1221, javaCharStream1.getColumn());
      assertEquals(915, javaCharStream1.getEndLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(915, javaCharStream1.getBeginLine());
      assertEquals(1226, javaCharStream1.getColumn());
      assertEquals(1226, javaCharStream1.getEndColumn());
      assertEquals(915, javaCharStream1.getLine());
      assertEquals(1222, javaCharStream1.getBeginColumn());
      assertEquals(915, javaCharStream1.getEndLine());
      assertEquals("throw", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(915, token0.beginLine);
      assertEquals(1226, token0.endColumn);
      assertEquals(1222, token0.beginColumn);
      assertEquals(58, token0.kind);
      assertEquals(915, token0.endLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      
      javaCharStream1.prevCharIsCR = true;
      assertEquals(915, javaCharStream1.getBeginLine());
      assertEquals(1226, javaCharStream1.getColumn());
      assertEquals(1226, javaCharStream1.getEndColumn());
      assertEquals(915, javaCharStream1.getLine());
      assertEquals(1222, javaCharStream1.getBeginColumn());
      assertEquals(915, javaCharStream1.getEndLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 84. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("\"throw\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("2\"<kN0IX= H`W`QzQ2");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("2", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)14, (byte)6}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)41, (byte)14, (byte)6}, byteArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(3, byteArray0.length);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(")", token1.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\u000e\" (14), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C2X8ws[FPq<&l=.TS*");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-2975L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1363, 1363);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1363, javaCharStream0.getEndLine());
      assertEquals(1368, javaCharStream0.getEndColumn());
      assertEquals(1363, javaCharStream0.getBeginColumn());
      assertEquals(1368, javaCharStream0.getColumn());
      assertEquals(1363, javaCharStream0.getBeginLine());
      assertEquals(1363, javaCharStream0.getLine());
      assertEquals("C2X8ws", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1363, token0.beginColumn);
      assertEquals(1363, token0.beginLine);
      assertEquals(1363, token0.endLine);
      assertEquals(1368, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1363, javaCharStream0.getEndLine());
      assertEquals(1369, javaCharStream0.getEndColumn());
      assertEquals(1369, javaCharStream0.getColumn());
      assertEquals(1363, javaCharStream0.getBeginLine());
      assertEquals(1369, javaCharStream0.getBeginColumn());
      assertEquals(1363, javaCharStream0.getLine());
      assertEquals("[", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1369, token1.endColumn);
      assertEquals(1363, token1.endLine);
      assertEquals(1369, token1.beginColumn);
      assertEquals(81, token1.kind);
      assertEquals(1363, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1363, javaCharStream0.getEndLine());
      assertEquals(1372, javaCharStream0.getEndColumn());
      assertEquals(1372, javaCharStream0.getColumn());
      assertEquals(1363, javaCharStream0.getBeginLine());
      assertEquals(1370, javaCharStream0.getBeginColumn());
      assertEquals(1363, javaCharStream0.getLine());
      assertEquals("FPq", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1372, token2.endColumn);
      assertEquals(1363, token2.beginLine);
      assertEquals(1370, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(1363, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(1363, javaCharStream0.getEndLine());
      assertEquals(1373, javaCharStream0.getEndColumn());
      assertEquals(1373, javaCharStream0.getColumn());
      assertEquals(1373, javaCharStream0.getBeginColumn());
      assertEquals(1363, javaCharStream0.getBeginLine());
      assertEquals(1363, javaCharStream0.getLine());
      assertEquals("<", token3.toString());
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(88, token3.kind);
      assertEquals(1363, token3.endLine);
      assertEquals(1363, token3.beginLine);
      assertEquals(1373, token3.endColumn);
      assertEquals(1373, token3.beginColumn);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"this\"");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)36}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)36, (-916));
      assertArrayEquals(new byte[] {(byte)48, (byte)36}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)36, (-2358), 2082);
      assertArrayEquals(new byte[] {(byte)48, (byte)36}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)36}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)48, (byte)36}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(36, javaCharStream0.getLine());
      assertEquals(36, javaCharStream0.getEndLine());
      assertEquals((-916), javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals((-916), javaCharStream0.getBeginColumn());
      assertEquals((-916), javaCharStream0.getColumn());
      assertEquals("0", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-916), token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(36, token0.endLine);
      assertEquals(36, token0.beginLine);
      assertEquals((-916), token0.beginColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(2, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c'/~PNv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("c", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("c", token1.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(74, token1.kind);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("for");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(1L);
      assertEquals(1L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 90, 90);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      Token token0 = Token.newToken(90);
      assertNull(token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals("or", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(90, token1.endLine);
      assertEquals(90, token1.beginColumn);
      assertEquals(90, token1.beginLine);
      assertEquals(91, token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\">>\"");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      long long0 = stringReader0.skip((-2461L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5, 5);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals("\">>\"", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(8, token0.endColumn);
      assertEquals(5, token0.beginLine);
      assertEquals(5, token0.beginColumn);
      assertEquals(73, token0.kind);
      assertEquals(5, token0.endLine);
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, token1.beginLine);
      assertEquals(8, token1.beginColumn);
      assertEquals(8, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(5, token1.endLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 5. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"throw\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("RIG+p=hk'1{>YN,W0");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)11;
      StringReader stringReader2 = new StringReader("\"%\"");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 25, 902);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 25, column 902.  Encountered: \"\\\"\" (34), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("for");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(1L);
      assertEquals(1L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1854), 90);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-1854), javaCharStream0.getBeginLine());
      assertEquals((-1854), javaCharStream0.getEndLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-1854), javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals("or", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, token0.beginColumn);
      assertEquals(91, token0.endColumn);
      assertEquals((-1854), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-1854), token0.endLine);
      assertNotNull(token0);
      
      javaParserTokenManager0.curLexState = 18;
      assertEquals((-1854), javaCharStream0.getBeginLine());
      assertEquals((-1854), javaCharStream0.getEndLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-1854), javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals((-1854), javaCharStream0.getBeginLine());
      assertEquals((-1854), javaCharStream0.getEndLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-1854), javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1854), token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(91, token1.endColumn);
      assertEquals((-1854), token1.endLine);
      assertEquals(91, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals((-1854), javaCharStream0.getBeginLine());
      assertEquals((-1854), javaCharStream0.getEndLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-1854), javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1854), token2.beginLine);
      assertEquals(91, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(91, token2.endColumn);
      assertEquals((-1854), token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1854), javaCharStream0.getBeginLine());
      assertEquals((-1854), javaCharStream0.getEndLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-1854), javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("@throw\"");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)34, (byte)34);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals("@", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(34, token0.endLine);
      assertEquals(34, token0.beginLine);
      assertEquals(34, token0.beginColumn);
      assertEquals(86, token0.kind);
      assertEquals(34, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("E+=d=[||k~glrMWA2");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("E+=d=[||k~glrMWA2");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      javaCharStream0.inputStream = (Reader) stringReader1;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("E", token0.toString());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager2);
      
      Token token1 = javaParserTokenManager2.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("+", token1.toString());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(101, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-44);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)33, (byte)110, (byte) (-44)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 111, (byte)110);
      assertArrayEquals(new byte[] {(byte)33, (byte)110, (byte) (-44)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)33, (byte)110, (byte) (-44)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)33, (byte)110, (byte) (-44)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertArrayEquals(new byte[] {(byte)33, (byte)110, (byte) (-44)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(111, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getLine());
      assertEquals("!", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(110, token0.endColumn);
      assertEquals(89, token0.kind);
      assertEquals(111, token0.endLine);
      assertEquals(111, token0.beginLine);
      assertEquals(110, token0.beginColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(3, byteArray0.length);
      assertNotNull(token0);
      
      token0.beginColumn = 91;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(111, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getLine());
      assertEquals("!", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertArrayEquals(new byte[] {(byte)33, (byte)110, (byte) (-44)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(111, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getLine());
      assertEquals("!", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(110, token0.endColumn);
      assertEquals(89, token0.kind);
      assertEquals(91, token0.beginColumn);
      assertEquals(111, token0.endLine);
      assertEquals(111, token0.beginLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(3, byteArray0.length);
      
      Token token1 = javaParserTokenManager1.jjFillToken();
      assertArrayEquals(new byte[] {(byte)33, (byte)110, (byte) (-44)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(111, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getLine());
      assertEquals("!", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(111, token1.beginLine);
      assertEquals(110, token1.beginColumn);
      assertEquals(110, token1.endColumn);
      assertEquals(89, token1.kind);
      assertEquals(111, token1.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(3, byteArray0.length);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finlly");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)90;
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (byte)1, 2667);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("finlly", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&_EiC=N`j");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)49, (byte)107, (byte) (-52)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2106), (-2106));
      assertArrayEquals(new byte[] {(byte)42, (byte)49, (byte)107, (byte) (-52)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)42, (byte)49, (byte)107, (byte) (-52)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)42, (byte)49, (byte)107, (byte) (-52)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2106), javaCharStream0.getColumn());
      assertEquals((-2106), javaCharStream0.getEndLine());
      assertEquals((-2106), javaCharStream0.getBeginLine());
      assertEquals((-2106), javaCharStream0.getBeginColumn());
      assertEquals((-2106), javaCharStream0.getLine());
      assertEquals((-2106), javaCharStream0.getEndColumn());
      assertEquals("*", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2106), token0.endColumn);
      assertEquals((-2106), token0.endLine);
      assertEquals((-2106), token0.beginLine);
      assertEquals((-2106), token0.beginColumn);
      assertEquals(103, token0.kind);
      assertEquals(4, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finally");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)108, (byte)108, (byte)1, (byte)90, (byte)123, (byte)108, (byte)108}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)108, (byte)108, (byte)1, (byte)90, (byte)123, (byte)108, (byte)108}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, byteArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("llll", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C2X8ws[FPq<&l=.TS*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("C2X8ws", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(6, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("[", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(7, token1.beginColumn);
      assertEquals(7, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(81, token1.kind);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals("FPq", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(10, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader1 = new StringReader("WccX0^Lt7^zJ/U#noD");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader0.skip((-2461L));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 93);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 113, (-1315));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals('y', char0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)48, (byte)48, (byte)48}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 2846, 24);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)48, (byte)48, (byte)48}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(4, byteArray0.length);
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals("3", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2983, token0.endLine);
      assertEquals(2983, token0.beginLine);
      assertEquals(94, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(94, token0.beginColumn);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"throw\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(".vtM=[A_SP{>'");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)96, (byte)2, (byte) (-18), (byte)75, (byte)2, (byte)48, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)75, (byte) (-18));
      assertArrayEquals(new byte[] {(byte)96, (byte)2, (byte) (-18), (byte)75, (byte)2, (byte)48, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)96, (byte)2, (byte) (-18), (byte)75, (byte)2, (byte)48, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 75, column -18.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("y3A5S", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("%", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(6, token1.beginColumn);
      assertEquals(6, token1.endColumn);
      assertEquals(108, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, true);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('\"');
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(27);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 27. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kcKt9{+y#NvRD<%N");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("kcKt9", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager2);
      
      javaParserTokenManager0.SwitchTo(1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      
      Token token1 = Token.newToken(1);
      assertNull(token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%:");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-909), (-909));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-3359), (-3359));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-3359), javaCharStream1.getEndLine());
      assertEquals((-3359), javaCharStream1.getBeginColumn());
      assertEquals((-3359), javaCharStream1.getColumn());
      assertEquals((-3359), javaCharStream1.getEndColumn());
      assertEquals((-3359), javaCharStream1.getBeginLine());
      assertEquals((-3359), javaCharStream1.getLine());
      assertEquals("%", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(108, token0.kind);
      assertEquals((-3359), token0.endColumn);
      assertEquals((-3359), token0.endLine);
      assertEquals((-3359), token0.beginLine);
      assertEquals((-3359), token0.beginColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-3359));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3359. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 106, 106);
      assertArrayEquals(new byte[] {(byte)48, (byte)48}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)48, (byte)48}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals("00", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token0.endColumn);
      assertEquals(106, token0.beginLine);
      assertEquals(106, token0.beginColumn);
      assertEquals(106, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(2, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'r");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)64, (byte)64);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 64, column 66.  Encountered: <EOF> after : \"\\'r\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("continue");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("continue", token0.toString());
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(23, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 7. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader1 = new StringReader("WccX0^Lt7^zJ/U#noD");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader0.skip((-2461L));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 93);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 113, (-1315));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)48, (byte)48, (byte)48}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(113, javaCharStream1.getEndLine());
      assertEquals(113, javaCharStream1.getLine());
      assertEquals(113, javaCharStream1.getBeginLine());
      assertEquals((-1311), javaCharStream1.getEndColumn());
      assertEquals((-1315), javaCharStream1.getBeginColumn());
      assertEquals((-1311), javaCharStream1.getColumn());
      assertEquals("WccX0", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-1315), token0.beginColumn);
      assertEquals(113, token0.beginLine);
      assertEquals((-1311), token0.endColumn);
      assertEquals(113, token0.endLine);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(113, javaCharStream1.getEndLine());
      assertEquals(113, javaCharStream1.getLine());
      assertEquals((-1310), javaCharStream1.getEndColumn());
      assertEquals(113, javaCharStream1.getBeginLine());
      assertEquals((-1310), javaCharStream1.getBeginColumn());
      assertEquals((-1310), javaCharStream1.getColumn());
      assertEquals("^", token1.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream1.bufpos);
      assertEquals((-1310), token1.endColumn);
      assertEquals(107, token1.kind);
      assertEquals(113, token1.endLine);
      assertEquals(113, token1.beginLine);
      assertEquals((-1310), token1.beginColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"throw\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("RIG+p=hk'1{>YN,W0");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1221, 1221);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertEquals('R', char0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1221, 43);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1221, javaCharStream0.getLine());
      assertEquals(1222, javaCharStream0.getColumn());
      assertEquals(1221, javaCharStream0.getBeginColumn());
      assertEquals(1221, javaCharStream0.getBeginLine());
      assertEquals(1222, javaCharStream0.getEndColumn());
      assertEquals(1221, javaCharStream0.getEndLine());
      assertEquals("IG", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1221, token0.beginColumn);
      assertEquals(1221, token0.beginLine);
      assertEquals(1221, token0.endLine);
      assertEquals(1222, token0.endColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(125);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 125. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("for");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 105, 104);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.backup(104);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3991, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(108, 94);
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3991, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3991, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 108, column 94.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("y3A5S", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager1.curLexState = 42;
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals("%", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(6, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(6, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals("%", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(6, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(6, token2.endColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      long long0 = stringReader0.skip((-2461L));
      assertEquals(0L, long0);
      
      StringReader stringReader1 = new StringReader("PgC!ug-DjKg");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 90, 364);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(364, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(364, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(364, javaCharStream0.getColumn());
      assertEquals("P", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(90, token0.endLine);
      assertEquals(90, token0.beginLine);
      assertEquals(364, token0.endColumn);
      assertEquals(364, token0.beginColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 90, column 365.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C2X8ws[FPq<&l=.TS*");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(6442450944L);
      assertEquals(18L, long0);
      
      StringReader stringReader1 = new StringReader(".uH");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 90, 364);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotNull(token_GTToken0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(364, javaCharStream0.getBeginColumn());
      assertEquals(364, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(364, javaCharStream0.getEndColumn());
      assertEquals(".", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(364, token0.beginColumn);
      assertEquals(90, token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals(364, token0.endColumn);
      assertEquals(90, token0.endLine);
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(365, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(366, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(366, javaCharStream0.getEndColumn());
      assertEquals("uH", token1.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(366, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(90, token1.beginLine);
      assertEquals(365, token1.beginColumn);
      assertEquals(90, token1.endLine);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C2X8ws[FPq<&l=.TS*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), 1221);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1221, javaCharStream0.getBeginColumn());
      assertEquals(1221, javaCharStream0.getColumn());
      assertEquals(1221, javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('C', char0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)64, 3935, 2101);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(1, byteArray0.length);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(1, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(1, byteArray0.length);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(64, javaCharStream1.getLine());
      assertEquals(3935, javaCharStream1.getEndColumn());
      assertEquals(64, javaCharStream1.getBeginLine());
      assertEquals(3935, javaCharStream1.getBeginColumn());
      assertEquals(3935, javaCharStream1.getColumn());
      assertEquals(64, javaCharStream1.getEndLine());
      assertEquals("@", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(64, token0.beginLine);
      assertEquals(86, token0.kind);
      assertEquals(64, token0.endLine);
      assertEquals(3935, token0.endColumn);
      assertEquals(3935, token0.beginColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, byteArray0.length);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(64, javaCharStream1.getLine());
      assertEquals(3935, javaCharStream1.getEndColumn());
      assertEquals(64, javaCharStream1.getBeginLine());
      assertEquals(3935, javaCharStream1.getBeginColumn());
      assertEquals(3935, javaCharStream1.getColumn());
      assertEquals(64, javaCharStream1.getEndLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, byteArray0.length);
      assertNotNull(javaParserTokenManager2);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(64, javaCharStream1.getLine());
      assertEquals(3935, javaCharStream1.getEndColumn());
      assertEquals(64, javaCharStream1.getBeginLine());
      assertEquals(3935, javaCharStream1.getBeginColumn());
      assertEquals(3935, javaCharStream1.getColumn());
      assertEquals(64, javaCharStream1.getEndLine());
      assertEquals("", token1.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(3935, token1.endColumn);
      assertEquals(3935, token1.beginColumn);
      assertEquals(64, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(64, token1.beginLine);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertEquals(1, byteArray0.length);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(64, javaCharStream1.getLine());
      assertEquals(3935, javaCharStream1.getEndColumn());
      assertEquals(64, javaCharStream1.getBeginLine());
      assertEquals(3935, javaCharStream1.getBeginColumn());
      assertEquals(3935, javaCharStream1.getColumn());
      assertEquals(64, javaCharStream1.getEndLine());
      assertEquals("", token2.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(3935, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(64, token2.beginLine);
      assertEquals(3935, token2.beginColumn);
      assertEquals(64, token2.endLine);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, byteArray0.length);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r`4 ys/p0m^j");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("r", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RIG+p=hk'1{>YN,W0");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 430, 1363);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(430, javaCharStream0.getEndLine());
      assertEquals(430, javaCharStream0.getBeginLine());
      assertEquals(1365, javaCharStream0.getColumn());
      assertEquals(1365, javaCharStream0.getEndColumn());
      assertEquals(1363, javaCharStream0.getBeginColumn());
      assertEquals(430, javaCharStream0.getLine());
      assertEquals("RIG", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1363, token0.beginColumn);
      assertEquals(430, token0.beginLine);
      assertEquals(430, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1365, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(430, javaCharStream0.getEndLine());
      assertEquals(430, javaCharStream0.getBeginLine());
      assertEquals(1366, javaCharStream0.getBeginColumn());
      assertEquals(1366, javaCharStream0.getColumn());
      assertEquals(1366, javaCharStream0.getEndColumn());
      assertEquals(430, javaCharStream0.getLine());
      assertEquals("+", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1366, token1.beginColumn);
      assertEquals(1366, token1.endColumn);
      assertEquals(101, token1.kind);
      assertEquals(430, token1.endLine);
      assertEquals(430, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(430, javaCharStream0.getEndLine());
      assertEquals(1367, javaCharStream0.getEndColumn());
      assertEquals(430, javaCharStream0.getBeginLine());
      assertEquals(1367, javaCharStream0.getBeginColumn());
      assertEquals(1367, javaCharStream0.getColumn());
      assertEquals(430, javaCharStream0.getLine());
      assertEquals("p", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(430, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(1367, token2.beginColumn);
      assertEquals(1367, token2.endColumn);
      assertEquals(430, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(430, javaCharStream0.getEndLine());
      assertEquals(1368, javaCharStream0.getEndColumn());
      assertEquals(430, javaCharStream0.getBeginLine());
      assertEquals(1368, javaCharStream0.getBeginColumn());
      assertEquals(1368, javaCharStream0.getColumn());
      assertEquals(430, javaCharStream0.getLine());
      assertEquals("=", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(87, token3.kind);
      assertEquals(1368, token3.endColumn);
      assertEquals(430, token3.endLine);
      assertEquals(430, token3.beginLine);
      assertEquals(1368, token3.beginColumn);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(1369, javaCharStream0.getBeginColumn());
      assertEquals(430, javaCharStream0.getEndLine());
      assertEquals(1370, javaCharStream0.getEndColumn());
      assertEquals(430, javaCharStream0.getBeginLine());
      assertEquals(430, javaCharStream0.getLine());
      assertEquals(1370, javaCharStream0.getColumn());
      assertEquals("hk", token4.toString());
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(1369, token4.beginColumn);
      assertEquals(430, token4.endLine);
      assertEquals(430, token4.beginLine);
      assertEquals(1370, token4.endColumn);
      assertEquals(74, token4.kind);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotNull(token4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("WccX0^Lt7^zJ/U#noD");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("WccX0", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("^", token1.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(107, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(6, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-500), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjmatchedKind = 123;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      StringReader stringReader0 = new StringReader("<DIGIT>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.bufpos = 125;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      javaCharStream0.bufline = javaParserTokenManager0.jjnewLexState;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("DIGIT", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      assertFalse(token0.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endColumn);
      assertNotSame(token0, token1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      assertFalse(token0.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endColumn);
      assertNotSame(token0, token1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotNull(token_GTToken0);
      
      token_GTToken0.beginColumn = 1;
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNull(token_GTToken0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(1, token_GTToken0.beginColumn);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      assertFalse(token0.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endColumn);
      assertNotSame(token0, token1);
      
      javaCharStream0.tokenBegin = 3385;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(">", token2.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(token2.equals((Object)token_GTToken0));
      assertEquals(124, token2.kind);
      assertEquals(7, token2.endColumn);
      assertEquals(7, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertNotSame(token2, token_GTToken0);
      assertNotNull(token2);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNull(token_GTToken0.toString());
      assertFalse(token_GTToken0.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(1, token_GTToken0.beginColumn);
      assertNotSame(token_GTToken0, token2);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(">", token3.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(token3.equals((Object)token_GTToken0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(1, token3.beginLine);
      assertEquals(7, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(7, token3.beginColumn);
      assertEquals(124, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertNotSame(token3, token_GTToken0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("'r");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (byte)81, 27);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 81, column 29.  Encountered: <EOF> after : \"\\'r\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z%*`&m,9!QV>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("z", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("%", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(108, token1.kind);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C2X8ws[FPq<&l=.TS*");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-2977L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1363, 1363);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1363, javaCharStream0.getEndLine());
      assertEquals(1368, javaCharStream0.getColumn());
      assertEquals(1368, javaCharStream0.getEndColumn());
      assertEquals(1363, javaCharStream0.getBeginColumn());
      assertEquals(1363, javaCharStream0.getLine());
      assertEquals(1363, javaCharStream0.getBeginLine());
      assertEquals("C2X8ws", token0.toString());
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1363, token0.beginColumn);
      assertEquals(1363, token0.endLine);
      assertEquals(1363, token0.beginLine);
      assertEquals(1368, token0.endColumn);
      assertNotNull(token0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)71;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte) (-89), (byte)107, (byte) (-12), (byte)89, (byte)13, (byte) (-97), (byte)78, (byte)71}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte) (-89), (byte)107, (byte) (-12), (byte)89, (byte)13, (byte) (-97), (byte)78, (byte)71}, byteArray0);
      assertEquals(1363, javaCharStream0.getBeginColumn());
      assertEquals(1363, javaCharStream0.getBeginLine());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, byteArray0.length);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("g", token1.toString());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c'/~PBNvB");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("c", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"~\" (126), after : \"\\'/\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q-VQ-TXkCt<");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&_EiC=N`j");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      long long0 = stringReader0.skip((-2461L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5, 57);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals("&", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token0.beginLine);
      assertEquals(105, token0.kind);
      assertEquals(57, token0.endColumn);
      assertEquals(57, token0.beginColumn);
      assertEquals(5, token0.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals("&", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token0.beginLine);
      assertEquals(105, token0.kind);
      assertEquals(57, token0.endColumn);
      assertEquals(57, token0.beginColumn);
      assertEquals(5, token0.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("WccX0^Lt7^zJ/U#noD");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader0.skip((-2598L));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0L, long0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-18);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-18), (byte)78, (byte)78, (byte) (-18)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-18), (byte)78, (byte)78, (byte) (-18)}, byteArray0);
      assertEquals(5, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 4913, 87);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-18), (byte)78, (byte)78, (byte) (-18)}, byteArray0);
      assertEquals(5, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-18), (byte)78, (byte)78, (byte) (-18)}, byteArray0);
      assertEquals(5, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)48, (byte) (-18), (byte)78, (byte)78, (byte) (-18)}, byteArray0);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(4913, javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(4913, javaCharStream0.getBeginLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(4913, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals("0", token0.toString());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(87, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(4913, token0.beginLine);
      assertEquals(4913, token0.endLine);
      assertEquals(87, token0.beginColumn);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finlly");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals("finlly", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(6, token1.beginColumn);
      assertEquals(6, token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(6, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(6, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("=G%;niX~ul");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("=", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(87, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("G", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("%", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(108, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(";", token3.toString());
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(83, token3.kind);
      assertEquals(4, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("niX", token4.toString());
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(7, token4.endColumn);
      assertEquals(5, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotNull(token4);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("~", token5.toString());
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(90, token5.kind);
      assertEquals(8, token5.endColumn);
      assertEquals(8, token5.beginColumn);
      assertEquals(1, token5.beginLine);
      assertEquals(1, token5.endLine);
      assertNotSame(token5, token4);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotNull(token5);
      
      Token token6 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals("ul", token6.toString());
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token6.kind);
      assertEquals(1, token6.endLine);
      assertEquals(1, token6.beginLine);
      assertEquals(9, token6.beginColumn);
      assertEquals(10, token6.endColumn);
      assertNotSame(token6, token4);
      assertNotSame(token6, token1);
      assertNotSame(token6, token5);
      assertNotSame(token6, token2);
      assertNotSame(token6, token0);
      assertNotSame(token6, token3);
      assertNotNull(token6);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("y3A5S", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 20.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finlly");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjimageLen = 3066;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2438), (-1));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, (-2614), (-3640));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      
      char char0 = javaCharStream1.BeginToken();
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals((-2438), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-2438), javaCharStream1.getEndLine());
      assertEquals((-2438), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals('f', char0);
      
      stringReader0.close();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals((-2438), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-2438), javaCharStream1.getEndLine());
      assertEquals((-2438), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals((-2438), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-2438), javaCharStream1.getEndLine());
      assertEquals((-2438), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-2438), javaCharStream1.getBeginLine());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals((-2438), javaCharStream1.getEndLine());
      assertEquals((-2438), javaCharStream1.getLine());
      assertEquals("inlly", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token0.endColumn);
      assertEquals((-2438), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals((-2438), token0.endLine);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("WccX0^Lt7^zJ/U#noMD");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 86, (-1));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, (-1), (-2310));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotNull(javaCharStream2);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals('W', char0);
      
      stringReader0.close();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("ccX0", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C2X8ws[FP|q<&l=.TS*");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)125, (byte)125, (byte)25}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)25, 0);
      assertArrayEquals(new byte[] {(byte)125, (byte)125, (byte)25}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)125, (byte)125, (byte)25}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)125, (byte)125, (byte)25}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(25, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(25, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getEndLine());
      assertEquals("}", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(25, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(80, token0.kind);
      assertEquals(25, token0.endLine);
      assertEquals(3, byteArray0.length);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)125, (byte)125, (byte)25}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(25, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(25, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getEndLine());
      assertEquals("}", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(80, token1.kind);
      assertEquals(25, token1.endLine);
      assertEquals(25, token1.beginLine);
      assertEquals(1, token1.endColumn);
      assertNotSame(token1, token0);
      assertEquals(3, byteArray0.length);
      assertNotNull(token1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 25, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%:");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-909), (-909));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-3359), (-3359));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-3359), javaCharStream1.getBeginLine());
      assertEquals((-3359), javaCharStream1.getEndColumn());
      assertEquals((-3359), javaCharStream1.getBeginColumn());
      assertEquals((-3359), javaCharStream1.getLine());
      assertEquals((-3359), javaCharStream1.getEndLine());
      assertEquals((-3359), javaCharStream1.getColumn());
      assertEquals("%", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3359), token0.endLine);
      assertEquals((-3359), token0.beginColumn);
      assertEquals(108, token0.kind);
      assertEquals((-3359), token0.endColumn);
      assertEquals((-3359), token0.beginLine);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals((-3359), javaCharStream1.getBeginLine());
      assertEquals((-3358), javaCharStream1.getEndColumn());
      assertEquals((-3358), javaCharStream1.getBeginColumn());
      assertEquals((-3359), javaCharStream1.getLine());
      assertEquals((-3359), javaCharStream1.getEndLine());
      assertEquals((-3358), javaCharStream1.getColumn());
      assertEquals(":", token1.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3358), token1.beginColumn);
      assertEquals((-3358), token1.endColumn);
      assertEquals(92, token1.kind);
      assertEquals((-3359), token1.endLine);
      assertEquals((-3359), token1.beginLine);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("public");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 12, 12);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals("public", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(17, token0.endColumn);
      assertEquals(12, token0.beginColumn);
      assertEquals(49, token0.kind);
      assertEquals(12, token0.endLine);
      assertEquals(12, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(12, token1.beginLine);
      assertEquals(12, token1.endLine);
      assertEquals(17, token1.beginColumn);
      assertEquals(17, token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(12, token2.beginLine);
      assertEquals(17, token2.beginColumn);
      assertEquals(17, token2.endColumn);
      assertEquals(12, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals("", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(17, token3.beginColumn);
      assertEquals(12, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(12, token3.endLine);
      assertEquals(17, token3.endColumn);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals("", token4.toString());
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(17, token4.endColumn);
      assertEquals(12, token4.endLine);
      assertEquals(17, token4.beginColumn);
      assertEquals(12, token4.beginLine);
      assertEquals(0, token4.kind);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotNull(token4);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&_EiC=N`j");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1204, 1204);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1204, javaCharStream0.getEndLine());
      assertEquals(1204, javaCharStream0.getLine());
      assertEquals(1204, javaCharStream0.getEndColumn());
      assertEquals(1204, javaCharStream0.getBeginColumn());
      assertEquals(1204, javaCharStream0.getColumn());
      assertEquals(1204, javaCharStream0.getBeginLine());
      assertEquals("&", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token0.kind);
      assertEquals(1204, token0.endColumn);
      assertEquals(1204, token0.beginColumn);
      assertEquals(1204, token0.beginLine);
      assertEquals(1204, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1204, javaCharStream0.getEndLine());
      assertEquals(1208, javaCharStream0.getColumn());
      assertEquals(1204, javaCharStream0.getLine());
      assertEquals(1205, javaCharStream0.getBeginColumn());
      assertEquals(1208, javaCharStream0.getEndColumn());
      assertEquals(1204, javaCharStream0.getBeginLine());
      assertEquals("_EiC", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1208, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1205, token1.beginColumn);
      assertEquals(1204, token1.beginLine);
      assertEquals(1204, token1.endLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(1204, javaCharStream0.getEndLine());
      assertEquals(1208, javaCharStream0.getColumn());
      assertEquals(1204, javaCharStream0.getLine());
      assertEquals(1205, javaCharStream0.getBeginColumn());
      assertEquals(1208, javaCharStream0.getEndColumn());
      assertEquals(1204, javaCharStream0.getBeginLine());
      assertEquals("_EiC", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1208, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1205, token1.beginColumn);
      assertEquals(1204, token1.beginLine);
      assertEquals(1204, token1.endLine);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C2X8ws[FPq<&l=.TS*");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-2975L));
      assertEquals(0L, long0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte)76;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)76, (byte)76, (byte)0, (byte)76, (byte)76, (byte)76, (byte)76}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1363, (byte)76, 2);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)76, (byte)76, (byte)0, (byte)76, (byte)76, (byte)76, (byte)76}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("LLLL", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("LLLL", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals("LLLL", token1.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<EXPONENT>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager2);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager3);
      
      Token token1 = javaParserTokenManager3.getNextToken();
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("EXPONENT", token1.toString());
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(9, token1.endColumn);
      assertEquals(74, token1.kind);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(">", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(124, token2.kind);
      assertEquals(10, token2.beginColumn);
      assertEquals(10, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-60);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("H", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      long long0 = stringReader0.skip((-2461L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 106, 1520);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1327, 1327);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1327, javaCharStream1.getLine());
      assertEquals(1327, javaCharStream1.getEndLine());
      assertEquals(1331, javaCharStream1.getEndColumn());
      assertEquals(1327, javaCharStream1.getBeginLine());
      assertEquals(1331, javaCharStream1.getColumn());
      assertEquals(1327, javaCharStream1.getBeginColumn());
      assertEquals("y3A5S", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1327, token0.endLine);
      assertEquals(1327, token0.beginLine);
      assertEquals(1327, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1331, token0.endColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(57);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 57. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8YJ:+uD\",2C6*R");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8YJ:+uD\",2C6*R");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("8", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("YJ", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(":", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(92, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("+", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token3.endColumn);
      assertEquals(5, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(101, token3.kind);
      assertEquals(1, token3.beginLine);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("uD", token4.toString());
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(7, token4.endColumn);
      assertEquals(6, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotNull(token4);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 448, 448, 448);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotNull(token_GTToken0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = Token.newToken(0);
      assertNull(token1.toString());
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertNotNull(token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(447, javaCharStream0.getColumn());
      assertEquals(447, javaCharStream0.getEndColumn());
      assertEquals(447, javaCharStream0.getBeginColumn());
      assertEquals(448, javaCharStream0.getLine());
      assertEquals(448, javaCharStream0.getEndLine());
      assertEquals(448, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(447, token2.endColumn);
      assertEquals(448, token2.endLine);
      assertEquals(448, token2.beginLine);
      assertEquals(447, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(447, javaCharStream0.getColumn());
      assertEquals(447, javaCharStream0.getEndColumn());
      assertEquals(447, javaCharStream0.getBeginColumn());
      assertEquals(448, javaCharStream0.getLine());
      assertEquals(448, javaCharStream0.getEndLine());
      assertEquals(448, javaCharStream0.getBeginLine());
      assertEquals("", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(448, token3.endLine);
      assertEquals(447, token3.beginColumn);
      assertEquals(447, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(448, token3.beginLine);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(447);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 447. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("y3A5S", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager2);
      
      StringReader stringReader1 = new StringReader("Jt0Q`C+0k!ICH");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 1, 79);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager3);
      
      Token token1 = javaParserTokenManager3.getNextToken();
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(82, javaCharStream1.getColumn());
      assertEquals(82, javaCharStream1.getEndColumn());
      assertEquals(79, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("Jt0Q", token1.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(82, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(79, token1.beginColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finally");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-81), 124);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)108, (byte)0}, byteArray0);
      assertEquals(84, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 124, (-1182));
      assertArrayEquals(new byte[] {(byte) (-81), (byte)108, (byte)0}, byteArray0);
      assertEquals(84, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)108, (byte)0}, byteArray0);
      assertEquals(84, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"impl[ements\"");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      long long0 = stringReader0.skip((-1095L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 754, 2683);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(2683, javaCharStream0.getColumn());
      assertEquals(754, javaCharStream0.getLine());
      assertEquals(754, javaCharStream0.getBeginLine());
      assertEquals(2683, javaCharStream0.getEndColumn());
      assertEquals(2683, javaCharStream0.getBeginColumn());
      assertEquals(754, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\"', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(2683, javaCharStream0.getColumn());
      assertEquals(754, javaCharStream0.getLine());
      assertEquals(754, javaCharStream0.getBeginLine());
      assertEquals(2683, javaCharStream0.getEndColumn());
      assertEquals(2683, javaCharStream0.getBeginColumn());
      assertEquals(754, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2683, javaCharStream0.getColumn());
      assertEquals(754, javaCharStream0.getLine());
      assertEquals(754, javaCharStream0.getBeginLine());
      assertEquals(2683, javaCharStream0.getEndColumn());
      assertEquals(2683, javaCharStream0.getBeginColumn());
      assertEquals(754, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2687, javaCharStream0.getColumn());
      assertEquals(2687, javaCharStream0.getEndColumn());
      assertEquals(754, javaCharStream0.getLine());
      assertEquals(754, javaCharStream0.getBeginLine());
      assertEquals(2684, javaCharStream0.getBeginColumn());
      assertEquals(754, javaCharStream0.getEndLine());
      assertEquals("impl", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2684, token0.beginColumn);
      assertEquals(754, token0.beginLine);
      assertEquals(2687, token0.endColumn);
      assertEquals(754, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2687, javaCharStream0.getColumn());
      assertEquals(2687, javaCharStream0.getEndColumn());
      assertEquals(754, javaCharStream0.getLine());
      assertEquals(754, javaCharStream0.getBeginLine());
      assertEquals(2684, javaCharStream0.getBeginColumn());
      assertEquals(754, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d~U8?U");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)64, (byte)64);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals("d", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(64, token0.beginLine);
      assertEquals(64, token0.beginColumn);
      assertEquals(64, token0.endColumn);
      assertEquals(64, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.jjFillToken();
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(64, token1.endLine);
      assertEquals(64, token1.beginLine);
      assertEquals(64, token1.beginColumn);
      assertEquals(64, token1.endColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("55ztK;Y[C6VCAm$");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"this\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip((-2598L));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 70, 1242);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1242, 28);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(1242, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals(1242, javaCharStream0.getEndColumn());
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(1242, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals('5', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1242, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals(1242, javaCharStream0.getEndColumn());
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(1242, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1242, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals(1242, javaCharStream0.getEndColumn());
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(1242, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1242, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals(1242, javaCharStream0.getEndColumn());
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(1242, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1243, javaCharStream0.getEndColumn());
      assertEquals(1243, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals(1243, javaCharStream0.getBeginColumn());
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals("5", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1243, token0.beginColumn);
      assertEquals(1243, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(70, token0.endLine);
      assertEquals(70, token0.beginLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1246, javaCharStream0.getEndColumn());
      assertEquals(1246, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals(1244, javaCharStream0.getBeginColumn());
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals("ztK", token1.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1244, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(70, token1.endLine);
      assertEquals(70, token1.beginLine);
      assertEquals(1246, token1.endColumn);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&_EiC=N`j");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("NZ]_kLl5+bn,");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader0.skip((-1L));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0L, long0);
      
      StringReader stringReader2 = new StringReader("-TZQfD32e");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 2014, 2014);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(2014, javaCharStream0.getBeginLine());
      assertEquals(2014, javaCharStream0.getEndColumn());
      assertEquals(2014, javaCharStream0.getEndLine());
      assertEquals(2014, javaCharStream0.getLine());
      assertEquals(2014, javaCharStream0.getBeginColumn());
      assertEquals(2014, javaCharStream0.getColumn());
      assertEquals("-", token0.toString());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2014, token0.endColumn);
      assertEquals(2014, token0.beginColumn);
      assertEquals(2014, token0.beginLine);
      assertEquals(2014, token0.endLine);
      assertEquals(102, token0.kind);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(2014, javaCharStream0.getBeginLine());
      assertEquals(2022, javaCharStream0.getColumn());
      assertEquals(2015, javaCharStream0.getBeginColumn());
      assertEquals(2014, javaCharStream0.getEndLine());
      assertEquals(2014, javaCharStream0.getLine());
      assertEquals(2022, javaCharStream0.getEndColumn());
      assertEquals("TZQfD32e", token1.toString());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2015, token1.beginColumn);
      assertEquals(2014, token1.beginLine);
      assertEquals(2022, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(2014, token1.endLine);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[9];
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArray0[0] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)108, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, byteArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("l", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("l", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3A5S%&=]i`hg>B+As:");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("y3A5S", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 20.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("55ztK;Y[C6VCAm$");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 12, 12);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals("55", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(12, token0.beginLine);
      assertEquals(12, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(13, token0.endColumn);
      assertEquals(12, token0.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals("ztK", token1.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(16, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(12, token1.beginLine);
      assertEquals(12, token1.endLine);
      assertEquals(14, token1.beginColumn);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(";", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(17, token2.endColumn);
      assertEquals(17, token2.beginColumn);
      assertEquals(12, token2.beginLine);
      assertEquals(83, token2.kind);
      assertEquals(12, token2.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager2);
      
      Token token3 = javaParserTokenManager2.getNextToken();
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals("Y", token3.toString());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(18, token3.beginColumn);
      assertEquals(12, token3.endLine);
      assertEquals(12, token3.beginLine);
      assertEquals(18, token3.endColumn);
      assertEquals(74, token3.kind);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finlly");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)108, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      javaParserTokenManager0.jjmatchedKind = 11;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)108, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, byteArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("lll", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C2X8ws[FP2|q<&l=.TS*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 12, 12);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("55ztK;Y[C6VCAm$");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"this\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip((-2598L));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 70, 1242);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1242, 28);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(1242, javaCharStream0.getEndColumn());
      assertEquals(1242, javaCharStream0.getBeginColumn());
      assertEquals(1242, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals('5', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(1242, javaCharStream0.getEndColumn());
      assertEquals(1242, javaCharStream0.getBeginColumn());
      assertEquals(1242, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(1242, javaCharStream0.getEndColumn());
      assertEquals(1242, javaCharStream0.getBeginColumn());
      assertEquals(1242, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(1242, javaCharStream0.getEndColumn());
      assertEquals(1242, javaCharStream0.getBeginColumn());
      assertEquals(1242, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(1243, javaCharStream0.getEndColumn());
      assertEquals(1243, javaCharStream0.getBeginColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals(1243, javaCharStream0.getColumn());
      assertEquals("5", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1243, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1243, token0.endColumn);
      assertEquals(70, token0.beginLine);
      assertEquals(70, token0.endLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1246, javaCharStream0.getEndColumn());
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(1244, javaCharStream0.getBeginColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals(1246, javaCharStream0.getColumn());
      assertEquals("ztK", token1.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(70, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(70, token1.endLine);
      assertEquals(1244, token1.beginColumn);
      assertEquals(1246, token1.endColumn);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1247, javaCharStream0.getEndColumn());
      assertEquals(1247, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(1247, javaCharStream0.getBeginColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals(";", token2.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1247, token2.endColumn);
      assertEquals(70, token2.endLine);
      assertEquals(83, token2.kind);
      assertEquals(1247, token2.beginColumn);
      assertEquals(70, token2.beginLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C28w[P|q<&l.TS*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 12, 12);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals("C28w", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(12, token0.endLine);
      assertEquals(12, token0.beginColumn);
      assertEquals(12, token0.beginLine);
      assertEquals(15, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals("[", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(81, token1.kind);
      assertEquals(12, token1.beginLine);
      assertEquals(12, token1.endLine);
      assertEquals(16, token1.endColumn);
      assertEquals(16, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals("P", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(12, token2.beginLine);
      assertEquals(12, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(17, token2.beginColumn);
      assertEquals(17, token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals("|", token3.toString());
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(12, token3.endLine);
      assertEquals(18, token3.beginColumn);
      assertEquals(18, token3.endColumn);
      assertEquals(106, token3.kind);
      assertEquals(12, token3.beginLine);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotNull(token3);
  }
}
