/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:14:40 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minimal4CardinalityModel_ESTest extends Minimal4CardinalityModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams((-3275));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1));
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(maxSatDecorator0);
      minimal4CardinalityModel0.isSatisfiable();
      int[] intArray0 = minimal4CardinalityModel0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      minimal4CardinalityModel0.registerLiteral(1077);
      minimal4CardinalityModel0.findModel();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      Minimal4CardinalityModel minimal4CardinalityModel1 = new Minimal4CardinalityModel(iSolver0, checkMUSSolutionListener0);
      minimal4CardinalityModel1.modelWithInternalVariables();
      // Undeclared exception!
      minimal4CardinalityModel1.modelWithInternalVariables();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(minOneDecorator0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      minimal4CardinalityModel0.findModel();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      Minimal4CardinalityModel minimal4CardinalityModel1 = new Minimal4CardinalityModel(minimal4CardinalityModel0, iVecInt0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel1.modelWithInternalVariables();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null, vecInt0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(aSolverFactory0, stringArray0);
      VecInt vecInt0 = new VecInt(110);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(manyCore0, vecInt0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.model();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      int[] intArray0 = minimal4CardinalityModel0.findModel();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.push(Integer.MIN_VALUE);
      Minimal4CardinalityModel minimal4CardinalityModel1 = new Minimal4CardinalityModel(minimal4CardinalityModel0, iVecInt0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel1.model();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null, checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(aSolverFactory0, stringArray0);
      ASolverFactory<SubModelIterator> aSolverFactory1 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(manyCore0, checkMUSSolutionListener0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null, (IVecInt) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(0);
      vecInt0.shrink((-3278));
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(true, stringArray0, subModelIteratorArray0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(manyCore0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      minimal4CardinalityModel0.findModel();
      int[] intArray0 = minimal4CardinalityModel0.model();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      minimal4CardinalityModel0.registerLiteral(1077);
      minimal4CardinalityModel0.findModel();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel1 = new Minimal4CardinalityModel(minimal4CardinalityModel0, solutionFoundListener0);
      int[] intArray0 = minimal4CardinalityModel1.model();
      assertEquals(1077, iSolver0.nVars());
      assertEquals(1077, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      minimal4CardinalityModel0.findModel();
      int[] intArray0 = minimal4CardinalityModel0.modelWithInternalVariables();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      minimal4CardinalityModel0.registerLiteral(1077);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel1 = new Minimal4CardinalityModel(minimal4CardinalityModel0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel1.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt((IVecInt) null);
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null, readOnlyVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }
}
