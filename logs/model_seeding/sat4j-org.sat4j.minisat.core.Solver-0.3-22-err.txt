[MASTER] 07:33:48.940 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.minisat.core.Solver<D> : Type points to itself
[MASTER] 07:33:48.947 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 07:33:48.948 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 07:34:02.101 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:34:06.018 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:34:50.298 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielHT>> : Invalid generic instance
[MASTER] 07:34:51.271 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielWL>> : Invalid generic instance
[MASTER] 07:35:22.948 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:27.043 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:33.950 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:33.963 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:33.989 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:33.998 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.009 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.021 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.046 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.056 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.073 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.082 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.111 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.139 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.159 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.172 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.213 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.225 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.246 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.284 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.298 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.316 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.328 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.361 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.376 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:35:34.385 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:37:24.003 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:37:30.931 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:158) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_91]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:279) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:543) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:254) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:160) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_91]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.net.SocketException: Broken pipe
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1580) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:294) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:153) ~[na:1.8.0_91]
	... 13 common frames omitted
[MASTER] 07:37:43.517 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 07:37:43.916 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_29_1550558263489/org/sat4j/minisat/core/Solver_29_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_29_1550558263489/org/sat4j/minisat/core/Solver_29_tmp__ESTest_scaffolding.java]]
[MASTER] 07:37:43.916 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 07:37:43.916 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 07:37:43.931 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructureYanMax>[] cannot be converted to org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructureYanMax>: 356
[MASTER] 07:37:43.931 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_29_1550558263489/org/sat4j/minisat/core/Solver_29_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 07:37:43.931 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 07:37:43.931 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_29_1550558263489/org/sat4j/minisat/core/Solver_29_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 07:37:43.931 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 07:37:43.960 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_29_1550558263489/org/sat4j/minisat/core/Solver_29_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 06:37:43 GMT 2019
4:  */
5: 
6: package org.sat4j.minisat.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.lang.reflect.Array;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.ViolatedAssumptionAnswer;
16: import org.junit.runner.RunWith;
17: import org.sat4j.minisat.constraints.CardinalityDataStructure;
18: import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
19: import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
20: import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
21: import org.sat4j.minisat.core.ILits;
22: import org.sat4j.minisat.core.LearningStrategy;
23: import org.sat4j.minisat.core.RestartStrategy;
24: import org.sat4j.minisat.core.SearchParams;
25: import org.sat4j.minisat.core.Solver;
26: import org.sat4j.minisat.core.SolverStats;
27: import org.sat4j.minisat.learning.ActiveLearning;
28: import org.sat4j.minisat.learning.NoLearningNoHeuristics;
29: import org.sat4j.minisat.orders.PureOrder;
30: import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
31: import org.sat4j.minisat.orders.RandomWalkDecorator;
32: import org.sat4j.minisat.orders.VarOrderHeap;
33: import org.sat4j.minisat.restarts.LubyRestarts;
34: import org.sat4j.specs.ILogAble;
35: import org.sat4j.specs.IVecInt;
36: import org.sat4j.tools.ManyCore;
37: 
38: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
39: public class Solver_29_tmp__ESTest extends Solver_29_tmp__ESTest_scaffolding {
40: 
41:   @Test(timeout = 4000)
42:   public void test0()  throws Throwable  {
43:       NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
44:       assertNotNull(noLearningNoHeuristics0);
45:       
46:       CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
47:       assertNotNull(cardinalityDataStructure0);
48:       
49:       RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
50:       assertNotNull(rSATPhaseSelectionStrategy0);
51:       assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
52:       
53:       VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
54:       assertNotNull(varOrderHeap0);
55:       assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
56:       assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
57:       
58:       varOrderHeap0.setVarDecay(0.0);
59:       assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
60:       assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
61:       
62:       RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
63:       assertNotNull(randomWalkDecorator0);
64:       assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
65:       assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
66:       assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
67:       
68:       LubyRestarts lubyRestarts0 = new LubyRestarts(0);
69:       assertNotNull(lubyRestarts0);
70:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
71:       assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
72:       assertTrue(lubyRestarts0.shouldRestart());
73:       assertEquals(1, lubyRestarts0.luby());
74:       assertEquals(0, lubyRestarts0.getFactor());
75:       
76:       SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
77:       SolverStats solverStats0 = new SolverStats();
78:       assertNotNull(solverStats0);
79:       assertEquals(0L, solverStats0.getLearnedclauses());
80:       assertEquals(0, solverStats0.getImportedUnits());
81:       assertEquals(0L, solverStats0.getConflicts());
82:       assertEquals(0, solverStats0.getReduceddb());
83:       assertEquals(0L, solverStats0.getInspects());
84:       assertEquals(0L, solverStats0.getReducedliterals());
85:       assertEquals(0L, solverStats0.getLearnedbinaryclauses());
86:       assertEquals(0L, solverStats0.getLearnedliterals());
87:       assertEquals(0L, solverStats0.getPropagations());
88:       assertEquals(0L, solverStats0.getChangedreason());
89:       assertEquals(0, solverStats0.getShortcuts());
90:       assertEquals(0, solverStats0.getStarts());
91:       assertEquals(0L, solverStats0.getRootSimplifications());
92:       assertEquals(0L, solverStats0.getUpdateLBD());
93:       assertEquals(0L, solverStats0.getDecisions());
94:       assertEquals(0L, solverStats0.getIgnoredclauses());
95:       assertEquals(0L, solverStats0.getLearnedternaryclauses());
96:       
97:       lubyRestarts0.init(searchParams0, solverStats0);
98:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
99:       assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
100:       assertTrue(lubyRestarts0.shouldRestart());
101:       assertEquals(1, lubyRestarts0.luby());
102:       assertEquals(0, lubyRestarts0.getFactor());
103:       assertEquals(0L, solverStats0.getLearnedclauses());
104:       assertEquals(0, solverStats0.getImportedUnits());
105:       assertEquals(0L, solverStats0.getConflicts());
106:       assertEquals(0, solverStats0.getReduceddb());
107:       assertEquals(0L, solverStats0.getInspects());
108:       assertEquals(0L, solverStats0.getReducedliterals());
109:       assertEquals(0L, solverStats0.getLearnedbinaryclauses());
110:       assertEquals(0L, solverStats0.getLearnedliterals());
111:       assertEquals(0L, solverStats0.getPropagations());
112:       assertEquals(0L, solverStats0.getChangedreason());
113:       assertEquals(0, solverStats0.getShortcuts());
114:       assertEquals(0, solverStats0.getStarts());
115:       assertEquals(0L, solverStats0.getRootSimplifications());
116:       assertEquals(0L, solverStats0.getUpdateLBD());
117:       assertEquals(0L, solverStats0.getDecisions());
118:       assertEquals(0L, solverStats0.getIgnoredclauses());
119:       assertEquals(0L, solverStats0.getLearnedternaryclauses());
120:       
121:       lubyRestarts0.onRestart();
122:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
123:       assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
124:       assertTrue(lubyRestarts0.shouldRestart());
125:       assertEquals(1, lubyRestarts0.luby());
126:       assertEquals(0, lubyRestarts0.getFactor());
127:       
128:       Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, lubyRestarts0);
129:       assertNotNull(solver0);
130:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
131:       assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
132:       assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
133:       assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
134:       assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
135:       assertTrue(lubyRestarts0.shouldRestart());
136:       assertEquals(1, lubyRestarts0.luby());
137:       assertEquals(0, lubyRestarts0.getFactor());
138:       assertFalse(solver0.isSolverKeptHot());
139:       assertEquals(2, solver0.newVar());
140:       assertFalse(solver0.isVerbose());
141:       assertEquals(1, solver0.realNumberOfVariables());
142:       assertEquals(0, solver0.nConstraints());
143:       assertEquals(0, solver0.getPropagationLevel());
144:       assertEquals("c ", solver0.getLogPrefix());
145:       assertEquals(1, solver0.nVars());
146:       assertFalse(solver0.isDBSimplificationAllowed());
147:       assertEquals(0, solver0.currentDecisionLevel());
148:       assertEquals(0, solver0.decisionLevel());
149:       assertEquals(2147483, solver0.getTimeout());
150:       
151:       solver0.setKeepSolverHot(true);
152:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
153:       assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
154:       assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
155:       assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
156:       assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
157:       assertTrue(lubyRestarts0.shouldRestart());
158:       assertEquals(1, lubyRestarts0.luby());
159:       assertEquals(0, lubyRestarts0.getFactor());
160:       assertFalse(solver0.isVerbose());
161:       assertEquals(0, solver0.nConstraints());
162:       assertEquals(4, solver0.newVar());
163:       assertEquals(0, solver0.getPropagationLevel());
164:       assertEquals(3, solver0.realNumberOfVariables());
165:       assertEquals("c ", solver0.getLogPrefix());
166:       assertFalse(solver0.isDBSimplificationAllowed());
167:       assertTrue(solver0.isSolverKeptHot());
168:       assertEquals(0, solver0.currentDecisionLevel());
169:       assertEquals(3, solver0.nVars());
170:       assertEquals(0, solver0.decisionLevel());
171:       assertEquals(2147483, solver0.getTimeout());
172:       
173:       ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(1.0E100);
174:       assertNotNull(activeLearning0);
175:       assertEquals(1.0E100, activeLearning0.getActivityPercent(), 0.01);
176:       assertEquals(0, activeLearning0.getLimit());
177:       
178:       MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
179:       assertNotNull(mixedDataStructureDanielHT0);
180:       
181:       LearningStrategy<CardinalityDataStructureYanMin> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMin>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
182:       CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
183:       doReturn((ILits) null).when(cardinalityDataStructureYanMin0).getVocabulary();
184:       SearchParams searchParams1 = new SearchParams();
185:       assertNotNull(searchParams1);
186:       assertFalse(searchParams1.equals((Object)searchParams0));
187:       assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
188:       assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
189:       assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
190:       assertEquals(100, searchParams1.getInitConflictBound());
191:       
192:       PureOrder pureOrder0 = new PureOrder((-3498));
193:       assertNotNull(pureOrder0);
194:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
195:       assertEquals((-3498), pureOrder0.getPeriod());
196:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
197:       
198:       Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(learningStrategy0, cardinalityDataStructureYanMin0, searchParams1, pureOrder0, (RestartStrategy) null);
199:       assertNotNull(solver1);
200:       assertFalse(searchParams1.equals((Object)searchParams0));
201:       assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
202:       assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
203:       assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
204:       assertEquals(100, searchParams1.getInitConflictBound());
205:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
206:       assertEquals((-3498), pureOrder0.getPeriod());
207:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
208:       assertFalse(solver1.isDBSimplificationAllowed());
209:       assertEquals("c ", solver1.getLogPrefix());
210:       assertEquals(0, solver1.decisionLevel());
211:       assertFalse(solver1.isSolverKeptHot());
212:       assertEquals(2147483, solver1.getTimeout());
213:       assertEquals(0, solver1.nConstraints());
214:       assertEquals(0, solver1.getPropagationLevel());
215:       assertEquals(0, solver1.currentDecisionLevel());
216:       assertFalse(solver1.isVerbose());
217:       
218:       ILogAble iLogAble0 = solver1.getLogger();
219:       assertNotNull(iLogAble0);
220:       assertFalse(searchParams1.equals((Object)searchParams0));
221:       assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
222:       assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
223:       assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
224:       assertEquals(100, searchParams1.getInitConflictBound());
225:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
226:       assertEquals((-3498), pureOrder0.getPeriod());
227:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
228:       assertFalse(solver1.isDBSimplificationAllowed());
229:       assertEquals("c ", solver1.getLogPrefix());
230:       assertEquals(0, solver1.decisionLevel());
231:       assertFalse(solver1.isSolverKeptHot());
232:       assertEquals(2147483, solver1.getTimeout());
233:       assertEquals(0, solver1.nConstraints());
234:       assertEquals(0, solver1.getPropagationLevel());
235:       assertEquals(0, solver1.currentDecisionLevel());
236:       assertFalse(solver1.isVerbose());
237:       
238:       iLogAble0.log("InA<");
239:       assertFalse(searchParams1.equals((Object)searchParams0));
240:       assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
241:       assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
242:       assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
243:       assertEquals(100, searchParams1.getInitConflictBound());
244:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
245:       assertEquals((-3498), pureOrder0.getPeriod());
246:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
247:       assertFalse(solver1.isDBSimplificationAllowed());
248:       assertEquals("c ", solver1.getLogPrefix());
249:       assertEquals(0, solver1.decisionLevel());
250:       assertFalse(solver1.isSolverKeptHot());
251:       assertEquals(2147483, solver1.getTimeout());
252:       assertEquals(0, solver1.nConstraints());
253:       assertEquals(0, solver1.getPropagationLevel());
254:       assertEquals(0, solver1.currentDecisionLevel());
255:       assertFalse(solver1.isVerbose());
256:       
257:       iLogAble0.log("r");
258:       assertFalse(searchParams1.equals((Object)searchParams0));
259:       assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
260:       assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
261:       assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
262:       assertEquals(100, searchParams1.getInitConflictBound());
263:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
264:       assertEquals((-3498), pureOrder0.getPeriod());
265:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
266:       assertFalse(solver1.isDBSimplificationAllowed());
267:       assertEquals("c ", solver1.getLogPrefix());
268:       assertEquals(0, solver1.decisionLevel());
269:       assertFalse(solver1.isSolverKeptHot());
270:       assertEquals(2147483, solver1.getTimeout());
271:       assertEquals(0, solver1.nConstraints());
272:       assertEquals(0, solver1.getPropagationLevel());
273:       assertEquals(0, solver1.currentDecisionLevel());
274:       assertFalse(solver1.isVerbose());
275:       
276:       iLogAble0.log("InA<");
277:       assertFalse(searchParams1.equals((Object)searchParams0));
278:       assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
279:       assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
280:       assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
281:       assertEquals(100, searchParams1.getInitConflictBound());
282:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
283:       assertEquals((-3498), pureOrder0.getPeriod());
284:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
285:       assertFalse(solver1.isDBSimplificationAllowed());
286:       assertEquals("c ", solver1.getLogPrefix());
287:       assertEquals(0, solver1.decisionLevel());
288:       assertFalse(solver1.isSolverKeptHot());
289:       assertEquals(2147483, solver1.getTimeout());
290:       assertEquals(0, solver1.nConstraints());
291:       assertEquals(0, solver1.getPropagationLevel());
292:       assertEquals(0, solver1.currentDecisionLevel());
293:       assertFalse(solver1.isVerbose());
294:       
295:       iLogAble0.log("");
296:       assertFalse(searchParams1.equals((Object)searchParams0));
297:       assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
298:       assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
299:       assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
300:       assertEquals(100, searchParams1.getInitConflictBound());
301:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
302:       assertEquals((-3498), pureOrder0.getPeriod());
303:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
304:       assertFalse(solver1.isDBSimplificationAllowed());
305:       assertEquals("c ", solver1.getLogPrefix());
306:       assertEquals(0, solver1.decisionLevel());
307:       assertFalse(solver1.isSolverKeptHot());
308:       assertEquals(2147483, solver1.getTimeout());
309:       assertEquals(0, solver1.nConstraints());
310:       assertEquals(0, solver1.getPropagationLevel());
311:       assertEquals(0, solver1.currentDecisionLevel());
312:       assertFalse(solver1.isVerbose());
313:       
314:       Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, (SearchParams) null, varOrderHeap0, lubyRestarts0, iLogAble0);
315:       assertNotNull(solver2);
316:       assertFalse(searchParams1.equals((Object)searchParams0));
317:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
318:       assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
319:       assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
320:       assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
321:       assertEquals(100, searchParams1.getInitConflictBound());
322:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
323:       assertEquals((-3498), pureOrder0.getPeriod());
324:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
325:       assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
326:       assertFalse(solver1.isDBSimplificationAllowed());
327:       assertEquals("c ", solver1.getLogPrefix());
328:       assertEquals(0, solver1.decisionLevel());
329:       assertFalse(solver1.isSolverKeptHot());
330:       assertEquals(2147483, solver1.getTimeout());
331:       assertEquals(0, solver1.nConstraints());
332:       assertEquals(0, solver1.getPropagationLevel());
333:       assertEquals(0, solver1.currentDecisionLevel());
334:       assertFalse(solver1.isVerbose());
335:       assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
336:       assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
337:       assertTrue(lubyRestarts0.shouldRestart());
338:       assertEquals(1, lubyRestarts0.luby());
339:       assertEquals(0, lubyRestarts0.getFactor());
340:       assertFalse(solver2.isSolverKeptHot());
341:       assertEquals(0, solver2.nConstraints());
342:       assertFalse(solver2.isVerbose());
343:       assertFalse(solver2.isDBSimplificationAllowed());
344:       assertEquals(0, solver2.decisionLevel());
345:       assertEquals(2147483, solver2.getTimeout());
346:       assertEquals(0, solver2.currentDecisionLevel());
347:       assertEquals(1, solver2.realNumberOfVariables());
348:       assertEquals(1, solver2.nVars());
349:       assertEquals(2, solver2.newVar());
350:       assertEquals(0, solver2.getPropagationLevel());
351:       assertEquals("c ", solver2.getLogPrefix());
352:       assertEquals(1.0E100, activeLearning0.getActivityPercent(), 0.01);
353:       assertEquals(0, activeLearning0.getLimit());
354:       
355:       Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8);
356:       solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0;
357:   }
358: }
RegularFileObject[/tmp/EvoSuite_29_1550558263489/org/sat4j/minisat/core/Solver_29_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 06:37:43 GMT 2019
5:  */
6: 
7: package org.sat4j.minisat.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class Solver_29_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.minisat.core.Solver"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Solver_29_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.sat4j.minisat.core.ConflictTimerAdapter",
84:       "org.sat4j.tools.ManyCore",
85:       "org.sat4j.specs.UnitPropagationListener",
86:       "org.sat4j.minisat.core.SizeComparator",
87:       "org.sat4j.tools.FullClauseSelectorSolver",
88:       "org.sat4j.reader.LecteurDimacs",
89:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
90:       "org.sat4j.tools.SolverDecorator",
91:       "org.sat4j.specs.Propagatable",
92:       "org.sat4j.minisat.core.Counter",
93:       "org.sat4j.minisat.learning.FixedLengthLearning",
94:       "org.sat4j.ILauncherMode",
95:       "org.sat4j.minisat.core.Undoable",
96:       "org.sat4j.minisat.constraints.cnf.Clauses",
97:       "org.sat4j.minisat.core.Pair",
98:       "org.sat4j.core.EmptyVecInt",
99:       "org.sat4j.ExitCode",
100:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
101:       "org.sat4j.specs.IVec",
102:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
103:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
104:       "org.sat4j.minisat.constraints.cnf.UnitClause",
105:       "org.sat4j.specs.Lbool",
106:       "org.sat4j.minisat.constraints.cnf.CBClause",
107:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
108:       "org.sat4j.AbstractLauncher$2",
109:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
110:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
111:       "org.sat4j.AbstractLauncher$1",
112:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
113:       "org.sat4j.specs.SearchListener",
114:       "org.sat4j.minisat.core.SimplificationType",
115:       "org.sat4j.minisat.learning.MiniSATLearning",
116:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
117:       "org.sat4j.minisat.core.SearchParams",
118:       "org.sat4j.tools.AbstractMinimalModel",
119:       "org.sat4j.minisat.core.Heap",
120:       "org.sat4j.specs.ILogAble$1",
121:       "org.sat4j.specs.TimeoutException",
122:       "org.sat4j.specs.Constr",
123:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
124:       "org.sat4j.minisat.core.ConflictTimerContainer",
125:       "org.sat4j.specs.ISolverService",
126:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
127:       "org.sat4j.minisat.core.LearningStrategy",
128:       "org.sat4j.minisat.constraints.cnf.WLClause",
129:       "org.sat4j.specs.IGroupSolver",
130:       "org.sat4j.DecisionMode",
131:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
132:       "org.sat4j.specs.IteratorInt",
133:       "org.sat4j.specs.ISolver",
134:       "org.sat4j.minisat.orders.RandomWalkDecorator",
135:       "org.sat4j.specs.UnitClauseProvider$1",
136:       "org.sat4j.minisat.core.CircularBuffer",
137:       "org.sat4j.minisat.learning.LimitedLearning",
138:       "org.sat4j.minisat.restarts.LubyRestarts",
139:       "org.sat4j.minisat.core.VoidTracing",
140:       "org.sat4j.minisat.core.ActivityListener",
141:       "org.sat4j.minisat.restarts.Glucose21Restarts",
142:       "org.sat4j.minisat.core.GlucoseLCDS",
143:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
144:       "org.sat4j.tools.AbstractClauseSelectorSolver$SelectorState",
145:       "org.sat4j.minisat.core.ILits",
146:       "org.sat4j.BasicLauncher",
147:       "org.sat4j.minisat.constraints.card.AtLeast",
148:       "org.sat4j.specs.ILogAble",
149:       "org.sat4j.specs.ContradictionException",
150:       "org.sat4j.reader.GroupedCNFReader",
151:       "org.sat4j.minisat.constraints.card.MinWatchCard",
152:       "org.sat4j.core.LiteralsUtils",
153:       "org.sat4j.minisat.learning.PercentLengthLearning",
154:       "org.sat4j.specs.IConstr",
155:       "org.sat4j.specs.IVecInt",
156:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
157:       "org.sat4j.core.ConstrGroup",
158:       "org.sat4j.tools.SolutionFoundListener",
159:       "org.sat4j.minisat.constraints.ClausalDataStructureWL",
160:       "org.sat4j.minisat.restarts.EMARestarts",
161:       "org.sat4j.minisat.core.PrimeImplicantStrategy",
162:       "org.sat4j.OptimizationMode",
163:       "org.sat4j.minisat.core.Learner",
164:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
165:       "org.sat4j.minisat.core.ActivityComparator",
166:       "org.sat4j.specs.MandatoryLiteralListener",
167:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
168:       "org.sat4j.specs.IProblem",
169:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
170:       "org.sat4j.minisat.restarts.MiniSATRestarts",
171:       "org.sat4j.core.VecInt",
172:       "org.sat4j.minisat.core.Solver",
173:       "org.sat4j.tools.xplain.HighLevelXplain",
174:       "org.sat4j.minisat.constraints.cnf.Lits",
175:       "org.sat4j.minisat.core.Solver$2",
176:       "org.sat4j.minisat.core.Solver$1",
177:       "org.sat4j.specs.UnitClauseProvider",
178:       "org.sat4j.minisat.learning.AbstractLearning",
179:       "org.sat4j.AbstractLauncher",
180:       "org.sat4j.minisat.core.Solver$4",
181:       "org.sat4j.minisat.core.Solver$3",
182:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
183:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
184:       "org.sat4j.core.VecInt$1",
185:       "org.sat4j.core.ASolverFactory",
186:       "org.sat4j.core.Vec$1",
187:       "org.sat4j.reader.DimacsReader",
188:       "org.sat4j.minisat.core.DataStructureFactory",
189:       "org.sat4j.core.Vec",
190:       "org.sat4j.minisat.core.Solver$9",
191:       "org.sat4j.minisat.core.Glucose2LCDS",
192:       "org.sat4j.minisat.core.Solver$6",
193:       "org.sat4j.minisat.core.SolverStats",
194:       "org.sat4j.minisat.core.Solver$8",
195:       "org.sat4j.minisat.core.Solver$7",
196:       "org.sat4j.minisat.core.Solver$10",
197:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
198:       "org.sat4j.minisat.core.ConstrActivityListener",
199:       "org.sat4j.minisat.core.IPhaseSelectionStrategy",
200:       "org.sat4j.minisat.orders.SubsetVarOrder",
201:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
202:       "org.sat4j.minisat.restarts.ArminRestarts",
203:       "org.sat4j.tools.GroupClauseSelectorSolver",
204:       "org.sat4j.specs.SearchListenerAdapter",
205:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
206:       "org.sat4j.tools.xplain.Xplain",
207:       "org.sat4j.reader.ParseFormatException",
208:       "org.sat4j.tools.AbstractClauseSelectorSolver",
209:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
210:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
211:       "org.sat4j.tools.OutcomeListener",
212:       "org.sat4j.minisat.core.ActivityLCDS",
213:       "org.sat4j.minisat.constraints.cnf.OriginalWLClause",
214:       "org.sat4j.minisat.learning.ActiveLearning",
215:       "org.sat4j.MUSLauncher",
216:       "org.sat4j.minisat.orders.VarOrderHeap",
217:       "org.sat4j.minisat.constraints.xor.Xor",
218:       "org.sat4j.minisat.orders.NaturalStaticOrder",
219:       "org.sat4j.minisat.core.ISimplifier",
220:       "org.sat4j.reader.InstanceReader",
221:       "org.sat4j.minisat.core.ConflictTimer",
222:       "org.sat4j.minisat.core.VarActivityListener",
223:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
224:       "org.sat4j.specs.VarMapper",
225:       "org.sat4j.specs.RandomAccessModel",
226:       "org.sat4j.minisat.SolverFactory",
227:       "org.sat4j.minisat.core.LBDConflictTimer",
228:       "org.sat4j.tools.encoding.Binary",
229:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
230:       "org.sat4j.minisat.orders.TabuListDecorator",
231:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
232:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
233:       "org.sat4j.minisat.orders.PureOrder",
234:       "org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy",
235:       "org.sat4j.minisat.core.SizeLCDS",
236:       "org.sat4j.minisat.core.RestartStrategy",
237:       "org.sat4j.minisat.core.AgeLCDS",
238:       "org.sat4j.tools.xplain.Explainer",
239:       "org.sat4j.reader.Reader",
240:       "org.sat4j.minisat.core.IOrder",
241:       "org.sat4j.minisat.orders.VariableComparator",
242:       "org.sat4j.minisat.constraints.cnf.OriginalBinaryClause",
243:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
244:       "org.sat4j.minisat.core.ICDCL",
245:       "org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy",
246:       "org.sat4j.minisat.restarts.NoRestarts",
247:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
248:       "org.sat4j.core.EmptyVecInt$1",
249:       "org.sat4j.minisat.core.MemoryBasedConflictTimer"
250:     );
251:   } 
252:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
253:     mock(Class.forName("org.sat4j.minisat.constraints.CardinalityDataStructureYanMin", false, Solver_29_tmp__ESTest_scaffolding.class.getClassLoader()));
254:     mock(Class.forName("org.sat4j.minisat.core.LearningStrategy", false, Solver_29_tmp__ESTest_scaffolding.class.getClassLoader()));
255:     mock(Class.forName("org.sat4j.minisat.core.SearchParams", false, Solver_29_tmp__ESTest_scaffolding.class.getClassLoader()));
256:   }
257: 
258:   private static void resetClasses() {
259:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Solver_29_tmp__ESTest_scaffolding.class.getClassLoader()); 
260: 
261:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
262:       "org.sat4j.minisat.core.Solver$1",
263:       "org.sat4j.minisat.core.Solver",
264:       "org.sat4j.minisat.core.Solver$2",
265:       "org.sat4j.minisat.core.Solver$3",
266:       "org.sat4j.minisat.core.Solver$4",
267:       "org.sat4j.minisat.core.Solver$5",
268:       "org.sat4j.minisat.core.Solver$9",
269:       "org.sat4j.minisat.core.Solver$6",
270:       "org.sat4j.minisat.core.Solver$GlucoseLCDS",
271:       "org.sat4j.minisat.core.Solver$Glucose2LCDS",
272:       "org.sat4j.minisat.core.ConflictTimerAdapter",
273:       "org.sat4j.minisat.core.Solver$7",
274:       "org.sat4j.minisat.core.Solver$8",
275:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
276:       "org.sat4j.minisat.core.Solver$10",
277:       "org.sat4j.minisat.core.Solver$11",
278:       "org.sat4j.specs.ILogAble$1",
279:       "org.sat4j.specs.ILogAble",
280:       "org.sat4j.specs.UnitClauseProvider$1",
281:       "org.sat4j.specs.UnitClauseProvider",
282:       "org.sat4j.core.LiteralsUtils",
283:       "org.sat4j.specs.Lbool",
284:       "org.sat4j.core.EmptyVecInt",
285:       "org.sat4j.core.VecInt",
286:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
287:       "org.sat4j.minisat.orders.TabuListDecorator",
288:       "org.sat4j.minisat.restarts.LubyRestarts",
289:       "org.sat4j.minisat.restarts.NoRestarts",
290:       "org.sat4j.core.Vec",
291:       "org.sat4j.minisat.core.ActivityComparator",
292:       "org.sat4j.minisat.core.VoidTracing",
293:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
294:       "org.sat4j.minisat.core.ActivityLCDS",
295:       "org.sat4j.minisat.core.LBDConflictTimer",
296:       "org.sat4j.minisat.core.GlucoseLCDS",
297:       "org.sat4j.minisat.core.Glucose2LCDS",
298:       "org.sat4j.minisat.core.AgeLCDS",
299:       "org.sat4j.minisat.core.SizeComparator",
300:       "org.sat4j.minisat.core.SizeLCDS",
301:       "org.sat4j.minisat.restarts.ArminRestarts",
302:       "org.sat4j.minisat.learning.LimitedLearning",
303:       "org.sat4j.minisat.learning.FixedLengthLearning",
304:       "org.sat4j.minisat.learning.AbstractLearning",
305:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
306:       "org.sat4j.minisat.learning.MiniSATLearning",
307:       "org.sat4j.minisat.constraints.cnf.Lits",
308:       "org.sat4j.minisat.orders.PureOrder",
309:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
310:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
311:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
312:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
313:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
314:       "org.sat4j.minisat.orders.SubsetVarOrder",
315:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
316:       "org.sat4j.minisat.learning.PercentLengthLearning",
317:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
318:       "org.sat4j.minisat.orders.NaturalStaticOrder",
319:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
320:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
321:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
322:       "org.sat4j.tools.StatisticsSolver",
323:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
324:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
325:       "org.sat4j.minisat.orders.RandomWalkDecorator",
326:       "org.sat4j.minisat.constraints.cnf.WLClause",
327:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
328:       "org.sat4j.minisat.learning.ActiveLearning",
329:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
330:       "org.sat4j.specs.ContradictionException",
331:       "org.sat4j.AbstractLauncher",
332:       "org.sat4j.MUSLauncher",
333:       "org.sat4j.AbstractLauncher$1",
334:       "org.sat4j.DecisionMode",
335:       "org.sat4j.ExitCode",
336:       "org.sat4j.OptimizationMode",
337:       "org.sat4j.ILauncherMode",
338:       "org.sat4j.core.EmptyVecInt$1",
339:       "org.sat4j.minisat.core.Heap",
340:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
341:       "org.sat4j.core.VecInt$1",
342:       "org.sat4j.minisat.core.ConflictTimerContainer",
343:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
344:       "org.sat4j.minisat.restarts.MiniSATRestarts",
345:       "org.sat4j.minisat.constraints.card.AtLeast",
346:       "org.sat4j.minisat.restarts.EMARestarts",
347:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
348:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
349:       "org.sat4j.minisat.restarts.Glucose21Restarts",
350:       "org.sat4j.minisat.core.CircularBuffer",
351:       "org.sat4j.BasicLauncher",
352:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
353:       "org.sat4j.tools.AbstractMinimalModel",
354:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
355:       "org.sat4j.minisat.core.Counter",
356:       "org.sat4j.minisat.constraints.cnf.OriginalWLClause",
357:       "org.sat4j.core.Vec$1",
358:       "org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy",
359:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
360:       "org.sat4j.opt.MaxSatDecorator",
361:       "org.sat4j.minisat.constraints.cnf.Clauses",
362:       "org.sat4j.minisat.constraints.xor.Xor",
363:       "org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy",
364:       "org.sat4j.minisat.constraints.cnf.UnitClause",
365:       "org.sat4j.tools.GroupClauseSelectorSolver",
366:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
367:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
368:       "org.sat4j.minisat.constraints.card.MinWatchCard",
369:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
370:       "org.sat4j.minisat.constraints.cnf.LearntBinaryClause",
371:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
372:       "org.sat4j.minisat.constraints.cnf.OriginalBinaryClause",
373:       "org.sat4j.core.ConstrGroup",
374:       "org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy",
375:       "org.sat4j.specs.FakeConstr",
376:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
377:       "org.sat4j.minisat.constraints.ClausalDataStructureWL",
378:       "org.sat4j.minisat.core.SearchParams",
379:       "org.sat4j.minisat.orders.VarOrderHeap",
380:       "org.sat4j.minisat.core.SolverStats",
381:       "org.sat4j.specs.SearchListenerAdapter",
382:       "org.sat4j.minisat.core.Pair",
383:       "org.sat4j.specs.TimeoutException",
384:       "org.sat4j.core.ASolverFactory",
385:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
386:       "org.sat4j.tools.SolverDecorator",
387:       "org.sat4j.tools.AbstractClauseSelectorSolver",
388:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
389:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
390:       "org.sat4j.tools.encoding.Binary",
391:       "org.sat4j.tools.ManyCore"
392:     );
393:   }
394: }

[MASTER] 07:37:44.000 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
assertNotNull(rSATPhaseSelectionStrategy0);
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());

VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
assertNotNull(varOrderHeap0);
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

varOrderHeap0.setVarDecay(0.0);
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
assertNotNull(randomWalkDecorator0);
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedternaryclauses());

lubyRestarts0.init(searchParams0, solverStats0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedternaryclauses());

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());

solver0.setKeepSolverHot(true);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertTrue(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());

ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(1.0E100);
assertNotNull(activeLearning0);
assertEquals(1.0E100, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

LearningStrategy<CardinalityDataStructureYanMin> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMin>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(cardinalityDataStructureYanMin0).getVocabulary();
SearchParams searchParams1 = new SearchParams();
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());

PureOrder pureOrder0 = new PureOrder((-3498));
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-3498), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(learningStrategy0, cardinalityDataStructureYanMin0, searchParams1, pureOrder0, (RestartStrategy) null);
assertNotNull(solver1);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-3498), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());

ILogAble iLogAble0 = solver1.getLogger();
assertNotNull(iLogAble0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-3498), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());

iLogAble0.log("InA<");
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-3498), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());

iLogAble0.log("r");
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-3498), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());

iLogAble0.log("InA<");
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-3498), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());

iLogAble0.log("");
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-3498), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());

Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, (SearchParams) null, varOrderHeap0, lubyRestarts0, iLogAble0);
assertNotNull(solver2);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-3498), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(1, solver2.nVars());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1.0E100, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

Solver<CardinalityDataStructureYanMax>[] solverArray0 = (Solver<CardinalityDataStructureYanMax>[]) Array.newInstance(Solver.class, 8);
solverArray0[0] = (Solver<CardinalityDataStructureYanMax>) solverArray0;

[MASTER] 07:38:31.670 [logback-2] ERROR ClientNodeImpl - Error when generating tests for: org.sat4j.minisat.core.Solver with seed 1550557969439. Configuration id : null
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:158) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_91]
	at com.sun.proxy.$Proxy7.evosuite_collectTestGenerationResult(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:164) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_91]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.net.SocketException: Broken pipe
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeBlockHeader(ObjectOutputStream.java:1890) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1875) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1574) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:294) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:153) ~[na:1.8.0_91]
	... 9 common frames omitted
