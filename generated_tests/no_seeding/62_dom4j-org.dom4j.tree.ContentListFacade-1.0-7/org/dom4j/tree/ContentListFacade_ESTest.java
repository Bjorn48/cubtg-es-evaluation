/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 20:59:20 GMT 2019
 */

package org.dom4j.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.tree.AbstractBranch;
import org.dom4j.tree.ContentListFacade;
import org.dom4j.tree.DefaultElement;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ContentListFacade_ESTest extends ContentListFacade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QName qName0 = QName.get("", "{.R^");
      IndexedElement indexedElement0 = new IndexedElement(qName0, 0);
      List<Namespace> list0 = indexedElement0.declaredNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(indexedElement0, list0);
      Node[] nodeArray0 = new Node[9];
      Node[] nodeArray1 = contentListFacade0.toArray(nodeArray0);
      assertSame(nodeArray1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QName qName0 = QName.get("", "");
      IndexedElement indexedElement0 = new IndexedElement(qName0, (-1139));
      List<Namespace> list0 = indexedElement0.declaredNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, list0);
      Node[] nodeArray0 = new Node[0];
      Node[] nodeArray1 = contentListFacade0.toArray(nodeArray0);
      assertSame(nodeArray0, nodeArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultElement defaultElement0 = new DefaultElement("");
      List<Namespace> list0 = defaultElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultElement0, list0);
      int int0 = contentListFacade0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QName qName0 = QName.get("", "{.R^");
      IndexedElement indexedElement0 = new IndexedElement(qName0, 0);
      Namespace namespace0 = Namespace.get(">0}q,)+;t(", "");
      BeanElement beanElement0 = new BeanElement("*3", namespace0, indexedElement0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(indexedElement0, beanAttributeList0);
      int int0 = contentListFacade0.size();
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("M6'C+#PNwW|");
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      linkedList0.add((Namespace) null);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(indexedElement0, linkedList0);
      Namespace namespace0 = contentListFacade0.set(0, (Namespace) null);
      assertNull(namespace0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      BeanElement beanElement0 = new BeanElement((String) null, namespace0, (Object) null);
      NonLazyElement nonLazyElement0 = new NonLazyElement((QName) null, 1893);
      List<Namespace> list0 = nonLazyElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, list0);
      boolean boolean0 = contentListFacade0.add(namespace0);
      boolean boolean1 = contentListFacade0.remove(namespace0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DefaultElement defaultElement0 = new DefaultElement("");
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultElement0, linkedList0);
      linkedList0.add(namespace0);
      int int0 = contentListFacade0.lastIndexOf(namespace0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      linkedList0.add((Namespace) null);
      linkedList0.add((Namespace) null);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      int int0 = contentListFacade0.lastIndexOf((Namespace) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("U", namespace0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, (List<Namespace>) null);
      List<Namespace> list0 = contentListFacade0.getBackingList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      BeanElement beanElement0 = new BeanElement((String) null, namespace0, (Object) null);
      NonLazyElement nonLazyElement0 = new NonLazyElement((QName) null, 1865);
      List<Namespace> list0 = nonLazyElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, list0);
      ContentListFacade<Namespace> contentListFacade1 = new ContentListFacade<Namespace>(beanElement0, contentListFacade0);
      List<Namespace> list1 = contentListFacade1.getBackingList();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanElement beanElement0 = new BeanElement((QName) null, "");
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      ContentListFacade<Namespace> contentListFacade1 = new ContentListFacade<Namespace>(beanElement0, contentListFacade0);
      List<Namespace> list0 = contentListFacade1.getBackingList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultElement defaultElement0 = new DefaultElement("");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultElement0, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement((QName) null);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanElement beanElement0 = new BeanElement("Illegal value for count: ", class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      // Undeclared exception!
      try { 
        contentListFacade0.set((-3157), (Namespace) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set(int,Object) unsupported
         //
         verifyException("org.dom4j.bean.BeanAttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.set((-26), (Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DefaultElement defaultElement0 = new DefaultElement("");
      List<Namespace> list0 = defaultElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultElement0, list0);
      // Undeclared exception!
      try { 
        contentListFacade0.set(0, namespace0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.dom4j.tree.LazyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultElement defaultElement0 = new DefaultElement((String) null);
      List<Namespace> list0 = defaultElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultElement0, list0);
      // Undeclared exception!
      try { 
        contentListFacade0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      UserDataElement userDataElement0 = new UserDataElement("");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(userDataElement0, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.remove(namespace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("XOS@Pc7|G%I^$E=5B", (Namespace) null, "XOS@Pc7|G%I^$E=5B");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.remove(941);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<DOMNamespace> linkedList0 = new LinkedList<DOMNamespace>();
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.remove((-3908));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3908, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("E");
      List<Namespace> list0 = indexedElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(indexedElement0, list0);
      // Undeclared exception!
      try { 
        contentListFacade0.remove((-2));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Size: 0
         //
         verifyException("org.dom4j.tree.LazyList", e);
      }
  }
}
