/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:23:22 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.restarts.LubyRestarts;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CounterBasedPrimeImplicantStrategy_ESTest extends CounterBasedPrimeImplicantStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, lubyRestarts0);
      solver0.newVar(32);
      solver0.findModel();
      int[] intArray0 = counterBasedPrimeImplicantStrategy0.compute(solver0);
      assertEquals(32, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        counterBasedPrimeImplicantStrategy0.compute((Solver<? extends DataStructureFactory>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        counterBasedPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the compute method first!
         //
         verifyException("org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, lubyRestarts0);
      int[] intArray0 = solver0.findModel();
      counterBasedPrimeImplicantStrategy0.compute(solver0);
      int[] intArray1 = counterBasedPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
      assertFalse(intArray1.equals((Object)intArray0));
  }
}
