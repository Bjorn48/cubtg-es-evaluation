* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Heap
* Starting Client-0
* Connecting to master process on port 16544
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Heap
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 548
* Using seed 1550452353111
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initialsss Number of Goals in DynMOSA = 203 / 548
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.6875
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6101694915254238
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.5893416927899686
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7142857142857143
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.559322033898305
[Progress:=>                            6%] [Cov:=======================>           68%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 299
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:===========>                  38%] [Cov:========================>          71%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.734375
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6271186440677966
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.6520376175548589
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3684210526315789
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7857142857142857
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.576271186440678
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 401
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.734375
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6271186440677966
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.6520376175548589
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3684210526315789
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7857142857142857
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.576271186440678
[Progress:==================>           60%] [Cov:========================>          71%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 508
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:=======================>      79%] [Cov:=========================>         72%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6610169491525424
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.677115987460815
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3684210526315789
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7857142857142857
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.576271186440678
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 608
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.711864406779661
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.6959247648902821
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5263157894736842
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6440677966101694
[Progress:===========================>  90%] [Cov:===========================>       78%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 717
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:===========================>  93%] [Cov:===========================>       79%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 822
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:============================> 95%] [Cov:============================>      80%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7288135593220338
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7021943573667712
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6779661016949152
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 920
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7288135593220338
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7021943573667712
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6779661016949152
[Progress:==============================100%] [Cov:============================>      80%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7288135593220338
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7021943573667712
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6779661016949152

* Search finished after 122s and 7 generations, 9725 statements, best individual has fitness: 152.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7288135593220338
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7021943573667712
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6779661016949152
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 02:15:49.518 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 81%
* Total number of goals: 64
* Number of covered goals: 52
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 73%
* Total number of goals: 59
* Number of covered goals: 43
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 75%
* Total number of goals: 319
* Number of covered goals: 238
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 63%
* Total number of goals: 19
* Number of covered goals: 12
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 68%
* Total number of goals: 59
* Number of covered goals: 40
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7288135593220338
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7021943573667712
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6779661016949152
* Generated 50 tests with total length 542
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 02:16:33.700 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7291833333333333% of time used, but only 14/50 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 22%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.78125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7288135593220338
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7021943573667712
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9285714285714286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6779661016949152
* Compiling and checking tests
[MASTER] 02:16:53.874 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 02:16:53.877 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Heap heap0 = new Heap((VariableComparator) null);
int int0 = 0;
heap0.heapProperty(int0);
int int1 = 1;
heap0.setBounds(int1);
heap0.get(int1);
int int2 = 433;
heap0.setBounds(int2);
heap0.increase(int1);
heap0.increase(int1);
heap0.getmin();
heap0.percolateDown(int0);
int int3 = 0;
heap0.inHeap(int3);

[MASTER] 02:16:58.705 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 02:16:58.713 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Heap heap0 = new Heap((VariableComparator) null);
int int0 = 0;
heap0.heapProperty(int0);
int int1 = 15;
heap0.inHeap(int1);
int int2 = 1;
heap0.setBounds(int2);
heap0.get(int2);
int int3 = 433;
heap0.setBounds(int3);
heap0.increase(int2);
heap0.increase(int2);
heap0.getmin();
heap0.increase(int2);
heap0.percolateDown(int0);
int int4 = 0;
heap0.inHeap(int4);

[MASTER] 02:17:00.583 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 02:17:00.584 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[0];
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertNotNull(activityBasedVariableComparator0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

int int0 = 0;
heap0.setBounds(0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

heap0.setBounds(704);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

heap0.insert(0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertEquals(0, heap0.size());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

heap0.getmin();
heap0.heapProperty();
heap0.empty();
heap0.increase(0);

[MASTER] 02:17:02.044 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 02:17:02.044 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[4];
doubleArray0[3] = (-810.5036);
Heap heap0 = new Heap((VariableComparator) null);
assertNotNull(heap0);
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());

heap0.setBounds(522);
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());

heap0.insert(0);
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());

heap0.percolateDown(1);
heap0.heapProperty();
heap0.insert(0);

[MASTER] 02:17:04.640 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 02:17:04.641 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[0];
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertNotNull(activityBasedVariableComparator0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

heap0.setBounds(0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

heap0.setBounds(704);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

heap0.insert(0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertEquals(0, heap0.size());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

heap0.getmin();
heap0.heapProperty();
heap0.empty();
heap0.insert(704);

[MASTER] 02:17:05.091 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<1>
[MASTER] 02:17:05.092 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[0];
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertNotNull(activityBasedVariableComparator0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

int int0 = 0;
heap0.setBounds(0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

heap0.setBounds(704);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

heap0.insert(1);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.heapProperty());
assertTrue(heap0.empty());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

heap0.getmin();
heap0.heapProperty();
heap0.ok(0);
heap0.increase(1);

[MASTER] 02:17:05.288 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<1>
[MASTER] 02:17:05.289 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[0];
ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
assertNotNull(activityBasedVariableComparator0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

Heap heap0 = new Heap(activityBasedVariableComparator0);
assertNotNull(heap0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

int int0 = 0;
heap0.setBounds(0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

int int1 = 704;
heap0.setBounds(704);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

heap0.insert(0);
assertEquals(0, doubleArray0.length);
assertEquals("Activity-based variable heuristic", activityBasedVariableComparator0.toString());
assertEquals(0, heap0.size());
assertTrue(heap0.empty());
assertTrue(heap0.heapProperty());
assertArrayEquals(new double[] {}, doubleArray0, 0.01);

heap0.getmin();
heap0.heapProperty();
heap0.empty();
heap0.increase(0);

* Writing tests to file
* Writing JUnit test case 'Heap_ESTest' to evosuite-tests
* Done!

* Computation finished
